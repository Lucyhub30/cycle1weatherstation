
/Users/lucy/Desktop/AlevelProject/cycle1weatherstation/target/4.1.0/argon/cycle1weatherstation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000066b0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000ba6d0  000ba6d0  0000a6d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.exidx    00000008  000ba6f4  000ba6f4  0000a6f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .backup       00000004  2003f400  000ba6fc  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000008c  2003e50c  000ba700  0001e50c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000258  2003e598  2003e598  0002e598  2**3
                  ALLOC
  8 .module_info_suffix 00000028  000ba78c  000ba78c  0002a78c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000ba7b4  000ba7b4  0002a7b4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   0014e574  00000000  00000000  0002a7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00016ed1  00000000  00000000  00178d2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    000443a6  00000000  00000000  0018fbfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000034d0  00000000  00000000  001d3fa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000b9a8  00000000  00000000  001d7473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003f6bd  00000000  00000000  001e2e1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0004c465  00000000  00000000  002224d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00140321  00000000  00000000  0026e93d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00009c08  00000000  00000000  003aec60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f005 ff69 	bl	b9f08 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f005 ff71 	bl	b9f24 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e50c 	.word	0x2003e50c
   b404c:	000ba700 	.word	0x000ba700
   b4050:	2003e598 	.word	0x2003e598
   b4054:	2003e598 	.word	0x2003e598
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f003 fce3 	bl	b7a2c <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000ba6a8 	.word	0x000ba6a8
   b4080:	000ba6cc 	.word	0x000ba6cc

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b9a0 	b.w	b43c8 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 fa1b 	bl	b44c4 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f003 bc83 	b.w	b799c <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f002 b88d 	b.w	b61b4 <malloc>

000b409a <_Znaj>:
   b409a:	f002 b88b 	b.w	b61b4 <malloc>

000b409e <_ZdaPv>:
   b409e:	f002 b891 	b.w	b61c4 <free>

000b40a2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40a2:	f002 b88f 	b.w	b61c4 <free>

000b40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a6:	7800      	ldrb	r0, [r0, #0]
   b40a8:	fab0 f080 	clz	r0, r0
   b40ac:	0940      	lsrs	r0, r0, #5
   b40ae:	4770      	bx	lr

000b40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40b0:	2301      	movs	r3, #1
   b40b2:	7003      	strb	r3, [r0, #0]
   b40b4:	4770      	bx	lr

000b40b6 <_Z8callbackPcPhj>:
//Setup MQTT broker
MQTT client(server, 1883, callback); 

// Define a callback function to initialize the MQTT client.
void callback(char* topic, byte* payload, unsigned int length) {
}
   b40b6:	4770      	bx	lr

000b40b8 <_ZN16JsonWriterStaticILj256EED1Ev>:
 * variable.
 *
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
   b40b8:	b510      	push	{r4, lr}
   b40ba:	4b03      	ldr	r3, [pc, #12]	; (b40c8 <_ZN16JsonWriterStaticILj256EED1Ev+0x10>)
   b40bc:	6003      	str	r3, [r0, #0]
   b40be:	4604      	mov	r4, r0
   b40c0:	f001 f862 	bl	b5188 <_ZN10JsonWriterD1Ev>
   b40c4:	4620      	mov	r0, r4
   b40c6:	bd10      	pop	{r4, pc}
   b40c8:	000ba258 	.word	0x000ba258

000b40cc <_ZN16JsonWriterStaticILj256EED0Ev>:
   b40cc:	b510      	push	{r4, lr}
   b40ce:	4604      	mov	r4, r0
   b40d0:	f7ff fff2 	bl	b40b8 <_ZN16JsonWriterStaticILj256EED1Ev>
   b40d4:	4620      	mov	r0, r4
   b40d6:	f44f 7198 	mov.w	r1, #304	; 0x130
   b40da:	f7ff ffe2 	bl	b40a2 <_ZdlPvj>
   b40de:	4620      	mov	r0, r4
   b40e0:	bd10      	pop	{r4, pc}
	...

000b40e4 <_ZN10CloudClass7publishEPKc.isra.0>:

inline bool CloudDisconnectOptions::isClearSessionSet() const {
    return (flags_ & SPARK_CLOUD_DISCONNECT_OPTION_CLEAR_SESSION);
}

inline particle::Future<bool> CloudClass::publish(const char* name) {
   b40e4:	b513      	push	{r0, r1, r4, lr}
   b40e6:	4b06      	ldr	r3, [pc, #24]	; (b4100 <_ZN10CloudClass7publishEPKc.isra.0+0x1c>)
   b40e8:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b40ea:	f88d 3000 	strb.w	r3, [sp]
   b40ee:	2200      	movs	r2, #0
   b40f0:	233c      	movs	r3, #60	; 0x3c
inline particle::Future<bool> CloudClass::publish(const char* name) {
   b40f2:	4604      	mov	r4, r0
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b40f4:	f002 fa0c 	bl	b6510 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, PUBLIC);
}
   b40f8:	4620      	mov	r0, r4
   b40fa:	b002      	add	sp, #8
   b40fc:	bd10      	pop	{r4, pc}
   b40fe:	bf00      	nop
   b4100:	2003e598 	.word	0x2003e598

000b4104 <_Z20getBarometerReadingsv>:
void getBarometerReadings() {
   b4104:	b508      	push	{r3, lr}
  temp = (int)bme.readTemperature();
   b4106:	4811      	ldr	r0, [pc, #68]	; (b414c <_Z20getBarometerReadingsv+0x48>)
   b4108:	f000 fdec 	bl	b4ce4 <_ZN15Adafruit_BME28015readTemperatureEv>
   b410c:	4b10      	ldr	r3, [pc, #64]	; (b4150 <_Z20getBarometerReadingsv+0x4c>)
  humidity = (int)bme.readHumidity();
   b410e:	480f      	ldr	r0, [pc, #60]	; (b414c <_Z20getBarometerReadingsv+0x48>)
  temp = (int)bme.readTemperature();
   b4110:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   b4114:	ed83 0a00 	vstr	s0, [r3]
  humidity = (int)bme.readHumidity();
   b4118:	f000 fe14 	bl	b4d44 <_ZN15Adafruit_BME28012readHumidityEv>
   b411c:	4b0d      	ldr	r3, [pc, #52]	; (b4154 <_Z20getBarometerReadingsv+0x50>)
  pressure = (int)bme.readPressure();
   b411e:	480b      	ldr	r0, [pc, #44]	; (b414c <_Z20getBarometerReadingsv+0x48>)
  humidity = (int)bme.readHumidity();
   b4120:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   b4124:	ed83 0a00 	vstr	s0, [r3]
  pressure = (int)bme.readPressure();
   b4128:	f000 fe56 	bl	b4dd8 <_ZN15Adafruit_BME28012readPressureEv>
   b412c:	4b0a      	ldr	r3, [pc, #40]	; (b4158 <_Z20getBarometerReadingsv+0x54>)
  altitude = (int)bme.readAltitude(1013.25);
   b412e:	4807      	ldr	r0, [pc, #28]	; (b414c <_Z20getBarometerReadingsv+0x48>)
  pressure = (int)bme.readPressure();
   b4130:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   b4134:	ed83 0a00 	vstr	s0, [r3]
  altitude = (int)bme.readAltitude(1013.25);
   b4138:	ed9f 0a08 	vldr	s0, [pc, #32]	; b415c <_Z20getBarometerReadingsv+0x58>
   b413c:	f000 ff1c 	bl	b4f78 <_ZN15Adafruit_BME28012readAltitudeEf>
   b4140:	4b07      	ldr	r3, [pc, #28]	; (b4160 <_Z20getBarometerReadingsv+0x5c>)
   b4142:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   b4146:	ed83 0a00 	vstr	s0, [r3]
}
   b414a:	bd08      	pop	{r3, pc}
   b414c:	2003e5cc 	.word	0x2003e5cc
   b4150:	2003e6b4 	.word	0x2003e6b4
   b4154:	2003e68c 	.word	0x2003e68c
   b4158:	2003e6a0 	.word	0x2003e6a0
   b415c:	447d5000 	.word	0x447d5000
   b4160:	2003e5ac 	.word	0x2003e5ac

000b4164 <_Z21getAirQualityReadingsv>:
void getAirQualityReadings(){
   b4164:	b508      	push	{r3, lr}
  int airQualityVal = aqSensor.slope();
   b4166:	4810      	ldr	r0, [pc, #64]	; (b41a8 <_Z21getAirQualityReadingsv+0x44>)
   b4168:	f000 ffc8 	bl	b50fc <_ZN16AirQualitySensor5slopeEv>
  if (airQualityVal == AirQualitySensor:: FORCE_SIGNAL) {
   b416c:	4b0f      	ldr	r3, [pc, #60]	; (b41ac <_Z21getAirQualityReadingsv+0x48>)
   b416e:	681b      	ldr	r3, [r3, #0]
   b4170:	4283      	cmp	r3, r0
   b4172:	d105      	bne.n	b4180 <_Z21getAirQualityReadingsv+0x1c>
    airQuality = "Dangerous Level";
   b4174:	490e      	ldr	r1, [pc, #56]	; (b41b0 <_Z21getAirQualityReadingsv+0x4c>)
    airQuality = "Reading Unsuccessful";
   b4176:	480f      	ldr	r0, [pc, #60]	; (b41b4 <_Z21getAirQualityReadingsv+0x50>)
}
   b4178:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    airQuality = "Reading Unsuccessful";
   b417c:	f002 befd 	b.w	b6f7a <_ZN6StringaSEPKc>
  else if (airQualityVal == AirQualitySensor:: HIGH_POLLUTION) {
   b4180:	4b0d      	ldr	r3, [pc, #52]	; (b41b8 <_Z21getAirQualityReadingsv+0x54>)
   b4182:	681b      	ldr	r3, [r3, #0]
   b4184:	4283      	cmp	r3, r0
   b4186:	d101      	bne.n	b418c <_Z21getAirQualityReadingsv+0x28>
    airQuality = "High Polution";
   b4188:	490c      	ldr	r1, [pc, #48]	; (b41bc <_Z21getAirQualityReadingsv+0x58>)
   b418a:	e7f4      	b.n	b4176 <_Z21getAirQualityReadingsv+0x12>
  else if (airQualityVal == AirQualitySensor:: LOW_POLLUTION) {
   b418c:	4b0c      	ldr	r3, [pc, #48]	; (b41c0 <_Z21getAirQualityReadingsv+0x5c>)
   b418e:	681b      	ldr	r3, [r3, #0]
   b4190:	4283      	cmp	r3, r0
   b4192:	d101      	bne.n	b4198 <_Z21getAirQualityReadingsv+0x34>
    airQuality = "Low Polution";
   b4194:	490b      	ldr	r1, [pc, #44]	; (b41c4 <_Z21getAirQualityReadingsv+0x60>)
   b4196:	e7ee      	b.n	b4176 <_Z21getAirQualityReadingsv+0x12>
  else if (airQualityVal == AirQualitySensor:: FRESH_AIR) {
   b4198:	4b0b      	ldr	r3, [pc, #44]	; (b41c8 <_Z21getAirQualityReadingsv+0x64>)
   b419a:	681b      	ldr	r3, [r3, #0]
   b419c:	4283      	cmp	r3, r0
    airQuality = "Fresh Air";
   b419e:	bf0c      	ite	eq
   b41a0:	490a      	ldreq	r1, [pc, #40]	; (b41cc <_Z21getAirQualityReadingsv+0x68>)
    airQuality = "Reading Unsuccessful";
   b41a2:	490b      	ldrne	r1, [pc, #44]	; (b41d0 <_Z21getAirQualityReadingsv+0x6c>)
   b41a4:	e7e7      	b.n	b4176 <_Z21getAirQualityReadingsv+0x12>
   b41a6:	bf00      	nop
   b41a8:	2003e5b0 	.word	0x2003e5b0
   b41ac:	000ba2b8 	.word	0x000ba2b8
   b41b0:	000ba0e0 	.word	0x000ba0e0
   b41b4:	2003e59c 	.word	0x2003e59c
   b41b8:	000ba2c0 	.word	0x000ba2c0
   b41bc:	000ba0f0 	.word	0x000ba0f0
   b41c0:	000ba2bc 	.word	0x000ba2bc
   b41c4:	000ba0fe 	.word	0x000ba0fe
   b41c8:	000ba2c4 	.word	0x000ba2c4
   b41cc:	000ba10b 	.word	0x000ba10b
   b41d0:	000ba115 	.word	0x000ba115
   b41d4:	00000000 	.word	0x00000000

000b41d8 <_Z21getDustSensorReadingsv>:
void getDustSensorReadings(){
   b41d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (lowpulseoccupancy == 0){
   b41da:	4b31      	ldr	r3, [pc, #196]	; (b42a0 <_Z21getDustSensorReadingsv+0xc8>)
   b41dc:	4a31      	ldr	r2, [pc, #196]	; (b42a4 <_Z21getDustSensorReadingsv+0xcc>)
   b41de:	6819      	ldr	r1, [r3, #0]
   b41e0:	2900      	cmp	r1, #0
   b41e2:	d145      	bne.n	b4270 <_Z21getDustSensorReadingsv+0x98>
    lowpulseoccupancy = last_lpo;
   b41e4:	6812      	ldr	r2, [r2, #0]
   b41e6:	601a      	str	r2, [r3, #0]
  ratio = lowpulseoccupancy / (SENSOR_READING_INTERVAL * 10.0);
   b41e8:	6818      	ldr	r0, [r3, #0]
   b41ea:	4c2f      	ldr	r4, [pc, #188]	; (b42a8 <_Z21getDustSensorReadingsv+0xd0>)
   b41ec:	f005 f844 	bl	b9278 <__aeabi_ui2d>
   b41f0:	a321      	add	r3, pc, #132	; (adr r3, b4278 <_Z21getDustSensorReadingsv+0xa0>)
   b41f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b41f6:	f005 f9e3 	bl	b95c0 <__aeabi_ddiv>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   b41fa:	ed9f 1b21 	vldr	d1, [pc, #132]	; b4280 <_Z21getDustSensorReadingsv+0xa8>
   b41fe:	ec41 0b10 	vmov	d0, r0, r1
   b4202:	e9c4 0100 	strd	r0, r1, [r4]
   b4206:	f003 fe6f 	bl	b7ee8 <pow>
  concentration = 1.1 * pow(ratio, 3) - 3.8 * pow(ratio, 2) + 520 * ratio + 0.62;
   b420a:	a31f      	add	r3, pc, #124	; (adr r3, b4288 <_Z21getDustSensorReadingsv+0xb0>)
   b420c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4210:	ec51 0b10 	vmov	r0, r1, d0
   b4214:	f005 f8aa 	bl	b936c <__aeabi_dmul>
   b4218:	e9d4 6700 	ldrd	r6, r7, [r4]
   b421c:	460d      	mov	r5, r1
   b421e:	4604      	mov	r4, r0
   b4220:	4632      	mov	r2, r6
   b4222:	463b      	mov	r3, r7
   b4224:	4630      	mov	r0, r6
   b4226:	4639      	mov	r1, r7
   b4228:	f005 f8a0 	bl	b936c <__aeabi_dmul>
   b422c:	a318      	add	r3, pc, #96	; (adr r3, b4290 <_Z21getDustSensorReadingsv+0xb8>)
   b422e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4232:	f005 f89b 	bl	b936c <__aeabi_dmul>
   b4236:	4602      	mov	r2, r0
   b4238:	460b      	mov	r3, r1
   b423a:	4620      	mov	r0, r4
   b423c:	4629      	mov	r1, r5
   b423e:	f004 fedd 	bl	b8ffc <__aeabi_dsub>
   b4242:	4b1a      	ldr	r3, [pc, #104]	; (b42ac <_Z21getDustSensorReadingsv+0xd4>)
   b4244:	4604      	mov	r4, r0
   b4246:	460d      	mov	r5, r1
   b4248:	2200      	movs	r2, #0
   b424a:	4630      	mov	r0, r6
   b424c:	4639      	mov	r1, r7
   b424e:	f005 f88d 	bl	b936c <__aeabi_dmul>
   b4252:	4602      	mov	r2, r0
   b4254:	460b      	mov	r3, r1
   b4256:	4620      	mov	r0, r4
   b4258:	4629      	mov	r1, r5
   b425a:	f004 fed1 	bl	b9000 <__adddf3>
   b425e:	a30e      	add	r3, pc, #56	; (adr r3, b4298 <_Z21getDustSensorReadingsv+0xc0>)
   b4260:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4264:	f004 fecc 	bl	b9000 <__adddf3>
   b4268:	4b11      	ldr	r3, [pc, #68]	; (b42b0 <_Z21getDustSensorReadingsv+0xd8>)
   b426a:	e9c3 0100 	strd	r0, r1, [r3]
}
   b426e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    last_lpo = lowpulseoccupancy;
   b4270:	6011      	str	r1, [r2, #0]
   b4272:	e7b9      	b.n	b41e8 <_Z21getDustSensorReadingsv+0x10>
   b4274:	f3af 8000 	nop.w
   b4278:	00000000 	.word	0x00000000
   b427c:	41124f80 	.word	0x41124f80
   b4280:	00000000 	.word	0x00000000
   b4284:	40080000 	.word	0x40080000
   b4288:	9999999a 	.word	0x9999999a
   b428c:	3ff19999 	.word	0x3ff19999
   b4290:	66666666 	.word	0x66666666
   b4294:	400e6666 	.word	0x400e6666
   b4298:	3d70a3d7 	.word	0x3d70a3d7
   b429c:	3fe3d70a 	.word	0x3fe3d70a
   b42a0:	2003e69c 	.word	0x2003e69c
   b42a4:	2003e694 	.word	0x2003e694
   b42a8:	2003e6a8 	.word	0x2003e6a8
   b42ac:	40804000 	.word	0x40804000
   b42b0:	2003e680 	.word	0x2003e680

000b42b4 <_Z16getLightReadingsv>:
void getLightReadings() {
   b42b4:	b508      	push	{r3, lr}
  lightVal = analogRead(lightPin);
   b42b6:	4b03      	ldr	r3, [pc, #12]	; (b42c4 <_Z16getLightReadingsv+0x10>)
   b42b8:	8818      	ldrh	r0, [r3, #0]
   b42ba:	f003 fc64 	bl	b7b86 <analogRead>
   b42be:	4b02      	ldr	r3, [pc, #8]	; (b42c8 <_Z16getLightReadingsv+0x14>)
   b42c0:	6018      	str	r0, [r3, #0]
}
   b42c2:	bd08      	pop	{r3, pc}
   b42c4:	2003e50c 	.word	0x2003e50c
   b42c8:	2003e698 	.word	0x2003e698

000b42cc <_Z16getSoundReadingsv>:
void getSoundReadings() {
   b42cc:	b508      	push	{r3, lr}
  soundVal = analogRead(soundPin);
   b42ce:	4b03      	ldr	r3, [pc, #12]	; (b42dc <_Z16getSoundReadingsv+0x10>)
   b42d0:	8818      	ldrh	r0, [r3, #0]
   b42d2:	f003 fc58 	bl	b7b86 <analogRead>
   b42d6:	4b02      	ldr	r3, [pc, #8]	; (b42e0 <_Z16getSoundReadingsv+0x14>)
   b42d8:	6018      	str	r0, [r3, #0]
}
   b42da:	bd08      	pop	{r3, pc}
   b42dc:	2003e524 	.word	0x2003e524
   b42e0:	2003e6b0 	.word	0x2003e6b0

000b42e4 <_Z12mqtt_publishPc>:

void mqtt_publish(char *pubdata){
   b42e4:	4602      	mov	r2, r0
  client.publish("weather/station/data",pubdata);
   b42e6:	4902      	ldr	r1, [pc, #8]	; (b42f0 <_Z12mqtt_publishPc+0xc>)
   b42e8:	4802      	ldr	r0, [pc, #8]	; (b42f4 <_Z12mqtt_publishPc+0x10>)
   b42ea:	f001 bb32 	b.w	b5952 <_ZN4MQTT7publishEPKcS1_>
   b42ee:	bf00      	nop
   b42f0:	000ba12a 	.word	0x000ba12a
   b42f4:	2003e610 	.word	0x2003e610

000b42f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b42f8:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b42fa:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b42fc:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b42fe:	b17c      	cbz	r4, b4320 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b4300:	6863      	ldr	r3, [r4, #4]
   b4302:	3b01      	subs	r3, #1
   b4304:	6063      	str	r3, [r4, #4]
   b4306:	b95b      	cbnz	r3, b4320 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b4308:	6823      	ldr	r3, [r4, #0]
   b430a:	4620      	mov	r0, r4
   b430c:	689b      	ldr	r3, [r3, #8]
   b430e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4310:	68a3      	ldr	r3, [r4, #8]
   b4312:	3b01      	subs	r3, #1
   b4314:	60a3      	str	r3, [r4, #8]
   b4316:	b91b      	cbnz	r3, b4320 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b4318:	6823      	ldr	r3, [r4, #0]
   b431a:	4620      	mov	r0, r4
   b431c:	68db      	ldr	r3, [r3, #12]
   b431e:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b4320:	4628      	mov	r0, r5
   b4322:	bd38      	pop	{r3, r4, r5, pc}

000b4324 <_Z9reconnectv>:
}

void reconnect(){
   b4324:	b500      	push	{lr}
   b4326:	b08d      	sub	sp, #52	; 0x34
  Particle.publish("Attempting MQTT connection");
   b4328:	4921      	ldr	r1, [pc, #132]	; (b43b0 <_Z9reconnectv+0x8c>)
   b432a:	a808      	add	r0, sp, #32
   b432c:	f7ff feda 	bl	b40e4 <_ZN10CloudClass7publishEPKc.isra.0>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b4330:	a809      	add	r0, sp, #36	; 0x24
   b4332:	f7ff ffe1 	bl	b42f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b4336:	4b1f      	ldr	r3, [pc, #124]	; (b43b4 <_Z9reconnectv+0x90>)
        
  // Connect to the HiveMQ MQTT broker.
//  Serial.print("Client if statement output: ");
  int connected = client.connect(clientId);
   b4338:	481f      	ldr	r0, [pc, #124]	; (b43b8 <_Z9reconnectv+0x94>)
   b433a:	6819      	ldr	r1, [r3, #0]
   b433c:	f001 fa7e 	bl	b583c <_ZN4MQTT7connectEPKc>
  if (!connected)  {
   b4340:	b948      	cbnz	r0, b4356 <_Z9reconnectv+0x32>
    // Track the connection with particle console.
    Particle.publish("Connected");
   b4342:	a808      	add	r0, sp, #32
   b4344:	491d      	ldr	r1, [pc, #116]	; (b43bc <_Z9reconnectv+0x98>)
   b4346:	f7ff fecd 	bl	b40e4 <_ZN10CloudClass7publishEPKc.isra.0>
   b434a:	a809      	add	r0, sp, #36	; 0x24
   b434c:	f7ff ffd4 	bl	b42f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    String connectionCode = "Connection return code: " + (String)connected;
    Particle.publish(connectionCode);
    Particle.publish("Failed to connect. Trying to reconnect in 2 seconds");
    delay(2000);
  } 
}
   b4350:	b00d      	add	sp, #52	; 0x34
   b4352:	f85d fb04 	ldr.w	pc, [sp], #4

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   b4356:	491a      	ldr	r1, [pc, #104]	; (b43c0 <_Z9reconnectv+0x9c>)
   b4358:	a804      	add	r0, sp, #16
   b435a:	f002 fde0 	bl	b6f1e <_ZN6StringC1EPK19__FlashStringHelper>
    String connectionCode = "Connection return code: " + (String)connected;
   b435e:	220a      	movs	r2, #10
   b4360:	2101      	movs	r1, #1
   b4362:	a808      	add	r0, sp, #32
   b4364:	f002 fe1b 	bl	b6f9e <_ZN6StringC1Eih>
   b4368:	a908      	add	r1, sp, #32
   b436a:	a804      	add	r0, sp, #16
   b436c:	f002 fe41 	bl	b6ff2 <_ZplRK15StringSumHelperRK6String>
   b4370:	4601      	mov	r1, r0
   b4372:	4668      	mov	r0, sp
   b4374:	f002 fdf6 	bl	b6f64 <_ZN6StringC1ERKS_>
   b4378:	a808      	add	r0, sp, #32
   b437a:	f002 fd85 	bl	b6e88 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b437e:	a804      	add	r0, sp, #16
   b4380:	f002 fd82 	bl	b6e88 <_ZN6StringD1Ev>
    Particle.publish(connectionCode);
   b4384:	9900      	ldr	r1, [sp, #0]
   b4386:	a808      	add	r0, sp, #32
   b4388:	f7ff feac 	bl	b40e4 <_ZN10CloudClass7publishEPKc.isra.0>
   b438c:	a809      	add	r0, sp, #36	; 0x24
   b438e:	f7ff ffb3 	bl	b42f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Particle.publish("Failed to connect. Trying to reconnect in 2 seconds");
   b4392:	490c      	ldr	r1, [pc, #48]	; (b43c4 <_Z9reconnectv+0xa0>)
   b4394:	a808      	add	r0, sp, #32
   b4396:	f7ff fea5 	bl	b40e4 <_ZN10CloudClass7publishEPKc.isra.0>
   b439a:	a809      	add	r0, sp, #36	; 0x24
   b439c:	f7ff ffac 	bl	b42f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    delay(2000);
   b43a0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b43a4:	f001 ff4e 	bl	b6244 <delay>
    String connectionCode = "Connection return code: " + (String)connected;
   b43a8:	4668      	mov	r0, sp
   b43aa:	f002 fd6d 	bl	b6e88 <_ZN6StringD1Ev>
}
   b43ae:	e7cf      	b.n	b4350 <_Z9reconnectv+0x2c>
   b43b0:	000ba13f 	.word	0x000ba13f
   b43b4:	2003e670 	.word	0x2003e670
   b43b8:	2003e610 	.word	0x2003e610
   b43bc:	000ba15a 	.word	0x000ba15a
   b43c0:	000ba164 	.word	0x000ba164
   b43c4:	000ba17d 	.word	0x000ba17d

000b43c8 <setup>:


void setup() {
   b43c8:	b510      	push	{r4, lr}
   b43ca:	b086      	sub	sp, #24

  Particle.publish("Weather Station Online :)");
   b43cc:	491d      	ldr	r1, [pc, #116]	; (b4444 <setup+0x7c>)
  pinMode(lightPin, INPUT);

  //Setup sound sensor
  pinMode(soundPin, INPUT);

  client.connect(clientId);
   b43ce:	4c1e      	ldr	r4, [pc, #120]	; (b4448 <setup+0x80>)
  Particle.publish("Weather Station Online :)");
   b43d0:	a802      	add	r0, sp, #8
   b43d2:	f7ff fe87 	bl	b40e4 <_ZN10CloudClass7publishEPKc.isra.0>
   b43d6:	a803      	add	r0, sp, #12
   b43d8:	f7ff ff8e 	bl	b42f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  bme.begin();
   b43dc:	481b      	ldr	r0, [pc, #108]	; (b444c <setup+0x84>)
   b43de:	f000 fe5c 	bl	b509a <_ZN15Adafruit_BME2805beginEv>
  Serial.begin(9600);
   b43e2:	f003 fa09 	bl	b77f8 <_Z16_fetch_usbserialv>
   b43e6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b43ea:	f003 f9f9 	bl	b77e0 <_ZN9USBSerial5beginEl>
  pinMode(DUST_SENSOR_PIN, INPUT);
   b43ee:	2100      	movs	r1, #0
   b43f0:	2011      	movs	r0, #17
   b43f2:	f003 fb8b 	bl	b7b0c <pinMode>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b43f6:	f001 fc49 	bl	b5c8c <HAL_Timer_Get_Milli_Seconds>
  lastCheck = millis();
   b43fa:	4b15      	ldr	r3, [pc, #84]	; (b4450 <setup+0x88>)
   b43fc:	6018      	str	r0, [r3, #0]
  pinMode(lightPin, INPUT);
   b43fe:	4b15      	ldr	r3, [pc, #84]	; (b4454 <setup+0x8c>)
   b4400:	2100      	movs	r1, #0
   b4402:	8818      	ldrh	r0, [r3, #0]
   b4404:	f003 fb82 	bl	b7b0c <pinMode>
  pinMode(soundPin, INPUT);
   b4408:	4b13      	ldr	r3, [pc, #76]	; (b4458 <setup+0x90>)
   b440a:	2100      	movs	r1, #0
   b440c:	8818      	ldrh	r0, [r3, #0]
   b440e:	f003 fb7d 	bl	b7b0c <pinMode>
  client.connect(clientId);
   b4412:	4b12      	ldr	r3, [pc, #72]	; (b445c <setup+0x94>)
   b4414:	4620      	mov	r0, r4
   b4416:	6819      	ldr	r1, [r3, #0]
   b4418:	f001 fa10 	bl	b583c <_ZN4MQTT7connectEPKc>
  Particle.publish((String)client.isConnected());
   b441c:	4620      	mov	r0, r4
   b441e:	f001 f91d 	bl	b565c <_ZN4MQTT11isConnectedEv>
   b4422:	220a      	movs	r2, #10
   b4424:	4601      	mov	r1, r0
   b4426:	a802      	add	r0, sp, #8
   b4428:	f002 fdb9 	bl	b6f9e <_ZN6StringC1Eih>
   b442c:	9902      	ldr	r1, [sp, #8]
   b442e:	4668      	mov	r0, sp
   b4430:	f7ff fe58 	bl	b40e4 <_ZN10CloudClass7publishEPKc.isra.0>
   b4434:	a801      	add	r0, sp, #4
   b4436:	f7ff ff5f 	bl	b42f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b443a:	a802      	add	r0, sp, #8
   b443c:	f002 fd24 	bl	b6e88 <_ZN6StringD1Ev>
}
   b4440:	b006      	add	sp, #24
   b4442:	bd10      	pop	{r4, pc}
   b4444:	000ba1b1 	.word	0x000ba1b1
   b4448:	2003e610 	.word	0x2003e610
   b444c:	2003e5cc 	.word	0x2003e5cc
   b4450:	2003e690 	.word	0x2003e690
   b4454:	2003e50c 	.word	0x2003e50c
   b4458:	2003e524 	.word	0x2003e524
   b445c:	2003e670 	.word	0x2003e670

000b4460 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>:
	void insertKeyValue(const char *key, T value) {
   b4460:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4462:	4604      	mov	r4, r0
   b4464:	4615      	mov	r5, r2
   b4466:	9101      	str	r1, [sp, #4]
		insertCheckSeparator();
   b4468:	f000 ff9a 	bl	b53a0 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   b446c:	9901      	ldr	r1, [sp, #4]
   b446e:	2201      	movs	r2, #1
   b4470:	4620      	mov	r0, r4
   b4472:	f000 ff03 	bl	b527c <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
   b4476:	4620      	mov	r0, r4
   b4478:	213a      	movs	r1, #58	; 0x3a
   b447a:	f000 feb3 	bl	b51e4 <_ZN10JsonWriter10insertCharEc>
	void insertValue(int value) { insertsprintf("%d", value); }
   b447e:	4904      	ldr	r1, [pc, #16]	; (b4490 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_+0x30>)
   b4480:	462a      	mov	r2, r5
   b4482:	4620      	mov	r0, r4
	}
   b4484:	b003      	add	sp, #12
   b4486:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	void insertValue(int value) { insertsprintf("%d", value); }
   b448a:	f000 beea 	b.w	b5262 <_ZN10JsonWriter13insertsprintfEPKcz>
   b448e:	bf00      	nop
   b4490:	000ba404 	.word	0x000ba404

000b4494 <_ZN10JsonWriter14insertKeyValueIdEEvPKcT_>:
	void insertKeyValue(const char *key, T value) {
   b4494:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b4496:	4604      	mov	r4, r0
   b4498:	ed8d 0b00 	vstr	d0, [sp]
   b449c:	9103      	str	r1, [sp, #12]
		insertCheckSeparator();
   b449e:	f000 ff7f 	bl	b53a0 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   b44a2:	9903      	ldr	r1, [sp, #12]
   b44a4:	2201      	movs	r2, #1
   b44a6:	4620      	mov	r0, r4
   b44a8:	f000 fee8 	bl	b527c <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
   b44ac:	4620      	mov	r0, r4
   b44ae:	213a      	movs	r1, #58	; 0x3a
   b44b0:	f000 fe98 	bl	b51e4 <_ZN10JsonWriter10insertCharEc>
		insertValue(value);
   b44b4:	ed9d 0b00 	vldr	d0, [sp]
   b44b8:	4620      	mov	r0, r4
	}
   b44ba:	b004      	add	sp, #16
   b44bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		insertValue(value);
   b44c0:	f000 bf92 	b.w	b53e8 <_ZN10JsonWriter11insertValueEd>

000b44c4 <loop>:


void loop() {
   b44c4:	b530      	push	{r4, r5, lr}
   b44c6:	b0d3      	sub	sp, #332	; 0x14c

  getBarometerReadings();
   b44c8:	f7ff fe1c 	bl	b4104 <_Z20getBarometerReadingsv>
  getAirQualityReadings();
   b44cc:	f7ff fe4a 	bl	b4164 <_Z21getAirQualityReadingsv>
  getLightReadings();
   b44d0:	f7ff fef0 	bl	b42b4 <_Z16getLightReadingsv>
  getSoundReadings();
   b44d4:	f7ff fefa 	bl	b42cc <_Z16getSoundReadingsv>

  duration = pulseIn(DUST_SENSOR_PIN, LOW);
   b44d8:	2100      	movs	r1, #0
   b44da:	2011      	movs	r0, #17
   b44dc:	f003 fb6a 	bl	b7bb4 <pulseIn>
  
  lowpulseoccupancy = lowpulseoccupancy + duration;
   b44e0:	4c56      	ldr	r4, [pc, #344]	; (b463c <loop+0x178>)
  duration = pulseIn(DUST_SENSOR_PIN, LOW);
   b44e2:	4b57      	ldr	r3, [pc, #348]	; (b4640 <loop+0x17c>)

  if ((millis() - lastCheck) > SENSOR_READING_INTERVAL)
   b44e4:	4d57      	ldr	r5, [pc, #348]	; (b4644 <loop+0x180>)
  duration = pulseIn(DUST_SENSOR_PIN, LOW);
   b44e6:	6018      	str	r0, [r3, #0]
  lowpulseoccupancy = lowpulseoccupancy + duration;
   b44e8:	6823      	ldr	r3, [r4, #0]
   b44ea:	4418      	add	r0, r3
   b44ec:	6020      	str	r0, [r4, #0]
   b44ee:	f001 fbcd 	bl	b5c8c <HAL_Timer_Get_Milli_Seconds>
  if ((millis() - lastCheck) > SENSOR_READING_INTERVAL)
   b44f2:	682b      	ldr	r3, [r5, #0]
   b44f4:	1ac0      	subs	r0, r0, r3
   b44f6:	f247 5330 	movw	r3, #30000	; 0x7530
   b44fa:	4298      	cmp	r0, r3
   b44fc:	d906      	bls.n	b450c <loop+0x48>
  {
    getDustSensorReadings();
   b44fe:	f7ff fe6b 	bl	b41d8 <_Z21getDustSensorReadingsv>
  
    lowpulseoccupancy = 0;
   b4502:	2300      	movs	r3, #0
   b4504:	6023      	str	r3, [r4, #0]
   b4506:	f001 fbc1 	bl	b5c8c <HAL_Timer_Get_Milli_Seconds>
    lastCheck = millis();
   b450a:	6028      	str	r0, [r5, #0]
public:
	explicit JsonWriterStatic() : JsonWriter(staticBuffer, BUFFER_SIZE) {};
   b450c:	f44f 7280 	mov.w	r2, #256	; 0x100
   b4510:	a912      	add	r1, sp, #72	; 0x48
   b4512:	a806      	add	r0, sp, #24
   b4514:	f000 fe54 	bl	b51c0 <_ZN10JsonWriterC1EPcj>
   b4518:	4b4b      	ldr	r3, [pc, #300]	; (b4648 <loop+0x184>)
   b451a:	9306      	str	r3, [sp, #24]
	bool startObject() { return startObjectOrArray('{', '}'); };
   b451c:	227d      	movs	r2, #125	; 0x7d
   b451e:	217b      	movs	r1, #123	; 0x7b
   b4520:	a806      	add	r0, sp, #24
   b4522:	f000 ff48 	bl	b53b6 <_ZN10JsonWriter18startObjectOrArrayEcc>

  {
    JsonWriterAutoObject obj(&jw);

    // Add various types of data
    jw.insertKeyValue("timestamp", (int) Time.now());
   b4526:	f003 f89d 	bl	b7664 <_ZN9TimeClass3nowEv>
   b452a:	4948      	ldr	r1, [pc, #288]	; (b464c <loop+0x188>)
   b452c:	4602      	mov	r2, r0
   b452e:	a806      	add	r0, sp, #24
   b4530:	f7ff ff96 	bl	b4460 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    jw.insertKeyValue("temp", temp);
   b4534:	4b46      	ldr	r3, [pc, #280]	; (b4650 <loop+0x18c>)
   b4536:	4947      	ldr	r1, [pc, #284]	; (b4654 <loop+0x190>)
   b4538:	681a      	ldr	r2, [r3, #0]
   b453a:	a806      	add	r0, sp, #24
   b453c:	f7ff ff90 	bl	b4460 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    jw.insertKeyValue("humidity", humidity);
   b4540:	4b45      	ldr	r3, [pc, #276]	; (b4658 <loop+0x194>)
   b4542:	4946      	ldr	r1, [pc, #280]	; (b465c <loop+0x198>)
   b4544:	681a      	ldr	r2, [r3, #0]
   b4546:	a806      	add	r0, sp, #24
   b4548:	f7ff ff8a 	bl	b4460 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    jw.insertKeyValue("pressure", pressure);
   b454c:	4b44      	ldr	r3, [pc, #272]	; (b4660 <loop+0x19c>)
   b454e:	4945      	ldr	r1, [pc, #276]	; (b4664 <loop+0x1a0>)
   b4550:	681a      	ldr	r2, [r3, #0]
   b4552:	a806      	add	r0, sp, #24
   b4554:	f7ff ff84 	bl	b4460 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    jw.insertKeyValue("altitude", altitude);
   b4558:	4b43      	ldr	r3, [pc, #268]	; (b4668 <loop+0x1a4>)
   b455a:	4944      	ldr	r1, [pc, #272]	; (b466c <loop+0x1a8>)
   b455c:	681a      	ldr	r2, [r3, #0]
   b455e:	a806      	add	r0, sp, #24
   b4560:	f7ff ff7e 	bl	b4460 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    jw.insertKeyValue("airQual", airQuality);
   b4564:	4942      	ldr	r1, [pc, #264]	; (b4670 <loop+0x1ac>)
   b4566:	a802      	add	r0, sp, #8
   b4568:	f002 fcfc 	bl	b6f64 <_ZN6StringC1ERKS_>
		insertCheckSeparator();
   b456c:	a806      	add	r0, sp, #24
   b456e:	f000 ff17 	bl	b53a0 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   b4572:	2201      	movs	r2, #1
   b4574:	493f      	ldr	r1, [pc, #252]	; (b4674 <loop+0x1b0>)
   b4576:	a806      	add	r0, sp, #24
   b4578:	f000 fe80 	bl	b527c <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
   b457c:	213a      	movs	r1, #58	; 0x3a
   b457e:	a806      	add	r0, sp, #24
   b4580:	f000 fe30 	bl	b51e4 <_ZN10JsonWriter10insertCharEc>
	void insertValue(const String &value) { insertString(value.c_str(), true); }
   b4584:	9902      	ldr	r1, [sp, #8]
   b4586:	2201      	movs	r2, #1
   b4588:	a806      	add	r0, sp, #24
   b458a:	f000 fe77 	bl	b527c <_ZN10JsonWriter12insertStringEPKcb>
   b458e:	a802      	add	r0, sp, #8
   b4590:	f002 fc7a 	bl	b6e88 <_ZN6StringD1Ev>
		insertCheckSeparator();
   b4594:	a806      	add	r0, sp, #24
    jw.insertKeyValue("lpo_val", lowpulseoccupancy);
   b4596:	6824      	ldr	r4, [r4, #0]
   b4598:	f000 ff02 	bl	b53a0 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   b459c:	2201      	movs	r2, #1
   b459e:	4936      	ldr	r1, [pc, #216]	; (b4678 <loop+0x1b4>)
   b45a0:	a806      	add	r0, sp, #24
   b45a2:	f000 fe6b 	bl	b527c <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
   b45a6:	213a      	movs	r1, #58	; 0x3a
   b45a8:	a806      	add	r0, sp, #24
   b45aa:	f000 fe1b 	bl	b51e4 <_ZN10JsonWriter10insertCharEc>
	void insertValue(unsigned long value) { insertsprintf("%lu", value); }
   b45ae:	4622      	mov	r2, r4
   b45b0:	4932      	ldr	r1, [pc, #200]	; (b467c <loop+0x1b8>)
   b45b2:	a806      	add	r0, sp, #24
   b45b4:	f000 fe55 	bl	b5262 <_ZN10JsonWriter13insertsprintfEPKcz>
    jw.insertKeyValue("dust_ratio", ratio);
   b45b8:	4b31      	ldr	r3, [pc, #196]	; (b4680 <loop+0x1bc>)
   b45ba:	4932      	ldr	r1, [pc, #200]	; (b4684 <loop+0x1c0>)
   b45bc:	ed93 0b00 	vldr	d0, [r3]
   b45c0:	a806      	add	r0, sp, #24
   b45c2:	f7ff ff67 	bl	b4494 <_ZN10JsonWriter14insertKeyValueIdEEvPKcT_>
    jw.insertKeyValue("dust_conc", concentration);
   b45c6:	4b30      	ldr	r3, [pc, #192]	; (b4688 <loop+0x1c4>)
   b45c8:	4930      	ldr	r1, [pc, #192]	; (b468c <loop+0x1c8>)
   b45ca:	ed93 0b00 	vldr	d0, [r3]
   b45ce:	a806      	add	r0, sp, #24
   b45d0:	f7ff ff60 	bl	b4494 <_ZN10JsonWriter14insertKeyValueIdEEvPKcT_>
    jw.insertKeyValue("light", lightVal);
   b45d4:	4b2e      	ldr	r3, [pc, #184]	; (b4690 <loop+0x1cc>)
   b45d6:	492f      	ldr	r1, [pc, #188]	; (b4694 <loop+0x1d0>)
   b45d8:	681a      	ldr	r2, [r3, #0]
   b45da:	a806      	add	r0, sp, #24
   b45dc:	f7ff ff40 	bl	b4460 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    jw.insertKeyValue("sound", soundVal);
   b45e0:	4b2d      	ldr	r3, [pc, #180]	; (b4698 <loop+0x1d4>)
   b45e2:	492e      	ldr	r1, [pc, #184]	; (b469c <loop+0x1d8>)
   b45e4:	681a      	ldr	r2, [r3, #0]
   b45e6:	a806      	add	r0, sp, #24
   b45e8:	f7ff ff3a 	bl	b4460 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>

	/**
	 * @brief End the object
	 */
	~JsonWriterAutoObject() {
		jw->finishObjectOrArray();
   b45ec:	a806      	add	r0, sp, #24
   b45ee:	f000 fe07 	bl	b5200 <_ZN10JsonWriter19finishObjectOrArrayEv>

  }
  // If MQTT client is not connected then reconnect.
  if (!client.isConnected()) {
   b45f2:	482b      	ldr	r0, [pc, #172]	; (b46a0 <loop+0x1dc>)
   b45f4:	f001 f832 	bl	b565c <_ZN4MQTT11isConnectedEv>
   b45f8:	b908      	cbnz	r0, b45fe <loop+0x13a>
    reconnect();
   b45fa:	f7ff fe93 	bl	b4324 <_Z9reconnectv>
  } 
  
  
  mqtt_publish(jw.getBuffer());
   b45fe:	9807      	ldr	r0, [sp, #28]
   b4600:	f7ff fe70 	bl	b42e4 <_Z12mqtt_publishPc>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b4604:	4b27      	ldr	r3, [pc, #156]	; (b46a4 <loop+0x1e0>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4606:	9a07      	ldr	r2, [sp, #28]
   b4608:	781b      	ldrb	r3, [r3, #0]
   b460a:	4927      	ldr	r1, [pc, #156]	; (b46a8 <loop+0x1e4>)
   b460c:	f88d 3000 	strb.w	r3, [sp]
   b4610:	a802      	add	r0, sp, #8
   b4612:	233c      	movs	r3, #60	; 0x3c
   b4614:	f001 ff7c 	bl	b6510 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b4618:	a803      	add	r0, sp, #12
   b461a:	f7ff fe6d 	bl	b42f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>


    
  // Call the loop continuously to establish connection to the server.
  
  if (client.isConnected()) {
   b461e:	4820      	ldr	r0, [pc, #128]	; (b46a0 <loop+0x1dc>)
   b4620:	f001 f81c 	bl	b565c <_ZN4MQTT11isConnectedEv>
   b4624:	b110      	cbz	r0, b462c <loop+0x168>
    client.loop();
   b4626:	481e      	ldr	r0, [pc, #120]	; (b46a0 <loop+0x1dc>)
   b4628:	f001 f9ef 	bl	b5a0a <_ZN4MQTT4loopEv>
  }
  //Only take readings at certain intervals (in minutes)
  int delay_interval = 30;
  delay(delay_interval*60000);
   b462c:	481f      	ldr	r0, [pc, #124]	; (b46ac <loop+0x1e8>)
   b462e:	f001 fe09 	bl	b6244 <delay>
  JsonWriterStatic<256> jw;
   b4632:	a806      	add	r0, sp, #24
   b4634:	f7ff fd40 	bl	b40b8 <_ZN16JsonWriterStaticILj256EED1Ev>
  
}
   b4638:	b053      	add	sp, #332	; 0x14c
   b463a:	bd30      	pop	{r4, r5, pc}
   b463c:	2003e69c 	.word	0x2003e69c
   b4640:	2003e688 	.word	0x2003e688
   b4644:	2003e690 	.word	0x2003e690
   b4648:	000ba258 	.word	0x000ba258
   b464c:	000ba1cb 	.word	0x000ba1cb
   b4650:	2003e6b4 	.word	0x2003e6b4
   b4654:	000ba1d5 	.word	0x000ba1d5
   b4658:	2003e68c 	.word	0x2003e68c
   b465c:	000ba1da 	.word	0x000ba1da
   b4660:	2003e6a0 	.word	0x2003e6a0
   b4664:	000ba1e3 	.word	0x000ba1e3
   b4668:	2003e5ac 	.word	0x2003e5ac
   b466c:	000ba1ec 	.word	0x000ba1ec
   b4670:	2003e59c 	.word	0x2003e59c
   b4674:	000ba1f5 	.word	0x000ba1f5
   b4678:	000ba1fd 	.word	0x000ba1fd
   b467c:	000ba205 	.word	0x000ba205
   b4680:	2003e6a8 	.word	0x2003e6a8
   b4684:	000ba209 	.word	0x000ba209
   b4688:	2003e680 	.word	0x2003e680
   b468c:	000ba214 	.word	0x000ba214
   b4690:	2003e698 	.word	0x2003e698
   b4694:	000ba21e 	.word	0x000ba21e
   b4698:	2003e6b0 	.word	0x2003e6b0
   b469c:	000ba224 	.word	0x000ba224
   b46a0:	2003e610 	.word	0x2003e610
   b46a4:	2003e599 	.word	0x2003e599
   b46a8:	000ba22a 	.word	0x000ba22a
   b46ac:	001b7740 	.word	0x001b7740

000b46b0 <_GLOBAL__sub_I_bme>:
        val_(val) {
   b46b0:	4b0f      	ldr	r3, [pc, #60]	; (b46f0 <_GLOBAL__sub_I_bme+0x40>)
   b46b2:	b513      	push	{r0, r1, r4, lr}
   b46b4:	2400      	movs	r4, #0
   b46b6:	701c      	strb	r4, [r3, #0]
   b46b8:	4b0e      	ldr	r3, [pc, #56]	; (b46f4 <_GLOBAL__sub_I_bme+0x44>)
Adafruit_BME280 bme;
   b46ba:	480f      	ldr	r0, [pc, #60]	; (b46f8 <_GLOBAL__sub_I_bme+0x48>)
   b46bc:	2201      	movs	r2, #1
   b46be:	701a      	strb	r2, [r3, #0]
   b46c0:	f000 f86c 	bl	b479c <_ZN15Adafruit_BME280C1Ev>
AirQualitySensor aqSensor(AQS_PIN);
   b46c4:	2102      	movs	r1, #2
   b46c6:	480d      	ldr	r0, [pc, #52]	; (b46fc <_GLOBAL__sub_I_bme+0x4c>)
   b46c8:	f000 fcfa 	bl	b50c0 <_ZN16AirQualitySensorC1Ei>
String airQuality = "Loading";
   b46cc:	490c      	ldr	r1, [pc, #48]	; (b4700 <_GLOBAL__sub_I_bme+0x50>)
   b46ce:	480d      	ldr	r0, [pc, #52]	; (b4704 <_GLOBAL__sub_I_bme+0x54>)
   b46d0:	f002 fc25 	bl	b6f1e <_ZN6StringC1EPK19__FlashStringHelper>
String clientId = "mrargon";
   b46d4:	490c      	ldr	r1, [pc, #48]	; (b4708 <_GLOBAL__sub_I_bme+0x58>)
   b46d6:	480d      	ldr	r0, [pc, #52]	; (b470c <_GLOBAL__sub_I_bme+0x5c>)
   b46d8:	f002 fc21 	bl	b6f1e <_ZN6StringC1EPK19__FlashStringHelper>
MQTT client(server, 1883, callback); 
   b46dc:	4b0c      	ldr	r3, [pc, #48]	; (b4710 <_GLOBAL__sub_I_bme+0x60>)
   b46de:	490d      	ldr	r1, [pc, #52]	; (b4714 <_GLOBAL__sub_I_bme+0x64>)
   b46e0:	9400      	str	r4, [sp, #0]
   b46e2:	f240 725b 	movw	r2, #1883	; 0x75b
   b46e6:	480c      	ldr	r0, [pc, #48]	; (b4718 <_GLOBAL__sub_I_bme+0x68>)
   b46e8:	f000 fedc 	bl	b54a4 <_ZN4MQTTC1EPKctPFvPcPhjEb>
}
   b46ec:	b002      	add	sp, #8
   b46ee:	bd10      	pop	{r4, pc}
   b46f0:	2003e598 	.word	0x2003e598
   b46f4:	2003e599 	.word	0x2003e599
   b46f8:	2003e5cc 	.word	0x2003e5cc
   b46fc:	2003e5b0 	.word	0x2003e5b0
   b4700:	000ba23d 	.word	0x000ba23d
   b4704:	2003e59c 	.word	0x2003e59c
   b4708:	000ba245 	.word	0x000ba245
   b470c:	2003e670 	.word	0x2003e670
   b4710:	000b40b7 	.word	0x000b40b7
   b4714:	2003e510 	.word	0x2003e510
   b4718:	2003e610 	.word	0x2003e610

000b471c <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b471c:	4770      	bx	lr

000b471e <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b471e:	b510      	push	{r4, lr}
  }
   b4720:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b4722:	4604      	mov	r4, r0
  }
   b4724:	f7ff fcbd 	bl	b40a2 <_ZdlPvj>
   b4728:	4620      	mov	r0, r4
   b472a:	bd10      	pop	{r4, pc}

000b472c <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b472c:	b40e      	push	{r1, r2, r3}
   b472e:	b503      	push	{r0, r1, lr}
   b4730:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b4732:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4734:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4738:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b473a:	f002 fabc 	bl	b6cb6 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b473e:	b002      	add	sp, #8
   b4740:	f85d eb04 	ldr.w	lr, [sp], #4
   b4744:	b003      	add	sp, #12
   b4746:	4770      	bx	lr

000b4748 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b4748:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b474a:	4604      	mov	r4, r0
   b474c:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b474e:	7922      	ldrb	r2, [r4, #4]
   b4750:	68a3      	ldr	r3, [r4, #8]
   b4752:	b132      	cbz	r2, b4762 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b4754:	b9a3      	cbnz	r3, b4780 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b4756:	490b      	ldr	r1, [pc, #44]	; (b4784 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b4758:	b002      	add	sp, #8
   b475a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b475e:	f002 ba79 	b.w	b6c54 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4762:	4a09      	ldr	r2, [pc, #36]	; (b4788 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b4764:	7b26      	ldrb	r6, [r4, #12]
   b4766:	4d09      	ldr	r5, [pc, #36]	; (b478c <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b4768:	4909      	ldr	r1, [pc, #36]	; (b4790 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b476a:	7b64      	ldrb	r4, [r4, #13]
   b476c:	2e01      	cmp	r6, #1
   b476e:	bf18      	it	ne
   b4770:	4629      	movne	r1, r5
   b4772:	e9cd 1400 	strd	r1, r4, [sp]
   b4776:	4907      	ldr	r1, [pc, #28]	; (b4794 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b4778:	f7ff ffd8 	bl	b472c <_ZN5Print6printfEPKcz>
  }
   b477c:	b002      	add	sp, #8
   b477e:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4780:	4a05      	ldr	r2, [pc, #20]	; (b4798 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b4782:	e7ef      	b.n	b4764 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b4784:	000ba271 	.word	0x000ba271
   b4788:	000ba17c 	.word	0x000ba17c
   b478c:	000ba26d 	.word	0x000ba26d
   b4790:	000ba269 	.word	0x000ba269
   b4794:	000ba287 	.word	0x000ba287
   b4798:	000ba260 	.word	0x000ba260

000b479c <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   b479c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b47a0:	6103      	str	r3, [r0, #16]
{ }
   b47a2:	4770      	bx	lr

000b47a4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b47a4:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b47a6:	4c0b      	ldr	r4, [pc, #44]	; (b47d4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b47a8:	7821      	ldrb	r1, [r4, #0]
   b47aa:	f3bf 8f5b 	dmb	ish
   b47ae:	f011 0101 	ands.w	r1, r1, #1
   b47b2:	d10b      	bne.n	b47cc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b47b4:	4620      	mov	r0, r4
   b47b6:	9101      	str	r1, [sp, #4]
   b47b8:	f7ff fc75 	bl	b40a6 <__cxa_guard_acquire>
   b47bc:	9901      	ldr	r1, [sp, #4]
   b47be:	b128      	cbz	r0, b47cc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b47c0:	4805      	ldr	r0, [pc, #20]	; (b47d8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b47c2:	f002 fab5 	bl	b6d30 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b47c6:	4620      	mov	r0, r4
   b47c8:	f7ff fc72 	bl	b40b0 <__cxa_guard_release>
        return instance;
    }
   b47cc:	4802      	ldr	r0, [pc, #8]	; (b47d8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b47ce:	b002      	add	sp, #8
   b47d0:	bd10      	pop	{r4, pc}
   b47d2:	bf00      	nop
   b47d4:	2003e6b8 	.word	0x2003e6b8
   b47d8:	2003e6bc 	.word	0x2003e6bc

000b47dc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>:
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
   b47dc:	b508      	push	{r3, lr}
        instance().endTransaction();
   b47de:	f7ff ffe1 	bl	b47a4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    }
   b47e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        instance().endTransaction();
   b47e6:	f002 bac1 	b.w	b6d6c <_ZN8SPIClass14endTransactionEv>

000b47ea <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>:
    int32_t beginTransaction(const particle::SPISettings& settings) {
   b47ea:	b507      	push	{r0, r1, r2, lr}
   b47ec:	9001      	str	r0, [sp, #4]
        return instance().beginTransaction(settings);
   b47ee:	f7ff ffd9 	bl	b47a4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b47f2:	9901      	ldr	r1, [sp, #4]
    }
   b47f4:	b003      	add	sp, #12
   b47f6:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().beginTransaction(settings);
   b47fa:	f002 bad1 	b.w	b6da0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b47fe <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   b47fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   b4802:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b4806:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   b4808:	4605      	mov	r5, r0
   b480a:	460f      	mov	r7, r1
    if (_sck == -1)
   b480c:	d106      	bne.n	b481c <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b480e:	f7ff ffc9 	bl	b47a4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4812:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   b4814:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b4818:	f002 bb30 	b.w	b6e7c <_ZN8SPIClass8transferEh>
    uint8_t reply = 0;
   b481c:	2400      	movs	r4, #0
    for (int i=7; i>=0; i--) {
   b481e:	2607      	movs	r6, #7
        digitalWrite(_mosi, x & (1<<i));
   b4820:	f04f 0801 	mov.w	r8, #1
        digitalWrite(_sck, LOW);
   b4824:	f995 0013 	ldrsb.w	r0, [r5, #19]
   b4828:	2100      	movs	r1, #0
   b482a:	b280      	uxth	r0, r0
   b482c:	f003 f97f 	bl	b7b2e <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   b4830:	f995 0011 	ldrsb.w	r0, [r5, #17]
   b4834:	fa08 f106 	lsl.w	r1, r8, r6
   b4838:	4039      	ands	r1, r7
   b483a:	b280      	uxth	r0, r0
   b483c:	f003 f977 	bl	b7b2e <digitalWrite>
        digitalWrite(_sck, HIGH);
   b4840:	f995 0013 	ldrsb.w	r0, [r5, #19]
   b4844:	2101      	movs	r1, #1
   b4846:	b280      	uxth	r0, r0
   b4848:	f003 f971 	bl	b7b2e <digitalWrite>
        if (digitalRead(_miso))
   b484c:	f995 0012 	ldrsb.w	r0, [r5, #18]
        reply <<= 1;
   b4850:	0064      	lsls	r4, r4, #1
        if (digitalRead(_miso))
   b4852:	b280      	uxth	r0, r0
        reply <<= 1;
   b4854:	b2e4      	uxtb	r4, r4
        if (digitalRead(_miso))
   b4856:	f003 f983 	bl	b7b60 <digitalRead>
   b485a:	b108      	cbz	r0, b4860 <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   b485c:	f044 0401 	orr.w	r4, r4, #1
    for (int i=7; i>=0; i--) {
   b4860:	3e01      	subs	r6, #1
   b4862:	d2df      	bcs.n	b4824 <_ZN15Adafruit_BME2807spixferEh+0x26>
}
   b4864:	4620      	mov	r0, r4
   b4866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b486c <_ZN15Adafruit_BME2806write8Ehh>:
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   b486c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   b486e:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b4872:	3301      	adds	r3, #1
void Adafruit_BME280::write8(byte reg, byte value) {
   b4874:	4604      	mov	r4, r0
   b4876:	460e      	mov	r6, r1
   b4878:	4615      	mov	r5, r2
    if (_cs == -1) {
   b487a:	d113      	bne.n	b48a4 <_ZN15Adafruit_BME2806write8Ehh+0x38>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b487c:	7901      	ldrb	r1, [r0, #4]
   b487e:	6800      	ldr	r0, [r0, #0]
   b4880:	f002 f86c 	bl	b695c <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b4884:	6820      	ldr	r0, [r4, #0]
   b4886:	6803      	ldr	r3, [r0, #0]
   b4888:	4631      	mov	r1, r6
   b488a:	689b      	ldr	r3, [r3, #8]
   b488c:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   b488e:	6820      	ldr	r0, [r4, #0]
   b4890:	6803      	ldr	r3, [r0, #0]
   b4892:	4629      	mov	r1, r5
   b4894:	689b      	ldr	r3, [r3, #8]
   b4896:	4798      	blx	r3
        _wire -> endTransmission();
   b4898:	6820      	ldr	r0, [r4, #0]
        spixfer(value);
        digitalWrite(_cs, HIGH);
    if (_sck == -1)
        SPI.endTransaction(); // release the SPI bus
    }
}
   b489a:	b004      	add	sp, #16
   b489c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        _wire -> endTransmission();
   b48a0:	f002 b864 	b.w	b696c <_ZN7TwoWire15endTransmissionEv>
        if (_sck == -1)
   b48a4:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b48a8:	3301      	adds	r3, #1
   b48aa:	d10c      	bne.n	b48c6 <_ZN15Adafruit_BME2806write8Ehh+0x5a>
      dataMode_{dataMode}
   b48ac:	4b16      	ldr	r3, [pc, #88]	; (b4908 <_ZN15Adafruit_BME2806write8Ehh+0x9c>)
   b48ae:	9300      	str	r3, [sp, #0]
   b48b0:	2300      	movs	r3, #0
   b48b2:	f88d 3004 	strb.w	r3, [sp, #4]
   b48b6:	4b15      	ldr	r3, [pc, #84]	; (b490c <_ZN15Adafruit_BME2806write8Ehh+0xa0>)
   b48b8:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b48ba:	4668      	mov	r0, sp
   b48bc:	2301      	movs	r3, #1
   b48be:	f8ad 300c 	strh.w	r3, [sp, #12]
   b48c2:	f7ff ff92 	bl	b47ea <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b48c6:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b48ca:	2100      	movs	r1, #0
   b48cc:	b280      	uxth	r0, r0
   b48ce:	f003 f92e 	bl	b7b2e <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   b48d2:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   b48d6:	4620      	mov	r0, r4
   b48d8:	f7ff ff91 	bl	b47fe <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   b48dc:	4629      	mov	r1, r5
   b48de:	4620      	mov	r0, r4
   b48e0:	f7ff ff8d 	bl	b47fe <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   b48e4:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b48e8:	2101      	movs	r1, #1
   b48ea:	b280      	uxth	r0, r0
   b48ec:	f003 f91f 	bl	b7b2e <digitalWrite>
    if (_sck == -1)
   b48f0:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b48f4:	3301      	adds	r3, #1
   b48f6:	d104      	bne.n	b4902 <_ZN15Adafruit_BME2806write8Ehh+0x96>
}
   b48f8:	b004      	add	sp, #16
   b48fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        SPI.endTransaction(); // release the SPI bus
   b48fe:	f7ff bf6d 	b.w	b47dc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
}
   b4902:	b004      	add	sp, #16
   b4904:	bd70      	pop	{r4, r5, r6, pc}
   b4906:	bf00      	nop
   b4908:	000ba2ac 	.word	0x000ba2ac
   b490c:	0007a120 	.word	0x0007a120

000b4910 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
		 standby_duration  duration) {
   b4910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.osrs_t   = tempSampling;
   b4912:	00db      	lsls	r3, r3, #3
   b4914:	f002 0207 	and.w	r2, r2, #7
   b4918:	f003 0338 	and.w	r3, r3, #56	; 0x38
   b491c:	4313      	orrs	r3, r2
   b491e:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
		 standby_duration  duration) {
   b4922:	f89d 6018 	ldrb.w	r6, [sp, #24]
    _measReg.osrs_t   = tempSampling;
   b4926:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    _humReg.osrs_h    = humSampling;
   b492a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 standby_duration  duration) {
   b492e:	f89d 501c 	ldrb.w	r5, [sp, #28]
   b4932:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _humReg.osrs_h    = humSampling;
   b4936:	f366 1347 	bfi	r3, r6, #5, #3
   b493a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.t_sb   = duration;
   b493e:	00ed      	lsls	r5, r5, #3
   b4940:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   b4944:	f007 0707 	and.w	r7, r7, #7
   b4948:	f005 0538 	and.w	r5, r5, #56	; 0x38
   b494c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   b4950:	433d      	orrs	r5, r7
		 standby_duration  duration) {
   b4952:	4604      	mov	r4, r0
    _configReg.t_sb   = duration;
   b4954:	431d      	orrs	r5, r3
   b4956:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   b495a:	f006 0207 	and.w	r2, r6, #7
   b495e:	21f2      	movs	r1, #242	; 0xf2
   b4960:	f7ff ff84 	bl	b486c <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   b4964:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   b4968:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   b496c:	f002 0107 	and.w	r1, r2, #7
   b4970:	009b      	lsls	r3, r3, #2
   b4972:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   b4976:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   b497a:	4620      	mov	r0, r4
   b497c:	21f5      	movs	r1, #245	; 0xf5
   b497e:	f7ff ff75 	bl	b486c <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   b4982:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   b4986:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   b498a:	f002 0107 	and.w	r1, r2, #7
   b498e:	009b      	lsls	r3, r3, #2
   b4990:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   b4994:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   b4998:	4620      	mov	r0, r4
   b499a:	21f4      	movs	r1, #244	; 0xf4
}
   b499c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   b49a0:	f7ff bf64 	b.w	b486c <_ZN15Adafruit_BME2806write8Ehh>

000b49a4 <_ZN15Adafruit_BME2805read8Eh>:
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   b49a4:	b530      	push	{r4, r5, lr}
    uint8_t value;
    
    if (_cs == -1) {
   b49a6:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b49aa:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::read8(byte reg) {
   b49ac:	b085      	sub	sp, #20
   b49ae:	4604      	mov	r4, r0
   b49b0:	460d      	mov	r5, r1
    if (_cs == -1) {
   b49b2:	d118      	bne.n	b49e6 <_ZN15Adafruit_BME2805read8Eh+0x42>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b49b4:	7901      	ldrb	r1, [r0, #4]
   b49b6:	6800      	ldr	r0, [r0, #0]
   b49b8:	f001 ffd0 	bl	b695c <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b49bc:	6820      	ldr	r0, [r4, #0]
   b49be:	6803      	ldr	r3, [r0, #0]
   b49c0:	4629      	mov	r1, r5
   b49c2:	689b      	ldr	r3, [r3, #8]
   b49c4:	4798      	blx	r3
        _wire -> endTransmission();
   b49c6:	6820      	ldr	r0, [r4, #0]
   b49c8:	f001 ffd0 	bl	b696c <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   b49cc:	7921      	ldrb	r1, [r4, #4]
   b49ce:	6820      	ldr	r0, [r4, #0]
   b49d0:	2201      	movs	r2, #1
   b49d2:	f001 ffc0 	bl	b6956 <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   b49d6:	6820      	ldr	r0, [r4, #0]
   b49d8:	6803      	ldr	r3, [r0, #0]
   b49da:	695b      	ldr	r3, [r3, #20]
   b49dc:	4798      	blx	r3
   b49de:	b2c5      	uxtb	r5, r0
        digitalWrite(_cs, HIGH);
        if (_sck == -1)
            SPI.endTransaction(); // release the SPI bus
    }
    return value;
}
   b49e0:	4628      	mov	r0, r5
   b49e2:	b005      	add	sp, #20
   b49e4:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b49e6:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b49ea:	3301      	adds	r3, #1
   b49ec:	d10c      	bne.n	b4a08 <_ZN15Adafruit_BME2805read8Eh+0x64>
   b49ee:	4b15      	ldr	r3, [pc, #84]	; (b4a44 <_ZN15Adafruit_BME2805read8Eh+0xa0>)
   b49f0:	9300      	str	r3, [sp, #0]
   b49f2:	2300      	movs	r3, #0
   b49f4:	f88d 3004 	strb.w	r3, [sp, #4]
   b49f8:	4b13      	ldr	r3, [pc, #76]	; (b4a48 <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   b49fa:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b49fc:	4668      	mov	r0, sp
   b49fe:	2301      	movs	r3, #1
   b4a00:	f8ad 300c 	strh.w	r3, [sp, #12]
   b4a04:	f7ff fef1 	bl	b47ea <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b4a08:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4a0c:	2100      	movs	r1, #0
   b4a0e:	b280      	uxth	r0, r0
   b4a10:	f003 f88d 	bl	b7b2e <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b4a14:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b4a18:	4620      	mov	r0, r4
   b4a1a:	f7ff fef0 	bl	b47fe <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   b4a1e:	2100      	movs	r1, #0
   b4a20:	4620      	mov	r0, r4
   b4a22:	f7ff feec 	bl	b47fe <_ZN15Adafruit_BME2807spixferEh>
   b4a26:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   b4a28:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4a2c:	2101      	movs	r1, #1
   b4a2e:	b280      	uxth	r0, r0
   b4a30:	f003 f87d 	bl	b7b2e <digitalWrite>
        if (_sck == -1)
   b4a34:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b4a38:	3301      	adds	r3, #1
   b4a3a:	d1d1      	bne.n	b49e0 <_ZN15Adafruit_BME2805read8Eh+0x3c>
            SPI.endTransaction(); // release the SPI bus
   b4a3c:	f7ff fece 	bl	b47dc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   b4a40:	e7ce      	b.n	b49e0 <_ZN15Adafruit_BME2805read8Eh+0x3c>
   b4a42:	bf00      	nop
   b4a44:	000ba2ac 	.word	0x000ba2ac
   b4a48:	0007a120 	.word	0x0007a120

000b4a4c <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
    @brief return true if chip is busy reading cal data
    @returns true if reading calibration, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::isReadingCalibration(void)
{
   b4a4c:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   b4a4e:	21f3      	movs	r1, #243	; 0xf3
   b4a50:	f7ff ffa8 	bl	b49a4 <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
   b4a54:	f000 0001 	and.w	r0, r0, #1
   b4a58:	bd08      	pop	{r3, pc}
	...

000b4a5c <_ZN15Adafruit_BME2806read16Eh>:
{
   b4a5c:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   b4a5e:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b4a62:	3301      	adds	r3, #1
{
   b4a64:	b085      	sub	sp, #20
   b4a66:	4604      	mov	r4, r0
   b4a68:	460d      	mov	r5, r1
    if (_cs == -1) {
   b4a6a:	d11f      	bne.n	b4aac <_ZN15Adafruit_BME2806read16Eh+0x50>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b4a6c:	7901      	ldrb	r1, [r0, #4]
   b4a6e:	6800      	ldr	r0, [r0, #0]
   b4a70:	f001 ff74 	bl	b695c <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b4a74:	6820      	ldr	r0, [r4, #0]
   b4a76:	6803      	ldr	r3, [r0, #0]
   b4a78:	4629      	mov	r1, r5
   b4a7a:	689b      	ldr	r3, [r3, #8]
   b4a7c:	4798      	blx	r3
        _wire -> endTransmission();
   b4a7e:	6820      	ldr	r0, [r4, #0]
   b4a80:	f001 ff74 	bl	b696c <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   b4a84:	7921      	ldrb	r1, [r4, #4]
   b4a86:	6820      	ldr	r0, [r4, #0]
   b4a88:	2202      	movs	r2, #2
   b4a8a:	f001 ff64 	bl	b6956 <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   b4a8e:	6820      	ldr	r0, [r4, #0]
   b4a90:	6803      	ldr	r3, [r0, #0]
   b4a92:	695b      	ldr	r3, [r3, #20]
   b4a94:	4798      	blx	r3
   b4a96:	4605      	mov	r5, r0
   b4a98:	6820      	ldr	r0, [r4, #0]
   b4a9a:	6803      	ldr	r3, [r0, #0]
   b4a9c:	695b      	ldr	r3, [r3, #20]
   b4a9e:	4798      	blx	r3
   b4aa0:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   b4aa4:	b285      	uxth	r5, r0
}
   b4aa6:	4628      	mov	r0, r5
   b4aa8:	b005      	add	sp, #20
   b4aaa:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b4aac:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b4ab0:	3301      	adds	r3, #1
   b4ab2:	d10c      	bne.n	b4ace <_ZN15Adafruit_BME2806read16Eh+0x72>
   b4ab4:	4b18      	ldr	r3, [pc, #96]	; (b4b18 <_ZN15Adafruit_BME2806read16Eh+0xbc>)
   b4ab6:	9300      	str	r3, [sp, #0]
   b4ab8:	2300      	movs	r3, #0
   b4aba:	f88d 3004 	strb.w	r3, [sp, #4]
   b4abe:	4b17      	ldr	r3, [pc, #92]	; (b4b1c <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   b4ac0:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b4ac2:	4668      	mov	r0, sp
   b4ac4:	2301      	movs	r3, #1
   b4ac6:	f8ad 300c 	strh.w	r3, [sp, #12]
   b4aca:	f7ff fe8e 	bl	b47ea <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b4ace:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4ad2:	2100      	movs	r1, #0
   b4ad4:	b280      	uxth	r0, r0
   b4ad6:	f003 f82a 	bl	b7b2e <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b4ada:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b4ade:	4620      	mov	r0, r4
   b4ae0:	f7ff fe8d 	bl	b47fe <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   b4ae4:	2100      	movs	r1, #0
   b4ae6:	4620      	mov	r0, r4
   b4ae8:	f7ff fe89 	bl	b47fe <_ZN15Adafruit_BME2807spixferEh>
   b4aec:	2100      	movs	r1, #0
   b4aee:	4605      	mov	r5, r0
   b4af0:	4620      	mov	r0, r4
   b4af2:	f7ff fe84 	bl	b47fe <_ZN15Adafruit_BME2807spixferEh>
   b4af6:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   b4afa:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   b4afc:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4b00:	2101      	movs	r1, #1
   b4b02:	b280      	uxth	r0, r0
   b4b04:	f003 f813 	bl	b7b2e <digitalWrite>
        if (_sck == -1)
   b4b08:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b4b0c:	3301      	adds	r3, #1
   b4b0e:	d1ca      	bne.n	b4aa6 <_ZN15Adafruit_BME2806read16Eh+0x4a>
            SPI.endTransaction(); // release the SPI bus
   b4b10:	f7ff fe64 	bl	b47dc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   b4b14:	e7c7      	b.n	b4aa6 <_ZN15Adafruit_BME2806read16Eh+0x4a>
   b4b16:	bf00      	nop
   b4b18:	000ba2ac 	.word	0x000ba2ac
   b4b1c:	0007a120 	.word	0x0007a120

000b4b20 <_ZN15Adafruit_BME2809read16_LEEh>:
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   b4b20:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   b4b22:	f7ff ff9b 	bl	b4a5c <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   b4b26:	ba40      	rev16	r0, r0
}
   b4b28:	b280      	uxth	r0, r0
   b4b2a:	bd08      	pop	{r3, pc}

000b4b2c <_ZN15Adafruit_BME28016readCoefficientsEv>:
{
   b4b2c:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b4b2e:	2188      	movs	r1, #136	; 0x88
{
   b4b30:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b4b32:	f7ff fff5 	bl	b4b20 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   b4b36:	218a      	movs	r1, #138	; 0x8a
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b4b38:	82a0      	strh	r0, [r4, #20]
    return (int16_t)read16_LE(reg);
   b4b3a:	4620      	mov	r0, r4
   b4b3c:	f7ff fff0 	bl	b4b20 <_ZN15Adafruit_BME2809read16_LEEh>
   b4b40:	218c      	movs	r1, #140	; 0x8c
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   b4b42:	82e0      	strh	r0, [r4, #22]
    return (int16_t)read16_LE(reg);
   b4b44:	4620      	mov	r0, r4
   b4b46:	f7ff ffeb 	bl	b4b20 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b4b4a:	218e      	movs	r1, #142	; 0x8e
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   b4b4c:	8320      	strh	r0, [r4, #24]
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b4b4e:	4620      	mov	r0, r4
   b4b50:	f7ff ffe6 	bl	b4b20 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   b4b54:	2190      	movs	r1, #144	; 0x90
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b4b56:	8360      	strh	r0, [r4, #26]
    return (int16_t)read16_LE(reg);
   b4b58:	4620      	mov	r0, r4
   b4b5a:	f7ff ffe1 	bl	b4b20 <_ZN15Adafruit_BME2809read16_LEEh>
   b4b5e:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   b4b60:	83a0      	strh	r0, [r4, #28]
    return (int16_t)read16_LE(reg);
   b4b62:	4620      	mov	r0, r4
   b4b64:	f7ff ffdc 	bl	b4b20 <_ZN15Adafruit_BME2809read16_LEEh>
   b4b68:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   b4b6a:	83e0      	strh	r0, [r4, #30]
    return (int16_t)read16_LE(reg);
   b4b6c:	4620      	mov	r0, r4
   b4b6e:	f7ff ffd7 	bl	b4b20 <_ZN15Adafruit_BME2809read16_LEEh>
   b4b72:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   b4b74:	8420      	strh	r0, [r4, #32]
    return (int16_t)read16_LE(reg);
   b4b76:	4620      	mov	r0, r4
   b4b78:	f7ff ffd2 	bl	b4b20 <_ZN15Adafruit_BME2809read16_LEEh>
   b4b7c:	2198      	movs	r1, #152	; 0x98
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   b4b7e:	8460      	strh	r0, [r4, #34]	; 0x22
    return (int16_t)read16_LE(reg);
   b4b80:	4620      	mov	r0, r4
   b4b82:	f7ff ffcd 	bl	b4b20 <_ZN15Adafruit_BME2809read16_LEEh>
   b4b86:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   b4b88:	84a0      	strh	r0, [r4, #36]	; 0x24
    return (int16_t)read16_LE(reg);
   b4b8a:	4620      	mov	r0, r4
   b4b8c:	f7ff ffc8 	bl	b4b20 <_ZN15Adafruit_BME2809read16_LEEh>
   b4b90:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   b4b92:	84e0      	strh	r0, [r4, #38]	; 0x26
    return (int16_t)read16_LE(reg);
   b4b94:	4620      	mov	r0, r4
   b4b96:	f7ff ffc3 	bl	b4b20 <_ZN15Adafruit_BME2809read16_LEEh>
   b4b9a:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   b4b9c:	8520      	strh	r0, [r4, #40]	; 0x28
    return (int16_t)read16_LE(reg);
   b4b9e:	4620      	mov	r0, r4
   b4ba0:	f7ff ffbe 	bl	b4b20 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b4ba4:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   b4ba6:	8560      	strh	r0, [r4, #42]	; 0x2a
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b4ba8:	4620      	mov	r0, r4
   b4baa:	f7ff fefb 	bl	b49a4 <_ZN15Adafruit_BME2805read8Eh>
    return (int16_t)read16_LE(reg);
   b4bae:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b4bb0:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    return (int16_t)read16_LE(reg);
   b4bb4:	4620      	mov	r0, r4
   b4bb6:	f7ff ffb3 	bl	b4b20 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b4bba:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   b4bbc:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b4bbe:	4620      	mov	r0, r4
   b4bc0:	f7ff fef0 	bl	b49a4 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   b4bc4:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b4bc6:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   b4bca:	4620      	mov	r0, r4
   b4bcc:	f7ff feea 	bl	b49a4 <_ZN15Adafruit_BME2805read8Eh>
   b4bd0:	21e5      	movs	r1, #229	; 0xe5
   b4bd2:	4605      	mov	r5, r0
   b4bd4:	4620      	mov	r0, r4
   b4bd6:	f7ff fee5 	bl	b49a4 <_ZN15Adafruit_BME2805read8Eh>
   b4bda:	f000 030f 	and.w	r3, r0, #15
   b4bde:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   b4be2:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   b4be4:	21e6      	movs	r1, #230	; 0xe6
   b4be6:	4620      	mov	r0, r4
   b4be8:	f7ff fedc 	bl	b49a4 <_ZN15Adafruit_BME2805read8Eh>
   b4bec:	21e5      	movs	r1, #229	; 0xe5
   b4bee:	4605      	mov	r5, r0
   b4bf0:	4620      	mov	r0, r4
   b4bf2:	f7ff fed7 	bl	b49a4 <_ZN15Adafruit_BME2805read8Eh>
   b4bf6:	f3c0 1307 	ubfx	r3, r0, #4, #8
   b4bfa:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   b4bfe:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   b4c00:	21e7      	movs	r1, #231	; 0xe7
   b4c02:	4620      	mov	r0, r4
   b4c04:	f7ff fece 	bl	b49a4 <_ZN15Adafruit_BME2805read8Eh>
   b4c08:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
}
   b4c0c:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4c10 <_ZN15Adafruit_BME2806read24Eh>:
{
   b4c10:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   b4c12:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b4c16:	3301      	adds	r3, #1
{
   b4c18:	b085      	sub	sp, #20
   b4c1a:	4604      	mov	r4, r0
   b4c1c:	460d      	mov	r5, r1
    if (_cs == -1) {
   b4c1e:	d123      	bne.n	b4c68 <_ZN15Adafruit_BME2806read24Eh+0x58>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b4c20:	7901      	ldrb	r1, [r0, #4]
   b4c22:	6800      	ldr	r0, [r0, #0]
   b4c24:	f001 fe9a 	bl	b695c <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b4c28:	6820      	ldr	r0, [r4, #0]
   b4c2a:	6803      	ldr	r3, [r0, #0]
   b4c2c:	4629      	mov	r1, r5
   b4c2e:	689b      	ldr	r3, [r3, #8]
   b4c30:	4798      	blx	r3
        _wire -> endTransmission();
   b4c32:	6820      	ldr	r0, [r4, #0]
   b4c34:	f001 fe9a 	bl	b696c <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
   b4c38:	7921      	ldrb	r1, [r4, #4]
   b4c3a:	6820      	ldr	r0, [r4, #0]
   b4c3c:	2203      	movs	r2, #3
   b4c3e:	f001 fe8a 	bl	b6956 <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   b4c42:	6820      	ldr	r0, [r4, #0]
   b4c44:	6803      	ldr	r3, [r0, #0]
   b4c46:	695b      	ldr	r3, [r3, #20]
   b4c48:	4798      	blx	r3
        value <<= 8;
   b4c4a:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   b4c4c:	6820      	ldr	r0, [r4, #0]
   b4c4e:	6803      	ldr	r3, [r0, #0]
   b4c50:	695b      	ldr	r3, [r3, #20]
   b4c52:	4798      	blx	r3
   b4c54:	4328      	orrs	r0, r5
        value <<= 8;
   b4c56:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   b4c58:	6820      	ldr	r0, [r4, #0]
   b4c5a:	6803      	ldr	r3, [r0, #0]
   b4c5c:	695b      	ldr	r3, [r3, #20]
   b4c5e:	4798      	blx	r3
   b4c60:	4305      	orrs	r5, r0
}
   b4c62:	4628      	mov	r0, r5
   b4c64:	b005      	add	sp, #20
   b4c66:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b4c68:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b4c6c:	3301      	adds	r3, #1
   b4c6e:	d10c      	bne.n	b4c8a <_ZN15Adafruit_BME2806read24Eh+0x7a>
   b4c70:	4b1a      	ldr	r3, [pc, #104]	; (b4cdc <_ZN15Adafruit_BME2806read24Eh+0xcc>)
   b4c72:	9300      	str	r3, [sp, #0]
   b4c74:	2300      	movs	r3, #0
   b4c76:	f88d 3004 	strb.w	r3, [sp, #4]
   b4c7a:	4b19      	ldr	r3, [pc, #100]	; (b4ce0 <_ZN15Adafruit_BME2806read24Eh+0xd0>)
   b4c7c:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b4c7e:	4668      	mov	r0, sp
   b4c80:	2301      	movs	r3, #1
   b4c82:	f8ad 300c 	strh.w	r3, [sp, #12]
   b4c86:	f7ff fdb0 	bl	b47ea <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b4c8a:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4c8e:	2100      	movs	r1, #0
   b4c90:	b280      	uxth	r0, r0
   b4c92:	f002 ff4c 	bl	b7b2e <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b4c96:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b4c9a:	4620      	mov	r0, r4
   b4c9c:	f7ff fdaf 	bl	b47fe <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   b4ca0:	2100      	movs	r1, #0
   b4ca2:	4620      	mov	r0, r4
   b4ca4:	f7ff fdab 	bl	b47fe <_ZN15Adafruit_BME2807spixferEh>
        value |= spixfer(0);
   b4ca8:	2100      	movs	r1, #0
        value <<= 8;
   b4caa:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   b4cac:	4620      	mov	r0, r4
   b4cae:	f7ff fda6 	bl	b47fe <_ZN15Adafruit_BME2807spixferEh>
   b4cb2:	4328      	orrs	r0, r5
        value <<= 8;
   b4cb4:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   b4cb6:	2100      	movs	r1, #0
   b4cb8:	4620      	mov	r0, r4
   b4cba:	f7ff fda0 	bl	b47fe <_ZN15Adafruit_BME2807spixferEh>
   b4cbe:	4305      	orrs	r5, r0
        digitalWrite(_cs, HIGH);
   b4cc0:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4cc4:	2101      	movs	r1, #1
   b4cc6:	b280      	uxth	r0, r0
   b4cc8:	f002 ff31 	bl	b7b2e <digitalWrite>
        if (_sck == -1)
   b4ccc:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b4cd0:	3301      	adds	r3, #1
   b4cd2:	d1c6      	bne.n	b4c62 <_ZN15Adafruit_BME2806read24Eh+0x52>
            SPI.endTransaction(); // release the SPI bus
   b4cd4:	f7ff fd82 	bl	b47dc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
    return value;
   b4cd8:	e7c3      	b.n	b4c62 <_ZN15Adafruit_BME2806read24Eh+0x52>
   b4cda:	bf00      	nop
   b4cdc:	000ba2ac 	.word	0x000ba2ac
   b4ce0:	0007a120 	.word	0x0007a120

000b4ce4 <_ZN15Adafruit_BME28015readTemperatureEv>:
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   b4ce4:	b510      	push	{r4, lr}
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   b4ce6:	21fa      	movs	r1, #250	; 0xfa
{
   b4ce8:	4604      	mov	r4, r0
    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   b4cea:	f7ff ff91 	bl	b4c10 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
   b4cee:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b4cf2:	d01f      	beq.n	b4d34 <_ZN15Adafruit_BME28015readTemperatureEv+0x50>
        return NAN;
    adc_T >>= 4;

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4cf4:	8aa1      	ldrh	r1, [r4, #20]
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   b4cf6:	ed9f 7a11 	vldr	s14, [pc, #68]	; b4d3c <_ZN15Adafruit_BME28015readTemperatureEv+0x58>
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4cfa:	004b      	lsls	r3, r1, #1
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b4cfc:	ebc1 2220 	rsb	r2, r1, r0, asr #8
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4d00:	ebc3 11e0 	rsb	r1, r3, r0, asr #7
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
   b4d04:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4d08:	4359      	muls	r1, r3
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b4d0a:	fb02 f302 	mul.w	r3, r2, r2
            ((int32_t)_bme280_calib.dig_T3)) >> 14;
   b4d0e:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
   b4d12:	131b      	asrs	r3, r3, #12
   b4d14:	4353      	muls	r3, r2
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b4d16:	139b      	asrs	r3, r3, #14
    t_fine = var1 + var2;
   b4d18:	eb03 23e1 	add.w	r3, r3, r1, asr #11
   b4d1c:	60e3      	str	r3, [r4, #12]
    float T = (t_fine * 5 + 128) >> 8;
   b4d1e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b4d22:	3380      	adds	r3, #128	; 0x80
   b4d24:	121b      	asrs	r3, r3, #8
   b4d26:	ee07 3a90 	vmov	s15, r3
   b4d2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    return T/100;
   b4d2e:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   b4d32:	bd10      	pop	{r4, pc}
        return NAN;
   b4d34:	ed9f 0a02 	vldr	s0, [pc, #8]	; b4d40 <_ZN15Adafruit_BME28015readTemperatureEv+0x5c>
   b4d38:	e7fb      	b.n	b4d32 <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
   b4d3a:	bf00      	nop
   b4d3c:	42c80000 	.word	0x42c80000
   b4d40:	7fc00000 	.word	0x7fc00000

000b4d44 <_ZN15Adafruit_BME28012readHumidityEv>:
/*!
    @brief  Returns the humidity from the sensor
    @returns the humidity value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readHumidity(void) {
   b4d44:	b538      	push	{r3, r4, r5, lr}
   b4d46:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   b4d48:	f7ff ffcc 	bl	b4ce4 <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
   b4d4c:	21fd      	movs	r1, #253	; 0xfd
   b4d4e:	4620      	mov	r0, r4
   b4d50:	f7ff fe84 	bl	b4a5c <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
   b4d54:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   b4d58:	d038      	beq.n	b4dcc <_ZN15Adafruit_BME28012readHumidityEv+0x88>
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
   b4d5a:	68e1      	ldr	r1, [r4, #12]

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   b4d5c:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
    v_x1_u32r = (t_fine - ((int32_t)76800));
   b4d60:	f5a1 3596 	sub.w	r5, r1, #76800	; 0x12c00
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   b4d64:	f9b4 1032 	ldrsh.w	r1, [r4, #50]	; 0x32
   b4d68:	0509      	lsls	r1, r1, #20
   b4d6a:	ebc1 3380 	rsb	r3, r1, r0, lsl #14
   b4d6e:	fb05 3312 	mls	r3, r5, r2, r3
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   b4d72:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   b4d76:	13da      	asrs	r2, r3, #15
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4d78:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b4d7c:	f994 1036 	ldrsb.w	r1, [r4, #54]	; 0x36
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4d80:	436b      	muls	r3, r5
   b4d82:	12db      	asrs	r3, r3, #11
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b4d84:	4369      	muls	r1, r5
   b4d86:	1289      	asrs	r1, r1, #10
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4d88:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b4d8c:	434b      	muls	r3, r1
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4d8e:	129b      	asrs	r3, r3, #10
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   b4d90:	f9b4 102e 	ldrsh.w	r1, [r4, #46]	; 0x2e
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4d94:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   b4d98:	434b      	muls	r3, r1
   b4d9a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   b4d9e:	139b      	asrs	r3, r3, #14
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   b4da0:	4353      	muls	r3, r2

    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   b4da2:	13da      	asrs	r2, r3, #15
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
   b4da4:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   b4da8:	4352      	muls	r2, r2
   b4daa:	11d2      	asrs	r2, r2, #7
   b4dac:	434a      	muls	r2, r1
   b4dae:	eba3 1322 	sub.w	r3, r3, r2, asr #4

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
   b4db2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
   b4db6:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   b4dba:	bfa8      	it	ge
   b4dbc:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
    float h = (v_x1_u32r>>12);
   b4dc0:	131b      	asrs	r3, r3, #12
   b4dc2:	ee00 3a10 	vmov	s0, r3
    return  h / 1024.0;
   b4dc6:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
}
   b4dca:	bd38      	pop	{r3, r4, r5, pc}
        return NAN;
   b4dcc:	ed9f 0a01 	vldr	s0, [pc, #4]	; b4dd4 <_ZN15Adafruit_BME28012readHumidityEv+0x90>
   b4dd0:	e7fb      	b.n	b4dca <_ZN15Adafruit_BME28012readHumidityEv+0x86>
   b4dd2:	bf00      	nop
   b4dd4:	7fc00000 	.word	0x7fc00000

000b4dd8 <_ZN15Adafruit_BME28012readPressureEv>:
float Adafruit_BME280::readPressure(void) {
   b4dd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b4ddc:	4605      	mov	r5, r0
    readTemperature(); // must be done first to get t_fine
   b4dde:	f7ff ff81 	bl	b4ce4 <_ZN15Adafruit_BME28015readTemperatureEv>
    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   b4de2:	21f7      	movs	r1, #247	; 0xf7
   b4de4:	4628      	mov	r0, r5
   b4de6:	f7ff ff13 	bl	b4c10 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   b4dea:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b4dee:	f000 80b6 	beq.w	b4f5e <_ZN15Adafruit_BME28012readPressureEv+0x186>
    var1 = ((int64_t)t_fine) - 128000;
   b4df2:	68e9      	ldr	r1, [r5, #12]
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b4df4:	f9b5 301c 	ldrsh.w	r3, [r5, #28]
    var1 = ((int64_t)t_fine) - 128000;
   b4df8:	ea4f 7ee1 	mov.w	lr, r1, asr #31
   b4dfc:	f5b1 31fa 	subs.w	r1, r1, #128000	; 0x1f400
   b4e00:	f14e 3eff 	adc.w	lr, lr, #4294967295	; 0xffffffff
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b4e04:	17dc      	asrs	r4, r3, #31
   b4e06:	fb03 f20e 	mul.w	r2, r3, lr
   b4e0a:	fb01 2204 	mla	r2, r1, r4, r2
   b4e0e:	fba3 3401 	umull	r3, r4, r3, r1
   b4e12:	4422      	add	r2, r4
   b4e14:	0312      	lsls	r2, r2, #12
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b4e16:	fba1 7801 	umull	r7, r8, r1, r1
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b4e1a:	031c      	lsls	r4, r3, #12
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b4e1c:	fb01 f60e 	mul.w	r6, r1, lr
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b4e20:	ea42 5213 	orr.w	r2, r2, r3, lsr #20
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   b4e24:	f9b5 301e 	ldrsh.w	r3, [r5, #30]
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b4e28:	eb08 0846 	add.w	r8, r8, r6, lsl #1
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   b4e2c:	ea4f 7ce3 	mov.w	ip, r3, asr #31
   b4e30:	fb03 f608 	mul.w	r6, r3, r8
   b4e34:	fb07 660c 	mla	r6, r7, ip, r6
   b4e38:	fba3 3c07 	umull	r3, ip, r3, r7
   b4e3c:	4466      	add	r6, ip
   b4e3e:	0a1b      	lsrs	r3, r3, #8
   b4e40:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
   b4e44:	191b      	adds	r3, r3, r4
   b4e46:	eb42 2226 	adc.w	r2, r2, r6, asr #8
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   b4e4a:	8b6e      	ldrh	r6, [r5, #26]
   b4e4c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
   b4e50:	fba3 3406 	umull	r3, r4, r3, r6
   b4e54:	fb06 4402 	mla	r4, r6, r2, r4
   b4e58:	17e3      	asrs	r3, r4, #31
   b4e5a:	1062      	asrs	r2, r4, #1
    if (var1 == 0) {
   b4e5c:	ea53 0464 	orrs.w	r4, r3, r4, asr #1
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   b4e60:	f04f 0c00 	mov.w	ip, #0
    if (var1 == 0) {
   b4e64:	d07e      	beq.n	b4f64 <_ZN15Adafruit_BME28012readPressureEv+0x18c>
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b4e66:	f9b5 4024 	ldrsh.w	r4, [r5, #36]	; 0x24
   b4e6a:	fb04 f608 	mul.w	r6, r4, r8
   b4e6e:	ea4f 79e4 	mov.w	r9, r4, asr #31
   b4e72:	fb07 6609 	mla	r6, r7, r9, r6
   b4e76:	fba4 4707 	umull	r4, r7, r4, r7
   b4e7a:	443e      	add	r6, r7
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   b4e7c:	f9b5 7022 	ldrsh.w	r7, [r5, #34]	; 0x22
   b4e80:	ea4f 78e7 	mov.w	r8, r7, asr #31
   b4e84:	fb07 fe0e 	mul.w	lr, r7, lr
   b4e88:	fb01 ee08 	mla	lr, r1, r8, lr
   b4e8c:	fba7 7101 	umull	r7, r1, r7, r1
   b4e90:	4471      	add	r1, lr
   b4e92:	0449      	lsls	r1, r1, #17
   b4e94:	ea41 31d7 	orr.w	r1, r1, r7, lsr #15
    adc_P >>= 4;
   b4e98:	1100      	asrs	r0, r0, #4
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   b4e9a:	047f      	lsls	r7, r7, #17
   b4e9c:	193f      	adds	r7, r7, r4
    p = 1048576 - adc_P;
   b4e9e:	f5c0 1480 	rsb	r4, r0, #1048576	; 0x100000
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   b4ea2:	eb46 0601 	adc.w	r6, r6, r1
    p = (((p<<31) - var2)*3125) / var1;
   b4ea6:	f004 4000 	and.w	r0, r4, #2147483648	; 0x80000000
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   b4eaa:	f9b5 1020 	ldrsh.w	r1, [r5, #32]
   b4eae:	eb1c 0707 	adds.w	r7, ip, r7
    p = (((p<<31) - var2)*3125) / var1;
   b4eb2:	ea40 0054 	orr.w	r0, r0, r4, lsr #1
   b4eb6:	07e4      	lsls	r4, r4, #31
   b4eb8:	1be4      	subs	r4, r4, r7
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   b4eba:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
    p = (((p<<31) - var2)*3125) / var1;
   b4ebe:	f640 4135 	movw	r1, #3125	; 0xc35
   b4ec2:	eb60 0606 	sbc.w	r6, r0, r6
   b4ec6:	fba4 0401 	umull	r0, r4, r4, r1
   b4eca:	fb01 4106 	mla	r1, r1, r6, r4
   b4ece:	f004 fe5b 	bl	b9b88 <__aeabi_ldivmod>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   b4ed2:	f9b5 202a 	ldrsh.w	r2, [r5, #42]	; 0x2a
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b4ed6:	f9b5 6028 	ldrsh.w	r6, [r5, #40]	; 0x28
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   b4eda:	ea4f 3c61 	mov.w	ip, r1, asr #13
   b4ede:	0b43      	lsrs	r3, r0, #13
   b4ee0:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
   b4ee4:	fb02 f70c 	mul.w	r7, r2, ip
   b4ee8:	17d4      	asrs	r4, r2, #31
   b4eea:	fb03 7704 	mla	r7, r3, r4, r7
   b4eee:	fba2 2403 	umull	r2, r4, r2, r3
   b4ef2:	443c      	add	r4, r7
   b4ef4:	fb02 f70c 	mul.w	r7, r2, ip
   b4ef8:	fb03 7704 	mla	r7, r3, r4, r7
   b4efc:	fba2 2303 	umull	r2, r3, r2, r3
   b4f00:	441f      	add	r7, r3
   b4f02:	0e53      	lsrs	r3, r2, #25
   b4f04:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b4f08:	181b      	adds	r3, r3, r0
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b4f0a:	ea4f 72e6 	mov.w	r2, r6, asr #31
   b4f0e:	fb06 f401 	mul.w	r4, r6, r1
    p = (((p<<31) - var2)*3125) / var1;
   b4f12:	4686      	mov	lr, r0
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b4f14:	eb41 6767 	adc.w	r7, r1, r7, asr #25
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b4f18:	fb02 4100 	mla	r1, r2, r0, r4
   b4f1c:	fba6 060e 	umull	r0, r6, r6, lr
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b4f20:	f9b5 4026 	ldrsh.w	r4, [r5, #38]	; 0x26
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b4f24:	4431      	add	r1, r6
   b4f26:	0cc0      	lsrs	r0, r0, #19
   b4f28:	ea40 3041 	orr.w	r0, r0, r1, lsl #13
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b4f2c:	1818      	adds	r0, r3, r0
   b4f2e:	ea4f 75e4 	mov.w	r5, r4, asr #31
   b4f32:	eb47 41e1 	adc.w	r1, r7, r1, asr #19
   b4f36:	0a00      	lsrs	r0, r0, #8
   b4f38:	012d      	lsls	r5, r5, #4
   b4f3a:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
   b4f3e:	ea45 7514 	orr.w	r5, r5, r4, lsr #28
   b4f42:	0124      	lsls	r4, r4, #4
   b4f44:	1820      	adds	r0, r4, r0
    return (float)p/256;
   b4f46:	eb45 2121 	adc.w	r1, r5, r1, asr #8
   b4f4a:	f004 fddf 	bl	b9b0c <__aeabi_l2f>
   b4f4e:	ed9f 0a07 	vldr	s0, [pc, #28]	; b4f6c <_ZN15Adafruit_BME28012readPressureEv+0x194>
   b4f52:	ee07 0a90 	vmov	s15, r0
   b4f56:	ee27 0a80 	vmul.f32	s0, s15, s0
}
   b4f5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return NAN;
   b4f5e:	ed9f 0a04 	vldr	s0, [pc, #16]	; b4f70 <_ZN15Adafruit_BME28012readPressureEv+0x198>
   b4f62:	e7fa      	b.n	b4f5a <_ZN15Adafruit_BME28012readPressureEv+0x182>
        return 0; // avoid exception caused by division by zero
   b4f64:	ed9f 0a03 	vldr	s0, [pc, #12]	; b4f74 <_ZN15Adafruit_BME28012readPressureEv+0x19c>
   b4f68:	e7f7      	b.n	b4f5a <_ZN15Adafruit_BME28012readPressureEv+0x182>
   b4f6a:	bf00      	nop
   b4f6c:	3b800000 	.word	0x3b800000
   b4f70:	7fc00000 	.word	0x7fc00000
   b4f74:	00000000 	.word	0x00000000

000b4f78 <_ZN15Adafruit_BME28012readAltitudeEf>:
    @param  seaLevel      Sea-level pressure in hPa
    @returns the altitude value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readAltitude(float seaLevel)
{
   b4f78:	b508      	push	{r3, lr}
   b4f7a:	ed2d 8b02 	vpush	{d8}
   b4f7e:	eeb0 8a40 	vmov.f32	s16, s0

    // Note that using the equation from wikipedia can give bad results
    // at high altitude. See this thread for more information:
    //  http://forums.adafruit.com/viewtopic.php?f=22&t=58064

    float atmospheric = readPressure() / 100.0F;
   b4f82:	f7ff ff29 	bl	b4dd8 <_ZN15Adafruit_BME28012readPressureEv>
   b4f86:	ed9f 7a16 	vldr	s14, [pc, #88]	; b4fe0 <_ZN15Adafruit_BME28012readAltitudeEf+0x68>
   b4f8a:	eec0 7a07 	vdiv.f32	s15, s0, s14
   b4f8e:	eec7 7a88 	vdiv.f32	s15, s15, s16
   b4f92:	ee17 0a90 	vmov	r0, s15
   b4f96:	f004 f991 	bl	b92bc <__aeabi_f2d>
   b4f9a:	ed9f 1b0d 	vldr	d1, [pc, #52]	; b4fd0 <_ZN15Adafruit_BME28012readAltitudeEf+0x58>
   b4f9e:	ec41 0b10 	vmov	d0, r0, r1
   b4fa2:	f002 ffa1 	bl	b7ee8 <pow>
    return 44330.0 * (1.0 - pow(atmospheric / seaLevel, 0.1903));
   b4fa6:	490f      	ldr	r1, [pc, #60]	; (b4fe4 <_ZN15Adafruit_BME28012readAltitudeEf+0x6c>)
   b4fa8:	ec53 2b10 	vmov	r2, r3, d0
   b4fac:	2000      	movs	r0, #0
   b4fae:	f004 f825 	bl	b8ffc <__aeabi_dsub>
   b4fb2:	a309      	add	r3, pc, #36	; (adr r3, b4fd8 <_ZN15Adafruit_BME28012readAltitudeEf+0x60>)
   b4fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4fb8:	f004 f9d8 	bl	b936c <__aeabi_dmul>
   b4fbc:	f004 fc86 	bl	b98cc <__aeabi_d2f>
}
   b4fc0:	ecbd 8b02 	vpop	{d8}
   b4fc4:	ee00 0a10 	vmov	s0, r0
   b4fc8:	bd08      	pop	{r3, pc}
   b4fca:	bf00      	nop
   b4fcc:	f3af 8000 	nop.w
   b4fd0:	1a36e2eb 	.word	0x1a36e2eb
   b4fd4:	3fc85bc0 	.word	0x3fc85bc0
   b4fd8:	00000000 	.word	0x00000000
   b4fdc:	40e5a540 	.word	0x40e5a540
   b4fe0:	42c80000 	.word	0x42c80000
   b4fe4:	3ff00000 	.word	0x3ff00000

000b4fe8 <_ZN15Adafruit_BME2804initEv>:
{
   b4fe8:	b530      	push	{r4, r5, lr}
   b4fea:	4604      	mov	r4, r0
    if (_cs == -1) {
   b4fec:	f990 0010 	ldrsb.w	r0, [r0, #16]
   b4ff0:	1c42      	adds	r2, r0, #1
{
   b4ff2:	b085      	sub	sp, #20
    if (_cs == -1) {
   b4ff4:	d119      	bne.n	b502a <_ZN15Adafruit_BME2804initEv+0x42>
        _wire -> begin();
   b4ff6:	6820      	ldr	r0, [r4, #0]
   b4ff8:	f001 fc7e 	bl	b68f8 <_ZN7TwoWire5beginEv>
    _sensorID = read8(BME280_REGISTER_CHIPID);
   b4ffc:	21d0      	movs	r1, #208	; 0xd0
   b4ffe:	4620      	mov	r0, r4
   b5000:	f7ff fcd0 	bl	b49a4 <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   b5004:	2860      	cmp	r0, #96	; 0x60
    _sensorID = read8(BME280_REGISTER_CHIPID);
   b5006:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   b5008:	d145      	bne.n	b5096 <_ZN15Adafruit_BME2804initEv+0xae>
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   b500a:	4620      	mov	r0, r4
   b500c:	22b6      	movs	r2, #182	; 0xb6
   b500e:	21e0      	movs	r1, #224	; 0xe0
   b5010:	f7ff fc2c 	bl	b486c <_ZN15Adafruit_BME2806write8Ehh>
    delay(300);
   b5014:	f44f 7096 	mov.w	r0, #300	; 0x12c
   b5018:	f001 f914 	bl	b6244 <delay>
    while (isReadingCalibration())
   b501c:	4620      	mov	r0, r4
   b501e:	f7ff fd15 	bl	b4a4c <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   b5022:	4605      	mov	r5, r0
   b5024:	b328      	cbz	r0, b5072 <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   b5026:	2064      	movs	r0, #100	; 0x64
   b5028:	e7f6      	b.n	b5018 <_ZN15Adafruit_BME2804initEv+0x30>
        digitalWrite(_cs, HIGH);
   b502a:	2101      	movs	r1, #1
   b502c:	b280      	uxth	r0, r0
   b502e:	f002 fd7e 	bl	b7b2e <digitalWrite>
        pinMode(_cs, OUTPUT);
   b5032:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b5036:	2101      	movs	r1, #1
   b5038:	b280      	uxth	r0, r0
   b503a:	f002 fd67 	bl	b7b0c <pinMode>
        if (_sck == -1) {
   b503e:	f994 0013 	ldrsb.w	r0, [r4, #19]
   b5042:	1c43      	adds	r3, r0, #1
   b5044:	d104      	bne.n	b5050 <_ZN15Adafruit_BME2804initEv+0x68>
        instance().begin();
   b5046:	f7ff fbad 	bl	b47a4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b504a:	f001 fe7b 	bl	b6d44 <_ZN8SPIClass5beginEv>
    }
   b504e:	e7d5      	b.n	b4ffc <_ZN15Adafruit_BME2804initEv+0x14>
            pinMode(_sck, OUTPUT);
   b5050:	2101      	movs	r1, #1
   b5052:	b280      	uxth	r0, r0
   b5054:	f002 fd5a 	bl	b7b0c <pinMode>
            pinMode(_mosi, OUTPUT);
   b5058:	f994 0011 	ldrsb.w	r0, [r4, #17]
   b505c:	2101      	movs	r1, #1
   b505e:	b280      	uxth	r0, r0
   b5060:	f002 fd54 	bl	b7b0c <pinMode>
            pinMode(_miso, INPUT);
   b5064:	f994 0012 	ldrsb.w	r0, [r4, #18]
   b5068:	2100      	movs	r1, #0
   b506a:	b280      	uxth	r0, r0
   b506c:	f002 fd4e 	bl	b7b0c <pinMode>
   b5070:	e7c4      	b.n	b4ffc <_ZN15Adafruit_BME2804initEv+0x14>
    readCoefficients(); // read trimming parameters, see DS 4.2.2
   b5072:	4620      	mov	r0, r4
   b5074:	f7ff fd5a 	bl	b4b2c <_ZN15Adafruit_BME28016readCoefficientsEv>
    setSampling(); // use defaults
   b5078:	2305      	movs	r3, #5
   b507a:	9300      	str	r3, [sp, #0]
   b507c:	461a      	mov	r2, r3
   b507e:	2103      	movs	r1, #3
   b5080:	4620      	mov	r0, r4
   b5082:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b5086:	f7ff fc43 	bl	b4910 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
    delay(100);
   b508a:	2064      	movs	r0, #100	; 0x64
   b508c:	f001 f8da 	bl	b6244 <delay>
    return true;
   b5090:	2001      	movs	r0, #1
}
   b5092:	b005      	add	sp, #20
   b5094:	bd30      	pop	{r4, r5, pc}
        return false;
   b5096:	2000      	movs	r0, #0
   b5098:	e7fb      	b.n	b5092 <_ZN15Adafruit_BME2804initEv+0xaa>

000b509a <_ZN15Adafruit_BME2805beginEv>:
    _i2caddr = BME280_ADDRESS;
   b509a:	2377      	movs	r3, #119	; 0x77
{
   b509c:	b510      	push	{r4, lr}
    _i2caddr = BME280_ADDRESS;
   b509e:	7103      	strb	r3, [r0, #4]
{
   b50a0:	4604      	mov	r4, r0
	_wire = &Wire;
   b50a2:	f002 fda5 	bl	b7bf0 <_Z19__fetch_global_Wirev>
   b50a6:	6020      	str	r0, [r4, #0]
	status = init();
   b50a8:	4620      	mov	r0, r4
   b50aa:	f7ff ff9d 	bl	b4fe8 <_ZN15Adafruit_BME2804initEv>
 	if(!status){
   b50ae:	b930      	cbnz	r0, b50be <_ZN15Adafruit_BME2805beginEv+0x24>
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
   b50b0:	2376      	movs	r3, #118	; 0x76
   b50b2:	7123      	strb	r3, [r4, #4]
 		status = init();
   b50b4:	4620      	mov	r0, r4
}
   b50b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 		status = init();
   b50ba:	f7ff bf95 	b.w	b4fe8 <_ZN15Adafruit_BME2804initEv>
}
   b50be:	bd10      	pop	{r4, pc}

000b50c0 <_ZN16AirQualitySensorC1Ei>:
const int AirQualitySensor::HIGH_POLLUTION = 1;
const int AirQualitySensor::LOW_POLLUTION  = 2;
const int AirQualitySensor::FRESH_AIR      = 3;

AirQualitySensor::AirQualitySensor(int pin) 
: _pin(pin), _voltageSum(0), _volSumCount(0) {
   b50c0:	2200      	movs	r2, #0
   b50c2:	e9c0 2204 	strd	r2, r2, [r0, #16]
   b50c6:	6001      	str	r1, [r0, #0]
    // do nothing
}
   b50c8:	4770      	bx	lr
	...

000b50cc <_ZN16AirQualitySensor21updateStandardVoltageEv>:

int AirQualitySensor::getValue(void) {
    return _currentVoltage;
}

void AirQualitySensor::updateStandardVoltage(void) {
   b50cc:	b510      	push	{r4, lr}
   b50ce:	4604      	mov	r4, r0
   b50d0:	f000 fddc 	bl	b5c8c <HAL_Timer_Get_Milli_Seconds>
    if (millis() - _lastStdVolUpdated > 500000) {
   b50d4:	69a3      	ldr	r3, [r4, #24]
   b50d6:	1ac0      	subs	r0, r0, r3
   b50d8:	4b07      	ldr	r3, [pc, #28]	; (b50f8 <_ZN16AirQualitySensor21updateStandardVoltageEv+0x2c>)
   b50da:	4298      	cmp	r0, r3
   b50dc:	d90a      	bls.n	b50f4 <_ZN16AirQualitySensor21updateStandardVoltageEv+0x28>
        _standardVoltage = _voltageSum / _volSumCount;
   b50de:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   b50e2:	fb93 f3f2 	sdiv	r3, r3, r2
   b50e6:	60e3      	str	r3, [r4, #12]
   b50e8:	f000 fdd0 	bl	b5c8c <HAL_Timer_Get_Milli_Seconds>
        _lastStdVolUpdated = millis();

        _voltageSum = 0;
   b50ec:	2300      	movs	r3, #0
        _volSumCount = 0;
   b50ee:	e9c4 3304 	strd	r3, r3, [r4, #16]
        _lastStdVolUpdated = millis();
   b50f2:	61a0      	str	r0, [r4, #24]
    }
}
   b50f4:	bd10      	pop	{r4, pc}
   b50f6:	bf00      	nop
   b50f8:	0007a120 	.word	0x0007a120

000b50fc <_ZN16AirQualitySensor5slopeEv>:
int AirQualitySensor::slope(void) {
   b50fc:	b510      	push	{r4, lr}
    _lastVoltage = _currentVoltage;
   b50fe:	6883      	ldr	r3, [r0, #8]
   b5100:	6043      	str	r3, [r0, #4]
int AirQualitySensor::slope(void) {
   b5102:	4604      	mov	r4, r0
    _currentVoltage = analogRead(_pin);
   b5104:	8800      	ldrh	r0, [r0, #0]
   b5106:	f002 fd3e 	bl	b7b86 <analogRead>
    _voltageSum += _currentVoltage;
   b510a:	6923      	ldr	r3, [r4, #16]
    _currentVoltage = analogRead(_pin);
   b510c:	60a0      	str	r0, [r4, #8]
    _voltageSum += _currentVoltage;
   b510e:	4418      	add	r0, r3
    _volSumCount += 1;
   b5110:	6963      	ldr	r3, [r4, #20]
    _voltageSum += _currentVoltage;
   b5112:	6120      	str	r0, [r4, #16]
    _volSumCount += 1;
   b5114:	3301      	adds	r3, #1
   b5116:	6163      	str	r3, [r4, #20]
    updateStandardVoltage();
   b5118:	4620      	mov	r0, r4
   b511a:	f7ff ffd7 	bl	b50cc <_ZN16AirQualitySensor21updateStandardVoltageEv>
    if (_currentVoltage - _lastVoltage > 400 || _currentVoltage > 700) {
   b511e:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   b5122:	1a51      	subs	r1, r2, r1
   b5124:	f5b1 7fc8 	cmp.w	r1, #400	; 0x190
   b5128:	dc10      	bgt.n	b514c <_ZN16AirQualitySensor5slopeEv+0x50>
   b512a:	f5b2 7f2f 	cmp.w	r2, #700	; 0x2bc
   b512e:	dc0d      	bgt.n	b514c <_ZN16AirQualitySensor5slopeEv+0x50>
             || _currentVoltage - _standardVoltage > 150) {
   b5130:	68e3      	ldr	r3, [r4, #12]
   b5132:	1ad3      	subs	r3, r2, r3
   b5134:	2b96      	cmp	r3, #150	; 0x96
   b5136:	dc0b      	bgt.n	b5150 <_ZN16AirQualitySensor5slopeEv+0x54>
    else if ((_currentVoltage - _lastVoltage > 200 && _currentVoltage < 700)
   b5138:	29c8      	cmp	r1, #200	; 0xc8
   b513a:	dd02      	ble.n	b5142 <_ZN16AirQualitySensor5slopeEv+0x46>
   b513c:	f5b2 7f2f 	cmp.w	r2, #700	; 0x2bc
   b5140:	d108      	bne.n	b5154 <_ZN16AirQualitySensor5slopeEv+0x58>
        return AirQualitySensor::FRESH_AIR;
   b5142:	2b32      	cmp	r3, #50	; 0x32
   b5144:	bfcc      	ite	gt
   b5146:	2002      	movgt	r0, #2
   b5148:	2003      	movle	r0, #3
}
   b514a:	bd10      	pop	{r4, pc}
        return AirQualitySensor::FORCE_SIGNAL;
   b514c:	2000      	movs	r0, #0
   b514e:	e7fc      	b.n	b514a <_ZN16AirQualitySensor5slopeEv+0x4e>
        return AirQualitySensor::HIGH_POLLUTION;
   b5150:	2001      	movs	r0, #1
   b5152:	e7fa      	b.n	b514a <_ZN16AirQualitySensor5slopeEv+0x4e>
        return AirQualitySensor::LOW_POLLUTION;
   b5154:	2002      	movs	r0, #2
   b5156:	e7f8      	b.n	b514a <_ZN16AirQualitySensor5slopeEv+0x4e>

000b5158 <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   b5158:	b510      	push	{r4, lr}
   b515a:	4b05      	ldr	r3, [pc, #20]	; (b5170 <_ZN10JsonBufferD1Ev+0x18>)
   b515c:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   b515e:	7c03      	ldrb	r3, [r0, #16]
JsonBuffer::~JsonBuffer() {
   b5160:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   b5162:	b91b      	cbnz	r3, b516c <_ZN10JsonBufferD1Ev+0x14>
   b5164:	6840      	ldr	r0, [r0, #4]
   b5166:	b108      	cbz	r0, b516c <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   b5168:	f001 f82c 	bl	b61c4 <free>
	}
}
   b516c:	4620      	mov	r0, r4
   b516e:	bd10      	pop	{r4, pc}
   b5170:	000ba2e4 	.word	0x000ba2e4

000b5174 <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
   b5174:	b510      	push	{r4, lr}
   b5176:	4604      	mov	r4, r0
}
   b5178:	f7ff ffee 	bl	b5158 <_ZN10JsonBufferD1Ev>
   b517c:	4620      	mov	r0, r4
   b517e:	2114      	movs	r1, #20
   b5180:	f7fe ff8f 	bl	b40a2 <_ZdlPvj>
   b5184:	4620      	mov	r0, r4
   b5186:	bd10      	pop	{r4, pc}

000b5188 <_ZN10JsonWriterD1Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   b5188:	b510      	push	{r4, lr}
   b518a:	4b03      	ldr	r3, [pc, #12]	; (b5198 <_ZN10JsonWriterD1Ev+0x10>)
   b518c:	6003      	str	r3, [r0, #0]
   b518e:	4604      	mov	r4, r0
   b5190:	f7ff ffe2 	bl	b5158 <_ZN10JsonBufferD1Ev>

}
   b5194:	4620      	mov	r0, r4
   b5196:	bd10      	pop	{r4, pc}
   b5198:	000ba2f4 	.word	0x000ba2f4

000b519c <_ZN10JsonWriterD0Ev>:
JsonWriter::~JsonWriter() {
   b519c:	b510      	push	{r4, lr}
   b519e:	4604      	mov	r4, r0
}
   b51a0:	f7ff fff2 	bl	b5188 <_ZN10JsonWriterD1Ev>
   b51a4:	4620      	mov	r0, r4
   b51a6:	2130      	movs	r1, #48	; 0x30
   b51a8:	f7fe ff7b 	bl	b40a2 <_ZdlPvj>
   b51ac:	4620      	mov	r0, r4
   b51ae:	bd10      	pop	{r4, pc}

000b51b0 <_ZN10JsonWriter4initEv>:
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
   b51b0:	2300      	movs	r3, #0

	contextIndex = 0;
	context[contextIndex].isFirst = true;
   b51b2:	2201      	movs	r2, #1
	offset = 0;
   b51b4:	60c3      	str	r3, [r0, #12]
	contextIndex = 0;
   b51b6:	6143      	str	r3, [r0, #20]
	context[contextIndex].isFirst = true;
   b51b8:	8302      	strh	r2, [r0, #24]
	context[contextIndex].terminator = 0;

	truncated = false;
   b51ba:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a

}
   b51be:	4770      	bx	lr

000b51c0 <_ZN10JsonWriterC1EPcj>:
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   b51c0:	e9c0 1201 	strd	r1, r2, [r0, #4]
JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   b51c4:	b508      	push	{r3, lr}
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   b51c6:	2200      	movs	r2, #0
   b51c8:	60c2      	str	r2, [r0, #12]
   b51ca:	2201      	movs	r2, #1
   b51cc:	7402      	strb	r2, [r0, #16]
JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   b51ce:	4a04      	ldr	r2, [pc, #16]	; (b51e0 <_ZN10JsonWriterC1EPcj+0x20>)
   b51d0:	6002      	str	r2, [r0, #0]
   b51d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b51d6:	62c2      	str	r2, [r0, #44]	; 0x2c
	init();
   b51d8:	f7ff ffea 	bl	b51b0 <_ZN10JsonWriter4initEv>
}
   b51dc:	bd08      	pop	{r3, pc}
   b51de:	bf00      	nop
   b51e0:	000ba2f4 	.word	0x000ba2f4

000b51e4 <_ZN10JsonWriter10insertCharEc>:
	}
}


void JsonWriter::insertChar(char ch) {
	if (offset < bufferLen) {
   b51e4:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
void JsonWriter::insertChar(char ch) {
   b51e8:	b510      	push	{r4, lr}
	if (offset < bufferLen) {
   b51ea:	4293      	cmp	r3, r2
		buffer[offset++] = ch;
   b51ec:	bf3f      	itttt	cc
   b51ee:	6842      	ldrcc	r2, [r0, #4]
   b51f0:	1c5c      	addcc	r4, r3, #1
   b51f2:	60c4      	strcc	r4, [r0, #12]
   b51f4:	54d1      	strbcc	r1, [r2, r3]
	}
	else {
		truncated = true;
   b51f6:	bf24      	itt	cs
   b51f8:	2301      	movcs	r3, #1
   b51fa:	f880 302a 	strbcs.w	r3, [r0, #42]	; 0x2a
	}
}
   b51fe:	bd10      	pop	{r4, pc}

000b5200 <_ZN10JsonWriter19finishObjectOrArrayEv>:
void JsonWriter::finishObjectOrArray() {
   b5200:	b510      	push	{r4, lr}
	if (contextIndex > 0) {
   b5202:	6943      	ldr	r3, [r0, #20]
void JsonWriter::finishObjectOrArray() {
   b5204:	4604      	mov	r4, r0
	if (contextIndex > 0) {
   b5206:	b143      	cbz	r3, b521a <_ZN10JsonWriter19finishObjectOrArrayEv+0x1a>
		if (context[contextIndex].terminator != 0) {
   b5208:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   b520c:	7e59      	ldrb	r1, [r3, #25]
   b520e:	b109      	cbz	r1, b5214 <_ZN10JsonWriter19finishObjectOrArrayEv+0x14>
			insertChar(context[contextIndex].terminator);
   b5210:	f7ff ffe8 	bl	b51e4 <_ZN10JsonWriter10insertCharEc>
		contextIndex--;
   b5214:	6963      	ldr	r3, [r4, #20]
   b5216:	3b01      	subs	r3, #1
   b5218:	6163      	str	r3, [r4, #20]
	if (offset < bufferLen) {
   b521a:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
		buffer[offset] = 0;
   b521e:	6863      	ldr	r3, [r4, #4]
	if (offset < bufferLen) {
   b5220:	4288      	cmp	r0, r1
   b5222:	f04f 0200 	mov.w	r2, #0
		buffer[bufferLen - 1] = 0;
   b5226:	bf2a      	itet	cs
   b5228:	185b      	addcs	r3, r3, r1
		buffer[offset] = 0;
   b522a:	541a      	strbcc	r2, [r3, r0]
		buffer[bufferLen - 1] = 0;
   b522c:	f803 2c01 	strbcs.w	r2, [r3, #-1]
}
   b5230:	bd10      	pop	{r4, pc}

000b5232 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>:
	va_start(ap, fmt);
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   b5232:	b570      	push	{r4, r5, r6, lr}
   b5234:	4604      	mov	r4, r0
	size_t spaceAvailable = bufferLen - offset;
   b5236:	e9d0 5002 	ldrd	r5, r0, [r0, #8]

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   b523a:	6866      	ldr	r6, [r4, #4]
	size_t spaceAvailable = bufferLen - offset;
   b523c:	1a2d      	subs	r5, r5, r0
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   b523e:	4613      	mov	r3, r2
	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   b5240:	4430      	add	r0, r6
   b5242:	460a      	mov	r2, r1
   b5244:	4629      	mov	r1, r5
   b5246:	f000 ffcd 	bl	b61e4 <vsnprintf>
	if (count <= spaceAvailable) {
   b524a:	4285      	cmp	r5, r0
		offset += count;
   b524c:	bf2d      	iteet	cs
   b524e:	68e3      	ldrcs	r3, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
   b5250:	68a3      	ldrcc	r3, [r4, #8]
   b5252:	60e3      	strcc	r3, [r4, #12]
		offset += count;
   b5254:	18c0      	addcs	r0, r0, r3
		truncated = true;
   b5256:	bf36      	itet	cc
   b5258:	2301      	movcc	r3, #1
		offset += count;
   b525a:	60e0      	strcs	r0, [r4, #12]
		truncated = true;
   b525c:	f884 302a 	strbcc.w	r3, [r4, #42]	; 0x2a
	}
}
   b5260:	bd70      	pop	{r4, r5, r6, pc}

000b5262 <_ZN10JsonWriter13insertsprintfEPKcz>:
void JsonWriter::insertsprintf(const char *fmt, ...) {
   b5262:	b40e      	push	{r1, r2, r3}
   b5264:	b503      	push	{r0, r1, lr}
   b5266:	aa03      	add	r2, sp, #12
   b5268:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, fmt);
   b526c:	9201      	str	r2, [sp, #4]
	insertvsprintf(fmt, ap);
   b526e:	f7ff ffe0 	bl	b5232 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>
}
   b5272:	b002      	add	sp, #8
   b5274:	f85d eb04 	ldr.w	lr, [sp], #4
   b5278:	b003      	add	sp, #12
   b527a:	4770      	bx	lr

000b527c <_ZN10JsonWriter12insertStringEPKcb>:
void JsonWriter::insertString(const char *s, bool quoted) {
   b527c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5280:	4604      	mov	r4, r0
   b5282:	460e      	mov	r6, r1
	if (quoted) {
   b5284:	4617      	mov	r7, r2
   b5286:	b112      	cbz	r2, b528e <_ZN10JsonWriter12insertStringEPKcb+0x12>
		insertChar('"');
   b5288:	2122      	movs	r1, #34	; 0x22
   b528a:	f7ff ffab 	bl	b51e4 <_ZN10JsonWriter10insertCharEc>
				insertsprintf("\\u%04X", utf16);
   b528e:	f8df 810c 	ldr.w	r8, [pc, #268]	; b539c <_ZN10JsonWriter12insertStringEPKcb+0x120>
void JsonWriter::insertString(const char *s, bool quoted) {
   b5292:	2500      	movs	r5, #0
	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   b5294:	5d71      	ldrb	r1, [r6, r5]
   b5296:	eb06 0905 	add.w	r9, r6, r5
   b529a:	2900      	cmp	r1, #0
   b529c:	d074      	beq.n	b5388 <_ZN10JsonWriter12insertStringEPKcb+0x10c>
   b529e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   b52a2:	429a      	cmp	r2, r3
   b52a4:	d270      	bcs.n	b5388 <_ZN10JsonWriter12insertStringEPKcb+0x10c>
		if (s[ii] & 0x80) {
   b52a6:	060b      	lsls	r3, r1, #24
   b52a8:	d534      	bpl.n	b5314 <_ZN10JsonWriter12insertStringEPKcb+0x98>
			if (((s[ii] & 0b11110000) == 0b11100000) && ((s[ii+1] & 0b11000000) == 0b10000000) && ((s[ii+2] & 0b11000000) == 0b10000000)) {
   b52aa:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
   b52ae:	2be0      	cmp	r3, #224	; 0xe0
   b52b0:	f105 0901 	add.w	r9, r5, #1
   b52b4:	d11d      	bne.n	b52f2 <_ZN10JsonWriter12insertStringEPKcb+0x76>
   b52b6:	f816 2009 	ldrb.w	r2, [r6, r9]
   b52ba:	f002 03c0 	and.w	r3, r2, #192	; 0xc0
   b52be:	2b80      	cmp	r3, #128	; 0x80
   b52c0:	d139      	bne.n	b5336 <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b52c2:	f105 0902 	add.w	r9, r5, #2
   b52c6:	f816 3009 	ldrb.w	r3, [r6, r9]
   b52ca:	f003 00c0 	and.w	r0, r3, #192	; 0xc0
   b52ce:	2880      	cmp	r0, #128	; 0x80
   b52d0:	d131      	bne.n	b5336 <_ZN10JsonWriter12insertStringEPKcb+0xba>
				uint16_t utf16 = ((s[ii] & 0b1111) << 12) | ((s[ii+1] & 0b111111) << 6) | (s[ii+2] & 0b111111);
   b52d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   b52d6:	0192      	lsls	r2, r2, #6
   b52d8:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
   b52dc:	f402 627c 	and.w	r2, r2, #4032	; 0xfc0
   b52e0:	431a      	orrs	r2, r3
				insertsprintf("\\u%04X", utf16);
   b52e2:	b292      	uxth	r2, r2
				insertsprintf("\\u%04X", utf16);
   b52e4:	4641      	mov	r1, r8
   b52e6:	4620      	mov	r0, r4
   b52e8:	f7ff ffbb 	bl	b5262 <_ZN10JsonWriter13insertsprintfEPKcz>
				ii++; // plus one more in loop increment
   b52ec:	464d      	mov	r5, r9
	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   b52ee:	3501      	adds	r5, #1
   b52f0:	e7d0      	b.n	b5294 <_ZN10JsonWriter12insertStringEPKcb+0x18>
			if (((s[ii] & 0b11100000) == 0b11000000) && ((s[ii+1] & 0b11000000) == 0b10000000)) {
   b52f2:	f001 03e0 	and.w	r3, r1, #224	; 0xe0
   b52f6:	2bc0      	cmp	r3, #192	; 0xc0
   b52f8:	d11d      	bne.n	b5336 <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b52fa:	f816 3009 	ldrb.w	r3, [r6, r9]
   b52fe:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   b5302:	2a80      	cmp	r2, #128	; 0x80
   b5304:	d117      	bne.n	b5336 <_ZN10JsonWriter12insertStringEPKcb+0xba>
				uint16_t utf16 = ((s[ii] & 0b11111) << 6) | (s[ii+1] & 0b111111);
   b5306:	0189      	lsls	r1, r1, #6
   b5308:	f401 62f8 	and.w	r2, r1, #1984	; 0x7c0
   b530c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
				insertsprintf("\\u%04X", utf16);
   b5310:	431a      	orrs	r2, r3
   b5312:	e7e7      	b.n	b52e4 <_ZN10JsonWriter12insertStringEPKcb+0x68>
			switch(s[ii]) {
   b5314:	290d      	cmp	r1, #13
   b5316:	d80a      	bhi.n	b532e <_ZN10JsonWriter12insertStringEPKcb+0xb2>
   b5318:	2907      	cmp	r1, #7
   b531a:	d90c      	bls.n	b5336 <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b531c:	f1a1 0308 	sub.w	r3, r1, #8
   b5320:	2b05      	cmp	r3, #5
   b5322:	d808      	bhi.n	b5336 <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b5324:	e8df f003 	tbb	[pc, r3]
   b5328:	07172309 	.word	0x07172309
   b532c:	1d11      	.short	0x1d11
   b532e:	2922      	cmp	r1, #34	; 0x22
   b5330:	d023      	beq.n	b537a <_ZN10JsonWriter12insertStringEPKcb+0xfe>
   b5332:	295c      	cmp	r1, #92	; 0x5c
   b5334:	d021      	beq.n	b537a <_ZN10JsonWriter12insertStringEPKcb+0xfe>
				insertChar(s[ii]);
   b5336:	4620      	mov	r0, r4
   b5338:	e004      	b.n	b5344 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b533a:	215c      	movs	r1, #92	; 0x5c
   b533c:	4620      	mov	r0, r4
   b533e:	f7ff ff51 	bl	b51e4 <_ZN10JsonWriter10insertCharEc>
				insertChar('b');
   b5342:	2162      	movs	r1, #98	; 0x62
				insertChar(s[ii]);
   b5344:	f7ff ff4e 	bl	b51e4 <_ZN10JsonWriter10insertCharEc>
				break;
   b5348:	e7d1      	b.n	b52ee <_ZN10JsonWriter12insertStringEPKcb+0x72>
				insertChar('\\');
   b534a:	215c      	movs	r1, #92	; 0x5c
   b534c:	4620      	mov	r0, r4
   b534e:	f7ff ff49 	bl	b51e4 <_ZN10JsonWriter10insertCharEc>
				insertChar('f');
   b5352:	2166      	movs	r1, #102	; 0x66
   b5354:	e7f6      	b.n	b5344 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b5356:	215c      	movs	r1, #92	; 0x5c
   b5358:	4620      	mov	r0, r4
   b535a:	f7ff ff43 	bl	b51e4 <_ZN10JsonWriter10insertCharEc>
				insertChar('n');
   b535e:	216e      	movs	r1, #110	; 0x6e
   b5360:	e7f0      	b.n	b5344 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b5362:	215c      	movs	r1, #92	; 0x5c
   b5364:	4620      	mov	r0, r4
   b5366:	f7ff ff3d 	bl	b51e4 <_ZN10JsonWriter10insertCharEc>
				insertChar('r');
   b536a:	2172      	movs	r1, #114	; 0x72
   b536c:	e7ea      	b.n	b5344 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b536e:	215c      	movs	r1, #92	; 0x5c
   b5370:	4620      	mov	r0, r4
   b5372:	f7ff ff37 	bl	b51e4 <_ZN10JsonWriter10insertCharEc>
				insertChar('t');
   b5376:	2174      	movs	r1, #116	; 0x74
   b5378:	e7e4      	b.n	b5344 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b537a:	215c      	movs	r1, #92	; 0x5c
   b537c:	4620      	mov	r0, r4
   b537e:	f7ff ff31 	bl	b51e4 <_ZN10JsonWriter10insertCharEc>
				insertChar(s[ii]);
   b5382:	f899 1000 	ldrb.w	r1, [r9]
   b5386:	e7dd      	b.n	b5344 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
	if (quoted) {
   b5388:	b12f      	cbz	r7, b5396 <_ZN10JsonWriter12insertStringEPKcb+0x11a>
		insertChar('"');
   b538a:	4620      	mov	r0, r4
   b538c:	2122      	movs	r1, #34	; 0x22
}
   b538e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		insertChar('"');
   b5392:	f7ff bf27 	b.w	b51e4 <_ZN10JsonWriter10insertCharEc>
}
   b5396:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b539a:	bf00      	nop
   b539c:	000ba2c8 	.word	0x000ba2c8

000b53a0 <_ZN10JsonWriter20insertCheckSeparatorEv>:

void JsonWriter::insertCheckSeparator() {
	if (context[contextIndex].isFirst) {
   b53a0:	6942      	ldr	r2, [r0, #20]
   b53a2:	eb00 0342 	add.w	r3, r0, r2, lsl #1
   b53a6:	7e1a      	ldrb	r2, [r3, #24]
   b53a8:	b112      	cbz	r2, b53b0 <_ZN10JsonWriter20insertCheckSeparatorEv+0x10>
		context[contextIndex].isFirst = false;
   b53aa:	2200      	movs	r2, #0
   b53ac:	761a      	strb	r2, [r3, #24]
	}
	else {
		insertChar(',');
	}
}
   b53ae:	4770      	bx	lr
		insertChar(',');
   b53b0:	212c      	movs	r1, #44	; 0x2c
   b53b2:	f7ff bf17 	b.w	b51e4 <_ZN10JsonWriter10insertCharEc>

000b53b6 <_ZN10JsonWriter18startObjectOrArrayEcc>:
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   b53b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   b53b8:	6943      	ldr	r3, [r0, #20]
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   b53ba:	9101      	str	r1, [sp, #4]
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   b53bc:	3301      	adds	r3, #1
   b53be:	2b08      	cmp	r3, #8
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   b53c0:	4616      	mov	r6, r2
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   b53c2:	d80f      	bhi.n	b53e4 <_ZN10JsonWriter18startObjectOrArrayEcc+0x2e>
	insertCheckSeparator();
   b53c4:	f7ff ffec 	bl	b53a0 <_ZN10JsonWriter20insertCheckSeparatorEv>
	contextIndex++;
   b53c8:	6943      	ldr	r3, [r0, #20]
	insertChar(startChar);
   b53ca:	9901      	ldr	r1, [sp, #4]
   b53cc:	eb00 0443 	add.w	r4, r0, r3, lsl #1
	contextIndex++;
   b53d0:	1c5a      	adds	r2, r3, #1
	context[contextIndex].isFirst = true;
   b53d2:	2501      	movs	r5, #1
	contextIndex++;
   b53d4:	6142      	str	r2, [r0, #20]
	context[contextIndex].isFirst = true;
   b53d6:	76a5      	strb	r5, [r4, #26]
	context[contextIndex].terminator = endChar;
   b53d8:	76e6      	strb	r6, [r4, #27]
	insertChar(startChar);
   b53da:	f7ff ff03 	bl	b51e4 <_ZN10JsonWriter10insertCharEc>
   b53de:	4628      	mov	r0, r5
}
   b53e0:	b002      	add	sp, #8
   b53e2:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   b53e4:	2000      	movs	r0, #0
   b53e6:	e7fb      	b.n	b53e0 <_ZN10JsonWriter18startObjectOrArrayEcc+0x2a>

000b53e8 <_ZN10JsonWriter11insertValueEd>:
	}
	else {
		insertsprintf("%f", value);
	}
}
void JsonWriter::insertValue(double value) {
   b53e8:	b507      	push	{r0, r1, r2, lr}
	if (floatPlaces >= 0) {
   b53ea:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   b53ec:	2900      	cmp	r1, #0
void JsonWriter::insertValue(double value) {
   b53ee:	ec53 2b10 	vmov	r2, r3, d0
	if (floatPlaces >= 0) {
   b53f2:	db08      	blt.n	b5406 <_ZN10JsonWriter11insertValueEd+0x1e>
		insertsprintf("%.*lf", floatPlaces, value);
   b53f4:	460a      	mov	r2, r1
   b53f6:	ed8d 0b00 	vstr	d0, [sp]
   b53fa:	4906      	ldr	r1, [pc, #24]	; (b5414 <_ZN10JsonWriter11insertValueEd+0x2c>)
   b53fc:	f7ff ff31 	bl	b5262 <_ZN10JsonWriter13insertsprintfEPKcz>
	}
	else {
		insertsprintf("%lf", value);
	}
}
   b5400:	b003      	add	sp, #12
   b5402:	f85d fb04 	ldr.w	pc, [sp], #4
		insertsprintf("%lf", value);
   b5406:	4904      	ldr	r1, [pc, #16]	; (b5418 <_ZN10JsonWriter11insertValueEd+0x30>)
}
   b5408:	b003      	add	sp, #12
   b540a:	f85d eb04 	ldr.w	lr, [sp], #4
		insertsprintf("%lf", value);
   b540e:	f7ff bf28 	b.w	b5262 <_ZN10JsonWriter13insertsprintfEPKcz>
   b5412:	bf00      	nop
   b5414:	000ba2cf 	.word	0x000ba2cf
   b5418:	000ba2d5 	.word	0x000ba2d5

000b541c <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
   b541c:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
   b5420:	b510      	push	{r4, lr}
   b5422:	4604      	mov	r4, r0
            this->mqtt = mqtt;
   b5424:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
   b5426:	b113      	cbz	r3, b542e <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
   b5428:	6d88      	ldr	r0, [r1, #88]	; 0x58
   b542a:	f000 fc0f 	bl	b5c4c <os_mutex_lock>
#endif
#endif
#endif
        }
   b542e:	4620      	mov	r0, r4
   b5430:	bd10      	pop	{r4, pc}

000b5432 <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
   b5432:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
   b5434:	6803      	ldr	r3, [r0, #0]
   b5436:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
        ~MutexLocker() {
   b543a:	4604      	mov	r4, r0
            if (mqtt->thread)
   b543c:	b112      	cbz	r2, b5444 <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
   b543e:	6d98      	ldr	r0, [r3, #88]	; 0x58
   b5440:	f000 fc0c 	bl	b5c5c <os_mutex_unlock>
#endif
#endif
#endif
        }
   b5444:	4620      	mov	r0, r4
   b5446:	bd10      	pop	{r4, pc}

000b5448 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(const char* domain, const uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
   b5448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b544a:	461f      	mov	r7, r3
   b544c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b5450:	4604      	mov	r4, r0
   b5452:	460d      	mov	r5, r1
   b5454:	4616      	mov	r6, r2
    if (thread) {
   b5456:	b12b      	cbz	r3, b5464 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x1c>
        this->thread = true;
   b5458:	2301      	movs	r3, #1
   b545a:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        os_mutex_create(&mutex_lock);
   b545e:	3058      	adds	r0, #88	; 0x58
   b5460:	f000 fbec 	bl	b5c3c <os_mutex_create>
    }
    this->callback = callback;
   b5464:	9b08      	ldr	r3, [sp, #32]
   b5466:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
   b5468:	2300      	movs	r3, #0
   b546a:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
   b546c:	b106      	cbz	r6, b5470 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x28>
        this->ip = ip;
   b546e:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
   b5470:	b125      	cbz	r5, b547c <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x34>
        this->domain = domain;
   b5472:	4629      	mov	r1, r5
   b5474:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b5478:	f001 fd7f 	bl	b6f7a <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   b547c:	9b06      	ldr	r3, [sp, #24]
   b547e:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b5480:	9b07      	ldr	r3, [sp, #28]
    if (buffer != NULL)
   b5482:	69e0      	ldr	r0, [r4, #28]
    this->port = port;
   b5484:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b5488:	2bff      	cmp	r3, #255	; 0xff
   b548a:	bfb8      	it	lt
   b548c:	23ff      	movlt	r3, #255	; 0xff
   b548e:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   b5492:	b108      	cbz	r0, b5498 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x50>
      delete[] buffer;
   b5494:	f7fe fe03 	bl	b409e <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   b5498:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   b549c:	f7fe fdfd 	bl	b409a <_Znaj>
   b54a0:	61e0      	str	r0, [r4, #28]
}
   b54a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b54a4 <_ZN4MQTTC1EPKctPFvPcPhjEb>:
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b54a4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b54a8:	4604      	mov	r4, r0
            bool thread) {
   b54aa:	2500      	movs	r5, #0
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b54ac:	4617      	mov	r7, r2
   b54ae:	4698      	mov	r8, r3
   b54b0:	460e      	mov	r6, r1
            bool thread) {
   b54b2:	f002 f899 	bl	b75e8 <_ZN9TCPClientC1Ev>
   b54b6:	490d      	ldr	r1, [pc, #52]	; (b54ec <_ZN4MQTTC1EPKctPFvPcPhjEb+0x48>)
   b54b8:	61e5      	str	r5, [r4, #28]
   b54ba:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b54be:	f001 fd2e 	bl	b6f1e <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b54c2:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
            bool thread) {
   b54c6:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b54c8:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b54cc:	22ff      	movs	r2, #255	; 0xff
   b54ce:	230f      	movs	r3, #15
   b54d0:	e9cd 3200 	strd	r3, r2, [sp]
   b54d4:	4620      	mov	r0, r4
            bool thread) {
   b54d6:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b54da:	463b      	mov	r3, r7
   b54dc:	462a      	mov	r2, r5
   b54de:	4631      	mov	r1, r6
   b54e0:	f7ff ffb2 	bl	b5448 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>
}
   b54e4:	4620      	mov	r0, r4
   b54e6:	b004      	add	sp, #16
   b54e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b54ec:	000ba17c 	.word	0x000ba17c

000b54f0 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   b54f0:	b510      	push	{r4, lr}
   b54f2:	4604      	mov	r4, r0
    while(!_client.available()) {}
   b54f4:	4620      	mov	r0, r4
   b54f6:	f001 ffd3 	bl	b74a0 <_ZN9TCPClient9availableEv>
   b54fa:	2800      	cmp	r0, #0
   b54fc:	d0fa      	beq.n	b54f4 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   b54fe:	4620      	mov	r0, r4
   b5500:	f001 fdb8 	bl	b7074 <_ZN9TCPClient4readEv>
}
   b5504:	b2c0      	uxtb	r0, r0
   b5506:	bd10      	pop	{r4, pc}

000b5508 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   b5508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b550c:	4605      	mov	r5, r0
   b550e:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   b5510:	f7ff ffee 	bl	b54f0 <_ZN4MQTT8readByteEv>
   b5514:	69eb      	ldr	r3, [r5, #28]
   b5516:	7018      	strb	r0, [r3, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   b5518:	69eb      	ldr	r3, [r5, #28]
   b551a:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   b551e:	f04f 0901 	mov.w	r9, #1
   b5522:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   b5526:	2700      	movs	r7, #0
    buffer[len++] = readByte();
   b5528:	464c      	mov	r4, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   b552a:	4628      	mov	r0, r5
   b552c:	f7ff ffe0 	bl	b54f0 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   b5530:	4626      	mov	r6, r4
   b5532:	69eb      	ldr	r3, [r5, #28]
   b5534:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   b5536:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   b553a:	fb13 f309 	smulbb	r3, r3, r9
   b553e:	441f      	add	r7, r3
        buffer[len++] = digit;
   b5540:	3401      	adds	r4, #1
        multiplier *= 128;
    } while ((digit & 128) != 0);
   b5542:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
   b5544:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   b5546:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   b5548:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   b554c:	d4ed      	bmi.n	b552a <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
   b554e:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   b5550:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
   b5554:	f888 3000 	strb.w	r3, [r8]
    if (isPublish) {
   b5558:	d11e      	bne.n	b5598 <_ZN4MQTT10readPacketEPh+0x90>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   b555a:	4628      	mov	r0, r5
   b555c:	f7ff ffc8 	bl	b54f0 <_ZN4MQTT8readByteEv>
   b5560:	69eb      	ldr	r3, [r5, #28]
   b5562:	5518      	strb	r0, [r3, r4]
        buffer[len++] = readByte();
   b5564:	4628      	mov	r0, r5
   b5566:	f7ff ffc3 	bl	b54f0 <_ZN4MQTT8readByteEv>
   b556a:	1cf4      	adds	r4, r6, #3
        buffer[len++] = readByte();
   b556c:	3602      	adds	r6, #2
        buffer[len++] = readByte();
   b556e:	b2b6      	uxth	r6, r6
   b5570:	69eb      	ldr	r3, [r5, #28]
   b5572:	b2a4      	uxth	r4, r4
   b5574:	5598      	strb	r0, [r3, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   b5576:	2602      	movs	r6, #2
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   b5578:	b2b6      	uxth	r6, r6
   b557a:	42be      	cmp	r6, r7
   b557c:	d20e      	bcs.n	b559c <_ZN4MQTT10readPacketEPh+0x94>
        digit = readByte();
   b557e:	4628      	mov	r0, r5
   b5580:	f7ff ffb6 	bl	b54f0 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   b5584:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   b5588:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   b558a:	bf84      	itt	hi
   b558c:	69eb      	ldrhi	r3, [r5, #28]
   b558e:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   b5590:	3401      	adds	r4, #1
   b5592:	b2a4      	uxth	r4, r4
    for (uint16_t i = start;i<length;i++) {
   b5594:	3601      	adds	r6, #1
   b5596:	e7ef      	b.n	b5578 <_ZN4MQTT10readPacketEPh+0x70>
    uint8_t start = 0;
   b5598:	2600      	movs	r6, #0
   b559a:	e7ed      	b.n	b5578 <_ZN4MQTT10readPacketEPh+0x70>
    }

    if (len > this->maxpacketsize) {
   b559c:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   b55a0:	42a3      	cmp	r3, r4
   b55a2:	bf2c      	ite	cs
   b55a4:	4620      	movcs	r0, r4
   b55a6:	2000      	movcc	r0, #0
   b55a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b55ac <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b55ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b55b0:	4615      	mov	r5, r2
   b55b2:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   b55b4:	461a      	mov	r2, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b55b6:	4607      	mov	r7, r0
    uint8_t llen = 0;
   b55b8:	2300      	movs	r3, #0
    do {
        digit = len % 128;
   b55ba:	4696      	mov	lr, r2
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   b55bc:	a802      	add	r0, sp, #8
        digit = len % 128;
   b55be:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
        if (len > 0) {
   b55c2:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   b55c6:	f103 0401 	add.w	r4, r3, #1
   b55ca:	4403      	add	r3, r0
            digit |= 0x80;
   b55cc:	bf88      	it	hi
   b55ce:	f04c 0c80 	orrhi.w	ip, ip, #128	; 0x80
        llen++;
    } while(len > 0);
   b55d2:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   b55d6:	ea4f 12d2 	mov.w	r2, r2, lsr #7
        lenBuf[pos++] = digit;
   b55da:	b2e4      	uxtb	r4, r4
   b55dc:	f803 cc04 	strb.w	ip, [r3, #-4]
    } while(len > 0);
   b55e0:	d81e      	bhi.n	b5620 <_ZN4MQTT5writeEhPht+0x74>

    buf[4-llen] = header;
   b55e2:	f1c4 0304 	rsb	r3, r4, #4
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
   b55e6:	f1c4 0005 	rsb	r0, r4, #5
    buf[4-llen] = header;
   b55ea:	54e9      	strb	r1, [r5, r3]
        buf[5-llen+i] = lenBuf[i];
   b55ec:	4622      	mov	r2, r4
   b55ee:	a901      	add	r1, sp, #4
   b55f0:	4428      	add	r0, r5
    buf[4-llen] = header;
   b55f2:	eb05 0803 	add.w	r8, r5, r3
        buf[5-llen+i] = lenBuf[i];
   b55f6:	f004 fc87 	bl	b9f08 <memcpy>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   b55fa:	1c72      	adds	r2, r6, #1
   b55fc:	4422      	add	r2, r4
   b55fe:	4641      	mov	r1, r8
   b5600:	4638      	mov	r0, r7
   b5602:	f001 fd22 	bl	b704a <_ZN9TCPClient5writeEPKhj>
   b5606:	4605      	mov	r5, r0
   b5608:	f000 fb40 	bl	b5c8c <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   b560c:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   b560e:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   b5610:	4432      	add	r2, r6
   b5612:	b2a8      	uxth	r0, r5
}
   b5614:	1a13      	subs	r3, r2, r0
   b5616:	4258      	negs	r0, r3
   b5618:	4158      	adcs	r0, r3
   b561a:	b002      	add	sp, #8
   b561c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lenBuf[pos++] = digit;
   b5620:	4623      	mov	r3, r4
   b5622:	e7ca      	b.n	b55ba <_ZN4MQTT5writeEhPht+0xe>

000b5624 <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   b5624:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   b5626:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5628:	4605      	mov	r5, r0
    pos += 2;
   b562a:	b298      	uxth	r0, r3
   b562c:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
   b562e:	5cce      	ldrb	r6, [r1, r3]
   b5630:	b29c      	uxth	r4, r3
   b5632:	b156      	cbz	r6, b564a <_ZN4MQTT11writeStringEPKcPht+0x26>
   b5634:	f8b5 c054 	ldrh.w	ip, [r5, #84]	; 0x54
   b5638:	4584      	cmp	ip, r0
   b563a:	f103 0701 	add.w	r7, r3, #1
   b563e:	d904      	bls.n	b564a <_ZN4MQTT11writeStringEPKcPht+0x26>
        buf[pos++] = *idp++;
   b5640:	1c44      	adds	r4, r0, #1
   b5642:	5416      	strb	r6, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
   b5644:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
   b5646:	b2a0      	uxth	r0, r4
    while (*idp && pos < this->maxpacketsize) {
   b5648:	e7f1      	b.n	b562e <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   b564a:	b299      	uxth	r1, r3
   b564c:	1a41      	subs	r1, r0, r1
   b564e:	440a      	add	r2, r1
   b5650:	0a21      	lsrs	r1, r4, #8
   b5652:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   b5656:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
   b565a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b565c <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   b565c:	b538      	push	{r3, r4, r5, lr}
   b565e:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
   b5660:	f001 fe40 	bl	b72e4 <_ZN9TCPClient9connectedEv>
   b5664:	2800      	cmp	r0, #0
   b5666:	bf14      	ite	ne
   b5668:	2501      	movne	r5, #1
   b566a:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
   b566c:	d102      	bne.n	b5674 <_ZN4MQTT11isConnectedEv+0x18>
   b566e:	4620      	mov	r0, r4
   b5670:	f001 ff70 	bl	b7554 <_ZN9TCPClient4stopEv>
    return rc;
}
   b5674:	4628      	mov	r0, r5
   b5676:	bd38      	pop	{r3, r4, r5, pc}

000b5678 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   b5678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b567c:	b088      	sub	sp, #32
   b567e:	4604      	mov	r4, r0
   b5680:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   b5684:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b5688:	4689      	mov	r9, r1
   b568a:	4617      	mov	r7, r2
   b568c:	461e      	mov	r6, r3
    if (!isConnected()) {
   b568e:	f7ff ffe5 	bl	b565c <_ZN4MQTT11isConnectedEv>
   b5692:	4605      	mov	r5, r0
   b5694:	2800      	cmp	r0, #0
   b5696:	f040 80cd 	bne.w	b5834 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>
        MutexLocker lock(this);
   b569a:	4621      	mov	r1, r4
   b569c:	a801      	add	r0, sp, #4
   b569e:	f7ff febd 	bl	b541c <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
   b56a2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b56a4:	2900      	cmp	r1, #0
   b56a6:	f040 8088 	bne.w	b57ba <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x142>
            result = _client.connect(this->domain.c_str(), this->port);
   b56aa:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b56ae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b56b0:	462b      	mov	r3, r5
   b56b2:	4620      	mov	r0, r4
   b56b4:	f001 fd98 	bl	b71e8 <_ZN9TCPClient7connectEPKctm>
        if (result) {
   b56b8:	2800      	cmp	r0, #0
   b56ba:	d07a      	beq.n	b57b2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
            nextMsgId = 1;
   b56bc:	2301      	movs	r3, #1
   b56be:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
   b56c0:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b56c4:	69e2      	ldr	r2, [r4, #28]
            if (version == MQTT_V311) {
   b56c6:	2b04      	cmp	r3, #4
   b56c8:	4b5b      	ldr	r3, [pc, #364]	; (b5838 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
   b56ca:	f040 8081 	bne.w	b57d0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x158>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   b56ce:	6818      	ldr	r0, [r3, #0]
   b56d0:	8899      	ldrh	r1, [r3, #4]
   b56d2:	799b      	ldrb	r3, [r3, #6]
   b56d4:	f8ad 100c 	strh.w	r1, [sp, #12]
   b56d8:	f88d 300e 	strb.w	r3, [sp, #14]
   b56dc:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b56de:	f8c2 0005 	str.w	r0, [r2, #5]
   b56e2:	f89d 300e 	ldrb.w	r3, [sp, #14]
   b56e6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   b56ea:	f8a2 1009 	strh.w	r1, [r2, #9]
   b56ee:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
   b56f0:	230c      	movs	r3, #12
            if (willTopic) {
   b56f2:	f1b8 0f00 	cmp.w	r8, #0
   b56f6:	f000 8081 	beq.w	b57fc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   b56fa:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   b56fe:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   b5702:	0140      	lsls	r0, r0, #5
   b5704:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
   b5708:	f040 0006 	orr.w	r0, r0, #6
   b570c:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
   b570e:	f1ba 0f00 	cmp.w	sl, #0
   b5712:	d101      	bne.n	b5718 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa0>
              v = v&0xfd;
   b5714:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
   b5718:	b11f      	cbz	r7, b5722 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
                if(pass != NULL) {
   b571a:	2e00      	cmp	r6, #0
   b571c:	d170      	bne.n	b5800 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x188>
                v = v|0x80;
   b571e:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
   b5722:	69e2      	ldr	r2, [r4, #28]
   b5724:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
   b5726:	6d22      	ldr	r2, [r4, #80]	; 0x50
   b5728:	69e1      	ldr	r1, [r4, #28]
   b572a:	1c58      	adds	r0, r3, #1
   b572c:	1212      	asrs	r2, r2, #8
   b572e:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   b5730:	1c9a      	adds	r2, r3, #2
   b5732:	69e1      	ldr	r1, [r4, #28]
   b5734:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b5736:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   b5738:	3303      	adds	r3, #3
   b573a:	69e2      	ldr	r2, [r4, #28]
   b573c:	4649      	mov	r1, r9
   b573e:	4620      	mov	r0, r4
   b5740:	f7ff ff70 	bl	b5624 <_ZN4MQTT11writeStringEPKcPht>
   b5744:	4603      	mov	r3, r0
            if (willTopic) {
   b5746:	f1b8 0f00 	cmp.w	r8, #0
   b574a:	d00b      	beq.n	b5764 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xec>
                length = writeString(willTopic, buffer, length);
   b574c:	69e2      	ldr	r2, [r4, #28]
   b574e:	4641      	mov	r1, r8
   b5750:	4620      	mov	r0, r4
   b5752:	f7ff ff67 	bl	b5624 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   b5756:	69e2      	ldr	r2, [r4, #28]
   b5758:	9913      	ldr	r1, [sp, #76]	; 0x4c
                length = writeString(willTopic, buffer, length);
   b575a:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
   b575c:	4620      	mov	r0, r4
   b575e:	f7ff ff61 	bl	b5624 <_ZN4MQTT11writeStringEPKcPht>
   b5762:	4603      	mov	r3, r0
            if(user != NULL) {
   b5764:	b167      	cbz	r7, b5780 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                length = writeString(user,buffer,length);
   b5766:	69e2      	ldr	r2, [r4, #28]
   b5768:	4639      	mov	r1, r7
   b576a:	4620      	mov	r0, r4
   b576c:	f7ff ff5a 	bl	b5624 <_ZN4MQTT11writeStringEPKcPht>
   b5770:	4603      	mov	r3, r0
                if(pass != NULL) {
   b5772:	b12e      	cbz	r6, b5780 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                    length = writeString(pass,buffer,length);
   b5774:	69e2      	ldr	r2, [r4, #28]
   b5776:	4631      	mov	r1, r6
   b5778:	4620      	mov	r0, r4
   b577a:	f7ff ff53 	bl	b5624 <_ZN4MQTT11writeStringEPKcPht>
   b577e:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
   b5780:	3b05      	subs	r3, #5
   b5782:	69e2      	ldr	r2, [r4, #28]
   b5784:	b29b      	uxth	r3, r3
   b5786:	2110      	movs	r1, #16
   b5788:	4620      	mov	r0, r4
   b578a:	f7ff ff0f 	bl	b55ac <_ZN4MQTT5writeEhPht>
   b578e:	f000 fa7d 	bl	b5c8c <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   b5792:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
                if (t-lastInActivity > this->keepalive*1000UL) {
   b5796:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            while (!_client.available()) {
   b579a:	4620      	mov	r0, r4
   b579c:	f001 fe80 	bl	b74a0 <_ZN9TCPClient9availableEv>
   b57a0:	bb88      	cbnz	r0, b5806 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18e>
   b57a2:	f000 fa73 	bl	b5c8c <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
   b57a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b57a8:	1ac0      	subs	r0, r0, r3
   b57aa:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b57ac:	4373      	muls	r3, r6
   b57ae:	4298      	cmp	r0, r3
   b57b0:	d9f3      	bls.n	b579a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x122>
        _client.stop();
   b57b2:	4620      	mov	r0, r4
   b57b4:	f001 fece 	bl	b7554 <_ZN9TCPClient4stopEv>
   b57b8:	e035      	b.n	b5826 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ae>
            result = _client.connect(this->ip, this->port);
   b57ba:	a802      	add	r0, sp, #8
   b57bc:	f001 f958 	bl	b6a70 <_ZN9IPAddressC1EPKh>
   b57c0:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b57c4:	462b      	mov	r3, r5
   b57c6:	a902      	add	r1, sp, #8
   b57c8:	4620      	mov	r0, r4
   b57ca:	f001 fded 	bl	b73a8 <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b57ce:	e773      	b.n	b56b8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   b57d0:	f8d3 0007 	ldr.w	r0, [r3, #7]
   b57d4:	f8d3 100b 	ldr.w	r1, [r3, #11]
   b57d8:	7bdb      	ldrb	r3, [r3, #15]
   b57da:	f10d 0c08 	add.w	ip, sp, #8
   b57de:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b57e2:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   b57e6:	ab02      	add	r3, sp, #8
   b57e8:	cb03      	ldmia	r3!, {r0, r1}
   b57ea:	f8c2 0005 	str.w	r0, [r2, #5]
   b57ee:	f8c2 1009 	str.w	r1, [r2, #9]
   b57f2:	f89c 3000 	ldrb.w	r3, [ip]
   b57f6:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
   b57f8:	230e      	movs	r3, #14
   b57fa:	e77a      	b.n	b56f2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
   b57fc:	2002      	movs	r0, #2
   b57fe:	e786      	b.n	b570e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
                    v = v|(0x80>>1);
   b5800:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   b5804:	e78d      	b.n	b5722 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            uint16_t len = readPacket(&llen);
   b5806:	a902      	add	r1, sp, #8
   b5808:	4620      	mov	r0, r4
   b580a:	f7ff fe7d 	bl	b5508 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
   b580e:	2804      	cmp	r0, #4
   b5810:	d1cf      	bne.n	b57b2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
                if (buffer[3] == CONN_ACCEPT) {
   b5812:	69e3      	ldr	r3, [r4, #28]
   b5814:	78de      	ldrb	r6, [r3, #3]
   b5816:	2e00      	cmp	r6, #0
   b5818:	d1cb      	bne.n	b57b2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
   b581a:	f000 fa37 	bl	b5c8c <HAL_Timer_Get_Milli_Seconds>
                    return true;
   b581e:	2501      	movs	r5, #1
                    lastInActivity = millis();
   b5820:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   b5822:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
   b5826:	a801      	add	r0, sp, #4
   b5828:	f7ff fe03 	bl	b5432 <_ZN4MQTT11MutexLockerD1Ev>
}
   b582c:	4628      	mov	r0, r5
   b582e:	b008      	add	sp, #32
   b5830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
   b5834:	2500      	movs	r5, #0
   b5836:	e7f9      	b.n	b582c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b4>
   b5838:	000ba2fc 	.word	0x000ba2fc

000b583c <_ZN4MQTT7connectEPKc>:
bool MQTT::connect(const char *id) {
   b583c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
   b583e:	2301      	movs	r3, #1
   b5840:	2204      	movs	r2, #4
   b5842:	e9cd 3204 	strd	r3, r2, [sp, #16]
   b5846:	2300      	movs	r3, #0
   b5848:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b584c:	e9cd 3300 	strd	r3, r3, [sp]
   b5850:	461a      	mov	r2, r3
   b5852:	f7ff ff11 	bl	b5678 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   b5856:	b007      	add	sp, #28
   b5858:	f85d fb04 	ldr.w	pc, [sp], #4

000b585c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b585c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5860:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   b5864:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
   b5868:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
   b586c:	4604      	mov	r4, r0
   b586e:	468b      	mov	fp, r1
   b5870:	4616      	mov	r6, r2
   b5872:	461f      	mov	r7, r3
    if (isConnected()) {
   b5874:	f7ff fef2 	bl	b565c <_ZN4MQTT11isConnectedEv>
   b5878:	4682      	mov	sl, r0
   b587a:	2800      	cmp	r0, #0
   b587c:	d051      	beq.n	b5922 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        MutexLocker lock(this);
   b587e:	4621      	mov	r1, r4
   b5880:	a801      	add	r0, sp, #4
   b5882:	f7ff fdcb 	bl	b541c <_ZN4MQTT11MutexLockerC1EPS_>
        memset(buffer, 0, this->maxpacketsize);
   b5886:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   b588a:	69e0      	ldr	r0, [r4, #28]
   b588c:	2100      	movs	r1, #0
   b588e:	f004 fb49 	bl	b9f24 <memset>
        length = writeString(topic, buffer, length);
   b5892:	2305      	movs	r3, #5
   b5894:	69e2      	ldr	r2, [r4, #28]
   b5896:	4659      	mov	r1, fp
   b5898:	4620      	mov	r0, r4
   b589a:	f7ff fec3 	bl	b5624 <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
   b589e:	1e6b      	subs	r3, r5, #1
   b58a0:	2b01      	cmp	r3, #1
   b58a2:	d815      	bhi.n	b58d0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
            nextMsgId += 1;
   b58a4:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b58a6:	69e3      	ldr	r3, [r4, #28]
            nextMsgId += 1;
   b58a8:	3101      	adds	r1, #1
   b58aa:	b289      	uxth	r1, r1
   b58ac:	8421      	strh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b58ae:	0a09      	lsrs	r1, r1, #8
   b58b0:	5419      	strb	r1, [r3, r0]
   b58b2:	1c42      	adds	r2, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
   b58b4:	69e3      	ldr	r3, [r4, #28]
   b58b6:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b58b8:	b292      	uxth	r2, r2
            buffer[length++] = (nextMsgId & 0xFF);
   b58ba:	3002      	adds	r0, #2
   b58bc:	5499      	strb	r1, [r3, r2]
   b58be:	b280      	uxth	r0, r0
            if (messageid != NULL)
   b58c0:	f1b8 0f00 	cmp.w	r8, #0
   b58c4:	d004      	beq.n	b58d0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
                *messageid = nextMsgId++;
   b58c6:	8c23      	ldrh	r3, [r4, #32]
   b58c8:	1c5a      	adds	r2, r3, #1
   b58ca:	8422      	strh	r2, [r4, #32]
   b58cc:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b58d0:	2100      	movs	r1, #0
   b58d2:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b58d4:	428f      	cmp	r7, r1
            buffer[length++] = payload[i];
   b58d6:	69e2      	ldr	r2, [r4, #28]
   b58d8:	b29b      	uxth	r3, r3
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b58da:	d90a      	bls.n	b58f2 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
   b58dc:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
   b58e0:	459c      	cmp	ip, r3
   b58e2:	d906      	bls.n	b58f2 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            buffer[length++] = payload[i];
   b58e4:	f816 c001 	ldrb.w	ip, [r6, r1]
   b58e8:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b58ec:	3101      	adds	r1, #1
   b58ee:	b289      	uxth	r1, r1
   b58f0:	e7ef      	b.n	b58d2 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x76>
            header |= 1;
   b58f2:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   b58f6:	2900      	cmp	r1, #0
   b58f8:	bf0c      	ite	eq
   b58fa:	2130      	moveq	r1, #48	; 0x30
   b58fc:	2131      	movne	r1, #49	; 0x31
        if (dup) {
   b58fe:	f1b9 0f00 	cmp.w	r9, #0
   b5902:	d001      	beq.n	b5908 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
            header |= DUP_FLAG_ON_MASK;
   b5904:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
   b5908:	2d02      	cmp	r5, #2
   b590a:	d10e      	bne.n	b592a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xce>
            header |= MQTTQOS2_HEADER_MASK;
   b590c:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
   b5910:	3b05      	subs	r3, #5
   b5912:	b29b      	uxth	r3, r3
   b5914:	4620      	mov	r0, r4
   b5916:	f7ff fe49 	bl	b55ac <_ZN4MQTT5writeEhPht>
   b591a:	4682      	mov	sl, r0
        MutexLocker lock(this);
   b591c:	a801      	add	r0, sp, #4
   b591e:	f7ff fd88 	bl	b5432 <_ZN4MQTT11MutexLockerD1Ev>
}
   b5922:	4650      	mov	r0, sl
   b5924:	b003      	add	sp, #12
   b5926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (qos == QOS1)
   b592a:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   b592c:	bf08      	it	eq
   b592e:	f041 0102 	orreq.w	r1, r1, #2
   b5932:	e7ed      	b.n	b5910 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>

000b5934 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   b5934:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   b5936:	9c08      	ldr	r4, [sp, #32]
   b5938:	9403      	str	r4, [sp, #12]
   b593a:	2400      	movs	r4, #0
   b593c:	9402      	str	r4, [sp, #8]
   b593e:	f89d 401c 	ldrb.w	r4, [sp, #28]
   b5942:	9401      	str	r4, [sp, #4]
   b5944:	f89d 4018 	ldrb.w	r4, [sp, #24]
   b5948:	9400      	str	r4, [sp, #0]
   b594a:	f7ff ff87 	bl	b585c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   b594e:	b004      	add	sp, #16
   b5950:	bd10      	pop	{r4, pc}

000b5952 <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
   b5952:	b530      	push	{r4, r5, lr}
   b5954:	b087      	sub	sp, #28
   b5956:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b5958:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
   b595a:	9105      	str	r1, [sp, #20]
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b595c:	9204      	str	r2, [sp, #16]
   b595e:	f004 fb46 	bl	b9fee <strlen>
   b5962:	2500      	movs	r5, #0
   b5964:	4603      	mov	r3, r0
   b5966:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b596a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   b596e:	9500      	str	r5, [sp, #0]
   b5970:	4620      	mov	r0, r4
   b5972:	f7ff ffdf 	bl	b5934 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   b5976:	b007      	add	sp, #28
   b5978:	bd30      	pop	{r4, r5, pc}

000b597a <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
   b597a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b597c:	4604      	mov	r4, r0
   b597e:	460e      	mov	r6, r1
    if (isConnected()) {
   b5980:	f7ff fe6c 	bl	b565c <_ZN4MQTT11isConnectedEv>
   b5984:	4605      	mov	r5, r0
   b5986:	b1c8      	cbz	r0, b59bc <_ZN4MQTT14publishReleaseEt+0x42>
        MutexLocker lock(this);
   b5988:	4621      	mov	r1, r4
   b598a:	a801      	add	r0, sp, #4
   b598c:	f7ff fd46 	bl	b541c <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   b5990:	69e3      	ldr	r3, [r4, #28]
   b5992:	2262      	movs	r2, #98	; 0x62
   b5994:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b5996:	69e3      	ldr	r3, [r4, #28]
   b5998:	2202      	movs	r2, #2
   b599a:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b599c:	69e3      	ldr	r3, [r4, #28]
   b599e:	0a32      	lsrs	r2, r6, #8
   b59a0:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b59a2:	69e3      	ldr	r3, [r4, #28]
   b59a4:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b59a6:	69e1      	ldr	r1, [r4, #28]
   b59a8:	2204      	movs	r2, #4
   b59aa:	4620      	mov	r0, r4
   b59ac:	f001 fb4d 	bl	b704a <_ZN9TCPClient5writeEPKhj>
   b59b0:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b59b2:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b59b4:	bf18      	it	ne
   b59b6:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b59b8:	f7ff fd3b 	bl	b5432 <_ZN4MQTT11MutexLockerD1Ev>
}
   b59bc:	4628      	mov	r0, r5
   b59be:	b002      	add	sp, #8
   b59c0:	bd70      	pop	{r4, r5, r6, pc}

000b59c2 <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
   b59c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b59c4:	4604      	mov	r4, r0
   b59c6:	460e      	mov	r6, r1
    if (isConnected()) {
   b59c8:	f7ff fe48 	bl	b565c <_ZN4MQTT11isConnectedEv>
   b59cc:	4605      	mov	r5, r0
   b59ce:	b1c8      	cbz	r0, b5a04 <_ZN4MQTT15publishCompleteEt+0x42>
        MutexLocker lock(this);
   b59d0:	4621      	mov	r1, r4
   b59d2:	a801      	add	r0, sp, #4
   b59d4:	f7ff fd22 	bl	b541c <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   b59d8:	69e3      	ldr	r3, [r4, #28]
   b59da:	2272      	movs	r2, #114	; 0x72
   b59dc:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b59de:	69e3      	ldr	r3, [r4, #28]
   b59e0:	2202      	movs	r2, #2
   b59e2:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b59e4:	69e3      	ldr	r3, [r4, #28]
   b59e6:	0a32      	lsrs	r2, r6, #8
   b59e8:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b59ea:	69e3      	ldr	r3, [r4, #28]
   b59ec:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b59ee:	69e1      	ldr	r1, [r4, #28]
   b59f0:	2204      	movs	r2, #4
   b59f2:	4620      	mov	r0, r4
   b59f4:	f001 fb29 	bl	b704a <_ZN9TCPClient5writeEPKhj>
   b59f8:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b59fa:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b59fc:	bf18      	it	ne
   b59fe:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b5a00:	f7ff fd17 	bl	b5432 <_ZN4MQTT11MutexLockerD1Ev>
}
   b5a04:	4628      	mov	r0, r5
   b5a06:	b002      	add	sp, #8
   b5a08:	bd70      	pop	{r4, r5, r6, pc}

000b5a0a <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
   b5a0a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5a0e:	ed2d 8b02 	vpush	{d8}
   b5a12:	b087      	sub	sp, #28
   b5a14:	af00      	add	r7, sp, #0
   b5a16:	4604      	mov	r4, r0
    if (isConnected()) {
   b5a18:	f7ff fe20 	bl	b565c <_ZN4MQTT11isConnectedEv>
   b5a1c:	4681      	mov	r9, r0
   b5a1e:	b1f8      	cbz	r0, b5a60 <_ZN4MQTT4loopEv+0x56>
        MutexLocker lock(this);
   b5a20:	4621      	mov	r1, r4
   b5a22:	f107 0014 	add.w	r0, r7, #20
   b5a26:	f7ff fcf9 	bl	b541c <_ZN4MQTT11MutexLockerC1EPS_>
   b5a2a:	f000 f92f 	bl	b5c8c <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   b5a2e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b5a30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5a34:	4353      	muls	r3, r2
   b5a36:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   b5a38:	1a82      	subs	r2, r0, r2
   b5a3a:	429a      	cmp	r2, r3
   b5a3c:	4606      	mov	r6, r0
   b5a3e:	d803      	bhi.n	b5a48 <_ZN4MQTT4loopEv+0x3e>
   b5a40:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b5a42:	1a82      	subs	r2, r0, r2
   b5a44:	4293      	cmp	r3, r2
   b5a46:	d221      	bcs.n	b5a8c <_ZN4MQTT4loopEv+0x82>
            if (pingOutstanding) {
   b5a48:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   b5a4c:	b17b      	cbz	r3, b5a6e <_ZN4MQTT4loopEv+0x64>
                _client.stop();
   b5a4e:	4620      	mov	r0, r4
   b5a50:	f001 fd80 	bl	b7554 <_ZN9TCPClient4stopEv>
                return false;
   b5a54:	f04f 0900 	mov.w	r9, #0
        MutexLocker lock(this);
   b5a58:	f107 0014 	add.w	r0, r7, #20
   b5a5c:	f7ff fce9 	bl	b5432 <_ZN4MQTT11MutexLockerD1Ev>
}
   b5a60:	4648      	mov	r0, r9
   b5a62:	371c      	adds	r7, #28
   b5a64:	46bd      	mov	sp, r7
   b5a66:	ecbd 8b02 	vpop	{d8}
   b5a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
   b5a6e:	69e2      	ldr	r2, [r4, #28]
   b5a70:	21c0      	movs	r1, #192	; 0xc0
   b5a72:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   b5a74:	69e2      	ldr	r2, [r4, #28]
   b5a76:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   b5a78:	69e1      	ldr	r1, [r4, #28]
   b5a7a:	2202      	movs	r2, #2
   b5a7c:	4620      	mov	r0, r4
   b5a7e:	f001 fae4 	bl	b704a <_ZN9TCPClient5writeEPKhj>
                lastInActivity = t;
   b5a82:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
   b5a86:	2301      	movs	r3, #1
   b5a88:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
   b5a8c:	4620      	mov	r0, r4
   b5a8e:	f001 fd07 	bl	b74a0 <_ZN9TCPClient9availableEv>
   b5a92:	2800      	cmp	r0, #0
   b5a94:	d0e0      	beq.n	b5a58 <_ZN4MQTT4loopEv+0x4e>
            uint16_t len = readPacket(&llen);
   b5a96:	f107 0113 	add.w	r1, r7, #19
   b5a9a:	4620      	mov	r0, r4
   b5a9c:	f7ff fd34 	bl	b5508 <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
   b5aa0:	4683      	mov	fp, r0
   b5aa2:	2800      	cmp	r0, #0
   b5aa4:	d0d8      	beq.n	b5a58 <_ZN4MQTT4loopEv+0x4e>
                uint8_t type = buffer[0]&0xF0;
   b5aa6:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
   b5aa8:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   b5aaa:	7819      	ldrb	r1, [r3, #0]
   b5aac:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   b5ab0:	2a30      	cmp	r2, #48	; 0x30
   b5ab2:	d17f      	bne.n	b5bb4 <_ZN4MQTT4loopEv+0x1aa>
                    if (callback) {
   b5ab4:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
   b5ab8:	f1ba 0f00 	cmp.w	sl, #0
   b5abc:	d0cc      	beq.n	b5a58 <_ZN4MQTT4loopEv+0x4e>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b5abe:	f897 c013 	ldrb.w	ip, [r7, #19]
                        }
   b5ac2:	466a      	mov	r2, sp
   b5ac4:	ee08 2a10 	vmov	s16, r2
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b5ac8:	eb03 020c 	add.w	r2, r3, ip
   b5acc:	7851      	ldrb	r1, [r2, #1]
   b5ace:	7895      	ldrb	r5, [r2, #2]
   b5ad0:	eb05 2501 	add.w	r5, r5, r1, lsl #8
   b5ad4:	b2ad      	uxth	r5, r5
                        char topic[tl+1];
   b5ad6:	f105 0208 	add.w	r2, r5, #8
   b5ada:	4669      	mov	r1, sp
   b5adc:	08d2      	lsrs	r2, r2, #3
   b5ade:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
   b5ae2:	4695      	mov	sp, r2
   b5ae4:	f10c 0203 	add.w	r2, ip, #3
   b5ae8:	60fa      	str	r2, [r7, #12]
   b5aea:	eb03 0e02 	add.w	lr, r3, r2
   b5aee:	eb0d 0205 	add.w	r2, sp, r5
   b5af2:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
   b5af4:	f8c7 d008 	str.w	sp, [r7, #8]
   b5af8:	607a      	str	r2, [r7, #4]
   b5afa:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
   b5afe:	428a      	cmp	r2, r1
   b5b00:	d006      	beq.n	b5b10 <_ZN4MQTT4loopEv+0x106>
                            topic[i] = buffer[llen+3+i];
   b5b02:	460a      	mov	r2, r1
   b5b04:	f81e 8b01 	ldrb.w	r8, [lr], #1
   b5b08:	f802 8b01 	strb.w	r8, [r2], #1
   b5b0c:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
   b5b0e:	e7f4      	b.n	b5afa <_ZN4MQTT4loopEv+0xf0>
                        topic[tl] = 0;
   b5b10:	2200      	movs	r2, #0
   b5b12:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b5b14:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5b18:	68f9      	ldr	r1, [r7, #12]
   b5b1a:	f008 0806 	and.w	r8, r8, #6
                            callback(topic,payload,len-llen-3-tl-2);
   b5b1e:	ebab 020c 	sub.w	r2, fp, ip
   b5b22:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b5b24:	f1b8 0f02 	cmp.w	r8, #2
                            callback(topic,payload,len-llen-3-tl-2);
   b5b28:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5b2c:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b5b2e:	d125      	bne.n	b5b7c <_ZN4MQTT4loopEv+0x172>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5b30:	f813 e001 	ldrb.w	lr, [r3, r1]
   b5b34:	4419      	add	r1, r3
                            callback(topic,payload,len-llen-3-tl-2);
   b5b36:	3a02      	subs	r2, #2
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5b38:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
   b5b3c:	f10c 0105 	add.w	r1, ip, #5
   b5b40:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
   b5b42:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5b44:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
   b5b48:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   b5b4a:	69e3      	ldr	r3, [r4, #28]
   b5b4c:	2240      	movs	r2, #64	; 0x40
   b5b4e:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   b5b50:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5b52:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[1] = 2;
   b5b56:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
   b5b5a:	69e3      	ldr	r3, [r4, #28]
   b5b5c:	ea4f 221b 	mov.w	r2, fp, lsr #8
   b5b60:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   b5b62:	69e3      	ldr	r3, [r4, #28]
   b5b64:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
   b5b68:	69e1      	ldr	r1, [r4, #28]
   b5b6a:	2204      	movs	r2, #4
   b5b6c:	4620      	mov	r0, r4
   b5b6e:	f001 fa6c 	bl	b704a <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
   b5b72:	6266      	str	r6, [r4, #36]	; 0x24
   b5b74:	ee18 3a10 	vmov	r3, s16
   b5b78:	469d      	mov	sp, r3
   b5b7a:	e76d      	b.n	b5a58 <_ZN4MQTT4loopEv+0x4e>
                                    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   b5b7c:	f1b8 0f04 	cmp.w	r8, #4
   b5b80:	d115      	bne.n	b5bae <_ZN4MQTT4loopEv+0x1a4>
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b5b82:	f813 e001 	ldrb.w	lr, [r3, r1]
   b5b86:	4419      	add	r1, r3
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b5b88:	3a02      	subs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b5b8a:	f891 b001 	ldrb.w	fp, [r1, #1]
                                        payload = buffer + llen + 3 + tl + 2;
   b5b8e:	f10c 0105 	add.w	r1, ip, #5
   b5b92:	4429      	add	r1, r5
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b5b94:	4419      	add	r1, r3
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b5b96:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b5b9a:	47d0      	blx	sl
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
   b5b9c:	69e3      	ldr	r3, [r4, #28]
   b5b9e:	2250      	movs	r2, #80	; 0x50
   b5ba0:	701a      	strb	r2, [r3, #0]
                                        buffer[1] = 2;
   b5ba2:	69e3      	ldr	r3, [r4, #28]
   b5ba4:	2202      	movs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b5ba6:	fa1f fb8b 	uxth.w	fp, fp
                                        buffer[1] = 2;
   b5baa:	705a      	strb	r2, [r3, #1]
                                        buffer[2] = (msgId >> 8);
   b5bac:	e7d5      	b.n	b5b5a <_ZN4MQTT4loopEv+0x150>
                            callback(topic,payload,len-llen-3-tl);
   b5bae:	4419      	add	r1, r3
   b5bb0:	47d0      	blx	sl
   b5bb2:	e7df      	b.n	b5b74 <_ZN4MQTT4loopEv+0x16a>
                } else if (type == MQTTPUBREC) {
   b5bb4:	2a50      	cmp	r2, #80	; 0x50
   b5bb6:	d108      	bne.n	b5bca <_ZN4MQTT4loopEv+0x1c0>
                    msgId = (buffer[2] << 8) + buffer[3];
   b5bb8:	789a      	ldrb	r2, [r3, #2]
   b5bba:	78d9      	ldrb	r1, [r3, #3]
   b5bbc:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
   b5bc0:	b289      	uxth	r1, r1
   b5bc2:	4620      	mov	r0, r4
   b5bc4:	f7ff fed9 	bl	b597a <_ZN4MQTT14publishReleaseEt>
   b5bc8:	e746      	b.n	b5a58 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBACK) {
   b5bca:	2a40      	cmp	r2, #64	; 0x40
   b5bcc:	d112      	bne.n	b5bf4 <_ZN4MQTT4loopEv+0x1ea>
                if (qoscallback) {
   b5bce:	6b62      	ldr	r2, [r4, #52]	; 0x34
   b5bd0:	2a00      	cmp	r2, #0
   b5bd2:	f43f af41 	beq.w	b5a58 <_ZN4MQTT4loopEv+0x4e>
                    if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   b5bd6:	f1bb 0f04 	cmp.w	fp, #4
   b5bda:	f47f af3d 	bne.w	b5a58 <_ZN4MQTT4loopEv+0x4e>
   b5bde:	f011 0f06 	tst.w	r1, #6
   b5be2:	f47f af39 	bne.w	b5a58 <_ZN4MQTT4loopEv+0x4e>
                        msgId = (buffer[2]<<8)+buffer[3];
   b5be6:	7899      	ldrb	r1, [r3, #2]
   b5be8:	78d8      	ldrb	r0, [r3, #3]
   b5bea:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                        this->qoscallback(msgId);
   b5bee:	b280      	uxth	r0, r0
   b5bf0:	4790      	blx	r2
   b5bf2:	e731      	b.n	b5a58 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBREL) {
   b5bf4:	2a60      	cmp	r2, #96	; 0x60
   b5bf6:	d108      	bne.n	b5c0a <_ZN4MQTT4loopEv+0x200>
                msgId = (buffer[2] << 8) + buffer[3];
   b5bf8:	789a      	ldrb	r2, [r3, #2]
   b5bfa:	78d9      	ldrb	r1, [r3, #3]
   b5bfc:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                this->publishComplete(msgId);
   b5c00:	b289      	uxth	r1, r1
   b5c02:	4620      	mov	r0, r4
   b5c04:	f7ff fedd 	bl	b59c2 <_ZN4MQTT15publishCompleteEt>
   b5c08:	e726      	b.n	b5a58 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBCOMP) {
   b5c0a:	2a70      	cmp	r2, #112	; 0x70
   b5c0c:	d0df      	beq.n	b5bce <_ZN4MQTT4loopEv+0x1c4>
                } else if (type == MQTTSUBACK) {
   b5c0e:	2a90      	cmp	r2, #144	; 0x90
   b5c10:	f43f af22 	beq.w	b5a58 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGREQ) {
   b5c14:	2ac0      	cmp	r2, #192	; 0xc0
   b5c16:	d10a      	bne.n	b5c2e <_ZN4MQTT4loopEv+0x224>
                    buffer[0] = MQTTPINGRESP;
   b5c18:	22d0      	movs	r2, #208	; 0xd0
   b5c1a:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   b5c1c:	69e3      	ldr	r3, [r4, #28]
   b5c1e:	2200      	movs	r2, #0
   b5c20:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   b5c22:	69e1      	ldr	r1, [r4, #28]
   b5c24:	2202      	movs	r2, #2
   b5c26:	4620      	mov	r0, r4
   b5c28:	f001 fa0f 	bl	b704a <_ZN9TCPClient5writeEPKhj>
   b5c2c:	e714      	b.n	b5a58 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGRESP) {
   b5c2e:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
   b5c30:	bf04      	itt	eq
   b5c32:	2300      	moveq	r3, #0
   b5c34:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
   b5c38:	e70e      	b.n	b5a58 <_ZN4MQTT4loopEv+0x4e>
	...

000b5c3c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b5c3c:	b508      	push	{r3, lr}
   b5c3e:	4b02      	ldr	r3, [pc, #8]	; (b5c48 <os_mutex_create+0xc>)
   b5c40:	681b      	ldr	r3, [r3, #0]
   b5c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5c44:	9301      	str	r3, [sp, #4]
   b5c46:	bd08      	pop	{r3, pc}
   b5c48:	00030248 	.word	0x00030248

000b5c4c <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   b5c4c:	b508      	push	{r3, lr}
   b5c4e:	4b02      	ldr	r3, [pc, #8]	; (b5c58 <os_mutex_lock+0xc>)
   b5c50:	681b      	ldr	r3, [r3, #0]
   b5c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b5c54:	9301      	str	r3, [sp, #4]
   b5c56:	bd08      	pop	{r3, pc}
   b5c58:	00030248 	.word	0x00030248

000b5c5c <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   b5c5c:	b508      	push	{r3, lr}
   b5c5e:	4b02      	ldr	r3, [pc, #8]	; (b5c68 <os_mutex_unlock+0xc>)
   b5c60:	681b      	ldr	r3, [r3, #0]
   b5c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5c64:	9301      	str	r3, [sp, #4]
   b5c66:	bd08      	pop	{r3, pc}
   b5c68:	00030248 	.word	0x00030248

000b5c6c <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5c6c:	b508      	push	{r3, lr}
   b5c6e:	4b02      	ldr	r3, [pc, #8]	; (b5c78 <os_mutex_recursive_create+0xc>)
   b5c70:	681b      	ldr	r3, [r3, #0]
   b5c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5c74:	9301      	str	r3, [sp, #4]
   b5c76:	bd08      	pop	{r3, pc}
   b5c78:	00030248 	.word	0x00030248

000b5c7c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5c7c:	b508      	push	{r3, lr}
   b5c7e:	4b02      	ldr	r3, [pc, #8]	; (b5c88 <HAL_RNG_GetRandomNumber+0xc>)
   b5c80:	681b      	ldr	r3, [r3, #0]
   b5c82:	685b      	ldr	r3, [r3, #4]
   b5c84:	9301      	str	r3, [sp, #4]
   b5c86:	bd08      	pop	{r3, pc}
   b5c88:	00030218 	.word	0x00030218

000b5c8c <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5c8c:	b508      	push	{r3, lr}
   b5c8e:	4b02      	ldr	r3, [pc, #8]	; (b5c98 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5c90:	681b      	ldr	r3, [r3, #0]
   b5c92:	695b      	ldr	r3, [r3, #20]
   b5c94:	9301      	str	r3, [sp, #4]
   b5c96:	bd08      	pop	{r3, pc}
   b5c98:	00030218 	.word	0x00030218

000b5c9c <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b5c9c:	b508      	push	{r3, lr}
   b5c9e:	4b02      	ldr	r3, [pc, #8]	; (b5ca8 <hal_rtc_time_is_valid+0xc>)
   b5ca0:	681b      	ldr	r3, [r3, #0]
   b5ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b5ca4:	9301      	str	r3, [sp, #4]
   b5ca6:	bd08      	pop	{r3, pc}
   b5ca8:	00030218 	.word	0x00030218

000b5cac <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b5cac:	b508      	push	{r3, lr}
   b5cae:	4b02      	ldr	r3, [pc, #8]	; (b5cb8 <hal_rtc_get_time+0xc>)
   b5cb0:	681b      	ldr	r3, [r3, #0]
   b5cb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b5cb4:	9301      	str	r3, [sp, #4]
   b5cb6:	bd08      	pop	{r3, pc}
   b5cb8:	00030218 	.word	0x00030218

000b5cbc <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b5cbc:	b508      	push	{r3, lr}
   b5cbe:	4b02      	ldr	r3, [pc, #8]	; (b5cc8 <HAL_Validate_Pin_Function+0xc>)
   b5cc0:	681b      	ldr	r3, [r3, #0]
   b5cc2:	685b      	ldr	r3, [r3, #4]
   b5cc4:	9301      	str	r3, [sp, #4]
   b5cc6:	bd08      	pop	{r3, pc}
   b5cc8:	0003022c 	.word	0x0003022c

000b5ccc <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b5ccc:	b508      	push	{r3, lr}
   b5cce:	4b02      	ldr	r3, [pc, #8]	; (b5cd8 <HAL_Pin_Mode+0xc>)
   b5cd0:	681b      	ldr	r3, [r3, #0]
   b5cd2:	689b      	ldr	r3, [r3, #8]
   b5cd4:	9301      	str	r3, [sp, #4]
   b5cd6:	bd08      	pop	{r3, pc}
   b5cd8:	0003022c 	.word	0x0003022c

000b5cdc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b5cdc:	b508      	push	{r3, lr}
   b5cde:	4b02      	ldr	r3, [pc, #8]	; (b5ce8 <HAL_Get_Pin_Mode+0xc>)
   b5ce0:	681b      	ldr	r3, [r3, #0]
   b5ce2:	68db      	ldr	r3, [r3, #12]
   b5ce4:	9301      	str	r3, [sp, #4]
   b5ce6:	bd08      	pop	{r3, pc}
   b5ce8:	0003022c 	.word	0x0003022c

000b5cec <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b5cec:	b508      	push	{r3, lr}
   b5cee:	4b02      	ldr	r3, [pc, #8]	; (b5cf8 <HAL_GPIO_Write+0xc>)
   b5cf0:	681b      	ldr	r3, [r3, #0]
   b5cf2:	691b      	ldr	r3, [r3, #16]
   b5cf4:	9301      	str	r3, [sp, #4]
   b5cf6:	bd08      	pop	{r3, pc}
   b5cf8:	0003022c 	.word	0x0003022c

000b5cfc <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b5cfc:	b508      	push	{r3, lr}
   b5cfe:	4b02      	ldr	r3, [pc, #8]	; (b5d08 <HAL_GPIO_Read+0xc>)
   b5d00:	681b      	ldr	r3, [r3, #0]
   b5d02:	695b      	ldr	r3, [r3, #20]
   b5d04:	9301      	str	r3, [sp, #4]
   b5d06:	bd08      	pop	{r3, pc}
   b5d08:	0003022c 	.word	0x0003022c

000b5d0c <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b5d0c:	b508      	push	{r3, lr}
   b5d0e:	4b02      	ldr	r3, [pc, #8]	; (b5d18 <hal_adc_read+0xc>)
   b5d10:	681b      	ldr	r3, [r3, #0]
   b5d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5d14:	9301      	str	r3, [sp, #4]
   b5d16:	bd08      	pop	{r3, pc}
   b5d18:	0003022c 	.word	0x0003022c

000b5d1c <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
   b5d1c:	b508      	push	{r3, lr}
   b5d1e:	4b02      	ldr	r3, [pc, #8]	; (b5d28 <HAL_Pulse_In+0xc>)
   b5d20:	681b      	ldr	r3, [r3, #0]
   b5d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b5d24:	9301      	str	r3, [sp, #4]
   b5d26:	bd08      	pop	{r3, pc}
   b5d28:	0003022c 	.word	0x0003022c

000b5d2c <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b5d2c:	b508      	push	{r3, lr}
   b5d2e:	4b02      	ldr	r3, [pc, #8]	; (b5d38 <hal_i2c_begin+0xc>)
   b5d30:	681b      	ldr	r3, [r3, #0]
   b5d32:	68db      	ldr	r3, [r3, #12]
   b5d34:	9301      	str	r3, [sp, #4]
   b5d36:	bd08      	pop	{r3, pc}
   b5d38:	00030228 	.word	0x00030228

000b5d3c <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b5d3c:	b508      	push	{r3, lr}
   b5d3e:	4b02      	ldr	r3, [pc, #8]	; (b5d48 <hal_i2c_begin_transmission+0xc>)
   b5d40:	681b      	ldr	r3, [r3, #0]
   b5d42:	699b      	ldr	r3, [r3, #24]
   b5d44:	9301      	str	r3, [sp, #4]
   b5d46:	bd08      	pop	{r3, pc}
   b5d48:	00030228 	.word	0x00030228

000b5d4c <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b5d4c:	b508      	push	{r3, lr}
   b5d4e:	4b02      	ldr	r3, [pc, #8]	; (b5d58 <hal_i2c_end_transmission+0xc>)
   b5d50:	681b      	ldr	r3, [r3, #0]
   b5d52:	69db      	ldr	r3, [r3, #28]
   b5d54:	9301      	str	r3, [sp, #4]
   b5d56:	bd08      	pop	{r3, pc}
   b5d58:	00030228 	.word	0x00030228

000b5d5c <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b5d5c:	b508      	push	{r3, lr}
   b5d5e:	4b02      	ldr	r3, [pc, #8]	; (b5d68 <hal_i2c_write+0xc>)
   b5d60:	681b      	ldr	r3, [r3, #0]
   b5d62:	6a1b      	ldr	r3, [r3, #32]
   b5d64:	9301      	str	r3, [sp, #4]
   b5d66:	bd08      	pop	{r3, pc}
   b5d68:	00030228 	.word	0x00030228

000b5d6c <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5d6c:	b508      	push	{r3, lr}
   b5d6e:	4b02      	ldr	r3, [pc, #8]	; (b5d78 <hal_i2c_available+0xc>)
   b5d70:	681b      	ldr	r3, [r3, #0]
   b5d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5d74:	9301      	str	r3, [sp, #4]
   b5d76:	bd08      	pop	{r3, pc}
   b5d78:	00030228 	.word	0x00030228

000b5d7c <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5d7c:	b508      	push	{r3, lr}
   b5d7e:	4b02      	ldr	r3, [pc, #8]	; (b5d88 <hal_i2c_read+0xc>)
   b5d80:	681b      	ldr	r3, [r3, #0]
   b5d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5d84:	9301      	str	r3, [sp, #4]
   b5d86:	bd08      	pop	{r3, pc}
   b5d88:	00030228 	.word	0x00030228

000b5d8c <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5d8c:	b508      	push	{r3, lr}
   b5d8e:	4b02      	ldr	r3, [pc, #8]	; (b5d98 <hal_i2c_peek+0xc>)
   b5d90:	681b      	ldr	r3, [r3, #0]
   b5d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5d94:	9301      	str	r3, [sp, #4]
   b5d96:	bd08      	pop	{r3, pc}
   b5d98:	00030228 	.word	0x00030228

000b5d9c <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b5d9c:	b508      	push	{r3, lr}
   b5d9e:	4b02      	ldr	r3, [pc, #8]	; (b5da8 <hal_i2c_flush+0xc>)
   b5da0:	681b      	ldr	r3, [r3, #0]
   b5da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5da4:	9301      	str	r3, [sp, #4]
   b5da6:	bd08      	pop	{r3, pc}
   b5da8:	00030228 	.word	0x00030228

000b5dac <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b5dac:	b508      	push	{r3, lr}
   b5dae:	4b02      	ldr	r3, [pc, #8]	; (b5db8 <hal_i2c_is_enabled+0xc>)
   b5db0:	681b      	ldr	r3, [r3, #0]
   b5db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5db4:	9301      	str	r3, [sp, #4]
   b5db6:	bd08      	pop	{r3, pc}
   b5db8:	00030228 	.word	0x00030228

000b5dbc <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b5dbc:	b508      	push	{r3, lr}
   b5dbe:	4b02      	ldr	r3, [pc, #8]	; (b5dc8 <hal_i2c_init+0xc>)
   b5dc0:	681b      	ldr	r3, [r3, #0]
   b5dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5dc4:	9301      	str	r3, [sp, #4]
   b5dc6:	bd08      	pop	{r3, pc}
   b5dc8:	00030228 	.word	0x00030228

000b5dcc <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b5dcc:	b508      	push	{r3, lr}
   b5dce:	4b02      	ldr	r3, [pc, #8]	; (b5dd8 <hal_i2c_request_ex+0xc>)
   b5dd0:	681b      	ldr	r3, [r3, #0]
   b5dd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5dd4:	9301      	str	r3, [sp, #4]
   b5dd6:	bd08      	pop	{r3, pc}
   b5dd8:	00030228 	.word	0x00030228

000b5ddc <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b5ddc:	b508      	push	{r3, lr}
   b5dde:	4b02      	ldr	r3, [pc, #8]	; (b5de8 <if_index_to_name+0xc>)
   b5de0:	681b      	ldr	r3, [r3, #0]
   b5de2:	695b      	ldr	r3, [r3, #20]
   b5de4:	9301      	str	r3, [sp, #4]
   b5de6:	bd08      	pop	{r3, pc}
   b5de8:	0003026c 	.word	0x0003026c

000b5dec <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5dec:	b508      	push	{r3, lr}
   b5dee:	4b02      	ldr	r3, [pc, #8]	; (b5df8 <inet_inet_ntop+0xc>)
   b5df0:	681b      	ldr	r3, [r3, #0]
   b5df2:	695b      	ldr	r3, [r3, #20]
   b5df4:	9301      	str	r3, [sp, #4]
   b5df6:	bd08      	pop	{r3, pc}
   b5df8:	00030264 	.word	0x00030264

000b5dfc <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b5dfc:	b508      	push	{r3, lr}
   b5dfe:	4b02      	ldr	r3, [pc, #8]	; (b5e08 <inet_htonl+0xc>)
   b5e00:	681b      	ldr	r3, [r3, #0]
   b5e02:	6a1b      	ldr	r3, [r3, #32]
   b5e04:	9301      	str	r3, [sp, #4]
   b5e06:	bd08      	pop	{r3, pc}
   b5e08:	00030264 	.word	0x00030264

000b5e0c <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b5e0c:	b508      	push	{r3, lr}
   b5e0e:	4b02      	ldr	r3, [pc, #8]	; (b5e18 <inet_htons+0xc>)
   b5e10:	681b      	ldr	r3, [r3, #0]
   b5e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5e14:	9301      	str	r3, [sp, #4]
   b5e16:	bd08      	pop	{r3, pc}
   b5e18:	00030264 	.word	0x00030264

000b5e1c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5e1c:	b508      	push	{r3, lr}
   b5e1e:	4b02      	ldr	r3, [pc, #8]	; (b5e28 <netdb_freeaddrinfo+0xc>)
   b5e20:	681b      	ldr	r3, [r3, #0]
   b5e22:	689b      	ldr	r3, [r3, #8]
   b5e24:	9301      	str	r3, [sp, #4]
   b5e26:	bd08      	pop	{r3, pc}
   b5e28:	00030268 	.word	0x00030268

000b5e2c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5e2c:	b508      	push	{r3, lr}
   b5e2e:	4b02      	ldr	r3, [pc, #8]	; (b5e38 <netdb_getaddrinfo+0xc>)
   b5e30:	681b      	ldr	r3, [r3, #0]
   b5e32:	68db      	ldr	r3, [r3, #12]
   b5e34:	9301      	str	r3, [sp, #4]
   b5e36:	bd08      	pop	{r3, pc}
   b5e38:	00030268 	.word	0x00030268

000b5e3c <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b5e3c:	b508      	push	{r3, lr}
   b5e3e:	4b02      	ldr	r3, [pc, #8]	; (b5e48 <sock_setsockopt+0xc>)
   b5e40:	681b      	ldr	r3, [r3, #0]
   b5e42:	699b      	ldr	r3, [r3, #24]
   b5e44:	9301      	str	r3, [sp, #4]
   b5e46:	bd08      	pop	{r3, pc}
   b5e48:	00030238 	.word	0x00030238

000b5e4c <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b5e4c:	b508      	push	{r3, lr}
   b5e4e:	4b02      	ldr	r3, [pc, #8]	; (b5e58 <sock_close+0xc>)
   b5e50:	681b      	ldr	r3, [r3, #0]
   b5e52:	69db      	ldr	r3, [r3, #28]
   b5e54:	9301      	str	r3, [sp, #4]
   b5e56:	bd08      	pop	{r3, pc}
   b5e58:	00030238 	.word	0x00030238

000b5e5c <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b5e5c:	b508      	push	{r3, lr}
   b5e5e:	4b02      	ldr	r3, [pc, #8]	; (b5e68 <sock_connect+0xc>)
   b5e60:	681b      	ldr	r3, [r3, #0]
   b5e62:	6a1b      	ldr	r3, [r3, #32]
   b5e64:	9301      	str	r3, [sp, #4]
   b5e66:	bd08      	pop	{r3, pc}
   b5e68:	00030238 	.word	0x00030238

000b5e6c <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b5e6c:	b508      	push	{r3, lr}
   b5e6e:	4b02      	ldr	r3, [pc, #8]	; (b5e78 <sock_recv+0xc>)
   b5e70:	681b      	ldr	r3, [r3, #0]
   b5e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5e74:	9301      	str	r3, [sp, #4]
   b5e76:	bd08      	pop	{r3, pc}
   b5e78:	00030238 	.word	0x00030238

000b5e7c <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b5e7c:	b508      	push	{r3, lr}
   b5e7e:	4b02      	ldr	r3, [pc, #8]	; (b5e88 <sock_send+0xc>)
   b5e80:	681b      	ldr	r3, [r3, #0]
   b5e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5e84:	9301      	str	r3, [sp, #4]
   b5e86:	bd08      	pop	{r3, pc}
   b5e88:	00030238 	.word	0x00030238

000b5e8c <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b5e8c:	b508      	push	{r3, lr}
   b5e8e:	4b02      	ldr	r3, [pc, #8]	; (b5e98 <sock_socket+0xc>)
   b5e90:	681b      	ldr	r3, [r3, #0]
   b5e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b5e94:	9301      	str	r3, [sp, #4]
   b5e96:	bd08      	pop	{r3, pc}
   b5e98:	00030238 	.word	0x00030238

000b5e9c <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b5e9c:	b508      	push	{r3, lr}
   b5e9e:	4b02      	ldr	r3, [pc, #8]	; (b5ea8 <hal_spi_begin+0xc>)
   b5ea0:	681b      	ldr	r3, [r3, #0]
   b5ea2:	681b      	ldr	r3, [r3, #0]
   b5ea4:	9301      	str	r3, [sp, #4]
   b5ea6:	bd08      	pop	{r3, pc}
   b5ea8:	00030230 	.word	0x00030230

000b5eac <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b5eac:	b508      	push	{r3, lr}
   b5eae:	4b02      	ldr	r3, [pc, #8]	; (b5eb8 <hal_spi_transfer+0xc>)
   b5eb0:	681b      	ldr	r3, [r3, #0]
   b5eb2:	695b      	ldr	r3, [r3, #20]
   b5eb4:	9301      	str	r3, [sp, #4]
   b5eb6:	bd08      	pop	{r3, pc}
   b5eb8:	00030230 	.word	0x00030230

000b5ebc <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b5ebc:	b508      	push	{r3, lr}
   b5ebe:	4b02      	ldr	r3, [pc, #8]	; (b5ec8 <hal_spi_init+0xc>)
   b5ec0:	681b      	ldr	r3, [r3, #0]
   b5ec2:	69db      	ldr	r3, [r3, #28]
   b5ec4:	9301      	str	r3, [sp, #4]
   b5ec6:	bd08      	pop	{r3, pc}
   b5ec8:	00030230 	.word	0x00030230

000b5ecc <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b5ecc:	b508      	push	{r3, lr}
   b5ece:	4b02      	ldr	r3, [pc, #8]	; (b5ed8 <hal_spi_is_enabled+0xc>)
   b5ed0:	681b      	ldr	r3, [r3, #0]
   b5ed2:	6a1b      	ldr	r3, [r3, #32]
   b5ed4:	9301      	str	r3, [sp, #4]
   b5ed6:	bd08      	pop	{r3, pc}
   b5ed8:	00030230 	.word	0x00030230

000b5edc <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b5edc:	b508      	push	{r3, lr}
   b5ede:	4b02      	ldr	r3, [pc, #8]	; (b5ee8 <hal_spi_info+0xc>)
   b5ee0:	681b      	ldr	r3, [r3, #0]
   b5ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5ee4:	9301      	str	r3, [sp, #4]
   b5ee6:	bd08      	pop	{r3, pc}
   b5ee8:	00030230 	.word	0x00030230

000b5eec <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b5eec:	b508      	push	{r3, lr}
   b5eee:	4b02      	ldr	r3, [pc, #8]	; (b5ef8 <hal_spi_set_settings+0xc>)
   b5ef0:	681b      	ldr	r3, [r3, #0]
   b5ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5ef4:	9301      	str	r3, [sp, #4]
   b5ef6:	bd08      	pop	{r3, pc}
   b5ef8:	00030230 	.word	0x00030230

000b5efc <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b5efc:	b508      	push	{r3, lr}
   b5efe:	4b02      	ldr	r3, [pc, #8]	; (b5f08 <hal_spi_acquire+0xc>)
   b5f00:	681b      	ldr	r3, [r3, #0]
   b5f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5f04:	9301      	str	r3, [sp, #4]
   b5f06:	bd08      	pop	{r3, pc}
   b5f08:	00030230 	.word	0x00030230

000b5f0c <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b5f0c:	b508      	push	{r3, lr}
   b5f0e:	4b02      	ldr	r3, [pc, #8]	; (b5f18 <hal_spi_release+0xc>)
   b5f10:	681b      	ldr	r3, [r3, #0]
   b5f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5f14:	9301      	str	r3, [sp, #4]
   b5f16:	bd08      	pop	{r3, pc}
   b5f18:	00030230 	.word	0x00030230

000b5f1c <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b5f1c:	b508      	push	{r3, lr}
   b5f1e:	4b02      	ldr	r3, [pc, #8]	; (b5f28 <hal_usart_write+0xc>)
   b5f20:	681b      	ldr	r3, [r3, #0]
   b5f22:	68db      	ldr	r3, [r3, #12]
   b5f24:	9301      	str	r3, [sp, #4]
   b5f26:	bd08      	pop	{r3, pc}
   b5f28:	0003023c 	.word	0x0003023c

000b5f2c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b5f2c:	b508      	push	{r3, lr}
   b5f2e:	4b02      	ldr	r3, [pc, #8]	; (b5f38 <hal_usart_available+0xc>)
   b5f30:	681b      	ldr	r3, [r3, #0]
   b5f32:	691b      	ldr	r3, [r3, #16]
   b5f34:	9301      	str	r3, [sp, #4]
   b5f36:	bd08      	pop	{r3, pc}
   b5f38:	0003023c 	.word	0x0003023c

000b5f3c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5f3c:	b508      	push	{r3, lr}
   b5f3e:	4b02      	ldr	r3, [pc, #8]	; (b5f48 <hal_usart_read+0xc>)
   b5f40:	681b      	ldr	r3, [r3, #0]
   b5f42:	695b      	ldr	r3, [r3, #20]
   b5f44:	9301      	str	r3, [sp, #4]
   b5f46:	bd08      	pop	{r3, pc}
   b5f48:	0003023c 	.word	0x0003023c

000b5f4c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5f4c:	b508      	push	{r3, lr}
   b5f4e:	4b02      	ldr	r3, [pc, #8]	; (b5f58 <hal_usart_peek+0xc>)
   b5f50:	681b      	ldr	r3, [r3, #0]
   b5f52:	699b      	ldr	r3, [r3, #24]
   b5f54:	9301      	str	r3, [sp, #4]
   b5f56:	bd08      	pop	{r3, pc}
   b5f58:	0003023c 	.word	0x0003023c

000b5f5c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5f5c:	b508      	push	{r3, lr}
   b5f5e:	4b02      	ldr	r3, [pc, #8]	; (b5f68 <hal_usart_flush+0xc>)
   b5f60:	681b      	ldr	r3, [r3, #0]
   b5f62:	69db      	ldr	r3, [r3, #28]
   b5f64:	9301      	str	r3, [sp, #4]
   b5f66:	bd08      	pop	{r3, pc}
   b5f68:	0003023c 	.word	0x0003023c

000b5f6c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b5f6c:	b508      	push	{r3, lr}
   b5f6e:	4b02      	ldr	r3, [pc, #8]	; (b5f78 <hal_usart_is_enabled+0xc>)
   b5f70:	681b      	ldr	r3, [r3, #0]
   b5f72:	6a1b      	ldr	r3, [r3, #32]
   b5f74:	9301      	str	r3, [sp, #4]
   b5f76:	bd08      	pop	{r3, pc}
   b5f78:	0003023c 	.word	0x0003023c

000b5f7c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5f7c:	b508      	push	{r3, lr}
   b5f7e:	4b02      	ldr	r3, [pc, #8]	; (b5f88 <hal_usart_available_data_for_write+0xc>)
   b5f80:	681b      	ldr	r3, [r3, #0]
   b5f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5f84:	9301      	str	r3, [sp, #4]
   b5f86:	bd08      	pop	{r3, pc}
   b5f88:	0003023c 	.word	0x0003023c

000b5f8c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5f8c:	b508      	push	{r3, lr}
   b5f8e:	4b02      	ldr	r3, [pc, #8]	; (b5f98 <hal_usart_init_ex+0xc>)
   b5f90:	681b      	ldr	r3, [r3, #0]
   b5f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5f94:	9301      	str	r3, [sp, #4]
   b5f96:	bd08      	pop	{r3, pc}
   b5f98:	0003023c 	.word	0x0003023c

000b5f9c <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b5f9c:	b508      	push	{r3, lr}
   b5f9e:	4b02      	ldr	r3, [pc, #8]	; (b5fa8 <HAL_USB_USART_Init+0xc>)
   b5fa0:	681b      	ldr	r3, [r3, #0]
   b5fa2:	681b      	ldr	r3, [r3, #0]
   b5fa4:	9301      	str	r3, [sp, #4]
   b5fa6:	bd08      	pop	{r3, pc}
   b5fa8:	0003024c 	.word	0x0003024c

000b5fac <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b5fac:	b508      	push	{r3, lr}
   b5fae:	4b02      	ldr	r3, [pc, #8]	; (b5fb8 <HAL_USB_USART_Begin+0xc>)
   b5fb0:	681b      	ldr	r3, [r3, #0]
   b5fb2:	685b      	ldr	r3, [r3, #4]
   b5fb4:	9301      	str	r3, [sp, #4]
   b5fb6:	bd08      	pop	{r3, pc}
   b5fb8:	0003024c 	.word	0x0003024c

000b5fbc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b5fbc:	b508      	push	{r3, lr}
   b5fbe:	4b02      	ldr	r3, [pc, #8]	; (b5fc8 <HAL_USB_USART_Available_Data+0xc>)
   b5fc0:	681b      	ldr	r3, [r3, #0]
   b5fc2:	691b      	ldr	r3, [r3, #16]
   b5fc4:	9301      	str	r3, [sp, #4]
   b5fc6:	bd08      	pop	{r3, pc}
   b5fc8:	0003024c 	.word	0x0003024c

000b5fcc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b5fcc:	b508      	push	{r3, lr}
   b5fce:	4b02      	ldr	r3, [pc, #8]	; (b5fd8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b5fd0:	681b      	ldr	r3, [r3, #0]
   b5fd2:	695b      	ldr	r3, [r3, #20]
   b5fd4:	9301      	str	r3, [sp, #4]
   b5fd6:	bd08      	pop	{r3, pc}
   b5fd8:	0003024c 	.word	0x0003024c

000b5fdc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5fdc:	b508      	push	{r3, lr}
   b5fde:	4b02      	ldr	r3, [pc, #8]	; (b5fe8 <HAL_USB_USART_Receive_Data+0xc>)
   b5fe0:	681b      	ldr	r3, [r3, #0]
   b5fe2:	699b      	ldr	r3, [r3, #24]
   b5fe4:	9301      	str	r3, [sp, #4]
   b5fe6:	bd08      	pop	{r3, pc}
   b5fe8:	0003024c 	.word	0x0003024c

000b5fec <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5fec:	b508      	push	{r3, lr}
   b5fee:	4b02      	ldr	r3, [pc, #8]	; (b5ff8 <HAL_USB_USART_Send_Data+0xc>)
   b5ff0:	681b      	ldr	r3, [r3, #0]
   b5ff2:	69db      	ldr	r3, [r3, #28]
   b5ff4:	9301      	str	r3, [sp, #4]
   b5ff6:	bd08      	pop	{r3, pc}
   b5ff8:	0003024c 	.word	0x0003024c

000b5ffc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b5ffc:	b508      	push	{r3, lr}
   b5ffe:	4b02      	ldr	r3, [pc, #8]	; (b6008 <HAL_USB_USART_Flush_Data+0xc>)
   b6000:	681b      	ldr	r3, [r3, #0]
   b6002:	6a1b      	ldr	r3, [r3, #32]
   b6004:	9301      	str	r3, [sp, #4]
   b6006:	bd08      	pop	{r3, pc}
   b6008:	0003024c 	.word	0x0003024c

000b600c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b600c:	b508      	push	{r3, lr}
   b600e:	4b02      	ldr	r3, [pc, #8]	; (b6018 <log_message+0xc>)
   b6010:	681b      	ldr	r3, [r3, #0]
   b6012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6014:	9301      	str	r3, [sp, #4]
   b6016:	bd08      	pop	{r3, pc}
   b6018:	00030260 	.word	0x00030260

000b601c <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b601c:	b508      	push	{r3, lr}
   b601e:	4b02      	ldr	r3, [pc, #8]	; (b6028 <system_mode+0xc>)
   b6020:	681b      	ldr	r3, [r3, #0]
   b6022:	681b      	ldr	r3, [r3, #0]
   b6024:	9301      	str	r3, [sp, #4]
   b6026:	bd08      	pop	{r3, pc}
   b6028:	00030220 	.word	0x00030220

000b602c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b602c:	b508      	push	{r3, lr}
   b602e:	4b02      	ldr	r3, [pc, #8]	; (b6038 <set_system_mode+0xc>)
   b6030:	681b      	ldr	r3, [r3, #0]
   b6032:	685b      	ldr	r3, [r3, #4]
   b6034:	9301      	str	r3, [sp, #4]
   b6036:	bd08      	pop	{r3, pc}
   b6038:	00030220 	.word	0x00030220

000b603c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b603c:	b508      	push	{r3, lr}
   b603e:	4b02      	ldr	r3, [pc, #8]	; (b6048 <system_delay_ms+0xc>)
   b6040:	681b      	ldr	r3, [r3, #0]
   b6042:	695b      	ldr	r3, [r3, #20]
   b6044:	9301      	str	r3, [sp, #4]
   b6046:	bd08      	pop	{r3, pc}
   b6048:	00030220 	.word	0x00030220

000b604c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b604c:	b508      	push	{r3, lr}
   b604e:	4b02      	ldr	r3, [pc, #8]	; (b6058 <application_thread_current+0xc>)
   b6050:	681b      	ldr	r3, [r3, #0]
   b6052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6054:	9301      	str	r3, [sp, #4]
   b6056:	bd08      	pop	{r3, pc}
   b6058:	00030220 	.word	0x00030220

000b605c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b605c:	b508      	push	{r3, lr}
   b605e:	4b02      	ldr	r3, [pc, #8]	; (b6068 <application_thread_invoke+0xc>)
   b6060:	681b      	ldr	r3, [r3, #0]
   b6062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6064:	9301      	str	r3, [sp, #4]
   b6066:	bd08      	pop	{r3, pc}
   b6068:	00030220 	.word	0x00030220

000b606c <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b606c:	b508      	push	{r3, lr}
   b606e:	4b02      	ldr	r3, [pc, #8]	; (b6078 <system_thread_get_state+0xc>)
   b6070:	681b      	ldr	r3, [r3, #0]
   b6072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b6074:	9301      	str	r3, [sp, #4]
   b6076:	bd08      	pop	{r3, pc}
   b6078:	00030220 	.word	0x00030220

000b607c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b607c:	b508      	push	{r3, lr}
   b607e:	4b03      	ldr	r3, [pc, #12]	; (b608c <system_ctrl_set_app_request_handler+0x10>)
   b6080:	681b      	ldr	r3, [r3, #0]
   b6082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b6086:	9301      	str	r3, [sp, #4]
   b6088:	bd08      	pop	{r3, pc}
   b608a:	0000      	.short	0x0000
   b608c:	00030220 	.word	0x00030220

000b6090 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b6090:	b508      	push	{r3, lr}
   b6092:	4b03      	ldr	r3, [pc, #12]	; (b60a0 <system_ctrl_set_result+0x10>)
   b6094:	681b      	ldr	r3, [r3, #0]
   b6096:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b609a:	9301      	str	r3, [sp, #4]
   b609c:	bd08      	pop	{r3, pc}
   b609e:	0000      	.short	0x0000
   b60a0:	00030220 	.word	0x00030220

000b60a4 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
   b60a4:	b508      	push	{r3, lr}
   b60a6:	4b02      	ldr	r3, [pc, #8]	; (b60b0 <spark_process+0xc>)
   b60a8:	681b      	ldr	r3, [r3, #0]
   b60aa:	689b      	ldr	r3, [r3, #8]
   b60ac:	9301      	str	r3, [sp, #4]
   b60ae:	bd08      	pop	{r3, pc}
   b60b0:	00030244 	.word	0x00030244

000b60b4 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b60b4:	b508      	push	{r3, lr}
   b60b6:	4b02      	ldr	r3, [pc, #8]	; (b60c0 <spark_cloud_flag_connected+0xc>)
   b60b8:	681b      	ldr	r3, [r3, #0]
   b60ba:	695b      	ldr	r3, [r3, #20]
   b60bc:	9301      	str	r3, [sp, #4]
   b60be:	bd08      	pop	{r3, pc}
   b60c0:	00030244 	.word	0x00030244

000b60c4 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b60c4:	b508      	push	{r3, lr}
   b60c6:	4b02      	ldr	r3, [pc, #8]	; (b60d0 <spark_send_event+0xc>)
   b60c8:	681b      	ldr	r3, [r3, #0]
   b60ca:	6a1b      	ldr	r3, [r3, #32]
   b60cc:	9301      	str	r3, [sp, #4]
   b60ce:	bd08      	pop	{r3, pc}
   b60d0:	00030244 	.word	0x00030244

000b60d4 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b60d4:	b508      	push	{r3, lr}
   b60d6:	4b02      	ldr	r3, [pc, #8]	; (b60e0 <spark_sync_time_pending+0xc>)
   b60d8:	681b      	ldr	r3, [r3, #0]
   b60da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b60dc:	9301      	str	r3, [sp, #4]
   b60de:	bd08      	pop	{r3, pc}
   b60e0:	00030244 	.word	0x00030244

000b60e4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b60e4:	b508      	push	{r3, lr}
   b60e6:	4b02      	ldr	r3, [pc, #8]	; (b60f0 <spark_set_random_seed_from_cloud_handler+0xc>)
   b60e8:	681b      	ldr	r3, [r3, #0]
   b60ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b60ec:	9301      	str	r3, [sp, #4]
   b60ee:	bd08      	pop	{r3, pc}
   b60f0:	00030244 	.word	0x00030244

000b60f4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b60f4:	b508      	push	{r3, lr}
   b60f6:	4b02      	ldr	r3, [pc, #8]	; (b6100 <network_connect+0xc>)
   b60f8:	681b      	ldr	r3, [r3, #0]
   b60fa:	685b      	ldr	r3, [r3, #4]
   b60fc:	9301      	str	r3, [sp, #4]
   b60fe:	bd08      	pop	{r3, pc}
   b6100:	00030240 	.word	0x00030240

000b6104 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b6104:	b508      	push	{r3, lr}
   b6106:	4b02      	ldr	r3, [pc, #8]	; (b6110 <network_connecting+0xc>)
   b6108:	681b      	ldr	r3, [r3, #0]
   b610a:	689b      	ldr	r3, [r3, #8]
   b610c:	9301      	str	r3, [sp, #4]
   b610e:	bd08      	pop	{r3, pc}
   b6110:	00030240 	.word	0x00030240

000b6114 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b6114:	b508      	push	{r3, lr}
   b6116:	4b02      	ldr	r3, [pc, #8]	; (b6120 <network_disconnect+0xc>)
   b6118:	681b      	ldr	r3, [r3, #0]
   b611a:	68db      	ldr	r3, [r3, #12]
   b611c:	9301      	str	r3, [sp, #4]
   b611e:	bd08      	pop	{r3, pc}
   b6120:	00030240 	.word	0x00030240

000b6124 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b6124:	b508      	push	{r3, lr}
   b6126:	4b02      	ldr	r3, [pc, #8]	; (b6130 <network_ready+0xc>)
   b6128:	681b      	ldr	r3, [r3, #0]
   b612a:	691b      	ldr	r3, [r3, #16]
   b612c:	9301      	str	r3, [sp, #4]
   b612e:	bd08      	pop	{r3, pc}
   b6130:	00030240 	.word	0x00030240

000b6134 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b6134:	b508      	push	{r3, lr}
   b6136:	4b02      	ldr	r3, [pc, #8]	; (b6140 <network_on+0xc>)
   b6138:	681b      	ldr	r3, [r3, #0]
   b613a:	695b      	ldr	r3, [r3, #20]
   b613c:	9301      	str	r3, [sp, #4]
   b613e:	bd08      	pop	{r3, pc}
   b6140:	00030240 	.word	0x00030240

000b6144 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b6144:	b508      	push	{r3, lr}
   b6146:	4b02      	ldr	r3, [pc, #8]	; (b6150 <network_off+0xc>)
   b6148:	681b      	ldr	r3, [r3, #0]
   b614a:	699b      	ldr	r3, [r3, #24]
   b614c:	9301      	str	r3, [sp, #4]
   b614e:	bd08      	pop	{r3, pc}
   b6150:	00030240 	.word	0x00030240

000b6154 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b6154:	b508      	push	{r3, lr}
   b6156:	4b02      	ldr	r3, [pc, #8]	; (b6160 <network_listen+0xc>)
   b6158:	681b      	ldr	r3, [r3, #0]
   b615a:	69db      	ldr	r3, [r3, #28]
   b615c:	9301      	str	r3, [sp, #4]
   b615e:	bd08      	pop	{r3, pc}
   b6160:	00030240 	.word	0x00030240

000b6164 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b6164:	b508      	push	{r3, lr}
   b6166:	4b02      	ldr	r3, [pc, #8]	; (b6170 <network_listening+0xc>)
   b6168:	681b      	ldr	r3, [r3, #0]
   b616a:	6a1b      	ldr	r3, [r3, #32]
   b616c:	9301      	str	r3, [sp, #4]
   b616e:	bd08      	pop	{r3, pc}
   b6170:	00030240 	.word	0x00030240

000b6174 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b6174:	b508      	push	{r3, lr}
   b6176:	4b02      	ldr	r3, [pc, #8]	; (b6180 <network_set_listen_timeout+0xc>)
   b6178:	681b      	ldr	r3, [r3, #0]
   b617a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b617c:	9301      	str	r3, [sp, #4]
   b617e:	bd08      	pop	{r3, pc}
   b6180:	00030240 	.word	0x00030240

000b6184 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b6184:	b508      	push	{r3, lr}
   b6186:	4b02      	ldr	r3, [pc, #8]	; (b6190 <network_get_listen_timeout+0xc>)
   b6188:	681b      	ldr	r3, [r3, #0]
   b618a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b618c:	9301      	str	r3, [sp, #4]
   b618e:	bd08      	pop	{r3, pc}
   b6190:	00030240 	.word	0x00030240

000b6194 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b6194:	b508      	push	{r3, lr}
   b6196:	4b02      	ldr	r3, [pc, #8]	; (b61a0 <network_is_on+0xc>)
   b6198:	681b      	ldr	r3, [r3, #0]
   b619a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b619c:	9301      	str	r3, [sp, #4]
   b619e:	bd08      	pop	{r3, pc}
   b61a0:	00030240 	.word	0x00030240

000b61a4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b61a4:	b508      	push	{r3, lr}
   b61a6:	4b02      	ldr	r3, [pc, #8]	; (b61b0 <network_is_off+0xc>)
   b61a8:	681b      	ldr	r3, [r3, #0]
   b61aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b61ac:	9301      	str	r3, [sp, #4]
   b61ae:	bd08      	pop	{r3, pc}
   b61b0:	00030240 	.word	0x00030240

000b61b4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b61b4:	b508      	push	{r3, lr}
   b61b6:	4b02      	ldr	r3, [pc, #8]	; (b61c0 <malloc+0xc>)
   b61b8:	681b      	ldr	r3, [r3, #0]
   b61ba:	681b      	ldr	r3, [r3, #0]
   b61bc:	9301      	str	r3, [sp, #4]
   b61be:	bd08      	pop	{r3, pc}
   b61c0:	0003021c 	.word	0x0003021c

000b61c4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b61c4:	b508      	push	{r3, lr}
   b61c6:	4b02      	ldr	r3, [pc, #8]	; (b61d0 <free+0xc>)
   b61c8:	681b      	ldr	r3, [r3, #0]
   b61ca:	685b      	ldr	r3, [r3, #4]
   b61cc:	9301      	str	r3, [sp, #4]
   b61ce:	bd08      	pop	{r3, pc}
   b61d0:	0003021c 	.word	0x0003021c

000b61d4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b61d4:	b508      	push	{r3, lr}
   b61d6:	4b02      	ldr	r3, [pc, #8]	; (b61e0 <realloc+0xc>)
   b61d8:	681b      	ldr	r3, [r3, #0]
   b61da:	689b      	ldr	r3, [r3, #8]
   b61dc:	9301      	str	r3, [sp, #4]
   b61de:	bd08      	pop	{r3, pc}
   b61e0:	0003021c 	.word	0x0003021c

000b61e4 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b61e4:	b508      	push	{r3, lr}
   b61e6:	4b02      	ldr	r3, [pc, #8]	; (b61f0 <vsnprintf+0xc>)
   b61e8:	681b      	ldr	r3, [r3, #0]
   b61ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b61ec:	9301      	str	r3, [sp, #4]
   b61ee:	bd08      	pop	{r3, pc}
   b61f0:	0003021c 	.word	0x0003021c

000b61f4 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b61f4:	b508      	push	{r3, lr}
   b61f6:	4b02      	ldr	r3, [pc, #8]	; (b6200 <abort+0xc>)
   b61f8:	681b      	ldr	r3, [r3, #0]
   b61fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b61fc:	9301      	str	r3, [sp, #4]
   b61fe:	bd08      	pop	{r3, pc}
   b6200:	0003021c 	.word	0x0003021c

000b6204 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b6204:	b508      	push	{r3, lr}
   b6206:	4b02      	ldr	r3, [pc, #8]	; (b6210 <_malloc_r+0xc>)
   b6208:	681b      	ldr	r3, [r3, #0]
   b620a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b620c:	9301      	str	r3, [sp, #4]
   b620e:	bd08      	pop	{r3, pc}
   b6210:	0003021c 	.word	0x0003021c

000b6214 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b6214:	b508      	push	{r3, lr}
   b6216:	4b02      	ldr	r3, [pc, #8]	; (b6220 <__errno+0xc>)
   b6218:	681b      	ldr	r3, [r3, #0]
   b621a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b621c:	9301      	str	r3, [sp, #4]
   b621e:	bd08      	pop	{r3, pc}
   b6220:	0003021c 	.word	0x0003021c

000b6224 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b6224:	b508      	push	{r3, lr}
   b6226:	4b02      	ldr	r3, [pc, #8]	; (b6230 <__assert_func+0xc>)
   b6228:	681b      	ldr	r3, [r3, #0]
   b622a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b622c:	9301      	str	r3, [sp, #4]
   b622e:	bd08      	pop	{r3, pc}
   b6230:	0003021c 	.word	0x0003021c

000b6234 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b6234:	b508      	push	{r3, lr}
   b6236:	4b02      	ldr	r3, [pc, #8]	; (b6240 <newlib_impure_ptr_callback+0xc>)
   b6238:	681b      	ldr	r3, [r3, #0]
   b623a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b623c:	9301      	str	r3, [sp, #4]
   b623e:	bd08      	pop	{r3, pc}
   b6240:	0003021c 	.word	0x0003021c

000b6244 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b6244:	2100      	movs	r1, #0
   b6246:	f7ff bef9 	b.w	b603c <system_delay_ms>

000b624a <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b624a:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b624c:	6883      	ldr	r3, [r0, #8]
   b624e:	4604      	mov	r4, r0
   b6250:	b90b      	cbnz	r3, b6256 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b6252:	f001 fd33 	bl	b7cbc <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6256:	68c3      	ldr	r3, [r0, #12]
   b6258:	4798      	blx	r3
      if (_M_manager)
   b625a:	68a3      	ldr	r3, [r4, #8]
   b625c:	b11b      	cbz	r3, b6266 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b625e:	2203      	movs	r2, #3
   b6260:	4621      	mov	r1, r4
   b6262:	4620      	mov	r0, r4
   b6264:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b6266:	4620      	mov	r0, r4
   b6268:	2110      	movs	r1, #16
}
   b626a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b626e:	f7fd bf18 	b.w	b40a2 <_ZdlPvj>

000b6272 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b6272:	b510      	push	{r4, lr}
      if (_M_manager)
   b6274:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b6276:	4604      	mov	r4, r0
      if (_M_manager)
   b6278:	b113      	cbz	r3, b6280 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b627a:	2203      	movs	r2, #3
   b627c:	4601      	mov	r1, r0
   b627e:	4798      	blx	r3
    }
   b6280:	4620      	mov	r0, r4
   b6282:	bd10      	pop	{r4, pc}

000b6284 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b6284:	b513      	push	{r0, r1, r4, lr}
   b6286:	460b      	mov	r3, r1
   b6288:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b628a:	e9d0 0100 	ldrd	r0, r1, [r0]
   b628e:	466c      	mov	r4, sp
   b6290:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b6294:	e893 0003 	ldmia.w	r3, {r0, r1}
   b6298:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b629c:	e894 0003 	ldmia.w	r4, {r0, r1}
   b62a0:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b62a4:	b002      	add	sp, #8
   b62a6:	bd10      	pop	{r4, pc}

000b62a8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b62a8:	4802      	ldr	r0, [pc, #8]	; (b62b4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b62aa:	2300      	movs	r3, #0
   b62ac:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b62ae:	f7ff bcdd 	b.w	b5c6c <os_mutex_recursive_create>
   b62b2:	bf00      	nop
   b62b4:	2003e6c4 	.word	0x2003e6c4

000b62b8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b62b8:	4770      	bx	lr

000b62ba <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b62ba:	2000      	movs	r0, #0
   b62bc:	4770      	bx	lr

000b62be <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b62be:	b510      	push	{r4, lr}
   b62c0:	2110      	movs	r1, #16
   b62c2:	4604      	mov	r4, r0
   b62c4:	f7fd feed 	bl	b40a2 <_ZdlPvj>
   b62c8:	4620      	mov	r0, r4
   b62ca:	bd10      	pop	{r4, pc}

000b62cc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b62cc:	b508      	push	{r3, lr}
      { delete this; }
   b62ce:	f7ff fff6 	bl	b62be <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b62d2:	bd08      	pop	{r3, pc}

000b62d4 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b62d4:	b530      	push	{r4, r5, lr}
        type_(type) {
   b62d6:	2200      	movs	r2, #0
   b62d8:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b62dc:	6002      	str	r2, [r0, #0]
   b62de:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b62e0:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b62e2:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b62e4:	680c      	ldr	r4, [r1, #0]
   b62e6:	8085      	strh	r5, [r0, #4]
   b62e8:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b62ea:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b62ec:	bd30      	pop	{r4, r5, pc}

000b62ee <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b62ee:	b510      	push	{r4, lr}
   b62f0:	4604      	mov	r4, r0
    free((void*)msg_);
   b62f2:	6800      	ldr	r0, [r0, #0]
   b62f4:	f7ff ff66 	bl	b61c4 <free>
}
   b62f8:	4620      	mov	r0, r4
   b62fa:	bd10      	pop	{r4, pc}

000b62fc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b62fc:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b62fe:	68c4      	ldr	r4, [r0, #12]
   b6300:	b1f4      	cbz	r4, b6340 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b6302:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b6304:	2b02      	cmp	r3, #2
   b6306:	d103      	bne.n	b6310 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b6308:	f104 000c 	add.w	r0, r4, #12
   b630c:	f7ff ffef 	bl	b62ee <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b6310:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b6312:	b135      	cbz	r5, b6322 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b6314:	4628      	mov	r0, r5
   b6316:	f7ff ffac 	bl	b6272 <_ZNSt14_Function_baseD1Ev>
   b631a:	2110      	movs	r1, #16
   b631c:	4628      	mov	r0, r5
   b631e:	f7fd fec0 	bl	b40a2 <_ZdlPvj>
   b6322:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b6324:	b135      	cbz	r5, b6334 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b6326:	4628      	mov	r0, r5
   b6328:	f7ff ffa3 	bl	b6272 <_ZNSt14_Function_baseD1Ev>
   b632c:	2110      	movs	r1, #16
   b632e:	4628      	mov	r0, r5
   b6330:	f7fd feb7 	bl	b40a2 <_ZdlPvj>
   b6334:	4620      	mov	r0, r4
   b6336:	2114      	movs	r1, #20
   b6338:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b633c:	f7fd beb1 	b.w	b40a2 <_ZdlPvj>
   b6340:	bd38      	pop	{r3, r4, r5, pc}

000b6342 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b6342:	680b      	ldr	r3, [r1, #0]
   b6344:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b6346:	684b      	ldr	r3, [r1, #4]
   b6348:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b634a:	b113      	cbz	r3, b6352 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b634c:	685a      	ldr	r2, [r3, #4]
   b634e:	3201      	adds	r2, #1
   b6350:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b6352:	4770      	bx	lr

000b6354 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b6354:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6356:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b6358:	4668      	mov	r0, sp
   b635a:	460d      	mov	r5, r1
   b635c:	f7ff fff1 	bl	b6342 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6360:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b6362:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6364:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b6366:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b6368:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b636a:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b636c:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b636e:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b6370:	f7fd ffc2 	bl	b42f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b6374:	b135      	cbz	r5, b6384 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b6376:	1d28      	adds	r0, r5, #4
   b6378:	f7fd ffbe 	bl	b42f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b637c:	2108      	movs	r1, #8
   b637e:	4628      	mov	r0, r5
   b6380:	f7fd fe8f 	bl	b40a2 <_ZdlPvj>
        return p;
    }
   b6384:	4620      	mov	r0, r4
   b6386:	b003      	add	sp, #12
   b6388:	bd30      	pop	{r4, r5, pc}

000b638a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b638a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b638c:	b510      	push	{r4, lr}
      if (_M_empty())
   b638e:	b90a      	cbnz	r2, b6394 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b6390:	f001 fc94 	bl	b7cbc <_ZSt25__throw_bad_function_callv>
    }
   b6394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6398:	68c3      	ldr	r3, [r0, #12]
   b639a:	4718      	bx	r3

000b639c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b639c:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b639e:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b63a0:	f100 0110 	add.w	r1, r0, #16
   b63a4:	f7ff fff1 	bl	b638a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b63a8:	bd08      	pop	{r3, pc}

000b63aa <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b63aa:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b63ac:	b510      	push	{r4, lr}
      if (_M_empty())
   b63ae:	b90a      	cbnz	r2, b63b4 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b63b0:	f001 fc84 	bl	b7cbc <_ZSt25__throw_bad_function_callv>
    }
   b63b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b63b8:	68c3      	ldr	r3, [r0, #12]
   b63ba:	4718      	bx	r3

000b63bc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b63bc:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b63be:	6800      	ldr	r0, [r0, #0]
   b63c0:	f100 0110 	add.w	r1, r0, #16
   b63c4:	f7ff fff1 	bl	b63aa <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b63c8:	bd08      	pop	{r3, pc}
	...

000b63cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b63cc:	b538      	push	{r3, r4, r5, lr}
   b63ce:	2300      	movs	r3, #0
   b63d0:	4604      	mov	r4, r0
   b63d2:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b63d4:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b63d6:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b63d8:	f7fd fe5d 	bl	b4096 <_Znwj>
   b63dc:	b128      	cbz	r0, b63ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b63de:	2301      	movs	r3, #1
   b63e0:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b63e4:	4b02      	ldr	r3, [pc, #8]	; (b63f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b63e6:	6003      	str	r3, [r0, #0]
   b63e8:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b63ea:	6020      	str	r0, [r4, #0]
	}
   b63ec:	4620      	mov	r0, r4
   b63ee:	bd38      	pop	{r3, r4, r5, pc}
   b63f0:	000ba31c 	.word	0x000ba31c

000b63f4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b63f4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b63f6:	2300      	movs	r3, #0
   b63f8:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b63fa:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b63fc:	4604      	mov	r4, r0
   b63fe:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b6400:	b12b      	cbz	r3, b640e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b6402:	2202      	movs	r2, #2
   b6404:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b6406:	68eb      	ldr	r3, [r5, #12]
   b6408:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b640a:	68ab      	ldr	r3, [r5, #8]
   b640c:	60a3      	str	r3, [r4, #8]
    }
   b640e:	4620      	mov	r0, r4
   b6410:	bd38      	pop	{r3, r4, r5, pc}
	...

000b6414 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b6414:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6416:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b6418:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b641a:	4668      	mov	r0, sp
   b641c:	f7ff ff5a 	bl	b62d4 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b6420:	f04f 0302 	mov.w	r3, #2
   b6424:	e8d4 2f4f 	ldrexb	r2, [r4]
   b6428:	2a00      	cmp	r2, #0
   b642a:	d103      	bne.n	b6434 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b642c:	e8c4 3f41 	strexb	r1, r3, [r4]
   b6430:	2900      	cmp	r1, #0
   b6432:	d1f7      	bne.n	b6424 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b6434:	d125      	bne.n	b6482 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b6436:	f104 050c 	add.w	r5, r4, #12
   b643a:	4669      	mov	r1, sp
   b643c:	4628      	mov	r0, r5
   b643e:	f7ff ff49 	bl	b62d4 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b6442:	f3bf 8f5b 	dmb	ish
   b6446:	2301      	movs	r3, #1
   b6448:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b644a:	2000      	movs	r0, #0
   b644c:	f104 0308 	add.w	r3, r4, #8
   b6450:	f3bf 8f5b 	dmb	ish
   b6454:	e853 6f00 	ldrex	r6, [r3]
   b6458:	e843 0200 	strex	r2, r0, [r3]
   b645c:	2a00      	cmp	r2, #0
   b645e:	d1f9      	bne.n	b6454 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b6460:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b6464:	b16e      	cbz	r6, b6482 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b6466:	f7ff fdf1 	bl	b604c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b646a:	b178      	cbz	r0, b648c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b646c:	4629      	mov	r1, r5
   b646e:	4630      	mov	r0, r6
   b6470:	f7ff ff8b 	bl	b638a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b6474:	4630      	mov	r0, r6
   b6476:	f7ff fefc 	bl	b6272 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b647a:	2110      	movs	r1, #16
   b647c:	4630      	mov	r0, r6
   b647e:	f7fd fe10 	bl	b40a2 <_ZdlPvj>
        p_->setError(std::move(error));
   b6482:	4668      	mov	r0, sp
   b6484:	f7ff ff33 	bl	b62ee <_ZN8particle5ErrorD1Ev>
    }
   b6488:	b009      	add	sp, #36	; 0x24
   b648a:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b648c:	4631      	mov	r1, r6
   b648e:	a802      	add	r0, sp, #8
   b6490:	f7ff ffb0 	bl	b63f4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b6494:	68e0      	ldr	r0, [r4, #12]
   b6496:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b649a:	b108      	cbz	r0, b64a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b649c:	f003 fd8a 	bl	b9fb4 <strdup>
        type_(type) {
   b64a0:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b64a2:	2010      	movs	r0, #16
   b64a4:	f8ad 501c 	strh.w	r5, [sp, #28]
   b64a8:	f7fd fdf5 	bl	b4096 <_Znwj>
   b64ac:	4605      	mov	r5, r0
   b64ae:	b1e8      	cbz	r0, b64ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b64b0:	2700      	movs	r7, #0
   b64b2:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b64b4:	2018      	movs	r0, #24
   b64b6:	f7fd fdee 	bl	b4096 <_Znwj>
   b64ba:	4604      	mov	r4, r0
   b64bc:	b188      	cbz	r0, b64e2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b64be:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b64c0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b64c2:	a802      	add	r0, sp, #8
   b64c4:	f7ff fede 	bl	b6284 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b64c8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b64ca:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b64cc:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b64ce:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b64d0:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b64d2:	a906      	add	r1, sp, #24
   b64d4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b64d6:	60e3      	str	r3, [r4, #12]
   b64d8:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b64dc:	9205      	str	r2, [sp, #20]
   b64de:	f7ff fef9 	bl	b62d4 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b64e2:	4b08      	ldr	r3, [pc, #32]	; (b6504 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b64e4:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b64e6:	4b08      	ldr	r3, [pc, #32]	; (b6508 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b64e8:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b64ea:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b64ec:	a806      	add	r0, sp, #24
   b64ee:	f7ff fefe 	bl	b62ee <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b64f2:	a802      	add	r0, sp, #8
   b64f4:	f7ff febd 	bl	b6272 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b64f8:	2200      	movs	r2, #0
   b64fa:	4629      	mov	r1, r5
   b64fc:	4803      	ldr	r0, [pc, #12]	; (b650c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b64fe:	f7ff fdad 	bl	b605c <application_thread_invoke>
   b6502:	e7b7      	b.n	b6474 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b6504:	000b639d 	.word	0x000b639d
   b6508:	000b6621 	.word	0x000b6621
   b650c:	000b624b 	.word	0x000b624b

000b6510 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b6510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6514:	b08b      	sub	sp, #44	; 0x2c
   b6516:	4605      	mov	r5, r0
   b6518:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b651c:	460f      	mov	r7, r1
   b651e:	4690      	mov	r8, r2
   b6520:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b6522:	f7ff fdc7 	bl	b60b4 <spark_cloud_flag_connected>
   b6526:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b6528:	4683      	mov	fp, r0
   b652a:	bb38      	cbnz	r0, b657c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b652c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b6530:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b6532:	a905      	add	r1, sp, #20
   b6534:	4630      	mov	r0, r6
   b6536:	f8ad 3018 	strh.w	r3, [sp, #24]
   b653a:	f7ff fecb 	bl	b62d4 <_ZN8particle5ErrorC1EOS0_>
   b653e:	2014      	movs	r0, #20
   b6540:	f7fd fda9 	bl	b4096 <_Znwj>
   b6544:	4604      	mov	r4, r0
   b6546:	b148      	cbz	r0, b655c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b6548:	2302      	movs	r3, #2
   b654a:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b654c:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b654e:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b6552:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b6554:	4631      	mov	r1, r6
   b6556:	300c      	adds	r0, #12
   b6558:	f7ff febc 	bl	b62d4 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b655c:	4628      	mov	r0, r5
	: __shared_count(__p)
   b655e:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b6560:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b6564:	f7ff ff32 	bl	b63cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b6568:	4630      	mov	r0, r6
   b656a:	f7ff fec0 	bl	b62ee <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b656e:	a805      	add	r0, sp, #20
   b6570:	f7ff febd 	bl	b62ee <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b6574:	4628      	mov	r0, r5
   b6576:	b00b      	add	sp, #44	; 0x2c
   b6578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b657c:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b657e:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b6580:	2014      	movs	r0, #20
   b6582:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b6586:	9307      	str	r3, [sp, #28]
   b6588:	f7fd fd85 	bl	b4096 <_Znwj>
   b658c:	4601      	mov	r1, r0
   b658e:	b118      	cbz	r0, b6598 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b6590:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b6594:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b6596:	7044      	strb	r4, [r0, #1]
   b6598:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b659a:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b659c:	f7ff ff16 	bl	b63cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b65a0:	4b1e      	ldr	r3, [pc, #120]	; (b661c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b65a2:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b65a4:	2008      	movs	r0, #8
   b65a6:	f7fd fd76 	bl	b4096 <_Znwj>
   b65aa:	4604      	mov	r4, r0
   b65ac:	b110      	cbz	r0, b65b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b65ae:	a903      	add	r1, sp, #12
   b65b0:	f7ff fec7 	bl	b6342 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b65b4:	9600      	str	r6, [sp, #0]
   b65b6:	fa5f f38a 	uxtb.w	r3, sl
   b65ba:	464a      	mov	r2, r9
   b65bc:	4641      	mov	r1, r8
   b65be:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b65c0:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b65c2:	f7ff fd7f 	bl	b60c4 <spark_send_event>
   b65c6:	b9b8      	cbnz	r0, b65f8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b65c8:	9b03      	ldr	r3, [sp, #12]
   b65ca:	785b      	ldrb	r3, [r3, #1]
   b65cc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b65d0:	b993      	cbnz	r3, b65f8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b65d2:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b65d6:	a905      	add	r1, sp, #20
   b65d8:	a803      	add	r0, sp, #12
   b65da:	9205      	str	r2, [sp, #20]
   b65dc:	f8ad 3018 	strh.w	r3, [sp, #24]
   b65e0:	f7ff ff18 	bl	b6414 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b65e4:	a805      	add	r0, sp, #20
   b65e6:	f7ff fe82 	bl	b62ee <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b65ea:	a805      	add	r0, sp, #20
   b65ec:	9909      	ldr	r1, [sp, #36]	; 0x24
   b65ee:	f7ff feb1 	bl	b6354 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b65f2:	a806      	add	r0, sp, #24
   b65f4:	f7fd fe80 	bl	b42f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b65f8:	a903      	add	r1, sp, #12
   b65fa:	a805      	add	r0, sp, #20
   b65fc:	f7ff fea1 	bl	b6342 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6600:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b6602:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6604:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b6606:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b6608:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b660a:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b660c:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b660e:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b6610:	f7fd fe72 	bl	b42f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6614:	a804      	add	r0, sp, #16
   b6616:	f7fd fe6f 	bl	b42f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b661a:	e7ab      	b.n	b6574 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b661c:	000b669d 	.word	0x000b669d

000b6620 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b6620:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6622:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6624:	4605      	mov	r5, r0
	switch (__op)
   b6626:	d103      	bne.n	b6630 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b6628:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b662a:	6003      	str	r3, [r0, #0]
      }
   b662c:	2000      	movs	r0, #0
   b662e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b6630:	2a02      	cmp	r2, #2
   b6632:	d010      	beq.n	b6656 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b6634:	2a03      	cmp	r2, #3
   b6636:	d1f9      	bne.n	b662c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b6638:	6804      	ldr	r4, [r0, #0]
   b663a:	2c00      	cmp	r4, #0
   b663c:	d0f6      	beq.n	b662c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b663e:	f104 0010 	add.w	r0, r4, #16
   b6642:	f7ff fe54 	bl	b62ee <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b6646:	4620      	mov	r0, r4
   b6648:	f7ff fe13 	bl	b6272 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b664c:	2118      	movs	r1, #24
   b664e:	4620      	mov	r0, r4
   b6650:	f7fd fd27 	bl	b40a2 <_ZdlPvj>
   b6654:	e7ea      	b.n	b662c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b6656:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b6658:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b665a:	f7fd fd1c 	bl	b4096 <_Znwj>
   b665e:	4604      	mov	r4, r0
   b6660:	b150      	cbz	r0, b6678 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b6662:	4631      	mov	r1, r6
   b6664:	f7ff fec6 	bl	b63f4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b6668:	6930      	ldr	r0, [r6, #16]
   b666a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b666e:	b108      	cbz	r0, b6674 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b6670:	f003 fca0 	bl	b9fb4 <strdup>
        type_(type) {
   b6674:	6120      	str	r0, [r4, #16]
   b6676:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b6678:	602c      	str	r4, [r5, #0]
	}
   b667a:	e7d7      	b.n	b662c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b667c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b667c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b667e:	2300      	movs	r3, #0
   b6680:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b6682:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b6684:	4604      	mov	r4, r0
   b6686:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b6688:	b12b      	cbz	r3, b6696 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b668a:	2202      	movs	r2, #2
   b668c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b668e:	68eb      	ldr	r3, [r5, #12]
   b6690:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b6692:	68ab      	ldr	r3, [r5, #8]
   b6694:	60a3      	str	r3, [r4, #8]
    }
   b6696:	4620      	mov	r0, r4
   b6698:	bd38      	pop	{r3, r4, r5, pc}
	...

000b669c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b669c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b669e:	b089      	sub	sp, #36	; 0x24
   b66a0:	4604      	mov	r4, r0
   b66a2:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b66a4:	a801      	add	r0, sp, #4
   b66a6:	4611      	mov	r1, r2
   b66a8:	f7ff fe54 	bl	b6354 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b66ac:	b1a4      	cbz	r4, b66d8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b66ae:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b66b0:	b11d      	cbz	r5, b66ba <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b66b2:	4628      	mov	r0, r5
   b66b4:	f003 fc7e 	bl	b9fb4 <strdup>
   b66b8:	4605      	mov	r5, r0
   b66ba:	a801      	add	r0, sp, #4
   b66bc:	a903      	add	r1, sp, #12
        type_(type) {
   b66be:	9503      	str	r5, [sp, #12]
   b66c0:	f8ad 4010 	strh.w	r4, [sp, #16]
   b66c4:	f7ff fea6 	bl	b6414 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b66c8:	a803      	add	r0, sp, #12
   b66ca:	f7ff fe10 	bl	b62ee <_ZN8particle5ErrorD1Ev>
   b66ce:	a802      	add	r0, sp, #8
   b66d0:	f7fd fe12 	bl	b42f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b66d4:	b009      	add	sp, #36	; 0x24
   b66d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b66d8:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b66da:	2301      	movs	r3, #1
   b66dc:	e8d5 2f4f 	ldrexb	r2, [r5]
   b66e0:	2a00      	cmp	r2, #0
   b66e2:	d103      	bne.n	b66ec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b66e4:	e8c5 3f41 	strexb	r1, r3, [r5]
   b66e8:	2900      	cmp	r1, #0
   b66ea:	d1f7      	bne.n	b66dc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b66ec:	d1ef      	bne.n	b66ce <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b66ee:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b66f0:	f3bf 8f5b 	dmb	ish
   b66f4:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b66f6:	1d2b      	adds	r3, r5, #4
   b66f8:	f3bf 8f5b 	dmb	ish
   b66fc:	e853 6f00 	ldrex	r6, [r3]
   b6700:	e843 4200 	strex	r2, r4, [r3]
   b6704:	2a00      	cmp	r2, #0
   b6706:	d1f9      	bne.n	b66fc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b6708:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b670c:	2e00      	cmp	r6, #0
   b670e:	d0de      	beq.n	b66ce <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b6710:	4620      	mov	r0, r4
   b6712:	f7ff fc9b 	bl	b604c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b6716:	4607      	mov	r7, r0
   b6718:	b160      	cbz	r0, b6734 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b671a:	f105 010c 	add.w	r1, r5, #12
   b671e:	4630      	mov	r0, r6
   b6720:	f7ff fe43 	bl	b63aa <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b6724:	4630      	mov	r0, r6
   b6726:	f7ff fda4 	bl	b6272 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b672a:	2110      	movs	r1, #16
   b672c:	4630      	mov	r0, r6
   b672e:	f7fd fcb8 	bl	b40a2 <_ZdlPvj>
   b6732:	e7cc      	b.n	b66ce <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b6734:	4631      	mov	r1, r6
   b6736:	a803      	add	r0, sp, #12
   b6738:	f7ff ffa0 	bl	b667c <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b673c:	7b2b      	ldrb	r3, [r5, #12]
   b673e:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b6742:	2010      	movs	r0, #16
   b6744:	f7fd fca7 	bl	b4096 <_Znwj>
   b6748:	4605      	mov	r5, r0
   b674a:	b1d0      	cbz	r0, b6782 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b674c:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b674e:	2014      	movs	r0, #20
   b6750:	f7fd fca1 	bl	b4096 <_Znwj>
   b6754:	4604      	mov	r4, r0
   b6756:	b178      	cbz	r0, b6778 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b6758:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b675a:	4601      	mov	r1, r0
   b675c:	a803      	add	r0, sp, #12
   b675e:	f7ff fd91 	bl	b6284 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6762:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b6764:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6766:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6768:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b676a:	9205      	str	r2, [sp, #20]
   b676c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b676e:	60e3      	str	r3, [r4, #12]
   b6770:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b6774:	9206      	str	r2, [sp, #24]
   b6776:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b6778:	4b06      	ldr	r3, [pc, #24]	; (b6794 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b677a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b677c:	4b06      	ldr	r3, [pc, #24]	; (b6798 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b677e:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b6780:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b6782:	a803      	add	r0, sp, #12
   b6784:	f7ff fd75 	bl	b6272 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b6788:	2200      	movs	r2, #0
   b678a:	4629      	mov	r1, r5
   b678c:	4803      	ldr	r0, [pc, #12]	; (b679c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b678e:	f7ff fc65 	bl	b605c <application_thread_invoke>
   b6792:	e7c7      	b.n	b6724 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b6794:	000b63bd 	.word	0x000b63bd
   b6798:	000b67a1 	.word	0x000b67a1
   b679c:	000b624b 	.word	0x000b624b

000b67a0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b67a0:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b67a2:	b570      	push	{r4, r5, r6, lr}
   b67a4:	4604      	mov	r4, r0
	switch (__op)
   b67a6:	d103      	bne.n	b67b0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b67a8:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b67aa:	6003      	str	r3, [r0, #0]
      }
   b67ac:	2000      	movs	r0, #0
   b67ae:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b67b0:	2a02      	cmp	r2, #2
   b67b2:	d00c      	beq.n	b67ce <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b67b4:	2a03      	cmp	r2, #3
   b67b6:	d1f9      	bne.n	b67ac <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b67b8:	6804      	ldr	r4, [r0, #0]
   b67ba:	2c00      	cmp	r4, #0
   b67bc:	d0f6      	beq.n	b67ac <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b67be:	4620      	mov	r0, r4
   b67c0:	f7ff fd57 	bl	b6272 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b67c4:	2114      	movs	r1, #20
   b67c6:	4620      	mov	r0, r4
   b67c8:	f7fd fc6b 	bl	b40a2 <_ZdlPvj>
   b67cc:	e7ee      	b.n	b67ac <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b67ce:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b67d0:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b67d2:	f7fd fc60 	bl	b4096 <_Znwj>
   b67d6:	4605      	mov	r5, r0
   b67d8:	b120      	cbz	r0, b67e4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b67da:	4631      	mov	r1, r6
   b67dc:	f7ff ff4e 	bl	b667c <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b67e0:	7c33      	ldrb	r3, [r6, #16]
   b67e2:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b67e4:	6025      	str	r5, [r4, #0]
	}
   b67e6:	e7e1      	b.n	b67ac <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b67e8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b67e8:	2200      	movs	r2, #0
   b67ea:	6840      	ldr	r0, [r0, #4]
   b67ec:	4611      	mov	r1, r2
   b67ee:	f7ff bcb9 	b.w	b6164 <network_listening>

000b67f2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b67f2:	2200      	movs	r2, #0
   b67f4:	6840      	ldr	r0, [r0, #4]
   b67f6:	4611      	mov	r1, r2
   b67f8:	f7ff bcc4 	b.w	b6184 <network_get_listen_timeout>

000b67fc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b67fc:	6840      	ldr	r0, [r0, #4]
   b67fe:	2200      	movs	r2, #0
   b6800:	f7ff bcb8 	b.w	b6174 <network_set_listen_timeout>

000b6804 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6804:	6840      	ldr	r0, [r0, #4]
   b6806:	2200      	movs	r2, #0
   b6808:	f081 0101 	eor.w	r1, r1, #1
   b680c:	f7ff bca2 	b.w	b6154 <network_listen>

000b6810 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6810:	2300      	movs	r3, #0
   b6812:	6840      	ldr	r0, [r0, #4]
   b6814:	461a      	mov	r2, r3
   b6816:	4619      	mov	r1, r3
   b6818:	f7ff bc94 	b.w	b6144 <network_off>

000b681c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b681c:	2300      	movs	r3, #0
   b681e:	6840      	ldr	r0, [r0, #4]
   b6820:	461a      	mov	r2, r3
   b6822:	4619      	mov	r1, r3
   b6824:	f7ff bc86 	b.w	b6134 <network_on>

000b6828 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b6828:	2200      	movs	r2, #0
   b682a:	6840      	ldr	r0, [r0, #4]
   b682c:	4611      	mov	r1, r2
   b682e:	f7ff bc79 	b.w	b6124 <network_ready>

000b6832 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6832:	2200      	movs	r2, #0
   b6834:	6840      	ldr	r0, [r0, #4]
   b6836:	4611      	mov	r1, r2
   b6838:	f7ff bc64 	b.w	b6104 <network_connecting>

000b683c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b683c:	6840      	ldr	r0, [r0, #4]
   b683e:	2200      	movs	r2, #0
   b6840:	2102      	movs	r1, #2
   b6842:	f7ff bc67 	b.w	b6114 <network_disconnect>

000b6846 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6846:	2300      	movs	r3, #0
   b6848:	6840      	ldr	r0, [r0, #4]
   b684a:	461a      	mov	r2, r3
   b684c:	f7ff bc52 	b.w	b60f4 <network_connect>

000b6850 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b6850:	4b02      	ldr	r3, [pc, #8]	; (b685c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b6852:	2203      	movs	r2, #3
   b6854:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b6856:	4a02      	ldr	r2, [pc, #8]	; (b6860 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b6858:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b685a:	4770      	bx	lr
   b685c:	2003e6c8 	.word	0x2003e6c8
   b6860:	000ba338 	.word	0x000ba338

000b6864 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b6864:	4770      	bx	lr

000b6866 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b6866:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6868:	4606      	mov	r6, r0
   b686a:	4615      	mov	r5, r2
   b686c:	460c      	mov	r4, r1
   b686e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b6870:	42bc      	cmp	r4, r7
   b6872:	d006      	beq.n	b6882 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b6874:	6833      	ldr	r3, [r6, #0]
   b6876:	f814 1b01 	ldrb.w	r1, [r4], #1
   b687a:	689b      	ldr	r3, [r3, #8]
   b687c:	4630      	mov	r0, r6
   b687e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b6880:	e7f6      	b.n	b6870 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b6882:	4628      	mov	r0, r5
   b6884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6886 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b6886:	7c00      	ldrb	r0, [r0, #16]
   b6888:	2200      	movs	r2, #0
   b688a:	f7ff ba67 	b.w	b5d5c <hal_i2c_write>

000b688e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b688e:	7c00      	ldrb	r0, [r0, #16]
   b6890:	2100      	movs	r1, #0
   b6892:	f7ff ba6b 	b.w	b5d6c <hal_i2c_available>

000b6896 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b6896:	7c00      	ldrb	r0, [r0, #16]
   b6898:	2100      	movs	r1, #0
   b689a:	f7ff ba6f 	b.w	b5d7c <hal_i2c_read>

000b689e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b689e:	7c00      	ldrb	r0, [r0, #16]
   b68a0:	2100      	movs	r1, #0
   b68a2:	f7ff ba73 	b.w	b5d8c <hal_i2c_peek>

000b68a6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b68a6:	7c00      	ldrb	r0, [r0, #16]
   b68a8:	2100      	movs	r1, #0
   b68aa:	f7ff ba77 	b.w	b5d9c <hal_i2c_flush>

000b68ae <_ZN7TwoWireD0Ev>:
   b68ae:	b510      	push	{r4, lr}
   b68b0:	2114      	movs	r1, #20
   b68b2:	4604      	mov	r4, r0
   b68b4:	f7fd fbf5 	bl	b40a2 <_ZdlPvj>
   b68b8:	4620      	mov	r0, r4
   b68ba:	bd10      	pop	{r4, pc}

000b68bc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b68bc:	b538      	push	{r3, r4, r5, lr}
   b68be:	4604      	mov	r4, r0
   b68c0:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b68c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b68c6:	2200      	movs	r2, #0
   b68c8:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b68cc:	4b09      	ldr	r3, [pc, #36]	; (b68f4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b68ce:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b68d0:	4608      	mov	r0, r1
   b68d2:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b68d4:	4629      	mov	r1, r5
   b68d6:	f7ff fa71 	bl	b5dbc <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b68da:	30bf      	adds	r0, #191	; 0xbf
   b68dc:	d108      	bne.n	b68f0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b68de:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b68e0:	07db      	lsls	r3, r3, #31
   b68e2:	d505      	bpl.n	b68f0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b68e4:	6868      	ldr	r0, [r5, #4]
   b68e6:	f7ff fc6d 	bl	b61c4 <free>
    free(conf.tx_buffer);
   b68ea:	68e8      	ldr	r0, [r5, #12]
   b68ec:	f7ff fc6a 	bl	b61c4 <free>
}
   b68f0:	4620      	mov	r0, r4
   b68f2:	bd38      	pop	{r3, r4, r5, pc}
   b68f4:	000ba374 	.word	0x000ba374

000b68f8 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b68f8:	2300      	movs	r3, #0
   b68fa:	7c00      	ldrb	r0, [r0, #16]
   b68fc:	461a      	mov	r2, r3
   b68fe:	4619      	mov	r1, r3
   b6900:	f7ff ba14 	b.w	b5d2c <hal_i2c_begin>

000b6904 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b6904:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b6906:	2200      	movs	r2, #0
   b6908:	2314      	movs	r3, #20
   b690a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b690e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b6912:	780b      	ldrb	r3, [r1, #0]
   b6914:	f88d 3008 	strb.w	r3, [sp, #8]
   b6918:	684b      	ldr	r3, [r1, #4]
   b691a:	9303      	str	r3, [sp, #12]
   b691c:	68cb      	ldr	r3, [r1, #12]
   b691e:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b6920:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b6922:	7a0b      	ldrb	r3, [r1, #8]
   b6924:	9305      	str	r3, [sp, #20]
   b6926:	a901      	add	r1, sp, #4
   b6928:	f7ff fa50 	bl	b5dcc <hal_i2c_request_ex>
}
   b692c:	b007      	add	sp, #28
   b692e:	f85d fb04 	ldr.w	pc, [sp], #4

000b6932 <_ZN7TwoWire11requestFromEhjh>:
{
   b6932:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b6934:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b6936:	f88d 1000 	strb.w	r1, [sp]
   b693a:	f04f 0164 	mov.w	r1, #100	; 0x64
   b693e:	9103      	str	r1, [sp, #12]
   b6940:	bf18      	it	ne
   b6942:	2301      	movne	r3, #1
   b6944:	4669      	mov	r1, sp
    size_ = size;
   b6946:	9201      	str	r2, [sp, #4]
   b6948:	f88d 3008 	strb.w	r3, [sp, #8]
   b694c:	f7ff ffda 	bl	b6904 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b6950:	b005      	add	sp, #20
   b6952:	f85d fb04 	ldr.w	pc, [sp], #4

000b6956 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b6956:	2301      	movs	r3, #1
   b6958:	f7ff bfeb 	b.w	b6932 <_ZN7TwoWire11requestFromEhjh>

000b695c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b695c:	7c00      	ldrb	r0, [r0, #16]
   b695e:	2200      	movs	r2, #0
   b6960:	f7ff b9ec 	b.w	b5d3c <hal_i2c_begin_transmission>

000b6964 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b6964:	7c00      	ldrb	r0, [r0, #16]
   b6966:	2200      	movs	r2, #0
   b6968:	f7ff b9f0 	b.w	b5d4c <hal_i2c_end_transmission>

000b696c <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b696c:	2101      	movs	r1, #1
   b696e:	f7ff bff9 	b.w	b6964 <_ZN7TwoWire15endTransmissionEh>

000b6972 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b6972:	4770      	bx	lr

000b6974 <_ZN9IPAddressD0Ev>:
   b6974:	b510      	push	{r4, lr}
   b6976:	2118      	movs	r1, #24
   b6978:	4604      	mov	r4, r0
   b697a:	f7fd fb92 	bl	b40a2 <_ZdlPvj>
   b697e:	4620      	mov	r0, r4
   b6980:	bd10      	pop	{r4, pc}

000b6982 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b6982:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b6984:	7d03      	ldrb	r3, [r0, #20]
   b6986:	2b06      	cmp	r3, #6
{
   b6988:	b08d      	sub	sp, #52	; 0x34
   b698a:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b698c:	f100 0704 	add.w	r7, r0, #4
   b6990:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b6994:	d012      	beq.n	b69bc <_ZNK9IPAddress7printToER5Print+0x3a>
   b6996:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b699a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b699e:	220a      	movs	r2, #10
   b69a0:	4630      	mov	r0, r6
   b69a2:	f000 f96a 	bl	b6c7a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b69a6:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b69a8:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b69aa:	d019      	beq.n	b69e0 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b69ac:	2c00      	cmp	r4, #0
   b69ae:	d0f4      	beq.n	b699a <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b69b0:	212e      	movs	r1, #46	; 0x2e
   b69b2:	4630      	mov	r0, r6
   b69b4:	f000 f952 	bl	b6c5c <_ZN5Print5printEc>
   b69b8:	4404      	add	r4, r0
   b69ba:	e7ee      	b.n	b699a <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b69bc:	232f      	movs	r3, #47	; 0x2f
   b69be:	466a      	mov	r2, sp
   b69c0:	4639      	mov	r1, r7
   b69c2:	200a      	movs	r0, #10
		buf[0] = 0;
   b69c4:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b69c8:	f7ff fa10 	bl	b5dec <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b69cc:	4668      	mov	r0, sp
   b69ce:	f003 fb0e 	bl	b9fee <strlen>
   b69d2:	6833      	ldr	r3, [r6, #0]
   b69d4:	4602      	mov	r2, r0
   b69d6:	68db      	ldr	r3, [r3, #12]
   b69d8:	4669      	mov	r1, sp
   b69da:	4630      	mov	r0, r6
   b69dc:	4798      	blx	r3
   b69de:	4604      	mov	r4, r0
    }
    return n;
}
   b69e0:	4620      	mov	r0, r4
   b69e2:	b00d      	add	sp, #52	; 0x34
   b69e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b69e8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b69e8:	b510      	push	{r4, lr}
   b69ea:	4b05      	ldr	r3, [pc, #20]	; (b6a00 <_ZN9IPAddressC1Ev+0x18>)
   b69ec:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b69ee:	2211      	movs	r2, #17
   b69f0:	f840 3b04 	str.w	r3, [r0], #4
   b69f4:	2100      	movs	r1, #0
   b69f6:	f003 fa95 	bl	b9f24 <memset>
}
   b69fa:	4620      	mov	r0, r4
   b69fc:	bd10      	pop	{r4, pc}
   b69fe:	bf00      	nop
   b6a00:	000ba39c 	.word	0x000ba39c

000b6a04 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b6a04:	4603      	mov	r3, r0
   b6a06:	4a07      	ldr	r2, [pc, #28]	; (b6a24 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b6a08:	b510      	push	{r4, lr}
   b6a0a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b6a0e:	f101 0210 	add.w	r2, r1, #16
   b6a12:	f851 4b04 	ldr.w	r4, [r1], #4
   b6a16:	f843 4b04 	str.w	r4, [r3], #4
   b6a1a:	4291      	cmp	r1, r2
   b6a1c:	d1f9      	bne.n	b6a12 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b6a1e:	780a      	ldrb	r2, [r1, #0]
   b6a20:	701a      	strb	r2, [r3, #0]
}
   b6a22:	bd10      	pop	{r4, pc}
   b6a24:	000ba39c 	.word	0x000ba39c

000b6a28 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b6a28:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b6a2a:	2b04      	cmp	r3, #4
   b6a2c:	d104      	bne.n	b6a38 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b6a2e:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6a30:	3800      	subs	r0, #0
   b6a32:	bf18      	it	ne
   b6a34:	2001      	movne	r0, #1
   b6a36:	4770      	bx	lr
    } else if (version() == 6) {
   b6a38:	2b06      	cmp	r3, #6
   b6a3a:	d107      	bne.n	b6a4c <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6a3c:	6843      	ldr	r3, [r0, #4]
   b6a3e:	b93b      	cbnz	r3, b6a50 <_ZNK9IPAddresscvbEv+0x28>
   b6a40:	6883      	ldr	r3, [r0, #8]
   b6a42:	b92b      	cbnz	r3, b6a50 <_ZNK9IPAddresscvbEv+0x28>
   b6a44:	68c3      	ldr	r3, [r0, #12]
   b6a46:	b91b      	cbnz	r3, b6a50 <_ZNK9IPAddresscvbEv+0x28>
   b6a48:	6900      	ldr	r0, [r0, #16]
   b6a4a:	e7f1      	b.n	b6a30 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b6a4c:	2000      	movs	r0, #0
   b6a4e:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6a50:	2001      	movs	r0, #1
}
   b6a52:	4770      	bx	lr

000b6a54 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b6a54:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b6a56:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b6a5a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b6a5e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b6a62:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b6a66:	2304      	movs	r3, #4
   b6a68:	6041      	str	r1, [r0, #4]
   b6a6a:	7503      	strb	r3, [r0, #20]
}
   b6a6c:	bd10      	pop	{r4, pc}
	...

000b6a70 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b6a70:	b507      	push	{r0, r1, r2, lr}
   b6a72:	4b06      	ldr	r3, [pc, #24]	; (b6a8c <_ZN9IPAddressC1EPKh+0x1c>)
   b6a74:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b6a76:	78cb      	ldrb	r3, [r1, #3]
   b6a78:	9300      	str	r3, [sp, #0]
   b6a7a:	788b      	ldrb	r3, [r1, #2]
   b6a7c:	784a      	ldrb	r2, [r1, #1]
   b6a7e:	7809      	ldrb	r1, [r1, #0]
   b6a80:	f7ff ffe8 	bl	b6a54 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b6a84:	b003      	add	sp, #12
   b6a86:	f85d fb04 	ldr.w	pc, [sp], #4
   b6a8a:	bf00      	nop
   b6a8c:	000ba39c 	.word	0x000ba39c

000b6a90 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b6a90:	4b01      	ldr	r3, [pc, #4]	; (b6a98 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b6a92:	4a02      	ldr	r2, [pc, #8]	; (b6a9c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b6a94:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b6a96:	4770      	bx	lr
   b6a98:	2003e6d0 	.word	0x2003e6d0
   b6a9c:	000ba3a8 	.word	0x000ba3a8

000b6aa0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b6aa0:	2300      	movs	r3, #0
   b6aa2:	6840      	ldr	r0, [r0, #4]
   b6aa4:	461a      	mov	r2, r3
   b6aa6:	f7ff bb25 	b.w	b60f4 <network_connect>

000b6aaa <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b6aaa:	6840      	ldr	r0, [r0, #4]
   b6aac:	2200      	movs	r2, #0
   b6aae:	2102      	movs	r1, #2
   b6ab0:	f7ff bb30 	b.w	b6114 <network_disconnect>

000b6ab4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b6ab4:	2200      	movs	r2, #0
   b6ab6:	6840      	ldr	r0, [r0, #4]
   b6ab8:	4611      	mov	r1, r2
   b6aba:	f7ff bb23 	b.w	b6104 <network_connecting>

000b6abe <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b6abe:	2200      	movs	r2, #0
   b6ac0:	6840      	ldr	r0, [r0, #4]
   b6ac2:	4611      	mov	r1, r2
   b6ac4:	f7ff bb2e 	b.w	b6124 <network_ready>

000b6ac8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b6ac8:	2300      	movs	r3, #0
   b6aca:	6840      	ldr	r0, [r0, #4]
   b6acc:	461a      	mov	r2, r3
   b6ace:	4619      	mov	r1, r3
   b6ad0:	f7ff bb30 	b.w	b6134 <network_on>

000b6ad4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b6ad4:	2300      	movs	r3, #0
   b6ad6:	6840      	ldr	r0, [r0, #4]
   b6ad8:	461a      	mov	r2, r3
   b6ada:	4619      	mov	r1, r3
   b6adc:	f7ff bb32 	b.w	b6144 <network_off>

000b6ae0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b6ae0:	6840      	ldr	r0, [r0, #4]
   b6ae2:	2100      	movs	r1, #0
   b6ae4:	f7ff bb56 	b.w	b6194 <network_is_on>

000b6ae8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b6ae8:	6840      	ldr	r0, [r0, #4]
   b6aea:	2100      	movs	r1, #0
   b6aec:	f7ff bb5a 	b.w	b61a4 <network_is_off>

000b6af0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b6af0:	6840      	ldr	r0, [r0, #4]
   b6af2:	2200      	movs	r2, #0
   b6af4:	f081 0101 	eor.w	r1, r1, #1
   b6af8:	f7ff bb2c 	b.w	b6154 <network_listen>

000b6afc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b6afc:	6840      	ldr	r0, [r0, #4]
   b6afe:	2200      	movs	r2, #0
   b6b00:	f7ff bb38 	b.w	b6174 <network_set_listen_timeout>

000b6b04 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b6b04:	2200      	movs	r2, #0
   b6b06:	6840      	ldr	r0, [r0, #4]
   b6b08:	4611      	mov	r1, r2
   b6b0a:	f7ff bb3b 	b.w	b6184 <network_get_listen_timeout>

000b6b0e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b6b0e:	2200      	movs	r2, #0
   b6b10:	6840      	ldr	r0, [r0, #4]
   b6b12:	4611      	mov	r1, r2
   b6b14:	f7ff bb26 	b.w	b6164 <network_listening>

000b6b18 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6b18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6b1c:	b095      	sub	sp, #84	; 0x54
   b6b1e:	4614      	mov	r4, r2
   b6b20:	460d      	mov	r5, r1
   b6b22:	4607      	mov	r7, r0
    IPAddress addr;
   b6b24:	f7ff ff60 	bl	b69e8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6b28:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b6b2a:	221c      	movs	r2, #28
   b6b2c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b6b2e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6b30:	f003 f9f8 	bl	b9f24 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b6b34:	2340      	movs	r3, #64	; 0x40
   b6b36:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6b38:	4620      	mov	r0, r4
   b6b3a:	466b      	mov	r3, sp
   b6b3c:	aa0c      	add	r2, sp, #48	; 0x30
   b6b3e:	2100      	movs	r1, #0
   b6b40:	f7ff f974 	bl	b5e2c <netdb_getaddrinfo>
    if (!r) {
   b6b44:	4604      	mov	r4, r0
   b6b46:	2800      	cmp	r0, #0
   b6b48:	d14b      	bne.n	b6be2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6b4a:	4602      	mov	r2, r0
   b6b4c:	2101      	movs	r1, #1
   b6b4e:	6868      	ldr	r0, [r5, #4]
   b6b50:	f7ff fae8 	bl	b6124 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6b54:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6b56:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6b58:	4622      	mov	r2, r4
   b6b5a:	6868      	ldr	r0, [r5, #4]
   b6b5c:	f7ff fae2 	bl	b6124 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6b60:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6b62:	4681      	mov	r9, r0
        bool ok = false;
   b6b64:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6b66:	2e00      	cmp	r6, #0
   b6b68:	d03b      	beq.n	b6be2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b6b6a:	2900      	cmp	r1, #0
   b6b6c:	d139      	bne.n	b6be2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b6b6e:	6873      	ldr	r3, [r6, #4]
   b6b70:	2b02      	cmp	r3, #2
   b6b72:	d003      	beq.n	b6b7c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b6b74:	2b0a      	cmp	r3, #10
   b6b76:	d011      	beq.n	b6b9c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6b78:	69f6      	ldr	r6, [r6, #28]
   b6b7a:	e7f4      	b.n	b6b66 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b6b7c:	f1b8 0f00 	cmp.w	r8, #0
   b6b80:	d0fa      	beq.n	b6b78 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b6b82:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b6b84:	a806      	add	r0, sp, #24
   b6b86:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b6b88:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b6b8a:	f7ff ff71 	bl	b6a70 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6b8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6b90:	1d3c      	adds	r4, r7, #4
   b6b92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6b94:	682b      	ldr	r3, [r5, #0]
   b6b96:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6b98:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b6b9a:	e7ed      	b.n	b6b78 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b6b9c:	f1b9 0f00 	cmp.w	r9, #0
   b6ba0:	d0ea      	beq.n	b6b78 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b6ba2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b6ba4:	2210      	movs	r2, #16
   b6ba6:	a801      	add	r0, sp, #4
   b6ba8:	f003 f9bc 	bl	b9f24 <memset>
                    a.v = 6;
   b6bac:	2306      	movs	r3, #6
   b6bae:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6bb2:	ad01      	add	r5, sp, #4
   b6bb4:	f104 0308 	add.w	r3, r4, #8
   b6bb8:	3418      	adds	r4, #24
   b6bba:	6818      	ldr	r0, [r3, #0]
   b6bbc:	6859      	ldr	r1, [r3, #4]
   b6bbe:	462a      	mov	r2, r5
   b6bc0:	c203      	stmia	r2!, {r0, r1}
   b6bc2:	3308      	adds	r3, #8
   b6bc4:	42a3      	cmp	r3, r4
   b6bc6:	4615      	mov	r5, r2
   b6bc8:	d1f7      	bne.n	b6bba <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b6bca:	a901      	add	r1, sp, #4
   b6bcc:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b6bce:	ad07      	add	r5, sp, #28
   b6bd0:	f7ff ff18 	bl	b6a04 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6bd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6bd6:	1d3c      	adds	r4, r7, #4
   b6bd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6bda:	682b      	ldr	r3, [r5, #0]
   b6bdc:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6bde:	4649      	mov	r1, r9
   b6be0:	e7ca      	b.n	b6b78 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b6be2:	9800      	ldr	r0, [sp, #0]
   b6be4:	f7ff f91a 	bl	b5e1c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b6be8:	4638      	mov	r0, r7
   b6bea:	b015      	add	sp, #84	; 0x54
   b6bec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b6bf0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b6bf0:	4b02      	ldr	r3, [pc, #8]	; (b6bfc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b6bf2:	4a03      	ldr	r2, [pc, #12]	; (b6c00 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b6bf4:	601a      	str	r2, [r3, #0]
   b6bf6:	2200      	movs	r2, #0
   b6bf8:	605a      	str	r2, [r3, #4]

} // spark
   b6bfa:	4770      	bx	lr
   b6bfc:	2003e6d4 	.word	0x2003e6d4
   b6c00:	000ba3b4 	.word	0x000ba3b4

000b6c04 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b6c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6c06:	4606      	mov	r6, r0
   b6c08:	460d      	mov	r5, r1
  size_t n = 0;
   b6c0a:	188f      	adds	r7, r1, r2
   b6c0c:	2400      	movs	r4, #0
  while (size--) {
   b6c0e:	42bd      	cmp	r5, r7
   b6c10:	d00c      	beq.n	b6c2c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b6c12:	6833      	ldr	r3, [r6, #0]
   b6c14:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6c18:	689b      	ldr	r3, [r3, #8]
   b6c1a:	4630      	mov	r0, r6
   b6c1c:	4798      	blx	r3
     if (chunk>=0)
   b6c1e:	1e03      	subs	r3, r0, #0
   b6c20:	db01      	blt.n	b6c26 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b6c22:	441c      	add	r4, r3
  while (size--) {
   b6c24:	e7f3      	b.n	b6c0e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b6c26:	2c00      	cmp	r4, #0
   b6c28:	bf08      	it	eq
   b6c2a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b6c2c:	4620      	mov	r0, r4
   b6c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6c30 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b6c30:	b513      	push	{r0, r1, r4, lr}
   b6c32:	4604      	mov	r4, r0
    }
   b6c34:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b6c36:	b159      	cbz	r1, b6c50 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b6c38:	9101      	str	r1, [sp, #4]
   b6c3a:	f003 f9d8 	bl	b9fee <strlen>
   b6c3e:	6823      	ldr	r3, [r4, #0]
   b6c40:	9901      	ldr	r1, [sp, #4]
   b6c42:	68db      	ldr	r3, [r3, #12]
   b6c44:	4602      	mov	r2, r0
   b6c46:	4620      	mov	r0, r4
    }
   b6c48:	b002      	add	sp, #8
   b6c4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b6c4e:	4718      	bx	r3
    }
   b6c50:	b002      	add	sp, #8
   b6c52:	bd10      	pop	{r4, pc}

000b6c54 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b6c54:	b508      	push	{r3, lr}
  return write(str);
   b6c56:	f7ff ffeb 	bl	b6c30 <_ZN5Print5writeEPKc>
}
   b6c5a:	bd08      	pop	{r3, pc}

000b6c5c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b6c5c:	6803      	ldr	r3, [r0, #0]
   b6c5e:	689b      	ldr	r3, [r3, #8]
   b6c60:	4718      	bx	r3

000b6c62 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b6c62:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b6c64:	210d      	movs	r1, #13
{
   b6c66:	4605      	mov	r5, r0
  size_t n = print('\r');
   b6c68:	f7ff fff8 	bl	b6c5c <_ZN5Print5printEc>
  n += print('\n');
   b6c6c:	210a      	movs	r1, #10
  size_t n = print('\r');
   b6c6e:	4604      	mov	r4, r0
  n += print('\n');
   b6c70:	4628      	mov	r0, r5
   b6c72:	f7ff fff3 	bl	b6c5c <_ZN5Print5printEc>
  return n;
}
   b6c76:	4420      	add	r0, r4
   b6c78:	bd38      	pop	{r3, r4, r5, pc}

000b6c7a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b6c7a:	b530      	push	{r4, r5, lr}
   b6c7c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b6c7e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b6c80:	2a01      	cmp	r2, #1
  *str = '\0';
   b6c82:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b6c86:	bf98      	it	ls
   b6c88:	220a      	movls	r2, #10
   b6c8a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b6c8c:	460d      	mov	r5, r1
   b6c8e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b6c92:	fb01 5312 	mls	r3, r1, r2, r5
   b6c96:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6c9a:	2b09      	cmp	r3, #9
   b6c9c:	bf94      	ite	ls
   b6c9e:	3330      	addls	r3, #48	; 0x30
   b6ca0:	3337      	addhi	r3, #55	; 0x37
   b6ca2:	b2db      	uxtb	r3, r3
  } while(n);
   b6ca4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6ca6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b6caa:	d9ef      	bls.n	b6c8c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b6cac:	4621      	mov	r1, r4
   b6cae:	f7ff ffbf 	bl	b6c30 <_ZN5Print5writeEPKc>
}
   b6cb2:	b00b      	add	sp, #44	; 0x2c
   b6cb4:	bd30      	pop	{r4, r5, pc}

000b6cb6 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b6cb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6cba:	b086      	sub	sp, #24
   b6cbc:	af00      	add	r7, sp, #0
   b6cbe:	4605      	mov	r5, r0
   b6cc0:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b6cc2:	1d38      	adds	r0, r7, #4
   b6cc4:	2114      	movs	r1, #20
{
   b6cc6:	4614      	mov	r4, r2
    va_copy(args2, args);
   b6cc8:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b6cca:	f7ff fa8b 	bl	b61e4 <vsnprintf>

    if (n<bufsize)
   b6cce:	2813      	cmp	r0, #19
   b6cd0:	d80e      	bhi.n	b6cf0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b6cd2:	1d39      	adds	r1, r7, #4
   b6cd4:	4628      	mov	r0, r5
   b6cd6:	f7ff ffab 	bl	b6c30 <_ZN5Print5writeEPKc>
   b6cda:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b6cdc:	b11e      	cbz	r6, b6ce6 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b6cde:	4628      	mov	r0, r5
   b6ce0:	f7ff ffbf 	bl	b6c62 <_ZN5Print7printlnEv>
   b6ce4:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b6ce6:	4620      	mov	r0, r4
   b6ce8:	3718      	adds	r7, #24
   b6cea:	46bd      	mov	sp, r7
   b6cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b6cf0:	f100 0308 	add.w	r3, r0, #8
   b6cf4:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b6cf8:	46e8      	mov	r8, sp
        char bigger[n+1];
   b6cfa:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b6cfe:	4622      	mov	r2, r4
   b6d00:	1c41      	adds	r1, r0, #1
   b6d02:	683b      	ldr	r3, [r7, #0]
   b6d04:	4668      	mov	r0, sp
   b6d06:	f7ff fa6d 	bl	b61e4 <vsnprintf>
  return write(str);
   b6d0a:	4669      	mov	r1, sp
   b6d0c:	4628      	mov	r0, r5
   b6d0e:	f7ff ff8f 	bl	b6c30 <_ZN5Print5writeEPKc>
   b6d12:	4604      	mov	r4, r0
   b6d14:	46c5      	mov	sp, r8
   b6d16:	e7e1      	b.n	b6cdc <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b6d18 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b6d18:	4b01      	ldr	r3, [pc, #4]	; (b6d20 <_GLOBAL__sub_I_RGB+0x8>)
   b6d1a:	2200      	movs	r2, #0
   b6d1c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b6d1e:	4770      	bx	lr
   b6d20:	2003e6dc 	.word	0x2003e6dc

000b6d24 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b6d24:	2100      	movs	r1, #0
   b6d26:	f7ff b8f1 	b.w	b5f0c <hal_spi_release>

000b6d2a <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b6d2a:	2100      	movs	r1, #0
   b6d2c:	f7ff b8e6 	b.w	b5efc <hal_spi_acquire>

000b6d30 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b6d30:	b510      	push	{r4, lr}
   b6d32:	4604      	mov	r4, r0
   b6d34:	4608      	mov	r0, r1
{
    _spi = spi;
   b6d36:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b6d38:	f7ff f8c0 	bl	b5ebc <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b6d3c:	2300      	movs	r3, #0
   b6d3e:	6063      	str	r3, [r4, #4]
}
   b6d40:	4620      	mov	r0, r4
   b6d42:	bd10      	pop	{r4, pc}

000b6d44 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b6d44:	b513      	push	{r0, r1, r4, lr}
   b6d46:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b6d48:	7800      	ldrb	r0, [r0, #0]
   b6d4a:	f7ff ffee 	bl	b6d2a <_ZN8SPIClass4lockEv.isra.0>
   b6d4e:	b958      	cbnz	r0, b6d68 <_ZN8SPIClass5beginEv+0x24>
   b6d50:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b6d52:	9001      	str	r0, [sp, #4]
   b6d54:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b6d58:	f7ff f8a0 	bl	b5e9c <hal_spi_begin>
        unlock();
   b6d5c:	9801      	ldr	r0, [sp, #4]
    }
}
   b6d5e:	b002      	add	sp, #8
   b6d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6d64:	f7ff bfde 	b.w	b6d24 <_ZN8SPIClass6unlockEv.isra.0>
   b6d68:	b002      	add	sp, #8
   b6d6a:	bd10      	pop	{r4, pc}

000b6d6c <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b6d6c:	7800      	ldrb	r0, [r0, #0]
   b6d6e:	f7ff bfd9 	b.w	b6d24 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b6d74 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b6d74:	0840      	lsrs	r0, r0, #1
{
   b6d76:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b6d78:	6018      	str	r0, [r3, #0]
   b6d7a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b6d7c:	6818      	ldr	r0, [r3, #0]
   b6d7e:	4288      	cmp	r0, r1
   b6d80:	b2e5      	uxtb	r5, r4
   b6d82:	d906      	bls.n	b6d92 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b6d84:	3401      	adds	r4, #1
   b6d86:	2c08      	cmp	r4, #8
   b6d88:	d002      	beq.n	b6d90 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b6d8a:	0840      	lsrs	r0, r0, #1
   b6d8c:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b6d8e:	e7f5      	b.n	b6d7c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b6d90:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b6d92:	4b02      	ldr	r3, [pc, #8]	; (b6d9c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b6d94:	5d5b      	ldrb	r3, [r3, r5]
   b6d96:	7013      	strb	r3, [r2, #0]
}
   b6d98:	bd30      	pop	{r4, r5, pc}
   b6d9a:	bf00      	nop
   b6d9c:	000ba3e8 	.word	0x000ba3e8

000b6da0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b6da0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6da4:	4606      	mov	r6, r0
   b6da6:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b6da8:	7800      	ldrb	r0, [r0, #0]
{
   b6daa:	460c      	mov	r4, r1
    CHECK(lock());
   b6dac:	f7ff ffbd 	bl	b6d2a <_ZN8SPIClass4lockEv.isra.0>
   b6db0:	2800      	cmp	r0, #0
   b6db2:	db1b      	blt.n	b6dec <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b6db4:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b6db6:	2214      	movs	r2, #20
   b6db8:	2100      	movs	r1, #0
   b6dba:	a809      	add	r0, sp, #36	; 0x24
   b6dbc:	f003 f8b2 	bl	b9f24 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b6dc0:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b6dc2:	2200      	movs	r2, #0
   b6dc4:	a909      	add	r1, sp, #36	; 0x24
   b6dc6:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b6dc8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b6dcc:	f7ff f886 	bl	b5edc <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b6dd0:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b6dd4:	b113      	cbz	r3, b6ddc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b6dd6:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b6dda:	b155      	cbz	r5, b6df2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b6ddc:	2700      	movs	r7, #0
   b6dde:	46b9      	mov	r9, r7
   b6de0:	46b8      	mov	r8, r7
   b6de2:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b6de4:	7923      	ldrb	r3, [r4, #4]
   b6de6:	b15d      	cbz	r5, b6e00 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b6de8:	b1c3      	cbz	r3, b6e1c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b6dea:	2000      	movs	r0, #0
}
   b6dec:	b00f      	add	sp, #60	; 0x3c
   b6dee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b6df2:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b6df6:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b6dfa:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b6dfe:	e7f1      	b.n	b6de4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b6e00:	2b00      	cmp	r3, #0
   b6e02:	d135      	bne.n	b6e70 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b6e04:	68a3      	ldr	r3, [r4, #8]
   b6e06:	4543      	cmp	r3, r8
   b6e08:	d108      	bne.n	b6e1c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b6e0a:	f88d 9020 	strb.w	r9, [sp, #32]
   b6e0e:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b6e12:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b6e16:	89a3      	ldrh	r3, [r4, #12]
   b6e18:	429a      	cmp	r2, r3
   b6e1a:	d0e6      	beq.n	b6dea <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b6e1c:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b6e1e:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b6e20:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b6e24:	980a      	ldr	r0, [sp, #40]	; 0x28
   b6e26:	ab04      	add	r3, sp, #16
   b6e28:	f10d 020f 	add.w	r2, sp, #15
   b6e2c:	f7ff ffa2 	bl	b6d74 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b6e30:	7921      	ldrb	r1, [r4, #4]
   b6e32:	b985      	cbnz	r5, b6e56 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b6e34:	b989      	cbnz	r1, b6e5a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b6e36:	68a3      	ldr	r3, [r4, #8]
   b6e38:	4543      	cmp	r3, r8
   b6e3a:	d30e      	bcc.n	b6e5a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b6e3c:	f88d 9020 	strb.w	r9, [sp, #32]
   b6e40:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b6e44:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b6e48:	89a3      	ldrh	r3, [r4, #12]
   b6e4a:	429a      	cmp	r2, r3
   b6e4c:	d105      	bne.n	b6e5a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b6e4e:	9b04      	ldr	r3, [sp, #16]
   b6e50:	4543      	cmp	r3, r8
   b6e52:	d102      	bne.n	b6e5a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b6e54:	e7c9      	b.n	b6dea <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b6e56:	2900      	cmp	r1, #0
   b6e58:	d1f9      	bne.n	b6e4e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b6e5a:	2300      	movs	r3, #0
   b6e5c:	9301      	str	r3, [sp, #4]
   b6e5e:	7b63      	ldrb	r3, [r4, #13]
   b6e60:	9300      	str	r3, [sp, #0]
   b6e62:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b6e66:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b6e68:	7830      	ldrb	r0, [r6, #0]
   b6e6a:	f7ff f83f 	bl	b5eec <hal_spi_set_settings>
   b6e6e:	e7bc      	b.n	b6dea <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b6e70:	e9cd 5500 	strd	r5, r5, [sp]
   b6e74:	462b      	mov	r3, r5
   b6e76:	462a      	mov	r2, r5
   b6e78:	2101      	movs	r1, #1
   b6e7a:	e7f5      	b.n	b6e68 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b6e7c <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b6e7c:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b6e7e:	7800      	ldrb	r0, [r0, #0]
   b6e80:	f7ff f814 	bl	b5eac <hal_spi_transfer>
}
   b6e84:	b2c0      	uxtb	r0, r0
   b6e86:	bd08      	pop	{r3, pc}

000b6e88 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b6e88:	b510      	push	{r4, lr}
   b6e8a:	4604      	mov	r4, r0
{
	free(buffer);
   b6e8c:	6800      	ldr	r0, [r0, #0]
   b6e8e:	f7ff f999 	bl	b61c4 <free>
}
   b6e92:	4620      	mov	r0, r4
   b6e94:	bd10      	pop	{r4, pc}

000b6e96 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b6e96:	b510      	push	{r4, lr}
   b6e98:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b6e9a:	6800      	ldr	r0, [r0, #0]
   b6e9c:	b108      	cbz	r0, b6ea2 <_ZN6String10invalidateEv+0xc>
   b6e9e:	f7ff f991 	bl	b61c4 <free>
	buffer = NULL;
   b6ea2:	2300      	movs	r3, #0
	capacity = len = 0;
   b6ea4:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b6ea8:	6023      	str	r3, [r4, #0]
}
   b6eaa:	bd10      	pop	{r4, pc}

000b6eac <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b6eac:	b538      	push	{r3, r4, r5, lr}
   b6eae:	4604      	mov	r4, r0
   b6eb0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b6eb2:	6800      	ldr	r0, [r0, #0]
   b6eb4:	3101      	adds	r1, #1
   b6eb6:	f7ff f98d 	bl	b61d4 <realloc>
	if (newbuffer) {
   b6eba:	b110      	cbz	r0, b6ec2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b6ebc:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b6ec0:	2001      	movs	r0, #1
	}
	return 0;
}
   b6ec2:	bd38      	pop	{r3, r4, r5, pc}

000b6ec4 <_ZN6String7reserveEj>:
{
   b6ec4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b6ec6:	6803      	ldr	r3, [r0, #0]
{
   b6ec8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b6eca:	b123      	cbz	r3, b6ed6 <_ZN6String7reserveEj+0x12>
   b6ecc:	6843      	ldr	r3, [r0, #4]
   b6ece:	428b      	cmp	r3, r1
   b6ed0:	d301      	bcc.n	b6ed6 <_ZN6String7reserveEj+0x12>
   b6ed2:	2001      	movs	r0, #1
}
   b6ed4:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b6ed6:	4620      	mov	r0, r4
   b6ed8:	f7ff ffe8 	bl	b6eac <_ZN6String12changeBufferEj>
   b6edc:	2800      	cmp	r0, #0
   b6ede:	d0f9      	beq.n	b6ed4 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b6ee0:	68a3      	ldr	r3, [r4, #8]
   b6ee2:	2b00      	cmp	r3, #0
   b6ee4:	d1f5      	bne.n	b6ed2 <_ZN6String7reserveEj+0xe>
   b6ee6:	6822      	ldr	r2, [r4, #0]
   b6ee8:	7013      	strb	r3, [r2, #0]
   b6eea:	e7f2      	b.n	b6ed2 <_ZN6String7reserveEj+0xe>

000b6eec <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b6eec:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6eee:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b6ef0:	4611      	mov	r1, r2
   b6ef2:	9201      	str	r2, [sp, #4]
{
   b6ef4:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b6ef6:	f7ff ffe5 	bl	b6ec4 <_ZN6String7reserveEj>
   b6efa:	9a01      	ldr	r2, [sp, #4]
   b6efc:	b928      	cbnz	r0, b6f0a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b6efe:	4620      	mov	r0, r4
   b6f00:	f7ff ffc9 	bl	b6e96 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b6f04:	4620      	mov	r0, r4
   b6f06:	b003      	add	sp, #12
   b6f08:	bd30      	pop	{r4, r5, pc}
	len = length;
   b6f0a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b6f0c:	4629      	mov	r1, r5
   b6f0e:	6820      	ldr	r0, [r4, #0]
   b6f10:	f002 fffa 	bl	b9f08 <memcpy>
	buffer[len] = 0;
   b6f14:	6822      	ldr	r2, [r4, #0]
   b6f16:	68a3      	ldr	r3, [r4, #8]
   b6f18:	2100      	movs	r1, #0
   b6f1a:	54d1      	strb	r1, [r2, r3]
	return *this;
   b6f1c:	e7f2      	b.n	b6f04 <_ZN6String4copyEPKcj+0x18>

000b6f1e <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b6f1e:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b6f20:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b6f22:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b6f26:	4604      	mov	r4, r0
	len = 0;
   b6f28:	6083      	str	r3, [r0, #8]
	flags = 0;
   b6f2a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b6f2c:	b141      	cbz	r1, b6f40 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b6f2e:	4608      	mov	r0, r1
   b6f30:	9101      	str	r1, [sp, #4]
   b6f32:	f003 f85c 	bl	b9fee <strlen>
   b6f36:	9901      	ldr	r1, [sp, #4]
   b6f38:	4602      	mov	r2, r0
   b6f3a:	4620      	mov	r0, r4
   b6f3c:	f7ff ffd6 	bl	b6eec <_ZN6String4copyEPKcj>
}
   b6f40:	4620      	mov	r0, r4
   b6f42:	b002      	add	sp, #8
   b6f44:	bd10      	pop	{r4, pc}

000b6f46 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b6f46:	4288      	cmp	r0, r1
{
   b6f48:	b510      	push	{r4, lr}
   b6f4a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b6f4c:	d005      	beq.n	b6f5a <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b6f4e:	680b      	ldr	r3, [r1, #0]
   b6f50:	b12b      	cbz	r3, b6f5e <_ZN6StringaSERKS_+0x18>
   b6f52:	688a      	ldr	r2, [r1, #8]
   b6f54:	4619      	mov	r1, r3
   b6f56:	f7ff ffc9 	bl	b6eec <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b6f5a:	4620      	mov	r0, r4
   b6f5c:	bd10      	pop	{r4, pc}
	else invalidate();
   b6f5e:	f7ff ff9a 	bl	b6e96 <_ZN6String10invalidateEv>
   b6f62:	e7fa      	b.n	b6f5a <_ZN6StringaSERKS_+0x14>

000b6f64 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b6f64:	b510      	push	{r4, lr}
	buffer = NULL;
   b6f66:	2300      	movs	r3, #0
String::String(const String &value)
   b6f68:	4604      	mov	r4, r0
	capacity = 0;
   b6f6a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b6f6e:	6083      	str	r3, [r0, #8]
	flags = 0;
   b6f70:	7303      	strb	r3, [r0, #12]
	*this = value;
   b6f72:	f7ff ffe8 	bl	b6f46 <_ZN6StringaSERKS_>
}
   b6f76:	4620      	mov	r0, r4
   b6f78:	bd10      	pop	{r4, pc}

000b6f7a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b6f7a:	b513      	push	{r0, r1, r4, lr}
   b6f7c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b6f7e:	b159      	cbz	r1, b6f98 <_ZN6StringaSEPKc+0x1e>
   b6f80:	4608      	mov	r0, r1
   b6f82:	9101      	str	r1, [sp, #4]
   b6f84:	f003 f833 	bl	b9fee <strlen>
   b6f88:	9901      	ldr	r1, [sp, #4]
   b6f8a:	4602      	mov	r2, r0
   b6f8c:	4620      	mov	r0, r4
   b6f8e:	f7ff ffad 	bl	b6eec <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b6f92:	4620      	mov	r0, r4
   b6f94:	b002      	add	sp, #8
   b6f96:	bd10      	pop	{r4, pc}
	else invalidate();
   b6f98:	f7ff ff7d 	bl	b6e96 <_ZN6String10invalidateEv>
   b6f9c:	e7f9      	b.n	b6f92 <_ZN6StringaSEPKc+0x18>

000b6f9e <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b6f9e:	b510      	push	{r4, lr}
   b6fa0:	4604      	mov	r4, r0
   b6fa2:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b6fa4:	2300      	movs	r3, #0
	capacity = 0;
   b6fa6:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b6faa:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b6fac:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b6fae:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b6fb0:	a901      	add	r1, sp, #4
   b6fb2:	f000 fcbb 	bl	b792c <itoa>
	*this = buf;
   b6fb6:	a901      	add	r1, sp, #4
   b6fb8:	4620      	mov	r0, r4
   b6fba:	f7ff ffde 	bl	b6f7a <_ZN6StringaSEPKc>
}
   b6fbe:	4620      	mov	r0, r4
   b6fc0:	b00a      	add	sp, #40	; 0x28
   b6fc2:	bd10      	pop	{r4, pc}

000b6fc4 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b6fc4:	b570      	push	{r4, r5, r6, lr}
   b6fc6:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b6fc8:	460e      	mov	r6, r1
   b6fca:	b909      	cbnz	r1, b6fd0 <_ZN6String6concatEPKcj+0xc>
   b6fcc:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b6fce:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b6fd0:	b16a      	cbz	r2, b6fee <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b6fd2:	6884      	ldr	r4, [r0, #8]
   b6fd4:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b6fd6:	4621      	mov	r1, r4
   b6fd8:	f7ff ff74 	bl	b6ec4 <_ZN6String7reserveEj>
   b6fdc:	2800      	cmp	r0, #0
   b6fde:	d0f5      	beq.n	b6fcc <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b6fe0:	6828      	ldr	r0, [r5, #0]
   b6fe2:	68ab      	ldr	r3, [r5, #8]
   b6fe4:	4631      	mov	r1, r6
   b6fe6:	4418      	add	r0, r3
   b6fe8:	f002 ffdc 	bl	b9fa4 <strcpy>
	len = newlen;
   b6fec:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b6fee:	2001      	movs	r0, #1
   b6ff0:	e7ed      	b.n	b6fce <_ZN6String6concatEPKcj+0xa>

000b6ff2 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b6ff2:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b6ff4:	688a      	ldr	r2, [r1, #8]
   b6ff6:	6809      	ldr	r1, [r1, #0]
{
   b6ff8:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b6ffa:	f7ff ffe3 	bl	b6fc4 <_ZN6String6concatEPKcj>
   b6ffe:	b910      	cbnz	r0, b7006 <_ZplRK15StringSumHelperRK6String+0x14>
   b7000:	4620      	mov	r0, r4
   b7002:	f7ff ff48 	bl	b6e96 <_ZN6String10invalidateEv>
	return a;
}
   b7006:	4620      	mov	r0, r4
   b7008:	bd10      	pop	{r4, pc}
	...

000b700c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b700c:	4b05      	ldr	r3, [pc, #20]	; (b7024 <_GLOBAL__sub_I_System+0x18>)
   b700e:	2202      	movs	r2, #2
   b7010:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b7012:	4b05      	ldr	r3, [pc, #20]	; (b7028 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b7014:	4a05      	ldr	r2, [pc, #20]	; (b702c <_GLOBAL__sub_I_System+0x20>)
   b7016:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b7018:	2000      	movs	r0, #0
   b701a:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b701e:	f7ff b805 	b.w	b602c <set_system_mode>
   b7022:	bf00      	nop
   b7024:	2003e6f8 	.word	0x2003e6f8
   b7028:	2003e6ec 	.word	0x2003e6ec
   b702c:	ffff0000 	.word	0xffff0000

000b7030 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b7030:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b7032:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b7034:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b7038:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b703a:	2201      	movs	r2, #1
   b703c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b7040:	f10d 0107 	add.w	r1, sp, #7
   b7044:	47a0      	blx	r4
}
   b7046:	b002      	add	sp, #8
   b7048:	bd10      	pop	{r4, pc}

000b704a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b704a:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b704c:	6803      	ldr	r3, [r0, #0]
   b704e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b7050:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b7054:	46a4      	mov	ip, r4
}
   b7056:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b705a:	4760      	bx	ip

000b705c <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b705c:	b513      	push	{r0, r1, r4, lr}
   b705e:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b7060:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b7062:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b7066:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b7068:	f10d 0107 	add.w	r1, sp, #7
   b706c:	2201      	movs	r2, #1
   b706e:	47a0      	blx	r4
}
   b7070:	b002      	add	sp, #8
   b7072:	bd10      	pop	{r4, pc}

000b7074 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b7074:	b510      	push	{r4, lr}
   b7076:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7078:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b707c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7080:	429a      	cmp	r2, r3
int TCPClient::read() {
   b7082:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7084:	d008      	beq.n	b7098 <_ZN9TCPClient4readEv+0x24>
   b7086:	6963      	ldr	r3, [r4, #20]
   b7088:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b708c:	1c51      	adds	r1, r2, #1
   b708e:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b7092:	4413      	add	r3, r2
   b7094:	7918      	ldrb	r0, [r3, #4]
}
   b7096:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7098:	6803      	ldr	r3, [r0, #0]
   b709a:	691b      	ldr	r3, [r3, #16]
   b709c:	4798      	blx	r3
   b709e:	2800      	cmp	r0, #0
   b70a0:	d1f1      	bne.n	b7086 <_ZN9TCPClient4readEv+0x12>
   b70a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b70a6:	e7f6      	b.n	b7096 <_ZN9TCPClient4readEv+0x22>

000b70a8 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b70a8:	4770      	bx	lr

000b70aa <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b70aa:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b70ac:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b70ae:	43c0      	mvns	r0, r0
   b70b0:	0fc0      	lsrs	r0, r0, #31
   b70b2:	4770      	bx	lr

000b70b4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b70b4:	4770      	bx	lr
	...

000b70b8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b70b8:	4b06      	ldr	r3, [pc, #24]	; (b70d4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b70ba:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b70bc:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b70be:	f100 040c 	add.w	r4, r0, #12
	    ||
   b70c2:	d005      	beq.n	b70d0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b70c4:	4608      	mov	r0, r1
   b70c6:	f000 fdfd 	bl	b7cc4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b70ca:	2800      	cmp	r0, #0
   b70cc:	bf08      	it	eq
   b70ce:	2400      	moveq	r4, #0
      }
   b70d0:	4620      	mov	r0, r4
   b70d2:	bd10      	pop	{r4, pc}
   b70d4:	000ba30c 	.word	0x000ba30c

000b70d8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b70d8:	b510      	push	{r4, lr}
   b70da:	21ac      	movs	r1, #172	; 0xac
   b70dc:	4604      	mov	r4, r0
   b70de:	f7fc ffe0 	bl	b40a2 <_ZdlPvj>
   b70e2:	4620      	mov	r0, r4
   b70e4:	bd10      	pop	{r4, pc}

000b70e6 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b70e6:	21ac      	movs	r1, #172	; 0xac
   b70e8:	f7fc bfdb 	b.w	b40a2 <_ZdlPvj>

000b70ec <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b70ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b70f0:	f04f 0800 	mov.w	r8, #0
   b70f4:	b086      	sub	sp, #24
   b70f6:	461c      	mov	r4, r3
   b70f8:	f8c0 8004 	str.w	r8, [r0, #4]
   b70fc:	4605      	mov	r5, r0
   b70fe:	460e      	mov	r6, r1
   b7100:	4617      	mov	r7, r2
    struct timeval tv = {};
   b7102:	4641      	mov	r1, r8
   b7104:	2210      	movs	r2, #16
   b7106:	a802      	add	r0, sp, #8
   b7108:	f002 ff0c 	bl	b9f24 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b710c:	1c63      	adds	r3, r4, #1
   b710e:	d009      	beq.n	b7124 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b7110:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7114:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b7118:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b711c:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b7120:	435c      	muls	r4, r3
   b7122:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b7124:	6968      	ldr	r0, [r5, #20]
   b7126:	2310      	movs	r3, #16
   b7128:	9300      	str	r3, [sp, #0]
   b712a:	6800      	ldr	r0, [r0, #0]
   b712c:	ab02      	add	r3, sp, #8
   b712e:	f241 0205 	movw	r2, #4101	; 0x1005
   b7132:	f640 71ff 	movw	r1, #4095	; 0xfff
   b7136:	f7fe fe81 	bl	b5e3c <sock_setsockopt>
    if (ret < 0) {
   b713a:	2800      	cmp	r0, #0
   b713c:	da07      	bge.n	b714e <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b713e:	f7ff f869 	bl	b6214 <__errno>
   b7142:	6803      	ldr	r3, [r0, #0]
   b7144:	606b      	str	r3, [r5, #4]
        return 0;
   b7146:	2000      	movs	r0, #0
}
   b7148:	b006      	add	sp, #24
   b714a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b714e:	6968      	ldr	r0, [r5, #20]
   b7150:	2300      	movs	r3, #0
   b7152:	6800      	ldr	r0, [r0, #0]
   b7154:	463a      	mov	r2, r7
   b7156:	4631      	mov	r1, r6
   b7158:	f7fe fe90 	bl	b5e7c <sock_send>
    if (ret < 0) {
   b715c:	1e03      	subs	r3, r0, #0
   b715e:	dbee      	blt.n	b713e <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b7160:	4618      	mov	r0, r3
   b7162:	e7f1      	b.n	b7148 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b7164 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b7164:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b7166:	6984      	ldr	r4, [r0, #24]
   b7168:	4b0a      	ldr	r3, [pc, #40]	; (b7194 <_ZN9TCPClientD1Ev+0x30>)
   b716a:	6003      	str	r3, [r0, #0]
   b716c:	4605      	mov	r5, r0
   b716e:	b17c      	cbz	r4, b7190 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b7170:	6863      	ldr	r3, [r4, #4]
   b7172:	3b01      	subs	r3, #1
   b7174:	6063      	str	r3, [r4, #4]
   b7176:	b95b      	cbnz	r3, b7190 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b7178:	6823      	ldr	r3, [r4, #0]
   b717a:	4620      	mov	r0, r4
   b717c:	689b      	ldr	r3, [r3, #8]
   b717e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b7180:	68a3      	ldr	r3, [r4, #8]
   b7182:	3b01      	subs	r3, #1
   b7184:	60a3      	str	r3, [r4, #8]
   b7186:	b91b      	cbnz	r3, b7190 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b7188:	6823      	ldr	r3, [r4, #0]
   b718a:	4620      	mov	r0, r4
   b718c:	68db      	ldr	r3, [r3, #12]
   b718e:	4798      	blx	r3
   b7190:	4628      	mov	r0, r5
   b7192:	bd38      	pop	{r3, r4, r5, pc}
   b7194:	000ba42c 	.word	0x000ba42c

000b7198 <_ZN9TCPClientD0Ev>:
   b7198:	b510      	push	{r4, lr}
   b719a:	4604      	mov	r4, r0
   b719c:	f7ff ffe2 	bl	b7164 <_ZN9TCPClientD1Ev>
   b71a0:	4620      	mov	r0, r4
   b71a2:	211c      	movs	r1, #28
   b71a4:	f7fc ff7d 	bl	b40a2 <_ZdlPvj>
   b71a8:	4620      	mov	r0, r4
   b71aa:	bd10      	pop	{r4, pc}

000b71ac <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b71ac:	b530      	push	{r4, r5, lr}
   b71ae:	b087      	sub	sp, #28
   b71b0:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b71b2:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b71b4:	4668      	mov	r0, sp
   b71b6:	f7ff fc5b 	bl	b6a70 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b71ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b71bc:	3404      	adds	r4, #4
   b71be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b71c0:	682b      	ldr	r3, [r5, #0]
   b71c2:	7023      	strb	r3, [r4, #0]
    }
   b71c4:	b007      	add	sp, #28
   b71c6:	bd30      	pop	{r4, r5, pc}

000b71c8 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b71c8:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b71ca:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b71cc:	4b05      	ldr	r3, [pc, #20]	; (b71e4 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b71ce:	4604      	mov	r4, r0
   b71d0:	358c      	adds	r5, #140	; 0x8c
   b71d2:	f844 3b04 	str.w	r3, [r4], #4
   b71d6:	4606      	mov	r6, r0
   b71d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b71da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b71dc:	682b      	ldr	r3, [r5, #0]
   b71de:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b71e0:	4630      	mov	r0, r6
   b71e2:	bd70      	pop	{r4, r5, r6, pc}
   b71e4:	000ba39c 	.word	0x000ba39c

000b71e8 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b71e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b71ec:	4698      	mov	r8, r3
    stop();
   b71ee:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b71f0:	b093      	sub	sp, #76	; 0x4c
   b71f2:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b71f4:	2400      	movs	r4, #0
    stop();
   b71f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b71f8:	4606      	mov	r6, r0
   b71fa:	4617      	mov	r7, r2
    stop();
   b71fc:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b71fe:	4628      	mov	r0, r5
   b7200:	466b      	mov	r3, sp
   b7202:	4622      	mov	r2, r4
   b7204:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b7206:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7208:	f7fe fe10 	bl	b5e2c <netdb_getaddrinfo>
   b720c:	4605      	mov	r5, r0
   b720e:	2800      	cmp	r0, #0
   b7210:	d163      	bne.n	b72da <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b7212:	9b00      	ldr	r3, [sp, #0]
   b7214:	2b00      	cmp	r3, #0
   b7216:	d04b      	beq.n	b72b0 <_ZN9TCPClient7connectEPKctm+0xc8>
   b7218:	695b      	ldr	r3, [r3, #20]
   b721a:	2b00      	cmp	r3, #0
   b721c:	d048      	beq.n	b72b0 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b721e:	a806      	add	r0, sp, #24
   b7220:	f7ff fbe2 	bl	b69e8 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b7224:	9b00      	ldr	r3, [sp, #0]
   b7226:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b7228:	7863      	ldrb	r3, [r4, #1]
   b722a:	2b02      	cmp	r3, #2
   b722c:	d104      	bne.n	b7238 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b722e:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b7230:	a806      	add	r0, sp, #24
   b7232:	f7ff ffbb 	bl	b71ac <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b7236:	e026      	b.n	b7286 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b7238:	2b0a      	cmp	r3, #10
   b723a:	d124      	bne.n	b7286 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b723c:	2211      	movs	r2, #17
   b723e:	4629      	mov	r1, r5
   b7240:	a801      	add	r0, sp, #4
   b7242:	f002 fe6f 	bl	b9f24 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b7246:	68a3      	ldr	r3, [r4, #8]
   b7248:	2b00      	cmp	r3, #0
   b724a:	d038      	beq.n	b72be <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b724c:	f104 0308 	add.w	r3, r4, #8
   b7250:	f10d 0c04 	add.w	ip, sp, #4
   b7254:	3418      	adds	r4, #24
   b7256:	6818      	ldr	r0, [r3, #0]
   b7258:	6859      	ldr	r1, [r3, #4]
   b725a:	4662      	mov	r2, ip
   b725c:	c203      	stmia	r2!, {r0, r1}
   b725e:	3308      	adds	r3, #8
   b7260:	42a3      	cmp	r3, r4
   b7262:	4694      	mov	ip, r2
   b7264:	d1f7      	bne.n	b7256 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b7266:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b7268:	a901      	add	r1, sp, #4
   b726a:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b726c:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b7270:	f7ff fbc8 	bl	b6a04 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b7274:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b7278:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b727c:	ac07      	add	r4, sp, #28
   b727e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7280:	f8dc 3000 	ldr.w	r3, [ip]
   b7284:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b7286:	a806      	add	r0, sp, #24
   b7288:	f7ff fbce 	bl	b6a28 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b728c:	b180      	cbz	r0, b72b0 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b728e:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b7290:	ad07      	add	r5, sp, #28
   b7292:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b7296:	4b12      	ldr	r3, [pc, #72]	; (b72e0 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b7298:	930c      	str	r3, [sp, #48]	; 0x30
   b729a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b729c:	ac0d      	add	r4, sp, #52	; 0x34
   b729e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b72a0:	682b      	ldr	r3, [r5, #0]
   b72a2:	7023      	strb	r3, [r4, #0]
   b72a4:	463a      	mov	r2, r7
   b72a6:	4643      	mov	r3, r8
   b72a8:	a90c      	add	r1, sp, #48	; 0x30
   b72aa:	4630      	mov	r0, r6
   b72ac:	47c8      	blx	r9
   b72ae:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b72b0:	9800      	ldr	r0, [sp, #0]
   b72b2:	f7fe fdb3 	bl	b5e1c <netdb_freeaddrinfo>
}
   b72b6:	4628      	mov	r0, r5
   b72b8:	b013      	add	sp, #76	; 0x4c
   b72ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b72be:	68e3      	ldr	r3, [r4, #12]
   b72c0:	2b00      	cmp	r3, #0
   b72c2:	d1c3      	bne.n	b724c <_ZN9TCPClient7connectEPKctm+0x64>
   b72c4:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b72c8:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b72cc:	f7fe fd96 	bl	b5dfc <inet_htonl>
   b72d0:	4581      	cmp	r9, r0
   b72d2:	d1bb      	bne.n	b724c <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b72d4:	f104 0114 	add.w	r1, r4, #20
   b72d8:	e7aa      	b.n	b7230 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b72da:	4625      	mov	r5, r4
   b72dc:	e7e8      	b.n	b72b0 <_ZN9TCPClient7connectEPKctm+0xc8>
   b72de:	bf00      	nop
   b72e0:	000ba39c 	.word	0x000ba39c

000b72e4 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b72e4:	b538      	push	{r3, r4, r5, lr}
   b72e6:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b72e8:	681a      	ldr	r2, [r3, #0]
   b72ea:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b72ec:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b72ee:	da10      	bge.n	b7312 <_ZN9TCPClient9connectedEv+0x2e>
   b72f0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b72f4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b72f8:	429a      	cmp	r2, r3
   b72fa:	d10a      	bne.n	b7312 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b72fc:	6803      	ldr	r3, [r0, #0]
   b72fe:	691b      	ldr	r3, [r3, #16]
   b7300:	4798      	blx	r3
        if (!rv) {
   b7302:	4604      	mov	r4, r0
   b7304:	b928      	cbnz	r0, b7312 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b7306:	682b      	ldr	r3, [r5, #0]
   b7308:	4628      	mov	r0, r5
   b730a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b730c:	4798      	blx	r3
        rv = available();
   b730e:	4620      	mov	r0, r4
}
   b7310:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b7312:	2001      	movs	r0, #1
   b7314:	e7fc      	b.n	b7310 <_ZN9TCPClient9connectedEv+0x2c>

000b7316 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b7316:	b510      	push	{r4, lr}
   b7318:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b731a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b731e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7322:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b7324:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7326:	d005      	beq.n	b7334 <_ZN9TCPClient4peekEv+0x1e>
   b7328:	6963      	ldr	r3, [r4, #20]
   b732a:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b732e:	4413      	add	r3, r2
   b7330:	7918      	ldrb	r0, [r3, #4]
}
   b7332:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7334:	6803      	ldr	r3, [r0, #0]
   b7336:	691b      	ldr	r3, [r3, #16]
   b7338:	4798      	blx	r3
   b733a:	2800      	cmp	r0, #0
   b733c:	d1f4      	bne.n	b7328 <_ZN9TCPClient4peekEv+0x12>
   b733e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b7342:	e7f6      	b.n	b7332 <_ZN9TCPClient4peekEv+0x1c>

000b7344 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b7344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7346:	6943      	ldr	r3, [r0, #20]
   b7348:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b734a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b734e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7352:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b7354:	4605      	mov	r5, r0
   b7356:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b7358:	d016      	beq.n	b7388 <_ZN9TCPClient4readEPhj+0x44>
   b735a:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b735c:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b7360:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b7364:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b7366:	42bc      	cmp	r4, r7
   b7368:	bf28      	it	cs
   b736a:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b736c:	3304      	adds	r3, #4
   b736e:	4622      	mov	r2, r4
   b7370:	4419      	add	r1, r3
   b7372:	4630      	mov	r0, r6
   b7374:	f002 fdc8 	bl	b9f08 <memcpy>
   b7378:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b737a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b737e:	4423      	add	r3, r4
   b7380:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b7384:	4620      	mov	r0, r4
   b7386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b7388:	6803      	ldr	r3, [r0, #0]
   b738a:	691b      	ldr	r3, [r3, #16]
   b738c:	4798      	blx	r3
   b738e:	2800      	cmp	r0, #0
   b7390:	d1e3      	bne.n	b735a <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b7392:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b7396:	e7f5      	b.n	b7384 <_ZN9TCPClient4readEPhj+0x40>

000b7398 <_ZN9TCPClient12flush_bufferEv>:
   b7398:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b739a:	2300      	movs	r3, #0
   b739c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b73a0:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b73a2:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b73a6:	4770      	bx	lr

000b73a8 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b73a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b73ac:	461f      	mov	r7, r3
    stop();
   b73ae:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b73b0:	460c      	mov	r4, r1
    stop();
   b73b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b73b4:	b08a      	sub	sp, #40	; 0x28
   b73b6:	4605      	mov	r5, r0
   b73b8:	4616      	mov	r6, r2
    stop();
   b73ba:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b73bc:	7d23      	ldrb	r3, [r4, #20]
   b73be:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b73c2:	2b04      	cmp	r3, #4
   b73c4:	bf0c      	ite	eq
   b73c6:	2002      	moveq	r0, #2
   b73c8:	200a      	movne	r0, #10
   b73ca:	2206      	movs	r2, #6
   b73cc:	2101      	movs	r1, #1
   b73ce:	f7fe fd5d 	bl	b5e8c <sock_socket>
   b73d2:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b73d6:	696b      	ldr	r3, [r5, #20]
   b73d8:	681b      	ldr	r3, [r3, #0]
   b73da:	2b00      	cmp	r3, #0
   b73dc:	da08      	bge.n	b73f0 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b73de:	682b      	ldr	r3, [r5, #0]
   b73e0:	4628      	mov	r0, r5
   b73e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b73e4:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b73e6:	4798      	blx	r3
}
   b73e8:	4620      	mov	r0, r4
   b73ea:	b00a      	add	sp, #40	; 0x28
   b73ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b73f0:	4628      	mov	r0, r5
   b73f2:	f7ff ffd1 	bl	b7398 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b73f6:	b1b7      	cbz	r7, b7426 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b73f8:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b73fa:	a903      	add	r1, sp, #12
   b73fc:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b73fe:	9303      	str	r3, [sp, #12]
   b7400:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7404:	f7fe fcea 	bl	b5ddc <if_index_to_name>
   b7408:	2800      	cmp	r0, #0
   b740a:	d1e8      	bne.n	b73de <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b740c:	6968      	ldr	r0, [r5, #20]
   b740e:	2306      	movs	r3, #6
   b7410:	9300      	str	r3, [sp, #0]
   b7412:	6800      	ldr	r0, [r0, #0]
   b7414:	ab03      	add	r3, sp, #12
   b7416:	f241 020b 	movw	r2, #4107	; 0x100b
   b741a:	f640 71ff 	movw	r1, #4095	; 0xfff
   b741e:	f7fe fd0d 	bl	b5e3c <sock_setsockopt>
   b7422:	2800      	cmp	r0, #0
   b7424:	d1db      	bne.n	b73de <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b7426:	221c      	movs	r2, #28
   b7428:	2100      	movs	r1, #0
   b742a:	a803      	add	r0, sp, #12
   b742c:	f002 fd7a 	bl	b9f24 <memset>
    if (ip.version() == 4) {
   b7430:	7d23      	ldrb	r3, [r4, #20]
   b7432:	2b04      	cmp	r3, #4
   b7434:	d11d      	bne.n	b7472 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b7436:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b743a:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b743c:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b7440:	f7fe fce4 	bl	b5e0c <inet_htons>
   b7444:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b7448:	6860      	ldr	r0, [r4, #4]
   b744a:	f7fe fcd7 	bl	b5dfc <inet_htonl>
   b744e:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b7450:	696b      	ldr	r3, [r5, #20]
   b7452:	221c      	movs	r2, #28
   b7454:	6818      	ldr	r0, [r3, #0]
   b7456:	a903      	add	r1, sp, #12
   b7458:	f7fe fd00 	bl	b5e5c <sock_connect>
   b745c:	2800      	cmp	r0, #0
   b745e:	d1be      	bne.n	b73de <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b7460:	3404      	adds	r4, #4
   b7462:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b7464:	696d      	ldr	r5, [r5, #20]
   b7466:	358c      	adds	r5, #140	; 0x8c
   b7468:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b746a:	6823      	ldr	r3, [r4, #0]
   b746c:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b746e:	2401      	movs	r4, #1
   b7470:	e7ba      	b.n	b73e8 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b7472:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b7476:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b7478:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b747c:	f7fe fcc6 	bl	b5e0c <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b7480:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b7482:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b7486:	1d23      	adds	r3, r4, #4
   b7488:	f104 0714 	add.w	r7, r4, #20
   b748c:	6818      	ldr	r0, [r3, #0]
   b748e:	6859      	ldr	r1, [r3, #4]
   b7490:	4632      	mov	r2, r6
   b7492:	c203      	stmia	r2!, {r0, r1}
   b7494:	3308      	adds	r3, #8
   b7496:	42bb      	cmp	r3, r7
   b7498:	4616      	mov	r6, r2
   b749a:	d1f7      	bne.n	b748c <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b749c:	e7d8      	b.n	b7450 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b74a0 <_ZN9TCPClient9availableEv>:
{
   b74a0:	b530      	push	{r4, r5, lr}
   b74a2:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b74a4:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b74a8:	b08b      	sub	sp, #44	; 0x2c
   b74aa:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b74ac:	b12b      	cbz	r3, b74ba <_ZN9TCPClient9availableEv+0x1a>
   b74ae:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b74b2:	429a      	cmp	r2, r3
   b74b4:	d101      	bne.n	b74ba <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b74b6:	f7ff ff6f 	bl	b7398 <_ZN9TCPClient12flush_bufferEv>
   b74ba:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b74bc:	6808      	ldr	r0, [r1, #0]
   b74be:	2800      	cmp	r0, #0
   b74c0:	db18      	blt.n	b74f4 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b74c2:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b74c6:	2d7f      	cmp	r5, #127	; 0x7f
   b74c8:	d814      	bhi.n	b74f4 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b74ca:	3104      	adds	r1, #4
   b74cc:	2308      	movs	r3, #8
   b74ce:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b74d2:	4429      	add	r1, r5
   b74d4:	f7fe fcca 	bl	b5e6c <sock_recv>
            if (ret > 0) {
   b74d8:	2800      	cmp	r0, #0
   b74da:	dd13      	ble.n	b7504 <_ZN9TCPClient9availableEv+0x64>
   b74dc:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b74de:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b74e2:	b90a      	cbnz	r2, b74e8 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b74e4:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b74e8:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b74ea:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b74ee:	4410      	add	r0, r2
   b74f0:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b74f4:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b74f6:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b74fa:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b74fe:	1ac0      	subs	r0, r0, r3
   b7500:	b00b      	add	sp, #44	; 0x2c
   b7502:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b7504:	f7fe fe86 	bl	b6214 <__errno>
   b7508:	6803      	ldr	r3, [r0, #0]
   b750a:	2b0b      	cmp	r3, #11
   b750c:	d0f2      	beq.n	b74f4 <_ZN9TCPClient9availableEv+0x54>
   b750e:	f7fe fe81 	bl	b6214 <__errno>
   b7512:	6803      	ldr	r3, [r0, #0]
   b7514:	2b0b      	cmp	r3, #11
   b7516:	d0ed      	beq.n	b74f4 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b7518:	2320      	movs	r3, #32
   b751a:	2500      	movs	r5, #0
   b751c:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b7520:	f7fe fe78 	bl	b6214 <__errno>
   b7524:	6803      	ldr	r3, [r0, #0]
   b7526:	9301      	str	r3, [sp, #4]
   b7528:	4b08      	ldr	r3, [pc, #32]	; (b754c <_ZN9TCPClient9availableEv+0xac>)
   b752a:	4909      	ldr	r1, [pc, #36]	; (b7550 <_ZN9TCPClient9availableEv+0xb0>)
   b752c:	9300      	str	r3, [sp, #0]
   b752e:	aa02      	add	r2, sp, #8
   b7530:	462b      	mov	r3, r5
   b7532:	2032      	movs	r0, #50	; 0x32
   b7534:	f7fe fd6a 	bl	b600c <log_message>
                    sock_close(d_->sock);
   b7538:	6963      	ldr	r3, [r4, #20]
   b753a:	6818      	ldr	r0, [r3, #0]
   b753c:	f7fe fc86 	bl	b5e4c <sock_close>
   b7540:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b7542:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7546:	601a      	str	r2, [r3, #0]
   b7548:	e7d4      	b.n	b74f4 <_ZN9TCPClient9availableEv+0x54>
   b754a:	bf00      	nop
   b754c:	000ba3f7 	.word	0x000ba3f7
   b7550:	000ba3f0 	.word	0x000ba3f0

000b7554 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b7554:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b7556:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b7558:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b755a:	6818      	ldr	r0, [r3, #0]
   b755c:	2800      	cmp	r0, #0
   b755e:	db01      	blt.n	b7564 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b7560:	f7fe fc74 	bl	b5e4c <sock_close>
   b7564:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b7566:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b756a:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b756c:	6960      	ldr	r0, [r4, #20]
   b756e:	2211      	movs	r2, #17
   b7570:	2100      	movs	r1, #0
   b7572:	308c      	adds	r0, #140	; 0x8c
   b7574:	f002 fcd6 	bl	b9f24 <memset>
    flush_buffer();
   b7578:	4620      	mov	r0, r4
}
   b757a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b757e:	f7ff bf0b 	b.w	b7398 <_ZN9TCPClient12flush_bufferEv>

000b7582 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b7582:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b7584:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b7586:	4604      	mov	r4, r0
          total(0) {
   b7588:	6001      	str	r1, [r0, #0]
   b758a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b758e:	3088      	adds	r0, #136	; 0x88
   b7590:	f7ff fa2a 	bl	b69e8 <_ZN9IPAddressC1Ev>
}
   b7594:	4620      	mov	r0, r4
   b7596:	bd10      	pop	{r4, pc}

000b7598 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b7598:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b759a:	2300      	movs	r3, #0
   b759c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b75a0:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b75a4:	4a0e      	ldr	r2, [pc, #56]	; (b75e0 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b75a6:	6103      	str	r3, [r0, #16]
   b75a8:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b75aa:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b75ac:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b75ae:	20ac      	movs	r0, #172	; 0xac
   b75b0:	9101      	str	r1, [sp, #4]
   b75b2:	f7fc fd70 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b75b6:	1e05      	subs	r5, r0, #0
   b75b8:	f105 060c 	add.w	r6, r5, #12
   b75bc:	d008      	beq.n	b75d0 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b75be:	2301      	movs	r3, #1
   b75c0:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b75c4:	4b07      	ldr	r3, [pc, #28]	; (b75e4 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b75c6:	9901      	ldr	r1, [sp, #4]
   b75c8:	602b      	str	r3, [r5, #0]
   b75ca:	4630      	mov	r0, r6
   b75cc:	f7ff ffd9 	bl	b7582 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b75d0:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b75d2:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b75d6:	f7ff fedf 	bl	b7398 <_ZN9TCPClient12flush_bufferEv>
}
   b75da:	b002      	add	sp, #8
   b75dc:	bd70      	pop	{r4, r5, r6, pc}
   b75de:	bf00      	nop
   b75e0:	000ba42c 	.word	0x000ba42c
   b75e4:	000ba410 	.word	0x000ba410

000b75e8 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b75e8:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b75ea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b75ee:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b75f0:	f7ff ffd2 	bl	b7598 <_ZN9TCPClientC1Ei>
}
   b75f4:	4620      	mov	r0, r4
   b75f6:	bd10      	pop	{r4, pc}

000b75f8 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b75f8:	b510      	push	{r4, lr}
   b75fa:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b75fc:	6800      	ldr	r0, [r0, #0]
   b75fe:	2800      	cmp	r0, #0
   b7600:	db01      	blt.n	b7606 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b7602:	f7fe fc23 	bl	b5e4c <sock_close>
    }
}
   b7606:	4620      	mov	r0, r4
   b7608:	bd10      	pop	{r4, pc}

000b760a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b760a:	300c      	adds	r0, #12
   b760c:	f7ff bff4 	b.w	b75f8 <_ZN9TCPClient4DataD1Ev>

000b7610 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   b7610:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b7612:	2000      	movs	r0, #0
   b7614:	f7fe fd5e 	bl	b60d4 <spark_sync_time_pending>
   b7618:	b128      	cbz	r0, b7626 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b761a:	f7fe fd4b 	bl	b60b4 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b761e:	f080 0001 	eor.w	r0, r0, #1
   b7622:	b2c0      	uxtb	r0, r0
    }
   b7624:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b7626:	2001      	movs	r0, #1
   b7628:	e7fc      	b.n	b7624 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000b762a <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b762a:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b762c:	2000      	movs	r0, #0
   b762e:	f7fe fb35 	bl	b5c9c <hal_rtc_time_is_valid>
    if (rtcstate)
   b7632:	4604      	mov	r4, r0
   b7634:	b9a0      	cbnz	r0, b7660 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b7636:	f7fe fcf1 	bl	b601c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b763a:	2801      	cmp	r0, #1
   b763c:	d110      	bne.n	b7660 <_ZN9TimeClass7isValidEv+0x36>
   b763e:	4620      	mov	r0, r4
   b7640:	f7fe fd14 	bl	b606c <system_thread_get_state>
   b7644:	b960      	cbnz	r0, b7660 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b7646:	f7ff ffe3 	bl	b7610 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b764a:	b910      	cbnz	r0, b7652 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b764c:	f7fe fd2a 	bl	b60a4 <spark_process>
        while (_while() && !_condition()) {
   b7650:	e7f9      	b.n	b7646 <_ZN9TimeClass7isValidEv+0x1c>
   b7652:	f7ff ffdd 	bl	b7610 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b7656:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b765a:	2000      	movs	r0, #0
   b765c:	f7fe bb1e 	b.w	b5c9c <hal_rtc_time_is_valid>
}
   b7660:	4620      	mov	r0, r4
   b7662:	bd10      	pop	{r4, pc}

000b7664 <_ZN9TimeClass3nowEv>:
{
   b7664:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b7666:	f7ff ffe0 	bl	b762a <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b766a:	2210      	movs	r2, #16
   b766c:	2100      	movs	r1, #0
   b766e:	4668      	mov	r0, sp
   b7670:	f002 fc58 	bl	b9f24 <memset>
    hal_rtc_get_time(&tv, nullptr);
   b7674:	2100      	movs	r1, #0
   b7676:	4668      	mov	r0, sp
   b7678:	f7fe fb18 	bl	b5cac <hal_rtc_get_time>
}
   b767c:	9800      	ldr	r0, [sp, #0]
   b767e:	b005      	add	sp, #20
   b7680:	f85d fb04 	ldr.w	pc, [sp], #4

000b7684 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b7684:	4b02      	ldr	r3, [pc, #8]	; (b7690 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b7686:	681a      	ldr	r2, [r3, #0]
   b7688:	4b02      	ldr	r3, [pc, #8]	; (b7694 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b768a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b768c:	4770      	bx	lr
   b768e:	bf00      	nop
   b7690:	2003e528 	.word	0x2003e528
   b7694:	2003e6fc 	.word	0x2003e6fc

000b7698 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b7698:	4770      	bx	lr

000b769a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b769a:	7441      	strb	r1, [r0, #17]
}
   b769c:	4770      	bx	lr

000b769e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b769e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b76a0:	7c00      	ldrb	r0, [r0, #16]
   b76a2:	f7fe fc6b 	bl	b5f7c <hal_usart_available_data_for_write>
}
   b76a6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b76aa:	bd08      	pop	{r3, pc}

000b76ac <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b76ac:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b76ae:	7c00      	ldrb	r0, [r0, #16]
   b76b0:	f7fe fc3c 	bl	b5f2c <hal_usart_available>
}
   b76b4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b76b8:	bd08      	pop	{r3, pc}

000b76ba <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b76ba:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b76bc:	7c00      	ldrb	r0, [r0, #16]
   b76be:	f7fe fc45 	bl	b5f4c <hal_usart_peek>
}
   b76c2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b76c6:	bd08      	pop	{r3, pc}

000b76c8 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b76c8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b76ca:	7c00      	ldrb	r0, [r0, #16]
   b76cc:	f7fe fc36 	bl	b5f3c <hal_usart_read>
}
   b76d0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b76d4:	bd08      	pop	{r3, pc}

000b76d6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b76d6:	7c00      	ldrb	r0, [r0, #16]
   b76d8:	f7fe bc40 	b.w	b5f5c <hal_usart_flush>

000b76dc <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b76dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b76de:	7c45      	ldrb	r5, [r0, #17]
{
   b76e0:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b76e2:	b12d      	cbz	r5, b76f0 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b76e4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b76e6:	b003      	add	sp, #12
   b76e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b76ec:	f7fe bc16 	b.w	b5f1c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b76f0:	7c00      	ldrb	r0, [r0, #16]
   b76f2:	9101      	str	r1, [sp, #4]
   b76f4:	f7fe fc42 	bl	b5f7c <hal_usart_available_data_for_write>
   b76f8:	2800      	cmp	r0, #0
   b76fa:	9901      	ldr	r1, [sp, #4]
   b76fc:	dcf2      	bgt.n	b76e4 <_ZN11USARTSerial5writeEh+0x8>
}
   b76fe:	4628      	mov	r0, r5
   b7700:	b003      	add	sp, #12
   b7702:	bd30      	pop	{r4, r5, pc}

000b7704 <_ZN11USARTSerialD0Ev>:
   b7704:	b510      	push	{r4, lr}
   b7706:	2114      	movs	r1, #20
   b7708:	4604      	mov	r4, r0
   b770a:	f7fc fcca 	bl	b40a2 <_ZdlPvj>
   b770e:	4620      	mov	r0, r4
   b7710:	bd10      	pop	{r4, pc}
	...

000b7714 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b7714:	b510      	push	{r4, lr}
   b7716:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b771a:	4604      	mov	r4, r0
   b771c:	4608      	mov	r0, r1
   b771e:	4611      	mov	r1, r2
   b7720:	2200      	movs	r2, #0
   b7722:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b7726:	4b04      	ldr	r3, [pc, #16]	; (b7738 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b7728:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b772a:	2301      	movs	r3, #1
  _serial = serial;
   b772c:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b772e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b7730:	f7fe fc2c 	bl	b5f8c <hal_usart_init_ex>
}
   b7734:	4620      	mov	r0, r4
   b7736:	bd10      	pop	{r4, pc}
   b7738:	000ba494 	.word	0x000ba494

000b773c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b773c:	7441      	strb	r1, [r0, #17]
}
   b773e:	4770      	bx	lr

000b7740 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7740:	4770      	bx	lr

000b7742 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b7742:	4770      	bx	lr

000b7744 <_ZN9USBSerial4readEv>:
{
   b7744:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b7746:	2100      	movs	r1, #0
   b7748:	7c00      	ldrb	r0, [r0, #16]
   b774a:	f7fe fc47 	bl	b5fdc <HAL_USB_USART_Receive_Data>
}
   b774e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7752:	bd08      	pop	{r3, pc}

000b7754 <_ZN9USBSerial4peekEv>:
{
   b7754:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b7756:	2101      	movs	r1, #1
   b7758:	7c00      	ldrb	r0, [r0, #16]
   b775a:	f7fe fc3f 	bl	b5fdc <HAL_USB_USART_Receive_Data>
}
   b775e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7762:	bd08      	pop	{r3, pc}

000b7764 <_ZN9USBSerial17availableForWriteEv>:
{
   b7764:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b7766:	7c00      	ldrb	r0, [r0, #16]
   b7768:	f7fe fc30 	bl	b5fcc <HAL_USB_USART_Available_Data_For_Write>
}
   b776c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7770:	bd08      	pop	{r3, pc}

000b7772 <_ZN9USBSerial9availableEv>:
{
   b7772:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b7774:	7c00      	ldrb	r0, [r0, #16]
   b7776:	f7fe fc21 	bl	b5fbc <HAL_USB_USART_Available_Data>
}
   b777a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b777e:	bd08      	pop	{r3, pc}

000b7780 <_ZN9USBSerial5writeEh>:
{
   b7780:	b513      	push	{r0, r1, r4, lr}
   b7782:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7784:	7c00      	ldrb	r0, [r0, #16]
{
   b7786:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7788:	f7fe fc20 	bl	b5fcc <HAL_USB_USART_Available_Data_For_Write>
   b778c:	2800      	cmp	r0, #0
   b778e:	9901      	ldr	r1, [sp, #4]
   b7790:	dc01      	bgt.n	b7796 <_ZN9USBSerial5writeEh+0x16>
   b7792:	7c60      	ldrb	r0, [r4, #17]
   b7794:	b120      	cbz	r0, b77a0 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b7796:	7c20      	ldrb	r0, [r4, #16]
   b7798:	f7fe fc28 	bl	b5fec <HAL_USB_USART_Send_Data>
   b779c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b77a0:	b002      	add	sp, #8
   b77a2:	bd10      	pop	{r4, pc}

000b77a4 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b77a4:	7c00      	ldrb	r0, [r0, #16]
   b77a6:	f7fe bc29 	b.w	b5ffc <HAL_USB_USART_Flush_Data>

000b77aa <_ZN9USBSerialD0Ev>:
   b77aa:	b510      	push	{r4, lr}
   b77ac:	2114      	movs	r1, #20
   b77ae:	4604      	mov	r4, r0
   b77b0:	f7fc fc77 	bl	b40a2 <_ZdlPvj>
   b77b4:	4620      	mov	r0, r4
   b77b6:	bd10      	pop	{r4, pc}

000b77b8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b77b8:	b510      	push	{r4, lr}
   b77ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b77be:	4604      	mov	r4, r0
   b77c0:	4608      	mov	r0, r1
   b77c2:	2100      	movs	r1, #0
   b77c4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b77c8:	4b04      	ldr	r3, [pc, #16]	; (b77dc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b77ca:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b77cc:	2301      	movs	r3, #1
  _serial = serial;
   b77ce:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b77d0:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b77d2:	4611      	mov	r1, r2
   b77d4:	f7fe fbe2 	bl	b5f9c <HAL_USB_USART_Init>
}
   b77d8:	4620      	mov	r0, r4
   b77da:	bd10      	pop	{r4, pc}
   b77dc:	000ba4c4 	.word	0x000ba4c4

000b77e0 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b77e0:	7c00      	ldrb	r0, [r0, #16]
   b77e2:	2200      	movs	r2, #0
   b77e4:	f7fe bbe2 	b.w	b5fac <HAL_USB_USART_Begin>

000b77e8 <_Z19acquireSerialBufferv>:
{
   b77e8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b77ea:	2214      	movs	r2, #20
{
   b77ec:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b77ee:	2100      	movs	r1, #0
   b77f0:	f002 fb98 	bl	b9f24 <memset>
}
   b77f4:	4620      	mov	r0, r4
   b77f6:	bd10      	pop	{r4, pc}

000b77f8 <_Z16_fetch_usbserialv>:
{
   b77f8:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b77fa:	4c0f      	ldr	r4, [pc, #60]	; (b7838 <_Z16_fetch_usbserialv+0x40>)
{
   b77fc:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b77fe:	a803      	add	r0, sp, #12
   b7800:	f7ff fff2 	bl	b77e8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7804:	7821      	ldrb	r1, [r4, #0]
   b7806:	f3bf 8f5b 	dmb	ish
   b780a:	f011 0101 	ands.w	r1, r1, #1
   b780e:	d10f      	bne.n	b7830 <_Z16_fetch_usbserialv+0x38>
   b7810:	4620      	mov	r0, r4
   b7812:	9101      	str	r1, [sp, #4]
   b7814:	f7fc fc47 	bl	b40a6 <__cxa_guard_acquire>
   b7818:	9901      	ldr	r1, [sp, #4]
   b781a:	b148      	cbz	r0, b7830 <_Z16_fetch_usbserialv+0x38>
   b781c:	aa03      	add	r2, sp, #12
   b781e:	4807      	ldr	r0, [pc, #28]	; (b783c <_Z16_fetch_usbserialv+0x44>)
   b7820:	f7ff ffca 	bl	b77b8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b7824:	4620      	mov	r0, r4
   b7826:	f7fc fc43 	bl	b40b0 <__cxa_guard_release>
   b782a:	4805      	ldr	r0, [pc, #20]	; (b7840 <_Z16_fetch_usbserialv+0x48>)
   b782c:	f002 fb66 	bl	b9efc <atexit>
	return _usbserial;
}
   b7830:	4802      	ldr	r0, [pc, #8]	; (b783c <_Z16_fetch_usbserialv+0x44>)
   b7832:	b008      	add	sp, #32
   b7834:	bd10      	pop	{r4, pc}
   b7836:	bf00      	nop
   b7838:	2003e700 	.word	0x2003e700
   b783c:	2003e704 	.word	0x2003e704
   b7840:	000b7741 	.word	0x000b7741

000b7844 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b7844:	2200      	movs	r2, #0
   b7846:	6840      	ldr	r0, [r0, #4]
   b7848:	4611      	mov	r1, r2
   b784a:	f7fe bc6b 	b.w	b6124 <network_ready>

000b784e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b784e:	2200      	movs	r2, #0
   b7850:	6840      	ldr	r0, [r0, #4]
   b7852:	4611      	mov	r1, r2
   b7854:	f7fe bc86 	b.w	b6164 <network_listening>

000b7858 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7858:	2200      	movs	r2, #0
   b785a:	6840      	ldr	r0, [r0, #4]
   b785c:	4611      	mov	r1, r2
   b785e:	f7fe bc91 	b.w	b6184 <network_get_listen_timeout>

000b7862 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7862:	6840      	ldr	r0, [r0, #4]
   b7864:	2200      	movs	r2, #0
   b7866:	f7fe bc85 	b.w	b6174 <network_set_listen_timeout>

000b786a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b786a:	6840      	ldr	r0, [r0, #4]
   b786c:	2200      	movs	r2, #0
   b786e:	f081 0101 	eor.w	r1, r1, #1
   b7872:	f7fe bc6f 	b.w	b6154 <network_listen>

000b7876 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7876:	2300      	movs	r3, #0
   b7878:	6840      	ldr	r0, [r0, #4]
   b787a:	461a      	mov	r2, r3
   b787c:	4619      	mov	r1, r3
   b787e:	f7fe bc61 	b.w	b6144 <network_off>

000b7882 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7882:	2300      	movs	r3, #0
   b7884:	6840      	ldr	r0, [r0, #4]
   b7886:	461a      	mov	r2, r3
   b7888:	4619      	mov	r1, r3
   b788a:	f7fe bc53 	b.w	b6134 <network_on>

000b788e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b788e:	2200      	movs	r2, #0
   b7890:	6840      	ldr	r0, [r0, #4]
   b7892:	4611      	mov	r1, r2
   b7894:	f7fe bc36 	b.w	b6104 <network_connecting>

000b7898 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7898:	6840      	ldr	r0, [r0, #4]
   b789a:	2200      	movs	r2, #0
   b789c:	2102      	movs	r1, #2
   b789e:	f7fe bc39 	b.w	b6114 <network_disconnect>

000b78a2 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b78a2:	2300      	movs	r3, #0
   b78a4:	6840      	ldr	r0, [r0, #4]
   b78a6:	461a      	mov	r2, r3
   b78a8:	f7fe bc24 	b.w	b60f4 <network_connect>

000b78ac <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b78ac:	4b02      	ldr	r3, [pc, #8]	; (b78b8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b78ae:	2204      	movs	r2, #4
   b78b0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b78b2:	4a02      	ldr	r2, [pc, #8]	; (b78bc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b78b4:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b78b6:	4770      	bx	lr
   b78b8:	2003e718 	.word	0x2003e718
   b78bc:	000ba4f4 	.word	0x000ba4f4

000b78c0 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b78c0:	b510      	push	{r4, lr}
   b78c2:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b78c4:	f002 fb93 	bl	b9fee <strlen>
   b78c8:	3801      	subs	r0, #1
   b78ca:	1823      	adds	r3, r4, r0
   b78cc:	4620      	mov	r0, r4
	while(i<j){
   b78ce:	4283      	cmp	r3, r0
   b78d0:	d906      	bls.n	b78e0 <_Z11str_reversePc+0x20>
		c = *i;
   b78d2:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b78d4:	7819      	ldrb	r1, [r3, #0]
   b78d6:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b78da:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b78de:	e7f6      	b.n	b78ce <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b78e0:	bd10      	pop	{r4, pc}

000b78e2 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b78e2:	b570      	push	{r4, r5, r6, lr}
   b78e4:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b78e6:	1e91      	subs	r1, r2, #2
   b78e8:	2922      	cmp	r1, #34	; 0x22
   b78ea:	d81d      	bhi.n	b7928 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b78ec:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b78ee:	b930      	cbnz	r0, b78fe <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b78f0:	4423      	add	r3, r4
            *ptr++ = '0';
   b78f2:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b78f4:	429d      	cmp	r5, r3
   b78f6:	d210      	bcs.n	b791a <ultoa+0x38>
            *ptr++ = '0';
   b78f8:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b78fc:	e7fa      	b.n	b78f4 <ultoa+0x12>
            result.quot = a/radix;
   b78fe:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b7902:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b7906:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b7908:	2809      	cmp	r0, #9
                *ptr += '0';
   b790a:	bf94      	ite	ls
   b790c:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b790e:	3157      	addhi	r1, #87	; 0x57
   b7910:	b2c9      	uxtb	r1, r1
   b7912:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b7916:	4630      	mov	r0, r6
	while(a){
   b7918:	e7e9      	b.n	b78ee <ultoa+0xc>

	*ptr = '\0';
   b791a:	2300      	movs	r3, #0
	str_reverse(buffer);
   b791c:	4620      	mov	r0, r4
	*ptr = '\0';
   b791e:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b7920:	f7ff ffce 	bl	b78c0 <_Z11str_reversePc>
	return buffer;
   b7924:	4620      	mov	r0, r4
}
   b7926:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b7928:	2000      	movs	r0, #0
   b792a:	e7fc      	b.n	b7926 <ultoa+0x44>

000b792c <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b792c:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b792e:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b7930:	460c      	mov	r4, r1
   b7932:	4615      	mov	r5, r2
	if(a<0){
   b7934:	da0e      	bge.n	b7954 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b7936:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b793a:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b793e:	bf14      	ite	ne
   b7940:	4258      	negne	r0, r3
   b7942:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b7944:	2301      	movs	r3, #1
		*buffer = '-';
   b7946:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b7948:	462a      	mov	r2, r5
   b794a:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b794c:	f7ff ffc9 	bl	b78e2 <ultoa>
	}
	return buffer;
}
   b7950:	4620      	mov	r0, r4
   b7952:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b7954:	2301      	movs	r3, #1
   b7956:	e7f9      	b.n	b794c <itoa+0x20>

000b7958 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b7958:	4b01      	ldr	r3, [pc, #4]	; (b7960 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b795a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b795c:	4770      	bx	lr
   b795e:	bf00      	nop
   b7960:	2003e530 	.word	0x2003e530

000b7964 <serialEventRun>:
{
   b7964:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b7966:	4b0b      	ldr	r3, [pc, #44]	; (b7994 <serialEventRun+0x30>)
   b7968:	b143      	cbz	r3, b797c <serialEventRun+0x18>
   b796a:	f7ff ff45 	bl	b77f8 <_Z16_fetch_usbserialv>
   b796e:	6803      	ldr	r3, [r0, #0]
   b7970:	691b      	ldr	r3, [r3, #16]
   b7972:	4798      	blx	r3
   b7974:	2800      	cmp	r0, #0
   b7976:	dd01      	ble.n	b797c <serialEventRun+0x18>
        serialEvent();
   b7978:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b797c:	4b06      	ldr	r3, [pc, #24]	; (b7998 <serialEventRun+0x34>)
   b797e:	b143      	cbz	r3, b7992 <serialEventRun+0x2e>
   b7980:	f000 f976 	bl	b7c70 <_Z22__fetch_global_Serial1v>
   b7984:	6803      	ldr	r3, [r0, #0]
   b7986:	691b      	ldr	r3, [r3, #16]
   b7988:	4798      	blx	r3
   b798a:	2800      	cmp	r0, #0
   b798c:	dd01      	ble.n	b7992 <serialEventRun+0x2e>
        serialEvent1();
   b798e:	f3af 8000 	nop.w
}
   b7992:	bd08      	pop	{r3, pc}
	...

000b799c <_post_loop>:
{
   b799c:	b508      	push	{r3, lr}
	serialEventRun();
   b799e:	f7ff ffe1 	bl	b7964 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b79a2:	f7fe f973 	bl	b5c8c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b79a6:	4b01      	ldr	r3, [pc, #4]	; (b79ac <_post_loop+0x10>)
   b79a8:	6018      	str	r0, [r3, #0]
}
   b79aa:	bd08      	pop	{r3, pc}
   b79ac:	2003e728 	.word	0x2003e728

000b79b0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b79b0:	4805      	ldr	r0, [pc, #20]	; (b79c8 <_Z33system_initialize_user_backup_ramv+0x18>)
   b79b2:	4a06      	ldr	r2, [pc, #24]	; (b79cc <_Z33system_initialize_user_backup_ramv+0x1c>)
   b79b4:	4906      	ldr	r1, [pc, #24]	; (b79d0 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b79b6:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b79b8:	1a12      	subs	r2, r2, r0
   b79ba:	f002 faa5 	bl	b9f08 <memcpy>
    __backup_sram_signature = signature;
   b79be:	4b05      	ldr	r3, [pc, #20]	; (b79d4 <_Z33system_initialize_user_backup_ramv+0x24>)
   b79c0:	4a05      	ldr	r2, [pc, #20]	; (b79d8 <_Z33system_initialize_user_backup_ramv+0x28>)
   b79c2:	601a      	str	r2, [r3, #0]
}
   b79c4:	bd08      	pop	{r3, pc}
   b79c6:	bf00      	nop
   b79c8:	2003f400 	.word	0x2003f400
   b79cc:	2003f404 	.word	0x2003f404
   b79d0:	000ba6fc 	.word	0x000ba6fc
   b79d4:	2003f400 	.word	0x2003f400
   b79d8:	9a271c1e 	.word	0x9a271c1e

000b79dc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b79dc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b79de:	2300      	movs	r3, #0
   b79e0:	9300      	str	r3, [sp, #0]
   b79e2:	461a      	mov	r2, r3
   b79e4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b79e8:	f7fe fb52 	bl	b6090 <system_ctrl_set_result>
}
   b79ec:	b003      	add	sp, #12
   b79ee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b79f4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b79f4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b79f6:	8843      	ldrh	r3, [r0, #2]
   b79f8:	2b0a      	cmp	r3, #10
   b79fa:	d008      	beq.n	b7a0e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b79fc:	2b50      	cmp	r3, #80	; 0x50
   b79fe:	d10b      	bne.n	b7a18 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b7a00:	4b09      	ldr	r3, [pc, #36]	; (b7a28 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b7a02:	681b      	ldr	r3, [r3, #0]
   b7a04:	b14b      	cbz	r3, b7a1a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b7a06:	b003      	add	sp, #12
   b7a08:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b7a0c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b7a0e:	f7ff ffe5 	bl	b79dc <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b7a12:	b003      	add	sp, #12
   b7a14:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7a18:	2300      	movs	r3, #0
   b7a1a:	9300      	str	r3, [sp, #0]
   b7a1c:	461a      	mov	r2, r3
   b7a1e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7a22:	f7fe fb35 	bl	b6090 <system_ctrl_set_result>
}
   b7a26:	e7f4      	b.n	b7a12 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b7a28:	2003e724 	.word	0x2003e724

000b7a2c <module_user_init_hook>:
{
   b7a2c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b7a2e:	4812      	ldr	r0, [pc, #72]	; (b7a78 <module_user_init_hook+0x4c>)
   b7a30:	2100      	movs	r1, #0
   b7a32:	f7fe fbff 	bl	b6234 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b7a36:	4b11      	ldr	r3, [pc, #68]	; (b7a7c <module_user_init_hook+0x50>)
   b7a38:	681a      	ldr	r2, [r3, #0]
   b7a3a:	4b11      	ldr	r3, [pc, #68]	; (b7a80 <module_user_init_hook+0x54>)
   b7a3c:	429a      	cmp	r2, r3
   b7a3e:	4b11      	ldr	r3, [pc, #68]	; (b7a84 <module_user_init_hook+0x58>)
   b7a40:	bf0c      	ite	eq
   b7a42:	2201      	moveq	r2, #1
   b7a44:	2200      	movne	r2, #0
   b7a46:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b7a48:	d001      	beq.n	b7a4e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b7a4a:	f7ff ffb1 	bl	b79b0 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b7a4e:	f7fe f915 	bl	b5c7c <HAL_RNG_GetRandomNumber>
   b7a52:	4604      	mov	r4, r0
    srand(seed);
   b7a54:	f002 fa6e 	bl	b9f34 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b7a58:	4b0b      	ldr	r3, [pc, #44]	; (b7a88 <module_user_init_hook+0x5c>)
   b7a5a:	b113      	cbz	r3, b7a62 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b7a5c:	4620      	mov	r0, r4
   b7a5e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b7a62:	2100      	movs	r1, #0
   b7a64:	4808      	ldr	r0, [pc, #32]	; (b7a88 <module_user_init_hook+0x5c>)
   b7a66:	f7fe fb3d 	bl	b60e4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b7a6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b7a6e:	4807      	ldr	r0, [pc, #28]	; (b7a8c <module_user_init_hook+0x60>)
   b7a70:	2100      	movs	r1, #0
   b7a72:	f7fe bb03 	b.w	b607c <system_ctrl_set_app_request_handler>
   b7a76:	bf00      	nop
   b7a78:	000b7959 	.word	0x000b7959
   b7a7c:	2003f400 	.word	0x2003f400
   b7a80:	9a271c1e 	.word	0x9a271c1e
   b7a84:	2003e720 	.word	0x2003e720
   b7a88:	00000000 	.word	0x00000000
   b7a8c:	000b79f5 	.word	0x000b79f5

000b7a90 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b7a90:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b7a92:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b7a94:	d902      	bls.n	b7a9c <pinAvailable+0xc>
    return false;
   b7a96:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b7a98:	b002      	add	sp, #8
   b7a9a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b7a9c:	f1a0 030b 	sub.w	r3, r0, #11
   b7aa0:	2b02      	cmp	r3, #2
   b7aa2:	d81a      	bhi.n	b7ada <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b7aa4:	4c17      	ldr	r4, [pc, #92]	; (b7b04 <pinAvailable+0x74>)
   b7aa6:	7821      	ldrb	r1, [r4, #0]
   b7aa8:	f3bf 8f5b 	dmb	ish
   b7aac:	f011 0101 	ands.w	r1, r1, #1
   b7ab0:	d10b      	bne.n	b7aca <pinAvailable+0x3a>
   b7ab2:	4620      	mov	r0, r4
   b7ab4:	9101      	str	r1, [sp, #4]
   b7ab6:	f7fc faf6 	bl	b40a6 <__cxa_guard_acquire>
   b7aba:	9901      	ldr	r1, [sp, #4]
   b7abc:	b128      	cbz	r0, b7aca <pinAvailable+0x3a>
   b7abe:	4812      	ldr	r0, [pc, #72]	; (b7b08 <pinAvailable+0x78>)
   b7ac0:	f7ff f936 	bl	b6d30 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b7ac4:	4620      	mov	r0, r4
   b7ac6:	f7fc faf3 	bl	b40b0 <__cxa_guard_release>
   b7aca:	4b0f      	ldr	r3, [pc, #60]	; (b7b08 <pinAvailable+0x78>)
   b7acc:	7818      	ldrb	r0, [r3, #0]
   b7ace:	f7fe f9fd 	bl	b5ecc <hal_spi_is_enabled>
   b7ad2:	2800      	cmp	r0, #0
   b7ad4:	d1df      	bne.n	b7a96 <pinAvailable+0x6>
  return true; // 'pin' is available
   b7ad6:	2001      	movs	r0, #1
   b7ad8:	e7de      	b.n	b7a98 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b7ada:	2801      	cmp	r0, #1
   b7adc:	d809      	bhi.n	b7af2 <pinAvailable+0x62>
   b7ade:	f000 f887 	bl	b7bf0 <_Z19__fetch_global_Wirev>
   b7ae2:	2100      	movs	r1, #0
   b7ae4:	7c00      	ldrb	r0, [r0, #16]
   b7ae6:	f7fe f961 	bl	b5dac <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b7aea:	f080 0001 	eor.w	r0, r0, #1
   b7aee:	b2c0      	uxtb	r0, r0
   b7af0:	e7d2      	b.n	b7a98 <pinAvailable+0x8>
   b7af2:	3809      	subs	r0, #9
   b7af4:	2801      	cmp	r0, #1
   b7af6:	d8ee      	bhi.n	b7ad6 <pinAvailable+0x46>
   b7af8:	f000 f8ba 	bl	b7c70 <_Z22__fetch_global_Serial1v>
   b7afc:	7c00      	ldrb	r0, [r0, #16]
   b7afe:	f7fe fa35 	bl	b5f6c <hal_usart_is_enabled>
   b7b02:	e7f2      	b.n	b7aea <pinAvailable+0x5a>
   b7b04:	2003e6b8 	.word	0x2003e6b8
   b7b08:	2003e6bc 	.word	0x2003e6bc

000b7b0c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7b0c:	2823      	cmp	r0, #35	; 0x23
{
   b7b0e:	b538      	push	{r3, r4, r5, lr}
   b7b10:	4604      	mov	r4, r0
   b7b12:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7b14:	d80a      	bhi.n	b7b2c <pinMode+0x20>
   b7b16:	29ff      	cmp	r1, #255	; 0xff
   b7b18:	d008      	beq.n	b7b2c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b7b1a:	f7ff ffb9 	bl	b7a90 <pinAvailable>
   b7b1e:	b128      	cbz	r0, b7b2c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b7b20:	4629      	mov	r1, r5
   b7b22:	4620      	mov	r0, r4
}
   b7b24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b7b28:	f7fe b8d0 	b.w	b5ccc <HAL_Pin_Mode>
}
   b7b2c:	bd38      	pop	{r3, r4, r5, pc}

000b7b2e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b7b2e:	b538      	push	{r3, r4, r5, lr}
   b7b30:	4604      	mov	r4, r0
   b7b32:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b7b34:	f7fe f8d2 	bl	b5cdc <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b7b38:	28ff      	cmp	r0, #255	; 0xff
   b7b3a:	d010      	beq.n	b7b5e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b7b3c:	2806      	cmp	r0, #6
   b7b3e:	d804      	bhi.n	b7b4a <digitalWrite+0x1c>
   b7b40:	234d      	movs	r3, #77	; 0x4d
   b7b42:	fa23 f000 	lsr.w	r0, r3, r0
   b7b46:	07c3      	lsls	r3, r0, #31
   b7b48:	d409      	bmi.n	b7b5e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b7b4a:	4620      	mov	r0, r4
   b7b4c:	f7ff ffa0 	bl	b7a90 <pinAvailable>
   b7b50:	b128      	cbz	r0, b7b5e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b7b52:	4629      	mov	r1, r5
   b7b54:	4620      	mov	r0, r4
}
   b7b56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b7b5a:	f7fe b8c7 	b.w	b5cec <HAL_GPIO_Write>
}
   b7b5e:	bd38      	pop	{r3, r4, r5, pc}

000b7b60 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b7b60:	b510      	push	{r4, lr}
   b7b62:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b7b64:	f7fe f8ba 	bl	b5cdc <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b7b68:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b7b6a:	b2db      	uxtb	r3, r3
   b7b6c:	2b01      	cmp	r3, #1
   b7b6e:	d908      	bls.n	b7b82 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b7b70:	4620      	mov	r0, r4
   b7b72:	f7ff ff8d 	bl	b7a90 <pinAvailable>
   b7b76:	b120      	cbz	r0, b7b82 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b7b78:	4620      	mov	r0, r4
}
   b7b7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b7b7e:	f7fe b8bd 	b.w	b5cfc <HAL_GPIO_Read>
}
   b7b82:	2000      	movs	r0, #0
   b7b84:	bd10      	pop	{r4, pc}

000b7b86 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b7b86:	280d      	cmp	r0, #13
{
   b7b88:	b510      	push	{r4, lr}
   b7b8a:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b7b8c:	bf9c      	itt	ls
   b7b8e:	340e      	addls	r4, #14
   b7b90:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b7b92:	4620      	mov	r0, r4
   b7b94:	f7ff ff7c 	bl	b7a90 <pinAvailable>
   b7b98:	b150      	cbz	r0, b7bb0 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b7b9a:	2103      	movs	r1, #3
   b7b9c:	4620      	mov	r0, r4
   b7b9e:	f7fe f88d 	bl	b5cbc <HAL_Validate_Pin_Function>
   b7ba2:	2803      	cmp	r0, #3
   b7ba4:	d104      	bne.n	b7bb0 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b7ba6:	4620      	mov	r0, r4
}
   b7ba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b7bac:	f7fe b8ae 	b.w	b5d0c <hal_adc_read>
}
   b7bb0:	2000      	movs	r0, #0
   b7bb2:	bd10      	pop	{r4, pc}

000b7bb4 <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
   b7bb4:	f7fe b8b2 	b.w	b5d1c <HAL_Pulse_In>

000b7bb8 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7bb8:	4770      	bx	lr
	...

000b7bbc <_Z17acquireWireBufferv>:
{
   b7bbc:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b7bbe:	4b0a      	ldr	r3, [pc, #40]	; (b7be8 <_Z17acquireWireBufferv+0x2c>)
   b7bc0:	6003      	str	r3, [r0, #0]
   b7bc2:	2301      	movs	r3, #1
{
   b7bc4:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b7bc6:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7bc8:	4908      	ldr	r1, [pc, #32]	; (b7bec <_Z17acquireWireBufferv+0x30>)
   b7bca:	2020      	movs	r0, #32
   b7bcc:	f000 f874 	bl	b7cb8 <_ZnajRKSt9nothrow_t>
	};
   b7bd0:	2520      	movs	r5, #32
   b7bd2:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7bd4:	4905      	ldr	r1, [pc, #20]	; (b7bec <_Z17acquireWireBufferv+0x30>)
	};
   b7bd6:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7bd8:	4628      	mov	r0, r5
   b7bda:	f000 f86d 	bl	b7cb8 <_ZnajRKSt9nothrow_t>
	};
   b7bde:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b7be2:	4620      	mov	r0, r4
   b7be4:	bd38      	pop	{r3, r4, r5, pc}
   b7be6:	bf00      	nop
   b7be8:	00010018 	.word	0x00010018
   b7bec:	000ba528 	.word	0x000ba528

000b7bf0 <_Z19__fetch_global_Wirev>:
{
   b7bf0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7bf2:	4d0e      	ldr	r5, [pc, #56]	; (b7c2c <_Z19__fetch_global_Wirev+0x3c>)
   b7bf4:	7829      	ldrb	r1, [r5, #0]
   b7bf6:	f3bf 8f5b 	dmb	ish
   b7bfa:	f011 0401 	ands.w	r4, r1, #1
{
   b7bfe:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7c00:	d111      	bne.n	b7c26 <_Z19__fetch_global_Wirev+0x36>
   b7c02:	4628      	mov	r0, r5
   b7c04:	f7fc fa4f 	bl	b40a6 <__cxa_guard_acquire>
   b7c08:	b168      	cbz	r0, b7c26 <_Z19__fetch_global_Wirev+0x36>
   b7c0a:	4668      	mov	r0, sp
   b7c0c:	f7ff ffd6 	bl	b7bbc <_Z17acquireWireBufferv>
   b7c10:	466a      	mov	r2, sp
   b7c12:	4621      	mov	r1, r4
   b7c14:	4806      	ldr	r0, [pc, #24]	; (b7c30 <_Z19__fetch_global_Wirev+0x40>)
   b7c16:	f7fe fe51 	bl	b68bc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b7c1a:	4628      	mov	r0, r5
   b7c1c:	f7fc fa48 	bl	b40b0 <__cxa_guard_release>
   b7c20:	4804      	ldr	r0, [pc, #16]	; (b7c34 <_Z19__fetch_global_Wirev+0x44>)
   b7c22:	f002 f96b 	bl	b9efc <atexit>
	return wire;
}
   b7c26:	4802      	ldr	r0, [pc, #8]	; (b7c30 <_Z19__fetch_global_Wirev+0x40>)
   b7c28:	b007      	add	sp, #28
   b7c2a:	bd30      	pop	{r4, r5, pc}
   b7c2c:	2003e72c 	.word	0x2003e72c
   b7c30:	2003e730 	.word	0x2003e730
   b7c34:	000b7bb9 	.word	0x000b7bb9

000b7c38 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7c38:	4770      	bx	lr
	...

000b7c3c <_Z20acquireSerial1Bufferv>:
{
   b7c3c:	b538      	push	{r3, r4, r5, lr}
   b7c3e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b7c40:	2514      	movs	r5, #20
   b7c42:	462a      	mov	r2, r5
   b7c44:	2100      	movs	r1, #0
   b7c46:	f002 f96d 	bl	b9f24 <memset>
   b7c4a:	8025      	strh	r5, [r4, #0]
   b7c4c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7c4e:	4907      	ldr	r1, [pc, #28]	; (b7c6c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b7c50:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7c52:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b7c54:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7c56:	f000 f82f 	bl	b7cb8 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7c5a:	4904      	ldr	r1, [pc, #16]	; (b7c6c <_Z20acquireSerial1Bufferv+0x30>)
    };
   b7c5c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7c5e:	4628      	mov	r0, r5
   b7c60:	f000 f82a 	bl	b7cb8 <_ZnajRKSt9nothrow_t>
    };
   b7c64:	60e0      	str	r0, [r4, #12]
}
   b7c66:	4620      	mov	r0, r4
   b7c68:	bd38      	pop	{r3, r4, r5, pc}
   b7c6a:	bf00      	nop
   b7c6c:	000ba528 	.word	0x000ba528

000b7c70 <_Z22__fetch_global_Serial1v>:
{
   b7c70:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7c72:	4d0e      	ldr	r5, [pc, #56]	; (b7cac <_Z22__fetch_global_Serial1v+0x3c>)
   b7c74:	7829      	ldrb	r1, [r5, #0]
   b7c76:	f3bf 8f5b 	dmb	ish
   b7c7a:	f011 0401 	ands.w	r4, r1, #1
{
   b7c7e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7c80:	d111      	bne.n	b7ca6 <_Z22__fetch_global_Serial1v+0x36>
   b7c82:	4628      	mov	r0, r5
   b7c84:	f7fc fa0f 	bl	b40a6 <__cxa_guard_acquire>
   b7c88:	b168      	cbz	r0, b7ca6 <_Z22__fetch_global_Serial1v+0x36>
   b7c8a:	a801      	add	r0, sp, #4
   b7c8c:	f7ff ffd6 	bl	b7c3c <_Z20acquireSerial1Bufferv>
   b7c90:	aa01      	add	r2, sp, #4
   b7c92:	4621      	mov	r1, r4
   b7c94:	4806      	ldr	r0, [pc, #24]	; (b7cb0 <_Z22__fetch_global_Serial1v+0x40>)
   b7c96:	f7ff fd3d 	bl	b7714 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b7c9a:	4628      	mov	r0, r5
   b7c9c:	f7fc fa08 	bl	b40b0 <__cxa_guard_release>
   b7ca0:	4804      	ldr	r0, [pc, #16]	; (b7cb4 <_Z22__fetch_global_Serial1v+0x44>)
   b7ca2:	f002 f92b 	bl	b9efc <atexit>
    return serial1;
}
   b7ca6:	4802      	ldr	r0, [pc, #8]	; (b7cb0 <_Z22__fetch_global_Serial1v+0x40>)
   b7ca8:	b007      	add	sp, #28
   b7caa:	bd30      	pop	{r4, r5, pc}
   b7cac:	2003e744 	.word	0x2003e744
   b7cb0:	2003e748 	.word	0x2003e748
   b7cb4:	000b7c39 	.word	0x000b7c39

000b7cb8 <_ZnajRKSt9nothrow_t>:
   b7cb8:	f7fc b9ef 	b.w	b409a <_Znaj>

000b7cbc <_ZSt25__throw_bad_function_callv>:
   b7cbc:	b508      	push	{r3, lr}
   b7cbe:	f7fe fa99 	bl	b61f4 <abort>
	...

000b7cc4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b7cc4:	4901      	ldr	r1, [pc, #4]	; (b7ccc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b7cc6:	f000 b8f9 	b.w	b7ebc <_ZNKSt9type_infoeqERKS_>
   b7cca:	bf00      	nop
   b7ccc:	000ba544 	.word	0x000ba544

000b7cd0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b7cd0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b7cd2:	2400      	movs	r4, #0
   b7cd4:	2310      	movs	r3, #16
   b7cd6:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b7cda:	6803      	ldr	r3, [r0, #0]
   b7cdc:	4615      	mov	r5, r2
   b7cde:	699e      	ldr	r6, [r3, #24]
   b7ce0:	6812      	ldr	r2, [r2, #0]
   b7ce2:	466b      	mov	r3, sp
   b7ce4:	e9cd 4400 	strd	r4, r4, [sp]
   b7ce8:	47b0      	blx	r6
   b7cea:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b7cee:	f003 0306 	and.w	r3, r3, #6
   b7cf2:	2b06      	cmp	r3, #6
   b7cf4:	bf03      	ittte	eq
   b7cf6:	9b00      	ldreq	r3, [sp, #0]
   b7cf8:	602b      	streq	r3, [r5, #0]
   b7cfa:	2001      	moveq	r0, #1
   b7cfc:	4620      	movne	r0, r4
   b7cfe:	b004      	add	sp, #16
   b7d00:	bd70      	pop	{r4, r5, r6, pc}

000b7d02 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b7d02:	9800      	ldr	r0, [sp, #0]
   b7d04:	4290      	cmp	r0, r2
   b7d06:	bf14      	ite	ne
   b7d08:	2001      	movne	r0, #1
   b7d0a:	2006      	moveq	r0, #6
   b7d0c:	4770      	bx	lr
	...

000b7d10 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b7d10:	b510      	push	{r4, lr}
   b7d12:	4b03      	ldr	r3, [pc, #12]	; (b7d20 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b7d14:	6003      	str	r3, [r0, #0]
   b7d16:	4604      	mov	r4, r0
   b7d18:	f000 f8cd 	bl	b7eb6 <_ZNSt9type_infoD1Ev>
   b7d1c:	4620      	mov	r0, r4
   b7d1e:	bd10      	pop	{r4, pc}
   b7d20:	000ba584 	.word	0x000ba584

000b7d24 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b7d24:	b510      	push	{r4, lr}
   b7d26:	4604      	mov	r4, r0
   b7d28:	f7ff fff2 	bl	b7d10 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b7d2c:	4620      	mov	r0, r4
   b7d2e:	2108      	movs	r1, #8
   b7d30:	f7fc f9b7 	bl	b40a2 <_ZdlPvj>
   b7d34:	4620      	mov	r0, r4
   b7d36:	bd10      	pop	{r4, pc}

000b7d38 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b7d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7d3c:	461f      	mov	r7, r3
   b7d3e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b7d42:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b7d46:	4598      	cmp	r8, r3
   b7d48:	4606      	mov	r6, r0
   b7d4a:	4615      	mov	r5, r2
   b7d4c:	d107      	bne.n	b7d5e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b7d4e:	9907      	ldr	r1, [sp, #28]
   b7d50:	f000 f8b4 	bl	b7ebc <_ZNKSt9type_infoeqERKS_>
   b7d54:	b118      	cbz	r0, b7d5e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b7d56:	7165      	strb	r5, [r4, #5]
   b7d58:	2000      	movs	r0, #0
   b7d5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7d5e:	4639      	mov	r1, r7
   b7d60:	4630      	mov	r0, r6
   b7d62:	f000 f8ab 	bl	b7ebc <_ZNKSt9type_infoeqERKS_>
   b7d66:	2800      	cmp	r0, #0
   b7d68:	d0f6      	beq.n	b7d58 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b7d6a:	2301      	movs	r3, #1
   b7d6c:	f8c4 8000 	str.w	r8, [r4]
   b7d70:	7125      	strb	r5, [r4, #4]
   b7d72:	71a3      	strb	r3, [r4, #6]
   b7d74:	e7f0      	b.n	b7d58 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b7d76 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b7d76:	b538      	push	{r3, r4, r5, lr}
   b7d78:	4615      	mov	r5, r2
   b7d7a:	461c      	mov	r4, r3
   b7d7c:	f000 f89e 	bl	b7ebc <_ZNKSt9type_infoeqERKS_>
   b7d80:	b120      	cbz	r0, b7d8c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b7d82:	2308      	movs	r3, #8
   b7d84:	60e3      	str	r3, [r4, #12]
   b7d86:	2306      	movs	r3, #6
   b7d88:	6025      	str	r5, [r4, #0]
   b7d8a:	7123      	strb	r3, [r4, #4]
   b7d8c:	bd38      	pop	{r3, r4, r5, pc}

000b7d8e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b7d8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7d90:	4605      	mov	r5, r0
   b7d92:	460c      	mov	r4, r1
   b7d94:	9201      	str	r2, [sp, #4]
   b7d96:	461e      	mov	r6, r3
   b7d98:	f000 f890 	bl	b7ebc <_ZNKSt9type_infoeqERKS_>
   b7d9c:	b950      	cbnz	r0, b7db4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b7d9e:	2e03      	cmp	r6, #3
   b7da0:	d808      	bhi.n	b7db4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b7da2:	6823      	ldr	r3, [r4, #0]
   b7da4:	9a01      	ldr	r2, [sp, #4]
   b7da6:	695b      	ldr	r3, [r3, #20]
   b7da8:	4629      	mov	r1, r5
   b7daa:	4620      	mov	r0, r4
   b7dac:	b002      	add	sp, #8
   b7dae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b7db2:	4718      	bx	r3
   b7db4:	b002      	add	sp, #8
   b7db6:	bd70      	pop	{r4, r5, r6, pc}

000b7db8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b7db8:	b510      	push	{r4, lr}
   b7dba:	4b03      	ldr	r3, [pc, #12]	; (b7dc8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b7dbc:	6003      	str	r3, [r0, #0]
   b7dbe:	4604      	mov	r4, r0
   b7dc0:	f7ff ffa6 	bl	b7d10 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b7dc4:	4620      	mov	r0, r4
   b7dc6:	bd10      	pop	{r4, pc}
   b7dc8:	000ba5e4 	.word	0x000ba5e4

000b7dcc <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b7dcc:	b510      	push	{r4, lr}
   b7dce:	4604      	mov	r4, r0
   b7dd0:	f7ff fff2 	bl	b7db8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b7dd4:	4620      	mov	r0, r4
   b7dd6:	210c      	movs	r1, #12
   b7dd8:	f7fc f963 	bl	b40a2 <_ZdlPvj>
   b7ddc:	4620      	mov	r0, r4
   b7dde:	bd10      	pop	{r4, pc}

000b7de0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b7de0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7de2:	9f08      	ldr	r7, [sp, #32]
   b7de4:	4297      	cmp	r7, r2
   b7de6:	4605      	mov	r5, r0
   b7de8:	460e      	mov	r6, r1
   b7dea:	4614      	mov	r4, r2
   b7dec:	d00a      	beq.n	b7e04 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b7dee:	68a8      	ldr	r0, [r5, #8]
   b7df0:	6802      	ldr	r2, [r0, #0]
   b7df2:	9708      	str	r7, [sp, #32]
   b7df4:	6a15      	ldr	r5, [r2, #32]
   b7df6:	4631      	mov	r1, r6
   b7df8:	4622      	mov	r2, r4
   b7dfa:	46ac      	mov	ip, r5
   b7dfc:	b003      	add	sp, #12
   b7dfe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b7e02:	4760      	bx	ip
   b7e04:	4619      	mov	r1, r3
   b7e06:	9301      	str	r3, [sp, #4]
   b7e08:	f000 f858 	bl	b7ebc <_ZNKSt9type_infoeqERKS_>
   b7e0c:	9b01      	ldr	r3, [sp, #4]
   b7e0e:	2800      	cmp	r0, #0
   b7e10:	d0ed      	beq.n	b7dee <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b7e12:	2006      	movs	r0, #6
   b7e14:	b003      	add	sp, #12
   b7e16:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7e18 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b7e18:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7e1c:	460d      	mov	r5, r1
   b7e1e:	4619      	mov	r1, r3
   b7e20:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b7e24:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b7e28:	4681      	mov	r9, r0
   b7e2a:	4617      	mov	r7, r2
   b7e2c:	4698      	mov	r8, r3
   b7e2e:	f000 f845 	bl	b7ebc <_ZNKSt9type_infoeqERKS_>
   b7e32:	b190      	cbz	r0, b7e5a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b7e34:	2d00      	cmp	r5, #0
   b7e36:	6034      	str	r4, [r6, #0]
   b7e38:	7137      	strb	r7, [r6, #4]
   b7e3a:	db09      	blt.n	b7e50 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b7e3c:	1961      	adds	r1, r4, r5
   b7e3e:	458a      	cmp	sl, r1
   b7e40:	bf0c      	ite	eq
   b7e42:	2106      	moveq	r1, #6
   b7e44:	2101      	movne	r1, #1
   b7e46:	71b1      	strb	r1, [r6, #6]
   b7e48:	2000      	movs	r0, #0
   b7e4a:	b001      	add	sp, #4
   b7e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7e50:	3502      	adds	r5, #2
   b7e52:	d1f9      	bne.n	b7e48 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7e54:	2301      	movs	r3, #1
   b7e56:	71b3      	strb	r3, [r6, #6]
   b7e58:	e7f6      	b.n	b7e48 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7e5a:	4554      	cmp	r4, sl
   b7e5c:	d106      	bne.n	b7e6c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b7e5e:	4659      	mov	r1, fp
   b7e60:	4648      	mov	r0, r9
   b7e62:	f000 f82b 	bl	b7ebc <_ZNKSt9type_infoeqERKS_>
   b7e66:	b108      	cbz	r0, b7e6c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b7e68:	7177      	strb	r7, [r6, #5]
   b7e6a:	e7ed      	b.n	b7e48 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7e6c:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b7e70:	6803      	ldr	r3, [r0, #0]
   b7e72:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b7e76:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b7e7a:	69dc      	ldr	r4, [r3, #28]
   b7e7c:	463a      	mov	r2, r7
   b7e7e:	4643      	mov	r3, r8
   b7e80:	4629      	mov	r1, r5
   b7e82:	46a4      	mov	ip, r4
   b7e84:	b001      	add	sp, #4
   b7e86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7e8a:	4760      	bx	ip

000b7e8c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b7e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7e90:	4607      	mov	r7, r0
   b7e92:	460c      	mov	r4, r1
   b7e94:	4615      	mov	r5, r2
   b7e96:	461e      	mov	r6, r3
   b7e98:	f7ff ff6d 	bl	b7d76 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b7e9c:	b948      	cbnz	r0, b7eb2 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b7e9e:	68b8      	ldr	r0, [r7, #8]
   b7ea0:	6803      	ldr	r3, [r0, #0]
   b7ea2:	699f      	ldr	r7, [r3, #24]
   b7ea4:	462a      	mov	r2, r5
   b7ea6:	4633      	mov	r3, r6
   b7ea8:	4621      	mov	r1, r4
   b7eaa:	46bc      	mov	ip, r7
   b7eac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b7eb0:	4760      	bx	ip
   b7eb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7eb6 <_ZNSt9type_infoD1Ev>:
   b7eb6:	4770      	bx	lr

000b7eb8 <_ZNKSt9type_info14__is_pointer_pEv>:
   b7eb8:	2000      	movs	r0, #0
   b7eba:	4770      	bx	lr

000b7ebc <_ZNKSt9type_infoeqERKS_>:
   b7ebc:	4281      	cmp	r1, r0
   b7ebe:	b508      	push	{r3, lr}
   b7ec0:	d00e      	beq.n	b7ee0 <_ZNKSt9type_infoeqERKS_+0x24>
   b7ec2:	6840      	ldr	r0, [r0, #4]
   b7ec4:	7803      	ldrb	r3, [r0, #0]
   b7ec6:	2b2a      	cmp	r3, #42	; 0x2a
   b7ec8:	d00c      	beq.n	b7ee4 <_ZNKSt9type_infoeqERKS_+0x28>
   b7eca:	6849      	ldr	r1, [r1, #4]
   b7ecc:	780b      	ldrb	r3, [r1, #0]
   b7ece:	2b2a      	cmp	r3, #42	; 0x2a
   b7ed0:	bf08      	it	eq
   b7ed2:	3101      	addeq	r1, #1
   b7ed4:	f002 f85c 	bl	b9f90 <strcmp>
   b7ed8:	fab0 f080 	clz	r0, r0
   b7edc:	0940      	lsrs	r0, r0, #5
   b7ede:	bd08      	pop	{r3, pc}
   b7ee0:	2001      	movs	r0, #1
   b7ee2:	e7fc      	b.n	b7ede <_ZNKSt9type_infoeqERKS_+0x22>
   b7ee4:	2000      	movs	r0, #0
   b7ee6:	e7fa      	b.n	b7ede <_ZNKSt9type_infoeqERKS_+0x22>

000b7ee8 <pow>:
   b7ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7eea:	ed2d 8b02 	vpush	{d8}
   b7eee:	ec57 6b10 	vmov	r6, r7, d0
   b7ef2:	ec55 4b11 	vmov	r4, r5, d1
   b7ef6:	f000 f8cb 	bl	b8090 <__ieee754_pow>
   b7efa:	4b63      	ldr	r3, [pc, #396]	; (b8088 <pow+0x1a0>)
   b7efc:	eeb0 8a40 	vmov.f32	s16, s0
   b7f00:	eef0 8a60 	vmov.f32	s17, s1
   b7f04:	f993 3000 	ldrsb.w	r3, [r3]
   b7f08:	3301      	adds	r3, #1
   b7f0a:	d02a      	beq.n	b7f62 <pow+0x7a>
   b7f0c:	4622      	mov	r2, r4
   b7f0e:	462b      	mov	r3, r5
   b7f10:	4620      	mov	r0, r4
   b7f12:	4629      	mov	r1, r5
   b7f14:	f001 fcc4 	bl	b98a0 <__aeabi_dcmpun>
   b7f18:	bb18      	cbnz	r0, b7f62 <pow+0x7a>
   b7f1a:	4632      	mov	r2, r6
   b7f1c:	463b      	mov	r3, r7
   b7f1e:	4630      	mov	r0, r6
   b7f20:	4639      	mov	r1, r7
   b7f22:	f001 fcbd 	bl	b98a0 <__aeabi_dcmpun>
   b7f26:	2800      	cmp	r0, #0
   b7f28:	d144      	bne.n	b7fb4 <pow+0xcc>
   b7f2a:	2200      	movs	r2, #0
   b7f2c:	2300      	movs	r3, #0
   b7f2e:	4630      	mov	r0, r6
   b7f30:	4639      	mov	r1, r7
   b7f32:	f001 fc83 	bl	b983c <__aeabi_dcmpeq>
   b7f36:	b1d8      	cbz	r0, b7f70 <pow+0x88>
   b7f38:	2200      	movs	r2, #0
   b7f3a:	2300      	movs	r3, #0
   b7f3c:	4620      	mov	r0, r4
   b7f3e:	4629      	mov	r1, r5
   b7f40:	f001 fc7c 	bl	b983c <__aeabi_dcmpeq>
   b7f44:	2800      	cmp	r0, #0
   b7f46:	d13d      	bne.n	b7fc4 <pow+0xdc>
   b7f48:	ec45 4b10 	vmov	d0, r4, r5
   b7f4c:	f000 ff10 	bl	b8d70 <finite>
   b7f50:	b138      	cbz	r0, b7f62 <pow+0x7a>
   b7f52:	4620      	mov	r0, r4
   b7f54:	4629      	mov	r1, r5
   b7f56:	2200      	movs	r2, #0
   b7f58:	2300      	movs	r3, #0
   b7f5a:	f001 fc79 	bl	b9850 <__aeabi_dcmplt>
   b7f5e:	2800      	cmp	r0, #0
   b7f60:	d15c      	bne.n	b801c <pow+0x134>
   b7f62:	eeb0 0a48 	vmov.f32	s0, s16
   b7f66:	eef0 0a68 	vmov.f32	s1, s17
   b7f6a:	ecbd 8b02 	vpop	{d8}
   b7f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b7f70:	eeb0 0a48 	vmov.f32	s0, s16
   b7f74:	eef0 0a68 	vmov.f32	s1, s17
   b7f78:	f000 fefa 	bl	b8d70 <finite>
   b7f7c:	b358      	cbz	r0, b7fd6 <pow+0xee>
   b7f7e:	ec51 0b18 	vmov	r0, r1, d8
   b7f82:	2200      	movs	r2, #0
   b7f84:	2300      	movs	r3, #0
   b7f86:	f001 fc59 	bl	b983c <__aeabi_dcmpeq>
   b7f8a:	2800      	cmp	r0, #0
   b7f8c:	d0e9      	beq.n	b7f62 <pow+0x7a>
   b7f8e:	ec47 6b10 	vmov	d0, r6, r7
   b7f92:	f000 feed 	bl	b8d70 <finite>
   b7f96:	2800      	cmp	r0, #0
   b7f98:	d0e3      	beq.n	b7f62 <pow+0x7a>
   b7f9a:	ec45 4b10 	vmov	d0, r4, r5
   b7f9e:	f000 fee7 	bl	b8d70 <finite>
   b7fa2:	2800      	cmp	r0, #0
   b7fa4:	d0dd      	beq.n	b7f62 <pow+0x7a>
   b7fa6:	f7fe f935 	bl	b6214 <__errno>
   b7faa:	2322      	movs	r3, #34	; 0x22
   b7fac:	ed9f 8b2e 	vldr	d8, [pc, #184]	; b8068 <pow+0x180>
   b7fb0:	6003      	str	r3, [r0, #0]
   b7fb2:	e7d6      	b.n	b7f62 <pow+0x7a>
   b7fb4:	4620      	mov	r0, r4
   b7fb6:	4629      	mov	r1, r5
   b7fb8:	2200      	movs	r2, #0
   b7fba:	2300      	movs	r3, #0
   b7fbc:	f001 fc3e 	bl	b983c <__aeabi_dcmpeq>
   b7fc0:	2800      	cmp	r0, #0
   b7fc2:	d0ce      	beq.n	b7f62 <pow+0x7a>
   b7fc4:	ed9f 8b2a 	vldr	d8, [pc, #168]	; b8070 <pow+0x188>
   b7fc8:	eeb0 0a48 	vmov.f32	s0, s16
   b7fcc:	eef0 0a68 	vmov.f32	s1, s17
   b7fd0:	ecbd 8b02 	vpop	{d8}
   b7fd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b7fd6:	ec47 6b10 	vmov	d0, r6, r7
   b7fda:	f000 fec9 	bl	b8d70 <finite>
   b7fde:	2800      	cmp	r0, #0
   b7fe0:	d0cd      	beq.n	b7f7e <pow+0x96>
   b7fe2:	ec45 4b10 	vmov	d0, r4, r5
   b7fe6:	f000 fec3 	bl	b8d70 <finite>
   b7fea:	2800      	cmp	r0, #0
   b7fec:	d0c7      	beq.n	b7f7e <pow+0x96>
   b7fee:	ec53 2b18 	vmov	r2, r3, d8
   b7ff2:	ee18 0a10 	vmov	r0, s16
   b7ff6:	4619      	mov	r1, r3
   b7ff8:	f001 fc52 	bl	b98a0 <__aeabi_dcmpun>
   b7ffc:	bb20      	cbnz	r0, b8048 <pow+0x160>
   b7ffe:	f7fe f909 	bl	b6214 <__errno>
   b8002:	4603      	mov	r3, r0
   b8004:	2222      	movs	r2, #34	; 0x22
   b8006:	601a      	str	r2, [r3, #0]
   b8008:	4630      	mov	r0, r6
   b800a:	4639      	mov	r1, r7
   b800c:	2200      	movs	r2, #0
   b800e:	2300      	movs	r3, #0
   b8010:	f001 fc1e 	bl	b9850 <__aeabi_dcmplt>
   b8014:	b948      	cbnz	r0, b802a <pow+0x142>
   b8016:	ed9f 8b18 	vldr	d8, [pc, #96]	; b8078 <pow+0x190>
   b801a:	e7a2      	b.n	b7f62 <pow+0x7a>
   b801c:	f7fe f8fa 	bl	b6214 <__errno>
   b8020:	2321      	movs	r3, #33	; 0x21
   b8022:	ed9f 8b17 	vldr	d8, [pc, #92]	; b8080 <pow+0x198>
   b8026:	6003      	str	r3, [r0, #0]
   b8028:	e79b      	b.n	b7f62 <pow+0x7a>
   b802a:	ec45 4b10 	vmov	d0, r4, r5
   b802e:	f000 feb3 	bl	b8d98 <rint>
   b8032:	4622      	mov	r2, r4
   b8034:	ec51 0b10 	vmov	r0, r1, d0
   b8038:	462b      	mov	r3, r5
   b803a:	f001 fbff 	bl	b983c <__aeabi_dcmpeq>
   b803e:	2800      	cmp	r0, #0
   b8040:	d1e9      	bne.n	b8016 <pow+0x12e>
   b8042:	ed9f 8b0f 	vldr	d8, [pc, #60]	; b8080 <pow+0x198>
   b8046:	e78c      	b.n	b7f62 <pow+0x7a>
   b8048:	f7fe f8e4 	bl	b6214 <__errno>
   b804c:	2200      	movs	r2, #0
   b804e:	2300      	movs	r3, #0
   b8050:	2121      	movs	r1, #33	; 0x21
   b8052:	6001      	str	r1, [r0, #0]
   b8054:	4610      	mov	r0, r2
   b8056:	4619      	mov	r1, r3
   b8058:	f001 fab2 	bl	b95c0 <__aeabi_ddiv>
   b805c:	ec41 0b18 	vmov	d8, r0, r1
   b8060:	e77f      	b.n	b7f62 <pow+0x7a>
   b8062:	bf00      	nop
   b8064:	f3af 8000 	nop.w
	...
   b8074:	3ff00000 	.word	0x3ff00000
   b8078:	00000000 	.word	0x00000000
   b807c:	7ff00000 	.word	0x7ff00000
   b8080:	00000000 	.word	0x00000000
   b8084:	fff00000 	.word	0xfff00000
   b8088:	2003e52c 	.word	0x2003e52c
   b808c:	00000000 	.word	0x00000000

000b8090 <__ieee754_pow>:
   b8090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8094:	ec57 6b11 	vmov	r6, r7, d1
   b8098:	ed2d 8b0c 	vpush	{d8-d13}
   b809c:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   b80a0:	ea5a 0206 	orrs.w	r2, sl, r6
   b80a4:	b087      	sub	sp, #28
   b80a6:	d03d      	beq.n	b8124 <__ieee754_pow+0x94>
   b80a8:	ec55 4b10 	vmov	r4, r5, d0
   b80ac:	4972      	ldr	r1, [pc, #456]	; (b8278 <__ieee754_pow+0x1e8>)
   b80ae:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
   b80b2:	4588      	cmp	r8, r1
   b80b4:	ee10 2a10 	vmov	r2, s0
   b80b8:	46a9      	mov	r9, r5
   b80ba:	dc2c      	bgt.n	b8116 <__ieee754_pow+0x86>
   b80bc:	ee11 3a10 	vmov	r3, s2
   b80c0:	46bb      	mov	fp, r7
   b80c2:	d036      	beq.n	b8132 <__ieee754_pow+0xa2>
   b80c4:	458a      	cmp	sl, r1
   b80c6:	dc26      	bgt.n	b8116 <__ieee754_pow+0x86>
   b80c8:	496b      	ldr	r1, [pc, #428]	; (b8278 <__ieee754_pow+0x1e8>)
   b80ca:	458a      	cmp	sl, r1
   b80cc:	d021      	beq.n	b8112 <__ieee754_pow+0x82>
   b80ce:	f1b9 0f00 	cmp.w	r9, #0
   b80d2:	db39      	blt.n	b8148 <__ieee754_pow+0xb8>
   b80d4:	2100      	movs	r1, #0
   b80d6:	9100      	str	r1, [sp, #0]
   b80d8:	2b00      	cmp	r3, #0
   b80da:	d151      	bne.n	b8180 <__ieee754_pow+0xf0>
   b80dc:	4b66      	ldr	r3, [pc, #408]	; (b8278 <__ieee754_pow+0x1e8>)
   b80de:	459a      	cmp	sl, r3
   b80e0:	f000 80a2 	beq.w	b8228 <__ieee754_pow+0x198>
   b80e4:	4b65      	ldr	r3, [pc, #404]	; (b827c <__ieee754_pow+0x1ec>)
   b80e6:	459a      	cmp	sl, r3
   b80e8:	f000 80b0 	beq.w	b824c <__ieee754_pow+0x1bc>
   b80ec:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
   b80f0:	f000 84c0 	beq.w	b8a74 <__ieee754_pow+0x9e4>
   b80f4:	4b62      	ldr	r3, [pc, #392]	; (b8280 <__ieee754_pow+0x1f0>)
   b80f6:	459b      	cmp	fp, r3
   b80f8:	d142      	bne.n	b8180 <__ieee754_pow+0xf0>
   b80fa:	f1b9 0f00 	cmp.w	r9, #0
   b80fe:	db3f      	blt.n	b8180 <__ieee754_pow+0xf0>
   b8100:	ec45 4b10 	vmov	d0, r4, r5
   b8104:	b007      	add	sp, #28
   b8106:	ecbd 8b0c 	vpop	{d8-d13}
   b810a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b810e:	f000 bd59 	b.w	b8bc4 <__ieee754_sqrt>
   b8112:	2b00      	cmp	r3, #0
   b8114:	d0db      	beq.n	b80ce <__ieee754_pow+0x3e>
   b8116:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   b811a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   b811e:	ea58 0302 	orrs.w	r3, r8, r2
   b8122:	d109      	bne.n	b8138 <__ieee754_pow+0xa8>
   b8124:	ed9f 0b50 	vldr	d0, [pc, #320]	; b8268 <__ieee754_pow+0x1d8>
   b8128:	b007      	add	sp, #28
   b812a:	ecbd 8b0c 	vpop	{d8-d13}
   b812e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8132:	b90c      	cbnz	r4, b8138 <__ieee754_pow+0xa8>
   b8134:	45c2      	cmp	sl, r8
   b8136:	ddc7      	ble.n	b80c8 <__ieee754_pow+0x38>
   b8138:	4852      	ldr	r0, [pc, #328]	; (b8284 <__ieee754_pow+0x1f4>)
   b813a:	b007      	add	sp, #28
   b813c:	ecbd 8b0c 	vpop	{d8-d13}
   b8140:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8144:	f000 be20 	b.w	b8d88 <nan>
   b8148:	494f      	ldr	r1, [pc, #316]	; (b8288 <__ieee754_pow+0x1f8>)
   b814a:	458a      	cmp	sl, r1
   b814c:	f300 8085 	bgt.w	b825a <__ieee754_pow+0x1ca>
   b8150:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
   b8154:	458a      	cmp	sl, r1
   b8156:	dd0f      	ble.n	b8178 <__ieee754_pow+0xe8>
   b8158:	ea4f 512a 	mov.w	r1, sl, asr #20
   b815c:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   b8160:	2914      	cmp	r1, #20
   b8162:	f340 849b 	ble.w	b8a9c <__ieee754_pow+0xa0c>
   b8166:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
   b816a:	fa23 f001 	lsr.w	r0, r3, r1
   b816e:	fa00 f101 	lsl.w	r1, r0, r1
   b8172:	4299      	cmp	r1, r3
   b8174:	f000 84ed 	beq.w	b8b52 <__ieee754_pow+0xac2>
   b8178:	2100      	movs	r1, #0
   b817a:	9100      	str	r1, [sp, #0]
   b817c:	2b00      	cmp	r3, #0
   b817e:	d0b1      	beq.n	b80e4 <__ieee754_pow+0x54>
   b8180:	ec45 4b10 	vmov	d0, r4, r5
   b8184:	9202      	str	r2, [sp, #8]
   b8186:	f000 fde9 	bl	b8d5c <fabs>
   b818a:	9a02      	ldr	r2, [sp, #8]
   b818c:	bb5a      	cbnz	r2, b81e6 <__ieee754_pow+0x156>
   b818e:	f1b8 0f00 	cmp.w	r8, #0
   b8192:	d004      	beq.n	b819e <__ieee754_pow+0x10e>
   b8194:	4b39      	ldr	r3, [pc, #228]	; (b827c <__ieee754_pow+0x1ec>)
   b8196:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
   b819a:	429a      	cmp	r2, r3
   b819c:	d123      	bne.n	b81e6 <__ieee754_pow+0x156>
   b819e:	f1bb 0f00 	cmp.w	fp, #0
   b81a2:	da07      	bge.n	b81b4 <__ieee754_pow+0x124>
   b81a4:	ec53 2b10 	vmov	r2, r3, d0
   b81a8:	4934      	ldr	r1, [pc, #208]	; (b827c <__ieee754_pow+0x1ec>)
   b81aa:	2000      	movs	r0, #0
   b81ac:	f001 fa08 	bl	b95c0 <__aeabi_ddiv>
   b81b0:	ec41 0b10 	vmov	d0, r0, r1
   b81b4:	f1b9 0f00 	cmp.w	r9, #0
   b81b8:	dab6      	bge.n	b8128 <__ieee754_pow+0x98>
   b81ba:	9b00      	ldr	r3, [sp, #0]
   b81bc:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   b81c0:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   b81c4:	ea58 0303 	orrs.w	r3, r8, r3
   b81c8:	f040 848d 	bne.w	b8ae6 <__ieee754_pow+0xa56>
   b81cc:	ec53 2b10 	vmov	r2, r3, d0
   b81d0:	4610      	mov	r0, r2
   b81d2:	4619      	mov	r1, r3
   b81d4:	f000 ff12 	bl	b8ffc <__aeabi_dsub>
   b81d8:	4602      	mov	r2, r0
   b81da:	460b      	mov	r3, r1
   b81dc:	f001 f9f0 	bl	b95c0 <__aeabi_ddiv>
   b81e0:	ec41 0b10 	vmov	d0, r0, r1
   b81e4:	e7a0      	b.n	b8128 <__ieee754_pow+0x98>
   b81e6:	9a00      	ldr	r2, [sp, #0]
   b81e8:	ea4f 73d9 	mov.w	r3, r9, lsr #31
   b81ec:	3b01      	subs	r3, #1
   b81ee:	9304      	str	r3, [sp, #16]
   b81f0:	4313      	orrs	r3, r2
   b81f2:	d035      	beq.n	b8260 <__ieee754_pow+0x1d0>
   b81f4:	4b25      	ldr	r3, [pc, #148]	; (b828c <__ieee754_pow+0x1fc>)
   b81f6:	459a      	cmp	sl, r3
   b81f8:	dd4c      	ble.n	b8294 <__ieee754_pow+0x204>
   b81fa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   b81fe:	459a      	cmp	sl, r3
   b8200:	4b23      	ldr	r3, [pc, #140]	; (b8290 <__ieee754_pow+0x200>)
   b8202:	f340 83db 	ble.w	b89bc <__ieee754_pow+0x92c>
   b8206:	4598      	cmp	r8, r3
   b8208:	f340 8360 	ble.w	b88cc <__ieee754_pow+0x83c>
   b820c:	f1bb 0f00 	cmp.w	fp, #0
   b8210:	f340 8360 	ble.w	b88d4 <__ieee754_pow+0x844>
   b8214:	a316      	add	r3, pc, #88	; (adr r3, b8270 <__ieee754_pow+0x1e0>)
   b8216:	e9d3 2300 	ldrd	r2, r3, [r3]
   b821a:	4610      	mov	r0, r2
   b821c:	4619      	mov	r1, r3
   b821e:	f001 f8a5 	bl	b936c <__aeabi_dmul>
   b8222:	ec41 0b10 	vmov	d0, r0, r1
   b8226:	e77f      	b.n	b8128 <__ieee754_pow+0x98>
   b8228:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
   b822c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   b8230:	4313      	orrs	r3, r2
   b8232:	f43f af77 	beq.w	b8124 <__ieee754_pow+0x94>
   b8236:	4b16      	ldr	r3, [pc, #88]	; (b8290 <__ieee754_pow+0x200>)
   b8238:	4598      	cmp	r8, r3
   b823a:	f340 837a 	ble.w	b8932 <__ieee754_pow+0x8a2>
   b823e:	f1bb 0f00 	cmp.w	fp, #0
   b8242:	f2c0 8347 	blt.w	b88d4 <__ieee754_pow+0x844>
   b8246:	ec47 6b10 	vmov	d0, r6, r7
   b824a:	e76d      	b.n	b8128 <__ieee754_pow+0x98>
   b824c:	f1bb 0f00 	cmp.w	fp, #0
   b8250:	f2c0 841a 	blt.w	b8a88 <__ieee754_pow+0x9f8>
   b8254:	ec45 4b10 	vmov	d0, r4, r5
   b8258:	e766      	b.n	b8128 <__ieee754_pow+0x98>
   b825a:	2102      	movs	r1, #2
   b825c:	9100      	str	r1, [sp, #0]
   b825e:	e73b      	b.n	b80d8 <__ieee754_pow+0x48>
   b8260:	4622      	mov	r2, r4
   b8262:	462b      	mov	r3, r5
   b8264:	e7b4      	b.n	b81d0 <__ieee754_pow+0x140>
   b8266:	bf00      	nop
   b8268:	00000000 	.word	0x00000000
   b826c:	3ff00000 	.word	0x3ff00000
   b8270:	8800759c 	.word	0x8800759c
   b8274:	7e37e43c 	.word	0x7e37e43c
   b8278:	7ff00000 	.word	0x7ff00000
   b827c:	3ff00000 	.word	0x3ff00000
   b8280:	3fe00000 	.word	0x3fe00000
   b8284:	000ba620 	.word	0x000ba620
   b8288:	433fffff 	.word	0x433fffff
   b828c:	41e00000 	.word	0x41e00000
   b8290:	3fefffff 	.word	0x3fefffff
   b8294:	4be4      	ldr	r3, [pc, #912]	; (b8628 <__ieee754_pow+0x598>)
   b8296:	ea09 0303 	and.w	r3, r9, r3
   b829a:	2200      	movs	r2, #0
   b829c:	b953      	cbnz	r3, b82b4 <__ieee754_pow+0x224>
   b829e:	ec51 0b10 	vmov	r0, r1, d0
   b82a2:	4be2      	ldr	r3, [pc, #904]	; (b862c <__ieee754_pow+0x59c>)
   b82a4:	f001 f862 	bl	b936c <__aeabi_dmul>
   b82a8:	ec41 0b10 	vmov	d0, r0, r1
   b82ac:	ee10 8a90 	vmov	r8, s1
   b82b0:	f06f 0234 	mvn.w	r2, #52	; 0x34
   b82b4:	ea4f 5328 	mov.w	r3, r8, asr #20
   b82b8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   b82bc:	189a      	adds	r2, r3, r2
   b82be:	4bdc      	ldr	r3, [pc, #880]	; (b8630 <__ieee754_pow+0x5a0>)
   b82c0:	9205      	str	r2, [sp, #20]
   b82c2:	f3c8 0813 	ubfx	r8, r8, #0, #20
   b82c6:	f048 547f 	orr.w	r4, r8, #1069547520	; 0x3fc00000
   b82ca:	4598      	cmp	r8, r3
   b82cc:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   b82d0:	dd07      	ble.n	b82e2 <__ieee754_pow+0x252>
   b82d2:	4bd8      	ldr	r3, [pc, #864]	; (b8634 <__ieee754_pow+0x5a4>)
   b82d4:	4598      	cmp	r8, r3
   b82d6:	f340 8414 	ble.w	b8b02 <__ieee754_pow+0xa72>
   b82da:	3201      	adds	r2, #1
   b82dc:	9205      	str	r2, [sp, #20]
   b82de:	f5a4 1480 	sub.w	r4, r4, #1048576	; 0x100000
   b82e2:	ed9f 6bb9 	vldr	d6, [pc, #740]	; b85c8 <__ieee754_pow+0x538>
   b82e6:	ed9f 7bba 	vldr	d7, [pc, #744]	; b85d0 <__ieee754_pow+0x540>
   b82ea:	ec53 2b16 	vmov	r2, r3, d6
   b82ee:	eeb0 ca47 	vmov.f32	s24, s14
   b82f2:	eef0 ca67 	vmov.f32	s25, s15
   b82f6:	2500      	movs	r5, #0
   b82f8:	eeb0 da47 	vmov.f32	s26, s14
   b82fc:	eef0 da67 	vmov.f32	s27, s15
   b8300:	ec5b ab10 	vmov	sl, fp, d0
   b8304:	46a3      	mov	fp, r4
   b8306:	4650      	mov	r0, sl
   b8308:	4659      	mov	r1, fp
   b830a:	ec43 2b1a 	vmov	d10, r2, r3
   b830e:	f000 fe75 	bl	b8ffc <__aeabi_dsub>
   b8312:	ec53 2b1a 	vmov	r2, r3, d10
   b8316:	4680      	mov	r8, r0
   b8318:	4689      	mov	r9, r1
   b831a:	4650      	mov	r0, sl
   b831c:	4659      	mov	r1, fp
   b831e:	f000 fe6f 	bl	b9000 <__adddf3>
   b8322:	4602      	mov	r2, r0
   b8324:	460b      	mov	r3, r1
   b8326:	2000      	movs	r0, #0
   b8328:	49c3      	ldr	r1, [pc, #780]	; (b8638 <__ieee754_pow+0x5a8>)
   b832a:	f001 f949 	bl	b95c0 <__aeabi_ddiv>
   b832e:	ec41 0b1b 	vmov	d11, r0, r1
   b8332:	4640      	mov	r0, r8
   b8334:	ec53 2b1b 	vmov	r2, r3, d11
   b8338:	4649      	mov	r1, r9
   b833a:	f001 f817 	bl	b936c <__aeabi_dmul>
   b833e:	ec41 0b18 	vmov	d8, r0, r1
   b8342:	460a      	mov	r2, r1
   b8344:	4601      	mov	r1, r0
   b8346:	e9cd 1202 	strd	r1, r2, [sp, #8]
   b834a:	2100      	movs	r1, #0
   b834c:	9102      	str	r1, [sp, #8]
   b834e:	1064      	asrs	r4, r4, #1
   b8350:	ec4b ab19 	vmov	d9, sl, fp
   b8354:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
   b8358:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   b835c:	f504 2300 	add.w	r3, r4, #524288	; 0x80000
   b8360:	2000      	movs	r0, #0
   b8362:	1959      	adds	r1, r3, r5
   b8364:	4604      	mov	r4, r0
   b8366:	460d      	mov	r5, r1
   b8368:	4602      	mov	r2, r0
   b836a:	460b      	mov	r3, r1
   b836c:	4650      	mov	r0, sl
   b836e:	4659      	mov	r1, fp
   b8370:	f000 fffc 	bl	b936c <__aeabi_dmul>
   b8374:	4602      	mov	r2, r0
   b8376:	460b      	mov	r3, r1
   b8378:	4640      	mov	r0, r8
   b837a:	4649      	mov	r1, r9
   b837c:	f000 fe3e 	bl	b8ffc <__aeabi_dsub>
   b8380:	ec53 2b1a 	vmov	r2, r3, d10
   b8384:	4680      	mov	r8, r0
   b8386:	4689      	mov	r9, r1
   b8388:	4620      	mov	r0, r4
   b838a:	4629      	mov	r1, r5
   b838c:	f000 fe36 	bl	b8ffc <__aeabi_dsub>
   b8390:	4602      	mov	r2, r0
   b8392:	460b      	mov	r3, r1
   b8394:	ec51 0b19 	vmov	r0, r1, d9
   b8398:	f000 fe30 	bl	b8ffc <__aeabi_dsub>
   b839c:	4652      	mov	r2, sl
   b839e:	465b      	mov	r3, fp
   b83a0:	f000 ffe4 	bl	b936c <__aeabi_dmul>
   b83a4:	4602      	mov	r2, r0
   b83a6:	460b      	mov	r3, r1
   b83a8:	4640      	mov	r0, r8
   b83aa:	4649      	mov	r1, r9
   b83ac:	f000 fe26 	bl	b8ffc <__aeabi_dsub>
   b83b0:	ec53 2b1b 	vmov	r2, r3, d11
   b83b4:	f000 ffda 	bl	b936c <__aeabi_dmul>
   b83b8:	ec53 2b18 	vmov	r2, r3, d8
   b83bc:	ec41 0b19 	vmov	d9, r0, r1
   b83c0:	ec51 0b18 	vmov	r0, r1, d8
   b83c4:	f000 ffd2 	bl	b936c <__aeabi_dmul>
   b83c8:	a383      	add	r3, pc, #524	; (adr r3, b85d8 <__ieee754_pow+0x548>)
   b83ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   b83ce:	4604      	mov	r4, r0
   b83d0:	460d      	mov	r5, r1
   b83d2:	f000 ffcb 	bl	b936c <__aeabi_dmul>
   b83d6:	a382      	add	r3, pc, #520	; (adr r3, b85e0 <__ieee754_pow+0x550>)
   b83d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b83dc:	f000 fe10 	bl	b9000 <__adddf3>
   b83e0:	4622      	mov	r2, r4
   b83e2:	462b      	mov	r3, r5
   b83e4:	f000 ffc2 	bl	b936c <__aeabi_dmul>
   b83e8:	a37f      	add	r3, pc, #508	; (adr r3, b85e8 <__ieee754_pow+0x558>)
   b83ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   b83ee:	f000 fe07 	bl	b9000 <__adddf3>
   b83f2:	4622      	mov	r2, r4
   b83f4:	462b      	mov	r3, r5
   b83f6:	f000 ffb9 	bl	b936c <__aeabi_dmul>
   b83fa:	a37d      	add	r3, pc, #500	; (adr r3, b85f0 <__ieee754_pow+0x560>)
   b83fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8400:	f000 fdfe 	bl	b9000 <__adddf3>
   b8404:	4622      	mov	r2, r4
   b8406:	462b      	mov	r3, r5
   b8408:	f000 ffb0 	bl	b936c <__aeabi_dmul>
   b840c:	a37a      	add	r3, pc, #488	; (adr r3, b85f8 <__ieee754_pow+0x568>)
   b840e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8412:	f000 fdf5 	bl	b9000 <__adddf3>
   b8416:	4622      	mov	r2, r4
   b8418:	462b      	mov	r3, r5
   b841a:	f000 ffa7 	bl	b936c <__aeabi_dmul>
   b841e:	a378      	add	r3, pc, #480	; (adr r3, b8600 <__ieee754_pow+0x570>)
   b8420:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8424:	f000 fdec 	bl	b9000 <__adddf3>
   b8428:	4622      	mov	r2, r4
   b842a:	4680      	mov	r8, r0
   b842c:	4689      	mov	r9, r1
   b842e:	462b      	mov	r3, r5
   b8430:	4620      	mov	r0, r4
   b8432:	4629      	mov	r1, r5
   b8434:	f000 ff9a 	bl	b936c <__aeabi_dmul>
   b8438:	4602      	mov	r2, r0
   b843a:	460b      	mov	r3, r1
   b843c:	4640      	mov	r0, r8
   b843e:	4649      	mov	r1, r9
   b8440:	f000 ff94 	bl	b936c <__aeabi_dmul>
   b8444:	4652      	mov	r2, sl
   b8446:	4604      	mov	r4, r0
   b8448:	460d      	mov	r5, r1
   b844a:	465b      	mov	r3, fp
   b844c:	ec51 0b18 	vmov	r0, r1, d8
   b8450:	f000 fdd6 	bl	b9000 <__adddf3>
   b8454:	ec53 2b19 	vmov	r2, r3, d9
   b8458:	f000 ff88 	bl	b936c <__aeabi_dmul>
   b845c:	4622      	mov	r2, r4
   b845e:	462b      	mov	r3, r5
   b8460:	f000 fdce 	bl	b9000 <__adddf3>
   b8464:	4652      	mov	r2, sl
   b8466:	4680      	mov	r8, r0
   b8468:	4689      	mov	r9, r1
   b846a:	465b      	mov	r3, fp
   b846c:	4650      	mov	r0, sl
   b846e:	4659      	mov	r1, fp
   b8470:	f000 ff7c 	bl	b936c <__aeabi_dmul>
   b8474:	4602      	mov	r2, r0
   b8476:	460b      	mov	r3, r1
   b8478:	ec43 2b1a 	vmov	d10, r2, r3
   b847c:	4b6f      	ldr	r3, [pc, #444]	; (b863c <__ieee754_pow+0x5ac>)
   b847e:	2200      	movs	r2, #0
   b8480:	f000 fdbe 	bl	b9000 <__adddf3>
   b8484:	4642      	mov	r2, r8
   b8486:	464b      	mov	r3, r9
   b8488:	f000 fdba 	bl	b9000 <__adddf3>
   b848c:	2400      	movs	r4, #0
   b848e:	460d      	mov	r5, r1
   b8490:	4622      	mov	r2, r4
   b8492:	462b      	mov	r3, r5
   b8494:	4650      	mov	r0, sl
   b8496:	4659      	mov	r1, fp
   b8498:	f000 ff68 	bl	b936c <__aeabi_dmul>
   b849c:	4b67      	ldr	r3, [pc, #412]	; (b863c <__ieee754_pow+0x5ac>)
   b849e:	4682      	mov	sl, r0
   b84a0:	468b      	mov	fp, r1
   b84a2:	2200      	movs	r2, #0
   b84a4:	4620      	mov	r0, r4
   b84a6:	4629      	mov	r1, r5
   b84a8:	f000 fda8 	bl	b8ffc <__aeabi_dsub>
   b84ac:	ec53 2b1a 	vmov	r2, r3, d10
   b84b0:	f000 fda4 	bl	b8ffc <__aeabi_dsub>
   b84b4:	4602      	mov	r2, r0
   b84b6:	460b      	mov	r3, r1
   b84b8:	4640      	mov	r0, r8
   b84ba:	4649      	mov	r1, r9
   b84bc:	f000 fd9e 	bl	b8ffc <__aeabi_dsub>
   b84c0:	ec53 2b18 	vmov	r2, r3, d8
   b84c4:	f000 ff52 	bl	b936c <__aeabi_dmul>
   b84c8:	4622      	mov	r2, r4
   b84ca:	462b      	mov	r3, r5
   b84cc:	4604      	mov	r4, r0
   b84ce:	460d      	mov	r5, r1
   b84d0:	ec51 0b19 	vmov	r0, r1, d9
   b84d4:	f000 ff4a 	bl	b936c <__aeabi_dmul>
   b84d8:	4602      	mov	r2, r0
   b84da:	460b      	mov	r3, r1
   b84dc:	4620      	mov	r0, r4
   b84de:	4629      	mov	r1, r5
   b84e0:	f000 fd8e 	bl	b9000 <__adddf3>
   b84e4:	4680      	mov	r8, r0
   b84e6:	4689      	mov	r9, r1
   b84e8:	4642      	mov	r2, r8
   b84ea:	464b      	mov	r3, r9
   b84ec:	4650      	mov	r0, sl
   b84ee:	4659      	mov	r1, fp
   b84f0:	f000 fd86 	bl	b9000 <__adddf3>
   b84f4:	a344      	add	r3, pc, #272	; (adr r3, b8608 <__ieee754_pow+0x578>)
   b84f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b84fa:	2000      	movs	r0, #0
   b84fc:	4604      	mov	r4, r0
   b84fe:	460d      	mov	r5, r1
   b8500:	f000 ff34 	bl	b936c <__aeabi_dmul>
   b8504:	4652      	mov	r2, sl
   b8506:	ec41 0b19 	vmov	d9, r0, r1
   b850a:	465b      	mov	r3, fp
   b850c:	4620      	mov	r0, r4
   b850e:	4629      	mov	r1, r5
   b8510:	f000 fd74 	bl	b8ffc <__aeabi_dsub>
   b8514:	4602      	mov	r2, r0
   b8516:	460b      	mov	r3, r1
   b8518:	4640      	mov	r0, r8
   b851a:	4649      	mov	r1, r9
   b851c:	f000 fd6e 	bl	b8ffc <__aeabi_dsub>
   b8520:	a33b      	add	r3, pc, #236	; (adr r3, b8610 <__ieee754_pow+0x580>)
   b8522:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8526:	f000 ff21 	bl	b936c <__aeabi_dmul>
   b852a:	4602      	mov	r2, r0
   b852c:	460b      	mov	r3, r1
   b852e:	4620      	mov	r0, r4
   b8530:	4629      	mov	r1, r5
   b8532:	4614      	mov	r4, r2
   b8534:	461d      	mov	r5, r3
   b8536:	a338      	add	r3, pc, #224	; (adr r3, b8618 <__ieee754_pow+0x588>)
   b8538:	e9d3 2300 	ldrd	r2, r3, [r3]
   b853c:	f000 ff16 	bl	b936c <__aeabi_dmul>
   b8540:	4602      	mov	r2, r0
   b8542:	460b      	mov	r3, r1
   b8544:	4620      	mov	r0, r4
   b8546:	4629      	mov	r1, r5
   b8548:	f000 fd5a 	bl	b9000 <__adddf3>
   b854c:	ec53 2b1d 	vmov	r2, r3, d13
   b8550:	f000 fd56 	bl	b9000 <__adddf3>
   b8554:	4680      	mov	r8, r0
   b8556:	9805      	ldr	r0, [sp, #20]
   b8558:	4689      	mov	r9, r1
   b855a:	f000 fe9d 	bl	b9298 <__aeabi_i2d>
   b855e:	4642      	mov	r2, r8
   b8560:	4682      	mov	sl, r0
   b8562:	468b      	mov	fp, r1
   b8564:	464b      	mov	r3, r9
   b8566:	ec51 0b19 	vmov	r0, r1, d9
   b856a:	f000 fd49 	bl	b9000 <__adddf3>
   b856e:	ec53 2b1c 	vmov	r2, r3, d12
   b8572:	f000 fd45 	bl	b9000 <__adddf3>
   b8576:	4652      	mov	r2, sl
   b8578:	465b      	mov	r3, fp
   b857a:	f000 fd41 	bl	b9000 <__adddf3>
   b857e:	4652      	mov	r2, sl
   b8580:	465b      	mov	r3, fp
   b8582:	2000      	movs	r0, #0
   b8584:	4604      	mov	r4, r0
   b8586:	460d      	mov	r5, r1
   b8588:	f000 fd38 	bl	b8ffc <__aeabi_dsub>
   b858c:	ec53 2b1c 	vmov	r2, r3, d12
   b8590:	f000 fd34 	bl	b8ffc <__aeabi_dsub>
   b8594:	ec53 2b19 	vmov	r2, r3, d9
   b8598:	f000 fd30 	bl	b8ffc <__aeabi_dsub>
   b859c:	4602      	mov	r2, r0
   b859e:	460b      	mov	r3, r1
   b85a0:	4640      	mov	r0, r8
   b85a2:	4649      	mov	r1, r9
   b85a4:	f000 fd2a 	bl	b8ffc <__aeabi_dsub>
   b85a8:	9b00      	ldr	r3, [sp, #0]
   b85aa:	9a04      	ldr	r2, [sp, #16]
   b85ac:	3b01      	subs	r3, #1
   b85ae:	4313      	orrs	r3, r2
   b85b0:	4682      	mov	sl, r0
   b85b2:	468b      	mov	fp, r1
   b85b4:	f040 81b6 	bne.w	b8924 <__ieee754_pow+0x894>
   b85b8:	ed9f 7b19 	vldr	d7, [pc, #100]	; b8620 <__ieee754_pow+0x590>
   b85bc:	eeb0 8a47 	vmov.f32	s16, s14
   b85c0:	eef0 8a67 	vmov.f32	s17, s15
   b85c4:	e03c      	b.n	b8640 <__ieee754_pow+0x5b0>
   b85c6:	bf00      	nop
   b85c8:	00000000 	.word	0x00000000
   b85cc:	3ff00000 	.word	0x3ff00000
	...
   b85d8:	4a454eef 	.word	0x4a454eef
   b85dc:	3fca7e28 	.word	0x3fca7e28
   b85e0:	93c9db65 	.word	0x93c9db65
   b85e4:	3fcd864a 	.word	0x3fcd864a
   b85e8:	a91d4101 	.word	0xa91d4101
   b85ec:	3fd17460 	.word	0x3fd17460
   b85f0:	518f264d 	.word	0x518f264d
   b85f4:	3fd55555 	.word	0x3fd55555
   b85f8:	db6fabff 	.word	0xdb6fabff
   b85fc:	3fdb6db6 	.word	0x3fdb6db6
   b8600:	33333303 	.word	0x33333303
   b8604:	3fe33333 	.word	0x3fe33333
   b8608:	e0000000 	.word	0xe0000000
   b860c:	3feec709 	.word	0x3feec709
   b8610:	dc3a03fd 	.word	0xdc3a03fd
   b8614:	3feec709 	.word	0x3feec709
   b8618:	145b01f5 	.word	0x145b01f5
   b861c:	be3e2fe0 	.word	0xbe3e2fe0
   b8620:	00000000 	.word	0x00000000
   b8624:	bff00000 	.word	0xbff00000
   b8628:	7ff00000 	.word	0x7ff00000
   b862c:	43400000 	.word	0x43400000
   b8630:	0003988e 	.word	0x0003988e
   b8634:	000bb679 	.word	0x000bb679
   b8638:	3ff00000 	.word	0x3ff00000
   b863c:	40080000 	.word	0x40080000
   b8640:	2300      	movs	r3, #0
   b8642:	e9cd 6700 	strd	r6, r7, [sp]
   b8646:	9300      	str	r3, [sp, #0]
   b8648:	e9dd 8900 	ldrd	r8, r9, [sp]
   b864c:	4630      	mov	r0, r6
   b864e:	4642      	mov	r2, r8
   b8650:	464b      	mov	r3, r9
   b8652:	4639      	mov	r1, r7
   b8654:	f000 fcd2 	bl	b8ffc <__aeabi_dsub>
   b8658:	4622      	mov	r2, r4
   b865a:	462b      	mov	r3, r5
   b865c:	f000 fe86 	bl	b936c <__aeabi_dmul>
   b8660:	4632      	mov	r2, r6
   b8662:	463b      	mov	r3, r7
   b8664:	4606      	mov	r6, r0
   b8666:	460f      	mov	r7, r1
   b8668:	4650      	mov	r0, sl
   b866a:	4659      	mov	r1, fp
   b866c:	f000 fe7e 	bl	b936c <__aeabi_dmul>
   b8670:	4602      	mov	r2, r0
   b8672:	460b      	mov	r3, r1
   b8674:	4630      	mov	r0, r6
   b8676:	4639      	mov	r1, r7
   b8678:	f000 fcc2 	bl	b9000 <__adddf3>
   b867c:	4642      	mov	r2, r8
   b867e:	464b      	mov	r3, r9
   b8680:	4606      	mov	r6, r0
   b8682:	460f      	mov	r7, r1
   b8684:	4620      	mov	r0, r4
   b8686:	4629      	mov	r1, r5
   b8688:	f000 fe70 	bl	b936c <__aeabi_dmul>
   b868c:	4604      	mov	r4, r0
   b868e:	460d      	mov	r5, r1
   b8690:	462b      	mov	r3, r5
   b8692:	4630      	mov	r0, r6
   b8694:	4639      	mov	r1, r7
   b8696:	4622      	mov	r2, r4
   b8698:	f000 fcb2 	bl	b9000 <__adddf3>
   b869c:	4bc2      	ldr	r3, [pc, #776]	; (b89a8 <__ieee754_pow+0x918>)
   b869e:	4299      	cmp	r1, r3
   b86a0:	4680      	mov	r8, r0
   b86a2:	4689      	mov	r9, r1
   b86a4:	468a      	mov	sl, r1
   b86a6:	f340 8118 	ble.w	b88da <__ieee754_pow+0x84a>
   b86aa:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   b86ae:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   b86b2:	4303      	orrs	r3, r0
   b86b4:	f040 8207 	bne.w	b8ac6 <__ieee754_pow+0xa36>
   b86b8:	a3a3      	add	r3, pc, #652	; (adr r3, b8948 <__ieee754_pow+0x8b8>)
   b86ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   b86be:	4630      	mov	r0, r6
   b86c0:	4639      	mov	r1, r7
   b86c2:	f000 fc9d 	bl	b9000 <__adddf3>
   b86c6:	4602      	mov	r2, r0
   b86c8:	460b      	mov	r3, r1
   b86ca:	4640      	mov	r0, r8
   b86cc:	4649      	mov	r1, r9
   b86ce:	4690      	mov	r8, r2
   b86d0:	4699      	mov	r9, r3
   b86d2:	4622      	mov	r2, r4
   b86d4:	462b      	mov	r3, r5
   b86d6:	f000 fc91 	bl	b8ffc <__aeabi_dsub>
   b86da:	4602      	mov	r2, r0
   b86dc:	460b      	mov	r3, r1
   b86de:	4640      	mov	r0, r8
   b86e0:	4649      	mov	r1, r9
   b86e2:	f001 f8d3 	bl	b988c <__aeabi_dcmpgt>
   b86e6:	2800      	cmp	r0, #0
   b86e8:	f040 81ed 	bne.w	b8ac6 <__ieee754_pow+0xa36>
   b86ec:	f3ca 530a 	ubfx	r3, sl, #20, #11
   b86f0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   b86f4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   b86f8:	fa42 f303 	asr.w	r3, r2, r3
   b86fc:	4453      	add	r3, sl
   b86fe:	49ab      	ldr	r1, [pc, #684]	; (b89ac <__ieee754_pow+0x91c>)
   b8700:	f3c3 520a 	ubfx	r2, r3, #20, #11
   b8704:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   b8708:	fa41 fc02 	asr.w	ip, r1, r2
   b870c:	f3c3 0113 	ubfx	r1, r3, #0, #20
   b8710:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b8714:	f1c2 0214 	rsb	r2, r2, #20
   b8718:	fa41 f202 	asr.w	r2, r1, r2
   b871c:	2000      	movs	r0, #0
   b871e:	ea23 010c 	bic.w	r1, r3, ip
   b8722:	f1ba 0f00 	cmp.w	sl, #0
   b8726:	9200      	str	r2, [sp, #0]
   b8728:	460b      	mov	r3, r1
   b872a:	4602      	mov	r2, r0
   b872c:	da02      	bge.n	b8734 <__ieee754_pow+0x6a4>
   b872e:	9900      	ldr	r1, [sp, #0]
   b8730:	4249      	negs	r1, r1
   b8732:	9100      	str	r1, [sp, #0]
   b8734:	4620      	mov	r0, r4
   b8736:	4629      	mov	r1, r5
   b8738:	f000 fc60 	bl	b8ffc <__aeabi_dsub>
   b873c:	9b00      	ldr	r3, [sp, #0]
   b873e:	051b      	lsls	r3, r3, #20
   b8740:	9302      	str	r3, [sp, #8]
   b8742:	4602      	mov	r2, r0
   b8744:	460b      	mov	r3, r1
   b8746:	4604      	mov	r4, r0
   b8748:	460d      	mov	r5, r1
   b874a:	4630      	mov	r0, r6
   b874c:	4639      	mov	r1, r7
   b874e:	f000 fc57 	bl	b9000 <__adddf3>
   b8752:	4689      	mov	r9, r1
   b8754:	f04f 0800 	mov.w	r8, #0
   b8758:	a37d      	add	r3, pc, #500	; (adr r3, b8950 <__ieee754_pow+0x8c0>)
   b875a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b875e:	4640      	mov	r0, r8
   b8760:	4649      	mov	r1, r9
   b8762:	f000 fe03 	bl	b936c <__aeabi_dmul>
   b8766:	4622      	mov	r2, r4
   b8768:	462b      	mov	r3, r5
   b876a:	4682      	mov	sl, r0
   b876c:	468b      	mov	fp, r1
   b876e:	4640      	mov	r0, r8
   b8770:	4649      	mov	r1, r9
   b8772:	f000 fc43 	bl	b8ffc <__aeabi_dsub>
   b8776:	4602      	mov	r2, r0
   b8778:	460b      	mov	r3, r1
   b877a:	4630      	mov	r0, r6
   b877c:	4639      	mov	r1, r7
   b877e:	f000 fc3d 	bl	b8ffc <__aeabi_dsub>
   b8782:	a375      	add	r3, pc, #468	; (adr r3, b8958 <__ieee754_pow+0x8c8>)
   b8784:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8788:	f000 fdf0 	bl	b936c <__aeabi_dmul>
   b878c:	a374      	add	r3, pc, #464	; (adr r3, b8960 <__ieee754_pow+0x8d0>)
   b878e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8792:	4604      	mov	r4, r0
   b8794:	460d      	mov	r5, r1
   b8796:	4640      	mov	r0, r8
   b8798:	4649      	mov	r1, r9
   b879a:	f000 fde7 	bl	b936c <__aeabi_dmul>
   b879e:	4602      	mov	r2, r0
   b87a0:	460b      	mov	r3, r1
   b87a2:	4620      	mov	r0, r4
   b87a4:	4629      	mov	r1, r5
   b87a6:	f000 fc2b 	bl	b9000 <__adddf3>
   b87aa:	4606      	mov	r6, r0
   b87ac:	460f      	mov	r7, r1
   b87ae:	4632      	mov	r2, r6
   b87b0:	463b      	mov	r3, r7
   b87b2:	4650      	mov	r0, sl
   b87b4:	4659      	mov	r1, fp
   b87b6:	f000 fc23 	bl	b9000 <__adddf3>
   b87ba:	4652      	mov	r2, sl
   b87bc:	465b      	mov	r3, fp
   b87be:	4604      	mov	r4, r0
   b87c0:	460d      	mov	r5, r1
   b87c2:	f000 fc1b 	bl	b8ffc <__aeabi_dsub>
   b87c6:	4602      	mov	r2, r0
   b87c8:	460b      	mov	r3, r1
   b87ca:	4630      	mov	r0, r6
   b87cc:	4639      	mov	r1, r7
   b87ce:	f000 fc15 	bl	b8ffc <__aeabi_dsub>
   b87d2:	4622      	mov	r2, r4
   b87d4:	4680      	mov	r8, r0
   b87d6:	4689      	mov	r9, r1
   b87d8:	462b      	mov	r3, r5
   b87da:	4620      	mov	r0, r4
   b87dc:	4629      	mov	r1, r5
   b87de:	f000 fdc5 	bl	b936c <__aeabi_dmul>
   b87e2:	a361      	add	r3, pc, #388	; (adr r3, b8968 <__ieee754_pow+0x8d8>)
   b87e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   b87e8:	4606      	mov	r6, r0
   b87ea:	460f      	mov	r7, r1
   b87ec:	f000 fdbe 	bl	b936c <__aeabi_dmul>
   b87f0:	a35f      	add	r3, pc, #380	; (adr r3, b8970 <__ieee754_pow+0x8e0>)
   b87f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b87f6:	f000 fc01 	bl	b8ffc <__aeabi_dsub>
   b87fa:	4632      	mov	r2, r6
   b87fc:	463b      	mov	r3, r7
   b87fe:	f000 fdb5 	bl	b936c <__aeabi_dmul>
   b8802:	a35d      	add	r3, pc, #372	; (adr r3, b8978 <__ieee754_pow+0x8e8>)
   b8804:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8808:	f000 fbfa 	bl	b9000 <__adddf3>
   b880c:	4632      	mov	r2, r6
   b880e:	463b      	mov	r3, r7
   b8810:	f000 fdac 	bl	b936c <__aeabi_dmul>
   b8814:	a35a      	add	r3, pc, #360	; (adr r3, b8980 <__ieee754_pow+0x8f0>)
   b8816:	e9d3 2300 	ldrd	r2, r3, [r3]
   b881a:	f000 fbef 	bl	b8ffc <__aeabi_dsub>
   b881e:	4632      	mov	r2, r6
   b8820:	463b      	mov	r3, r7
   b8822:	f000 fda3 	bl	b936c <__aeabi_dmul>
   b8826:	a358      	add	r3, pc, #352	; (adr r3, b8988 <__ieee754_pow+0x8f8>)
   b8828:	e9d3 2300 	ldrd	r2, r3, [r3]
   b882c:	f000 fbe8 	bl	b9000 <__adddf3>
   b8830:	4632      	mov	r2, r6
   b8832:	463b      	mov	r3, r7
   b8834:	f000 fd9a 	bl	b936c <__aeabi_dmul>
   b8838:	4602      	mov	r2, r0
   b883a:	460b      	mov	r3, r1
   b883c:	4620      	mov	r0, r4
   b883e:	4629      	mov	r1, r5
   b8840:	f000 fbdc 	bl	b8ffc <__aeabi_dsub>
   b8844:	4606      	mov	r6, r0
   b8846:	460f      	mov	r7, r1
   b8848:	4632      	mov	r2, r6
   b884a:	463b      	mov	r3, r7
   b884c:	4620      	mov	r0, r4
   b884e:	4629      	mov	r1, r5
   b8850:	f000 fd8c 	bl	b936c <__aeabi_dmul>
   b8854:	4602      	mov	r2, r0
   b8856:	460b      	mov	r3, r1
   b8858:	4630      	mov	r0, r6
   b885a:	4639      	mov	r1, r7
   b885c:	4616      	mov	r6, r2
   b885e:	461f      	mov	r7, r3
   b8860:	2200      	movs	r2, #0
   b8862:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b8866:	f000 fbc9 	bl	b8ffc <__aeabi_dsub>
   b886a:	4602      	mov	r2, r0
   b886c:	460b      	mov	r3, r1
   b886e:	4630      	mov	r0, r6
   b8870:	4639      	mov	r1, r7
   b8872:	f000 fea5 	bl	b95c0 <__aeabi_ddiv>
   b8876:	4642      	mov	r2, r8
   b8878:	4606      	mov	r6, r0
   b887a:	460f      	mov	r7, r1
   b887c:	464b      	mov	r3, r9
   b887e:	4620      	mov	r0, r4
   b8880:	4629      	mov	r1, r5
   b8882:	f000 fd73 	bl	b936c <__aeabi_dmul>
   b8886:	4642      	mov	r2, r8
   b8888:	464b      	mov	r3, r9
   b888a:	f000 fbb9 	bl	b9000 <__adddf3>
   b888e:	4602      	mov	r2, r0
   b8890:	460b      	mov	r3, r1
   b8892:	4630      	mov	r0, r6
   b8894:	4639      	mov	r1, r7
   b8896:	f000 fbb1 	bl	b8ffc <__aeabi_dsub>
   b889a:	4622      	mov	r2, r4
   b889c:	462b      	mov	r3, r5
   b889e:	f000 fbad 	bl	b8ffc <__aeabi_dsub>
   b88a2:	4602      	mov	r2, r0
   b88a4:	460b      	mov	r3, r1
   b88a6:	2000      	movs	r0, #0
   b88a8:	4941      	ldr	r1, [pc, #260]	; (b89b0 <__ieee754_pow+0x920>)
   b88aa:	f000 fba7 	bl	b8ffc <__aeabi_dsub>
   b88ae:	9a02      	ldr	r2, [sp, #8]
   b88b0:	460b      	mov	r3, r1
   b88b2:	4413      	add	r3, r2
   b88b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   b88b8:	f2c0 8143 	blt.w	b8b42 <__ieee754_pow+0xab2>
   b88bc:	4619      	mov	r1, r3
   b88be:	ec53 2b18 	vmov	r2, r3, d8
   b88c2:	f000 fd53 	bl	b936c <__aeabi_dmul>
   b88c6:	ec41 0b10 	vmov	d0, r0, r1
   b88ca:	e42d      	b.n	b8128 <__ieee754_pow+0x98>
   b88cc:	f1bb 0f00 	cmp.w	fp, #0
   b88d0:	f6ff aca0 	blt.w	b8214 <__ieee754_pow+0x184>
   b88d4:	ed9f 0b2e 	vldr	d0, [pc, #184]	; b8990 <__ieee754_pow+0x900>
   b88d8:	e426      	b.n	b8128 <__ieee754_pow+0x98>
   b88da:	f8df c0dc 	ldr.w	ip, [pc, #220]	; b89b8 <__ieee754_pow+0x928>
   b88de:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   b88e2:	4563      	cmp	r3, ip
   b88e4:	f340 80e7 	ble.w	b8ab6 <__ieee754_pow+0xa26>
   b88e8:	4b32      	ldr	r3, [pc, #200]	; (b89b4 <__ieee754_pow+0x924>)
   b88ea:	440b      	add	r3, r1
   b88ec:	4303      	orrs	r3, r0
   b88ee:	d10a      	bne.n	b8906 <__ieee754_pow+0x876>
   b88f0:	4622      	mov	r2, r4
   b88f2:	462b      	mov	r3, r5
   b88f4:	f000 fb82 	bl	b8ffc <__aeabi_dsub>
   b88f8:	4632      	mov	r2, r6
   b88fa:	463b      	mov	r3, r7
   b88fc:	f000 ffbc 	bl	b9878 <__aeabi_dcmpge>
   b8900:	2800      	cmp	r0, #0
   b8902:	f43f aef3 	beq.w	b86ec <__ieee754_pow+0x65c>
   b8906:	a324      	add	r3, pc, #144	; (adr r3, b8998 <__ieee754_pow+0x908>)
   b8908:	e9d3 2300 	ldrd	r2, r3, [r3]
   b890c:	ec51 0b18 	vmov	r0, r1, d8
   b8910:	f000 fd2c 	bl	b936c <__aeabi_dmul>
   b8914:	a320      	add	r3, pc, #128	; (adr r3, b8998 <__ieee754_pow+0x908>)
   b8916:	e9d3 2300 	ldrd	r2, r3, [r3]
   b891a:	f000 fd27 	bl	b936c <__aeabi_dmul>
   b891e:	ec41 0b10 	vmov	d0, r0, r1
   b8922:	e401      	b.n	b8128 <__ieee754_pow+0x98>
   b8924:	ed9f 7b1e 	vldr	d7, [pc, #120]	; b89a0 <__ieee754_pow+0x910>
   b8928:	eeb0 8a47 	vmov.f32	s16, s14
   b892c:	eef0 8a67 	vmov.f32	s17, s15
   b8930:	e686      	b.n	b8640 <__ieee754_pow+0x5b0>
   b8932:	f1bb 0f00 	cmp.w	fp, #0
   b8936:	dacd      	bge.n	b88d4 <__ieee754_pow+0x844>
   b8938:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   b893c:	ee00 6a10 	vmov	s0, r6
   b8940:	ee00 3a90 	vmov	s1, r3
   b8944:	f7ff bbf0 	b.w	b8128 <__ieee754_pow+0x98>
   b8948:	652b82fe 	.word	0x652b82fe
   b894c:	3c971547 	.word	0x3c971547
   b8950:	00000000 	.word	0x00000000
   b8954:	3fe62e43 	.word	0x3fe62e43
   b8958:	fefa39ef 	.word	0xfefa39ef
   b895c:	3fe62e42 	.word	0x3fe62e42
   b8960:	0ca86c39 	.word	0x0ca86c39
   b8964:	be205c61 	.word	0xbe205c61
   b8968:	72bea4d0 	.word	0x72bea4d0
   b896c:	3e663769 	.word	0x3e663769
   b8970:	c5d26bf1 	.word	0xc5d26bf1
   b8974:	3ebbbd41 	.word	0x3ebbbd41
   b8978:	af25de2c 	.word	0xaf25de2c
   b897c:	3f11566a 	.word	0x3f11566a
   b8980:	16bebd93 	.word	0x16bebd93
   b8984:	3f66c16c 	.word	0x3f66c16c
   b8988:	5555553e 	.word	0x5555553e
   b898c:	3fc55555 	.word	0x3fc55555
	...
   b8998:	c2f8f359 	.word	0xc2f8f359
   b899c:	01a56e1f 	.word	0x01a56e1f
   b89a0:	00000000 	.word	0x00000000
   b89a4:	3ff00000 	.word	0x3ff00000
   b89a8:	408fffff 	.word	0x408fffff
   b89ac:	000fffff 	.word	0x000fffff
   b89b0:	3ff00000 	.word	0x3ff00000
   b89b4:	3f6f3400 	.word	0x3f6f3400
   b89b8:	4090cbff 	.word	0x4090cbff
   b89bc:	4598      	cmp	r8, r3
   b89be:	db85      	blt.n	b88cc <__ieee754_pow+0x83c>
   b89c0:	4b7d      	ldr	r3, [pc, #500]	; (b8bb8 <__ieee754_pow+0xb28>)
   b89c2:	4598      	cmp	r8, r3
   b89c4:	f73f ac22 	bgt.w	b820c <__ieee754_pow+0x17c>
   b89c8:	ec51 0b10 	vmov	r0, r1, d0
   b89cc:	4b7a      	ldr	r3, [pc, #488]	; (b8bb8 <__ieee754_pow+0xb28>)
   b89ce:	2200      	movs	r2, #0
   b89d0:	f000 fb14 	bl	b8ffc <__aeabi_dsub>
   b89d4:	a368      	add	r3, pc, #416	; (adr r3, b8b78 <__ieee754_pow+0xae8>)
   b89d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b89da:	4604      	mov	r4, r0
   b89dc:	460d      	mov	r5, r1
   b89de:	f000 fcc5 	bl	b936c <__aeabi_dmul>
   b89e2:	a367      	add	r3, pc, #412	; (adr r3, b8b80 <__ieee754_pow+0xaf0>)
   b89e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   b89e8:	4682      	mov	sl, r0
   b89ea:	468b      	mov	fp, r1
   b89ec:	4620      	mov	r0, r4
   b89ee:	4629      	mov	r1, r5
   b89f0:	f000 fcbc 	bl	b936c <__aeabi_dmul>
   b89f4:	4b71      	ldr	r3, [pc, #452]	; (b8bbc <__ieee754_pow+0xb2c>)
   b89f6:	ec41 0b18 	vmov	d8, r0, r1
   b89fa:	2200      	movs	r2, #0
   b89fc:	4620      	mov	r0, r4
   b89fe:	4629      	mov	r1, r5
   b8a00:	f000 fcb4 	bl	b936c <__aeabi_dmul>
   b8a04:	4602      	mov	r2, r0
   b8a06:	460b      	mov	r3, r1
   b8a08:	a15f      	add	r1, pc, #380	; (adr r1, b8b88 <__ieee754_pow+0xaf8>)
   b8a0a:	e9d1 0100 	ldrd	r0, r1, [r1]
   b8a0e:	f000 faf5 	bl	b8ffc <__aeabi_dsub>
   b8a12:	4622      	mov	r2, r4
   b8a14:	462b      	mov	r3, r5
   b8a16:	f000 fca9 	bl	b936c <__aeabi_dmul>
   b8a1a:	4602      	mov	r2, r0
   b8a1c:	460b      	mov	r3, r1
   b8a1e:	2000      	movs	r0, #0
   b8a20:	4967      	ldr	r1, [pc, #412]	; (b8bc0 <__ieee754_pow+0xb30>)
   b8a22:	f000 faeb 	bl	b8ffc <__aeabi_dsub>
   b8a26:	4622      	mov	r2, r4
   b8a28:	4680      	mov	r8, r0
   b8a2a:	4689      	mov	r9, r1
   b8a2c:	462b      	mov	r3, r5
   b8a2e:	4620      	mov	r0, r4
   b8a30:	4629      	mov	r1, r5
   b8a32:	f000 fc9b 	bl	b936c <__aeabi_dmul>
   b8a36:	4602      	mov	r2, r0
   b8a38:	460b      	mov	r3, r1
   b8a3a:	4640      	mov	r0, r8
   b8a3c:	4649      	mov	r1, r9
   b8a3e:	f000 fc95 	bl	b936c <__aeabi_dmul>
   b8a42:	a353      	add	r3, pc, #332	; (adr r3, b8b90 <__ieee754_pow+0xb00>)
   b8a44:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8a48:	f000 fc90 	bl	b936c <__aeabi_dmul>
   b8a4c:	4602      	mov	r2, r0
   b8a4e:	460b      	mov	r3, r1
   b8a50:	ec51 0b18 	vmov	r0, r1, d8
   b8a54:	f000 fad2 	bl	b8ffc <__aeabi_dsub>
   b8a58:	4680      	mov	r8, r0
   b8a5a:	4689      	mov	r9, r1
   b8a5c:	4642      	mov	r2, r8
   b8a5e:	464b      	mov	r3, r9
   b8a60:	4650      	mov	r0, sl
   b8a62:	4659      	mov	r1, fp
   b8a64:	f000 facc 	bl	b9000 <__adddf3>
   b8a68:	2000      	movs	r0, #0
   b8a6a:	4652      	mov	r2, sl
   b8a6c:	465b      	mov	r3, fp
   b8a6e:	4604      	mov	r4, r0
   b8a70:	460d      	mov	r5, r1
   b8a72:	e591      	b.n	b8598 <__ieee754_pow+0x508>
   b8a74:	4622      	mov	r2, r4
   b8a76:	462b      	mov	r3, r5
   b8a78:	4620      	mov	r0, r4
   b8a7a:	4629      	mov	r1, r5
   b8a7c:	f000 fc76 	bl	b936c <__aeabi_dmul>
   b8a80:	ec41 0b10 	vmov	d0, r0, r1
   b8a84:	f7ff bb50 	b.w	b8128 <__ieee754_pow+0x98>
   b8a88:	494b      	ldr	r1, [pc, #300]	; (b8bb8 <__ieee754_pow+0xb28>)
   b8a8a:	2000      	movs	r0, #0
   b8a8c:	4622      	mov	r2, r4
   b8a8e:	462b      	mov	r3, r5
   b8a90:	f000 fd96 	bl	b95c0 <__aeabi_ddiv>
   b8a94:	ec41 0b10 	vmov	d0, r0, r1
   b8a98:	f7ff bb46 	b.w	b8128 <__ieee754_pow+0x98>
   b8a9c:	2b00      	cmp	r3, #0
   b8a9e:	d144      	bne.n	b8b2a <__ieee754_pow+0xa9a>
   b8aa0:	f1c1 0114 	rsb	r1, r1, #20
   b8aa4:	fa4a f001 	asr.w	r0, sl, r1
   b8aa8:	fa00 f101 	lsl.w	r1, r0, r1
   b8aac:	4551      	cmp	r1, sl
   b8aae:	d05a      	beq.n	b8b66 <__ieee754_pow+0xad6>
   b8ab0:	9300      	str	r3, [sp, #0]
   b8ab2:	f7ff bb17 	b.w	b80e4 <__ieee754_pow+0x54>
   b8ab6:	4a42      	ldr	r2, [pc, #264]	; (b8bc0 <__ieee754_pow+0xb30>)
   b8ab8:	4293      	cmp	r3, r2
   b8aba:	dc5b      	bgt.n	b8b74 <__ieee754_pow+0xae4>
   b8abc:	e9dd 1200 	ldrd	r1, r2, [sp]
   b8ac0:	9102      	str	r1, [sp, #8]
   b8ac2:	9100      	str	r1, [sp, #0]
   b8ac4:	e646      	b.n	b8754 <__ieee754_pow+0x6c4>
   b8ac6:	a334      	add	r3, pc, #208	; (adr r3, b8b98 <__ieee754_pow+0xb08>)
   b8ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8acc:	ec51 0b18 	vmov	r0, r1, d8
   b8ad0:	f000 fc4c 	bl	b936c <__aeabi_dmul>
   b8ad4:	a330      	add	r3, pc, #192	; (adr r3, b8b98 <__ieee754_pow+0xb08>)
   b8ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8ada:	f000 fc47 	bl	b936c <__aeabi_dmul>
   b8ade:	ec41 0b10 	vmov	d0, r0, r1
   b8ae2:	f7ff bb21 	b.w	b8128 <__ieee754_pow+0x98>
   b8ae6:	9b00      	ldr	r3, [sp, #0]
   b8ae8:	2b01      	cmp	r3, #1
   b8aea:	f47f ab1d 	bne.w	b8128 <__ieee754_pow+0x98>
   b8aee:	ee10 1a90 	vmov	r1, s1
   b8af2:	ee10 2a10 	vmov	r2, s0
   b8af6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b8afa:	ec43 2b10 	vmov	d0, r2, r3
   b8afe:	f7ff bb13 	b.w	b8128 <__ieee754_pow+0x98>
   b8b02:	ed9f 7b27 	vldr	d7, [pc, #156]	; b8ba0 <__ieee754_pow+0xb10>
   b8b06:	eeb0 ca47 	vmov.f32	s24, s14
   b8b0a:	eef0 ca67 	vmov.f32	s25, s15
   b8b0e:	ed9f 7b26 	vldr	d7, [pc, #152]	; b8ba8 <__ieee754_pow+0xb18>
   b8b12:	eeb0 da47 	vmov.f32	s26, s14
   b8b16:	eef0 da67 	vmov.f32	s27, s15
   b8b1a:	ed9f 7b25 	vldr	d7, [pc, #148]	; b8bb0 <__ieee754_pow+0xb20>
   b8b1e:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   b8b22:	ec53 2b17 	vmov	r2, r3, d7
   b8b26:	f7ff bbeb 	b.w	b8300 <__ieee754_pow+0x270>
   b8b2a:	ec45 4b10 	vmov	d0, r4, r5
   b8b2e:	9200      	str	r2, [sp, #0]
   b8b30:	f000 f914 	bl	b8d5c <fabs>
   b8b34:	9a00      	ldr	r2, [sp, #0]
   b8b36:	2a00      	cmp	r2, #0
   b8b38:	f47f ab92 	bne.w	b8260 <__ieee754_pow+0x1d0>
   b8b3c:	9200      	str	r2, [sp, #0]
   b8b3e:	f7ff bb26 	b.w	b818e <__ieee754_pow+0xfe>
   b8b42:	ec41 0b10 	vmov	d0, r0, r1
   b8b46:	9800      	ldr	r0, [sp, #0]
   b8b48:	f000 f9c2 	bl	b8ed0 <scalbn>
   b8b4c:	ec51 0b10 	vmov	r0, r1, d0
   b8b50:	e6b5      	b.n	b88be <__ieee754_pow+0x82e>
   b8b52:	f000 0001 	and.w	r0, r0, #1
   b8b56:	f1c0 0102 	rsb	r1, r0, #2
   b8b5a:	9100      	str	r1, [sp, #0]
   b8b5c:	2b00      	cmp	r3, #0
   b8b5e:	f43f aac1 	beq.w	b80e4 <__ieee754_pow+0x54>
   b8b62:	f7ff bb0d 	b.w	b8180 <__ieee754_pow+0xf0>
   b8b66:	f000 0001 	and.w	r0, r0, #1
   b8b6a:	f1c0 0302 	rsb	r3, r0, #2
   b8b6e:	9300      	str	r3, [sp, #0]
   b8b70:	f7ff bab8 	b.w	b80e4 <__ieee754_pow+0x54>
   b8b74:	151b      	asrs	r3, r3, #20
   b8b76:	e5bb      	b.n	b86f0 <__ieee754_pow+0x660>
   b8b78:	60000000 	.word	0x60000000
   b8b7c:	3ff71547 	.word	0x3ff71547
   b8b80:	f85ddf44 	.word	0xf85ddf44
   b8b84:	3e54ae0b 	.word	0x3e54ae0b
   b8b88:	55555555 	.word	0x55555555
   b8b8c:	3fd55555 	.word	0x3fd55555
   b8b90:	652b82fe 	.word	0x652b82fe
   b8b94:	3ff71547 	.word	0x3ff71547
   b8b98:	8800759c 	.word	0x8800759c
   b8b9c:	7e37e43c 	.word	0x7e37e43c
   b8ba0:	40000000 	.word	0x40000000
   b8ba4:	3fe2b803 	.word	0x3fe2b803
   b8ba8:	43cfd006 	.word	0x43cfd006
   b8bac:	3e4cfdeb 	.word	0x3e4cfdeb
   b8bb0:	00000000 	.word	0x00000000
   b8bb4:	3ff80000 	.word	0x3ff80000
   b8bb8:	3ff00000 	.word	0x3ff00000
   b8bbc:	3fd00000 	.word	0x3fd00000
   b8bc0:	3fe00000 	.word	0x3fe00000

000b8bc4 <__ieee754_sqrt>:
   b8bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8bc8:	4a63      	ldr	r2, [pc, #396]	; (b8d58 <__ieee754_sqrt+0x194>)
   b8bca:	ec55 4b10 	vmov	r4, r5, d0
   b8bce:	43aa      	bics	r2, r5
   b8bd0:	f000 809f 	beq.w	b8d12 <__ieee754_sqrt+0x14e>
   b8bd4:	2d00      	cmp	r5, #0
   b8bd6:	ee10 ca10 	vmov	ip, s0
   b8bda:	462b      	mov	r3, r5
   b8bdc:	dd54      	ble.n	b8c88 <__ieee754_sqrt+0xc4>
   b8bde:	1529      	asrs	r1, r5, #20
   b8be0:	d063      	beq.n	b8caa <__ieee754_sqrt+0xe6>
   b8be2:	f3c3 0313 	ubfx	r3, r3, #0, #20
   b8be6:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   b8bea:	07c9      	lsls	r1, r1, #31
   b8bec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b8bf0:	d404      	bmi.n	b8bfc <__ieee754_sqrt+0x38>
   b8bf2:	005b      	lsls	r3, r3, #1
   b8bf4:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   b8bf8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b8bfc:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   b8c00:	2600      	movs	r6, #0
   b8c02:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   b8c06:	107f      	asrs	r7, r7, #1
   b8c08:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b8c0c:	f04f 0e16 	mov.w	lr, #22
   b8c10:	4634      	mov	r4, r6
   b8c12:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   b8c16:	18a1      	adds	r1, r4, r2
   b8c18:	4299      	cmp	r1, r3
   b8c1a:	dc02      	bgt.n	b8c22 <__ieee754_sqrt+0x5e>
   b8c1c:	1a5b      	subs	r3, r3, r1
   b8c1e:	188c      	adds	r4, r1, r2
   b8c20:	4416      	add	r6, r2
   b8c22:	005b      	lsls	r3, r3, #1
   b8c24:	f1be 0e01 	subs.w	lr, lr, #1
   b8c28:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   b8c2c:	ea4f 0252 	mov.w	r2, r2, lsr #1
   b8c30:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b8c34:	d1ef      	bne.n	b8c16 <__ieee754_sqrt+0x52>
   b8c36:	4675      	mov	r5, lr
   b8c38:	2020      	movs	r0, #32
   b8c3a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   b8c3e:	e00a      	b.n	b8c56 <__ieee754_sqrt+0x92>
   b8c40:	d044      	beq.n	b8ccc <__ieee754_sqrt+0x108>
   b8c42:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   b8c46:	3801      	subs	r0, #1
   b8c48:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   b8c4c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b8c50:	ea4f 0252 	mov.w	r2, r2, lsr #1
   b8c54:	d043      	beq.n	b8cde <__ieee754_sqrt+0x11a>
   b8c56:	42a3      	cmp	r3, r4
   b8c58:	eb02 010e 	add.w	r1, r2, lr
   b8c5c:	ddf0      	ble.n	b8c40 <__ieee754_sqrt+0x7c>
   b8c5e:	2900      	cmp	r1, #0
   b8c60:	eb01 0e02 	add.w	lr, r1, r2
   b8c64:	db0a      	blt.n	b8c7c <__ieee754_sqrt+0xb8>
   b8c66:	46a0      	mov	r8, r4
   b8c68:	1b1b      	subs	r3, r3, r4
   b8c6a:	4561      	cmp	r1, ip
   b8c6c:	bf88      	it	hi
   b8c6e:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   b8c72:	ebac 0c01 	sub.w	ip, ip, r1
   b8c76:	4415      	add	r5, r2
   b8c78:	4644      	mov	r4, r8
   b8c7a:	e7e2      	b.n	b8c42 <__ieee754_sqrt+0x7e>
   b8c7c:	f1be 0f00 	cmp.w	lr, #0
   b8c80:	dbf1      	blt.n	b8c66 <__ieee754_sqrt+0xa2>
   b8c82:	f104 0801 	add.w	r8, r4, #1
   b8c86:	e7ef      	b.n	b8c68 <__ieee754_sqrt+0xa4>
   b8c88:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   b8c8c:	4322      	orrs	r2, r4
   b8c8e:	d038      	beq.n	b8d02 <__ieee754_sqrt+0x13e>
   b8c90:	2d00      	cmp	r5, #0
   b8c92:	d14e      	bne.n	b8d32 <__ieee754_sqrt+0x16e>
   b8c94:	4629      	mov	r1, r5
   b8c96:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   b8c9a:	3915      	subs	r1, #21
   b8c9c:	4613      	mov	r3, r2
   b8c9e:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   b8ca2:	2a00      	cmp	r2, #0
   b8ca4:	d0f7      	beq.n	b8c96 <__ieee754_sqrt+0xd2>
   b8ca6:	02d6      	lsls	r6, r2, #11
   b8ca8:	d450      	bmi.n	b8d4c <__ieee754_sqrt+0x188>
   b8caa:	2000      	movs	r0, #0
   b8cac:	005b      	lsls	r3, r3, #1
   b8cae:	02dd      	lsls	r5, r3, #11
   b8cb0:	4604      	mov	r4, r0
   b8cb2:	f100 0001 	add.w	r0, r0, #1
   b8cb6:	d5f9      	bpl.n	b8cac <__ieee754_sqrt+0xe8>
   b8cb8:	461a      	mov	r2, r3
   b8cba:	4663      	mov	r3, ip
   b8cbc:	fa0c fc00 	lsl.w	ip, ip, r0
   b8cc0:	f1c0 0020 	rsb	r0, r0, #32
   b8cc4:	40c3      	lsrs	r3, r0
   b8cc6:	1b09      	subs	r1, r1, r4
   b8cc8:	4313      	orrs	r3, r2
   b8cca:	e78a      	b.n	b8be2 <__ieee754_sqrt+0x1e>
   b8ccc:	4561      	cmp	r1, ip
   b8cce:	d8b8      	bhi.n	b8c42 <__ieee754_sqrt+0x7e>
   b8cd0:	2900      	cmp	r1, #0
   b8cd2:	eb01 0e02 	add.w	lr, r1, r2
   b8cd6:	dbd1      	blt.n	b8c7c <__ieee754_sqrt+0xb8>
   b8cd8:	4698      	mov	r8, r3
   b8cda:	2300      	movs	r3, #0
   b8cdc:	e7c9      	b.n	b8c72 <__ieee754_sqrt+0xae>
   b8cde:	ea53 030c 	orrs.w	r3, r3, ip
   b8ce2:	d110      	bne.n	b8d06 <__ieee754_sqrt+0x142>
   b8ce4:	0868      	lsrs	r0, r5, #1
   b8ce6:	1071      	asrs	r1, r6, #1
   b8ce8:	07f3      	lsls	r3, r6, #31
   b8cea:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   b8cee:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   b8cf2:	bf48      	it	mi
   b8cf4:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   b8cf8:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   b8cfc:	4602      	mov	r2, r0
   b8cfe:	ec43 2b10 	vmov	d0, r2, r3
   b8d02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8d06:	1c6a      	adds	r2, r5, #1
   b8d08:	bf16      	itet	ne
   b8d0a:	1c68      	addne	r0, r5, #1
   b8d0c:	3601      	addeq	r6, #1
   b8d0e:	0840      	lsrne	r0, r0, #1
   b8d10:	e7e9      	b.n	b8ce6 <__ieee754_sqrt+0x122>
   b8d12:	ee10 2a10 	vmov	r2, s0
   b8d16:	ee10 0a10 	vmov	r0, s0
   b8d1a:	462b      	mov	r3, r5
   b8d1c:	4629      	mov	r1, r5
   b8d1e:	f000 fb25 	bl	b936c <__aeabi_dmul>
   b8d22:	4622      	mov	r2, r4
   b8d24:	462b      	mov	r3, r5
   b8d26:	f000 f96b 	bl	b9000 <__adddf3>
   b8d2a:	ec41 0b10 	vmov	d0, r0, r1
   b8d2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8d32:	ee10 2a10 	vmov	r2, s0
   b8d36:	4620      	mov	r0, r4
   b8d38:	4629      	mov	r1, r5
   b8d3a:	f000 f95f 	bl	b8ffc <__aeabi_dsub>
   b8d3e:	4602      	mov	r2, r0
   b8d40:	460b      	mov	r3, r1
   b8d42:	f000 fc3d 	bl	b95c0 <__aeabi_ddiv>
   b8d46:	ec41 0b10 	vmov	d0, r0, r1
   b8d4a:	e7da      	b.n	b8d02 <__ieee754_sqrt+0x13e>
   b8d4c:	4663      	mov	r3, ip
   b8d4e:	2020      	movs	r0, #32
   b8d50:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b8d54:	e7b6      	b.n	b8cc4 <__ieee754_sqrt+0x100>
   b8d56:	bf00      	nop
   b8d58:	7ff00000 	.word	0x7ff00000

000b8d5c <fabs>:
   b8d5c:	ec51 0b10 	vmov	r0, r1, d0
   b8d60:	ee10 2a10 	vmov	r2, s0
   b8d64:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   b8d68:	ec43 2b10 	vmov	d0, r2, r3
   b8d6c:	4770      	bx	lr
   b8d6e:	bf00      	nop

000b8d70 <finite>:
   b8d70:	b082      	sub	sp, #8
   b8d72:	ed8d 0b00 	vstr	d0, [sp]
   b8d76:	9801      	ldr	r0, [sp, #4]
   b8d78:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   b8d7c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   b8d80:	0fc0      	lsrs	r0, r0, #31
   b8d82:	b002      	add	sp, #8
   b8d84:	4770      	bx	lr
   b8d86:	bf00      	nop

000b8d88 <nan>:
   b8d88:	ed9f 0b01 	vldr	d0, [pc, #4]	; b8d90 <nan+0x8>
   b8d8c:	4770      	bx	lr
   b8d8e:	bf00      	nop
   b8d90:	00000000 	.word	0x00000000
   b8d94:	7ff80000 	.word	0x7ff80000

000b8d98 <rint>:
   b8d98:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8d9a:	ec53 2b10 	vmov	r2, r3, d0
   b8d9e:	f3c3 5c0a 	ubfx	ip, r3, #20, #11
   b8da2:	f2ac 31ff 	subw	r1, ip, #1023	; 0x3ff
   b8da6:	2913      	cmp	r1, #19
   b8da8:	ee10 0a10 	vmov	r0, s0
   b8dac:	b083      	sub	sp, #12
   b8dae:	461c      	mov	r4, r3
   b8db0:	ea4f 7ed3 	mov.w	lr, r3, lsr #31
   b8db4:	dc3a      	bgt.n	b8e2c <rint+0x94>
   b8db6:	2900      	cmp	r1, #0
   b8db8:	db30      	blt.n	b8e1c <rint+0x84>
   b8dba:	4d42      	ldr	r5, [pc, #264]	; (b8ec4 <rint+0x12c>)
   b8dbc:	fa45 fc01 	asr.w	ip, r5, r1
   b8dc0:	ea03 050c 	and.w	r5, r3, ip
   b8dc4:	4315      	orrs	r5, r2
   b8dc6:	d02d      	beq.n	b8e24 <rint+0x8c>
   b8dc8:	ea03 035c 	and.w	r3, r3, ip, lsr #1
   b8dcc:	4318      	orrs	r0, r3
   b8dce:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   b8dd2:	d00c      	beq.n	b8dee <rint+0x56>
   b8dd4:	ea24 0c0c 	bic.w	ip, r4, ip
   b8dd8:	f44f 2480 	mov.w	r4, #262144	; 0x40000
   b8ddc:	2913      	cmp	r1, #19
   b8dde:	fa44 f101 	asr.w	r1, r4, r1
   b8de2:	bf0c      	ite	eq
   b8de4:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
   b8de8:	2000      	movne	r0, #0
   b8dea:	ea4c 0401 	orr.w	r4, ip, r1
   b8dee:	4936      	ldr	r1, [pc, #216]	; (b8ec8 <rint+0x130>)
   b8df0:	eb01 0ece 	add.w	lr, r1, lr, lsl #3
   b8df4:	4623      	mov	r3, r4
   b8df6:	e9de 4500 	ldrd	r4, r5, [lr]
   b8dfa:	4602      	mov	r2, r0
   b8dfc:	4629      	mov	r1, r5
   b8dfe:	4620      	mov	r0, r4
   b8e00:	f000 f8fe 	bl	b9000 <__adddf3>
   b8e04:	e9cd 0100 	strd	r0, r1, [sp]
   b8e08:	e9dd 0100 	ldrd	r0, r1, [sp]
   b8e0c:	4622      	mov	r2, r4
   b8e0e:	462b      	mov	r3, r5
   b8e10:	f000 f8f4 	bl	b8ffc <__aeabi_dsub>
   b8e14:	ec41 0b10 	vmov	d0, r0, r1
   b8e18:	b003      	add	sp, #12
   b8e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b8e1c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   b8e20:	4311      	orrs	r1, r2
   b8e22:	d124      	bne.n	b8e6e <rint+0xd6>
   b8e24:	ec43 2b10 	vmov	d0, r2, r3
   b8e28:	b003      	add	sp, #12
   b8e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b8e2c:	2933      	cmp	r1, #51	; 0x33
   b8e2e:	dd08      	ble.n	b8e42 <rint+0xaa>
   b8e30:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   b8e34:	d1f6      	bne.n	b8e24 <rint+0x8c>
   b8e36:	4619      	mov	r1, r3
   b8e38:	f000 f8e2 	bl	b9000 <__adddf3>
   b8e3c:	ec41 0b10 	vmov	d0, r0, r1
   b8e40:	e7f2      	b.n	b8e28 <rint+0x90>
   b8e42:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
   b8e46:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b8e4a:	fa21 f10c 	lsr.w	r1, r1, ip
   b8e4e:	420a      	tst	r2, r1
   b8e50:	d0e8      	beq.n	b8e24 <rint+0x8c>
   b8e52:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
   b8e56:	ea4f 0351 	mov.w	r3, r1, lsr #1
   b8e5a:	d0c8      	beq.n	b8dee <rint+0x56>
   b8e5c:	ea20 0303 	bic.w	r3, r0, r3
   b8e60:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   b8e64:	fa40 fc0c 	asr.w	ip, r0, ip
   b8e68:	ea43 000c 	orr.w	r0, r3, ip
   b8e6c:	e7bf      	b.n	b8dee <rint+0x56>
   b8e6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
   b8e72:	4318      	orrs	r0, r3
   b8e74:	4a14      	ldr	r2, [pc, #80]	; (b8ec8 <rint+0x130>)
   b8e76:	4243      	negs	r3, r0
   b8e78:	4303      	orrs	r3, r0
   b8e7a:	eb02 0ece 	add.w	lr, r2, lr, lsl #3
   b8e7e:	0b1b      	lsrs	r3, r3, #12
   b8e80:	0c62      	lsrs	r2, r4, #17
   b8e82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
   b8e86:	0452      	lsls	r2, r2, #17
   b8e88:	ea43 0702 	orr.w	r7, r3, r2
   b8e8c:	463b      	mov	r3, r7
   b8e8e:	e9de 6700 	ldrd	r6, r7, [lr]
   b8e92:	ee10 2a10 	vmov	r2, s0
   b8e96:	4630      	mov	r0, r6
   b8e98:	4639      	mov	r1, r7
   b8e9a:	f000 f8b1 	bl	b9000 <__adddf3>
   b8e9e:	e9cd 0100 	strd	r0, r1, [sp]
   b8ea2:	4632      	mov	r2, r6
   b8ea4:	463b      	mov	r3, r7
   b8ea6:	e9dd 0100 	ldrd	r0, r1, [sp]
   b8eaa:	f000 f8a7 	bl	b8ffc <__aeabi_dsub>
   b8eae:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
   b8eb2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b8eb6:	4602      	mov	r2, r0
   b8eb8:	ea41 0304 	orr.w	r3, r1, r4
   b8ebc:	ec43 2b10 	vmov	d0, r2, r3
   b8ec0:	b003      	add	sp, #12
   b8ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b8ec4:	000fffff 	.word	0x000fffff
   b8ec8:	000ba628 	.word	0x000ba628
   b8ecc:	00000000 	.word	0x00000000

000b8ed0 <scalbn>:
   b8ed0:	b538      	push	{r3, r4, r5, lr}
   b8ed2:	ec53 2b10 	vmov	r2, r3, d0
   b8ed6:	f3c3 510a 	ubfx	r1, r3, #20, #11
   b8eda:	4604      	mov	r4, r0
   b8edc:	469c      	mov	ip, r3
   b8ede:	bb89      	cbnz	r1, b8f44 <scalbn+0x74>
   b8ee0:	ee10 1a10 	vmov	r1, s0
   b8ee4:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
   b8ee8:	ea5c 0101 	orrs.w	r1, ip, r1
   b8eec:	d029      	beq.n	b8f42 <scalbn+0x72>
   b8eee:	4619      	mov	r1, r3
   b8ef0:	2200      	movs	r2, #0
   b8ef2:	4b3d      	ldr	r3, [pc, #244]	; (b8fe8 <scalbn+0x118>)
   b8ef4:	4d3d      	ldr	r5, [pc, #244]	; (b8fec <scalbn+0x11c>)
   b8ef6:	ee10 0a10 	vmov	r0, s0
   b8efa:	f000 fa37 	bl	b936c <__aeabi_dmul>
   b8efe:	42ac      	cmp	r4, r5
   b8f00:	4602      	mov	r2, r0
   b8f02:	460b      	mov	r3, r1
   b8f04:	db16      	blt.n	b8f34 <scalbn+0x64>
   b8f06:	468c      	mov	ip, r1
   b8f08:	f3c1 510a 	ubfx	r1, r1, #20, #11
   b8f0c:	3936      	subs	r1, #54	; 0x36
   b8f0e:	4421      	add	r1, r4
   b8f10:	f240 70fe 	movw	r0, #2046	; 0x7fe
   b8f14:	4281      	cmp	r1, r0
   b8f16:	dc21      	bgt.n	b8f5c <scalbn+0x8c>
   b8f18:	2900      	cmp	r1, #0
   b8f1a:	dc47      	bgt.n	b8fac <scalbn+0xdc>
   b8f1c:	f111 0f35 	cmn.w	r1, #53	; 0x35
   b8f20:	da34      	bge.n	b8f8c <scalbn+0xbc>
   b8f22:	f24c 3150 	movw	r1, #50000	; 0xc350
   b8f26:	428c      	cmp	r4, r1
   b8f28:	dc18      	bgt.n	b8f5c <scalbn+0x8c>
   b8f2a:	2b00      	cmp	r3, #0
   b8f2c:	a126      	add	r1, pc, #152	; (adr r1, b8fc8 <scalbn+0xf8>)
   b8f2e:	e9d1 0100 	ldrd	r0, r1, [r1]
   b8f32:	db44      	blt.n	b8fbe <scalbn+0xee>
   b8f34:	a324      	add	r3, pc, #144	; (adr r3, b8fc8 <scalbn+0xf8>)
   b8f36:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8f3a:	f000 fa17 	bl	b936c <__aeabi_dmul>
   b8f3e:	ec41 0b10 	vmov	d0, r0, r1
   b8f42:	bd38      	pop	{r3, r4, r5, pc}
   b8f44:	f240 70ff 	movw	r0, #2047	; 0x7ff
   b8f48:	4281      	cmp	r1, r0
   b8f4a:	d1e0      	bne.n	b8f0e <scalbn+0x3e>
   b8f4c:	ee10 0a10 	vmov	r0, s0
   b8f50:	4619      	mov	r1, r3
   b8f52:	f000 f855 	bl	b9000 <__adddf3>
   b8f56:	ec41 0b10 	vmov	d0, r0, r1
   b8f5a:	bd38      	pop	{r3, r4, r5, pc}
   b8f5c:	2b00      	cmp	r3, #0
   b8f5e:	a11c      	add	r1, pc, #112	; (adr r1, b8fd0 <scalbn+0x100>)
   b8f60:	e9d1 0100 	ldrd	r0, r1, [r1]
   b8f64:	db07      	blt.n	b8f76 <scalbn+0xa6>
   b8f66:	a31a      	add	r3, pc, #104	; (adr r3, b8fd0 <scalbn+0x100>)
   b8f68:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8f6c:	f000 f9fe 	bl	b936c <__aeabi_dmul>
   b8f70:	ec41 0b10 	vmov	d0, r0, r1
   b8f74:	bd38      	pop	{r3, r4, r5, pc}
   b8f76:	a118      	add	r1, pc, #96	; (adr r1, b8fd8 <scalbn+0x108>)
   b8f78:	e9d1 0100 	ldrd	r0, r1, [r1]
   b8f7c:	a314      	add	r3, pc, #80	; (adr r3, b8fd0 <scalbn+0x100>)
   b8f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8f82:	f000 f9f3 	bl	b936c <__aeabi_dmul>
   b8f86:	ec41 0b10 	vmov	d0, r0, r1
   b8f8a:	e7f3      	b.n	b8f74 <scalbn+0xa4>
   b8f8c:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   b8f90:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   b8f94:	3136      	adds	r1, #54	; 0x36
   b8f96:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   b8f9a:	4610      	mov	r0, r2
   b8f9c:	4619      	mov	r1, r3
   b8f9e:	2200      	movs	r2, #0
   b8fa0:	4b13      	ldr	r3, [pc, #76]	; (b8ff0 <scalbn+0x120>)
   b8fa2:	f000 f9e3 	bl	b936c <__aeabi_dmul>
   b8fa6:	ec41 0b10 	vmov	d0, r0, r1
   b8faa:	bd38      	pop	{r3, r4, r5, pc}
   b8fac:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   b8fb0:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   b8fb4:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   b8fb8:	ec43 2b10 	vmov	d0, r2, r3
   b8fbc:	bd38      	pop	{r3, r4, r5, pc}
   b8fbe:	a108      	add	r1, pc, #32	; (adr r1, b8fe0 <scalbn+0x110>)
   b8fc0:	e9d1 0100 	ldrd	r0, r1, [r1]
   b8fc4:	e7b6      	b.n	b8f34 <scalbn+0x64>
   b8fc6:	bf00      	nop
   b8fc8:	c2f8f359 	.word	0xc2f8f359
   b8fcc:	01a56e1f 	.word	0x01a56e1f
   b8fd0:	8800759c 	.word	0x8800759c
   b8fd4:	7e37e43c 	.word	0x7e37e43c
   b8fd8:	8800759c 	.word	0x8800759c
   b8fdc:	fe37e43c 	.word	0xfe37e43c
   b8fe0:	c2f8f359 	.word	0xc2f8f359
   b8fe4:	81a56e1f 	.word	0x81a56e1f
   b8fe8:	43500000 	.word	0x43500000
   b8fec:	ffff3cb0 	.word	0xffff3cb0
   b8ff0:	3c900000 	.word	0x3c900000

000b8ff4 <__aeabi_drsub>:
   b8ff4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b8ff8:	e002      	b.n	b9000 <__adddf3>
   b8ffa:	bf00      	nop

000b8ffc <__aeabi_dsub>:
   b8ffc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b9000 <__adddf3>:
   b9000:	b530      	push	{r4, r5, lr}
   b9002:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b9006:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b900a:	ea94 0f05 	teq	r4, r5
   b900e:	bf08      	it	eq
   b9010:	ea90 0f02 	teqeq	r0, r2
   b9014:	bf1f      	itttt	ne
   b9016:	ea54 0c00 	orrsne.w	ip, r4, r0
   b901a:	ea55 0c02 	orrsne.w	ip, r5, r2
   b901e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b9022:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b9026:	f000 80e2 	beq.w	b91ee <__adddf3+0x1ee>
   b902a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b902e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b9032:	bfb8      	it	lt
   b9034:	426d      	neglt	r5, r5
   b9036:	dd0c      	ble.n	b9052 <__adddf3+0x52>
   b9038:	442c      	add	r4, r5
   b903a:	ea80 0202 	eor.w	r2, r0, r2
   b903e:	ea81 0303 	eor.w	r3, r1, r3
   b9042:	ea82 0000 	eor.w	r0, r2, r0
   b9046:	ea83 0101 	eor.w	r1, r3, r1
   b904a:	ea80 0202 	eor.w	r2, r0, r2
   b904e:	ea81 0303 	eor.w	r3, r1, r3
   b9052:	2d36      	cmp	r5, #54	; 0x36
   b9054:	bf88      	it	hi
   b9056:	bd30      	pophi	{r4, r5, pc}
   b9058:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b905c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b9060:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b9064:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b9068:	d002      	beq.n	b9070 <__adddf3+0x70>
   b906a:	4240      	negs	r0, r0
   b906c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b9070:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b9074:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b9078:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b907c:	d002      	beq.n	b9084 <__adddf3+0x84>
   b907e:	4252      	negs	r2, r2
   b9080:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b9084:	ea94 0f05 	teq	r4, r5
   b9088:	f000 80a7 	beq.w	b91da <__adddf3+0x1da>
   b908c:	f1a4 0401 	sub.w	r4, r4, #1
   b9090:	f1d5 0e20 	rsbs	lr, r5, #32
   b9094:	db0d      	blt.n	b90b2 <__adddf3+0xb2>
   b9096:	fa02 fc0e 	lsl.w	ip, r2, lr
   b909a:	fa22 f205 	lsr.w	r2, r2, r5
   b909e:	1880      	adds	r0, r0, r2
   b90a0:	f141 0100 	adc.w	r1, r1, #0
   b90a4:	fa03 f20e 	lsl.w	r2, r3, lr
   b90a8:	1880      	adds	r0, r0, r2
   b90aa:	fa43 f305 	asr.w	r3, r3, r5
   b90ae:	4159      	adcs	r1, r3
   b90b0:	e00e      	b.n	b90d0 <__adddf3+0xd0>
   b90b2:	f1a5 0520 	sub.w	r5, r5, #32
   b90b6:	f10e 0e20 	add.w	lr, lr, #32
   b90ba:	2a01      	cmp	r2, #1
   b90bc:	fa03 fc0e 	lsl.w	ip, r3, lr
   b90c0:	bf28      	it	cs
   b90c2:	f04c 0c02 	orrcs.w	ip, ip, #2
   b90c6:	fa43 f305 	asr.w	r3, r3, r5
   b90ca:	18c0      	adds	r0, r0, r3
   b90cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b90d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b90d4:	d507      	bpl.n	b90e6 <__adddf3+0xe6>
   b90d6:	f04f 0e00 	mov.w	lr, #0
   b90da:	f1dc 0c00 	rsbs	ip, ip, #0
   b90de:	eb7e 0000 	sbcs.w	r0, lr, r0
   b90e2:	eb6e 0101 	sbc.w	r1, lr, r1
   b90e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b90ea:	d31b      	bcc.n	b9124 <__adddf3+0x124>
   b90ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b90f0:	d30c      	bcc.n	b910c <__adddf3+0x10c>
   b90f2:	0849      	lsrs	r1, r1, #1
   b90f4:	ea5f 0030 	movs.w	r0, r0, rrx
   b90f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b90fc:	f104 0401 	add.w	r4, r4, #1
   b9100:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b9104:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b9108:	f080 809a 	bcs.w	b9240 <__adddf3+0x240>
   b910c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b9110:	bf08      	it	eq
   b9112:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b9116:	f150 0000 	adcs.w	r0, r0, #0
   b911a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b911e:	ea41 0105 	orr.w	r1, r1, r5
   b9122:	bd30      	pop	{r4, r5, pc}
   b9124:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b9128:	4140      	adcs	r0, r0
   b912a:	eb41 0101 	adc.w	r1, r1, r1
   b912e:	3c01      	subs	r4, #1
   b9130:	bf28      	it	cs
   b9132:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b9136:	d2e9      	bcs.n	b910c <__adddf3+0x10c>
   b9138:	f091 0f00 	teq	r1, #0
   b913c:	bf04      	itt	eq
   b913e:	4601      	moveq	r1, r0
   b9140:	2000      	moveq	r0, #0
   b9142:	fab1 f381 	clz	r3, r1
   b9146:	bf08      	it	eq
   b9148:	3320      	addeq	r3, #32
   b914a:	f1a3 030b 	sub.w	r3, r3, #11
   b914e:	f1b3 0220 	subs.w	r2, r3, #32
   b9152:	da0c      	bge.n	b916e <__adddf3+0x16e>
   b9154:	320c      	adds	r2, #12
   b9156:	dd08      	ble.n	b916a <__adddf3+0x16a>
   b9158:	f102 0c14 	add.w	ip, r2, #20
   b915c:	f1c2 020c 	rsb	r2, r2, #12
   b9160:	fa01 f00c 	lsl.w	r0, r1, ip
   b9164:	fa21 f102 	lsr.w	r1, r1, r2
   b9168:	e00c      	b.n	b9184 <__adddf3+0x184>
   b916a:	f102 0214 	add.w	r2, r2, #20
   b916e:	bfd8      	it	le
   b9170:	f1c2 0c20 	rsble	ip, r2, #32
   b9174:	fa01 f102 	lsl.w	r1, r1, r2
   b9178:	fa20 fc0c 	lsr.w	ip, r0, ip
   b917c:	bfdc      	itt	le
   b917e:	ea41 010c 	orrle.w	r1, r1, ip
   b9182:	4090      	lslle	r0, r2
   b9184:	1ae4      	subs	r4, r4, r3
   b9186:	bfa2      	ittt	ge
   b9188:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b918c:	4329      	orrge	r1, r5
   b918e:	bd30      	popge	{r4, r5, pc}
   b9190:	ea6f 0404 	mvn.w	r4, r4
   b9194:	3c1f      	subs	r4, #31
   b9196:	da1c      	bge.n	b91d2 <__adddf3+0x1d2>
   b9198:	340c      	adds	r4, #12
   b919a:	dc0e      	bgt.n	b91ba <__adddf3+0x1ba>
   b919c:	f104 0414 	add.w	r4, r4, #20
   b91a0:	f1c4 0220 	rsb	r2, r4, #32
   b91a4:	fa20 f004 	lsr.w	r0, r0, r4
   b91a8:	fa01 f302 	lsl.w	r3, r1, r2
   b91ac:	ea40 0003 	orr.w	r0, r0, r3
   b91b0:	fa21 f304 	lsr.w	r3, r1, r4
   b91b4:	ea45 0103 	orr.w	r1, r5, r3
   b91b8:	bd30      	pop	{r4, r5, pc}
   b91ba:	f1c4 040c 	rsb	r4, r4, #12
   b91be:	f1c4 0220 	rsb	r2, r4, #32
   b91c2:	fa20 f002 	lsr.w	r0, r0, r2
   b91c6:	fa01 f304 	lsl.w	r3, r1, r4
   b91ca:	ea40 0003 	orr.w	r0, r0, r3
   b91ce:	4629      	mov	r1, r5
   b91d0:	bd30      	pop	{r4, r5, pc}
   b91d2:	fa21 f004 	lsr.w	r0, r1, r4
   b91d6:	4629      	mov	r1, r5
   b91d8:	bd30      	pop	{r4, r5, pc}
   b91da:	f094 0f00 	teq	r4, #0
   b91de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b91e2:	bf06      	itte	eq
   b91e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b91e8:	3401      	addeq	r4, #1
   b91ea:	3d01      	subne	r5, #1
   b91ec:	e74e      	b.n	b908c <__adddf3+0x8c>
   b91ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b91f2:	bf18      	it	ne
   b91f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b91f8:	d029      	beq.n	b924e <__adddf3+0x24e>
   b91fa:	ea94 0f05 	teq	r4, r5
   b91fe:	bf08      	it	eq
   b9200:	ea90 0f02 	teqeq	r0, r2
   b9204:	d005      	beq.n	b9212 <__adddf3+0x212>
   b9206:	ea54 0c00 	orrs.w	ip, r4, r0
   b920a:	bf04      	itt	eq
   b920c:	4619      	moveq	r1, r3
   b920e:	4610      	moveq	r0, r2
   b9210:	bd30      	pop	{r4, r5, pc}
   b9212:	ea91 0f03 	teq	r1, r3
   b9216:	bf1e      	ittt	ne
   b9218:	2100      	movne	r1, #0
   b921a:	2000      	movne	r0, #0
   b921c:	bd30      	popne	{r4, r5, pc}
   b921e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b9222:	d105      	bne.n	b9230 <__adddf3+0x230>
   b9224:	0040      	lsls	r0, r0, #1
   b9226:	4149      	adcs	r1, r1
   b9228:	bf28      	it	cs
   b922a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b922e:	bd30      	pop	{r4, r5, pc}
   b9230:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b9234:	bf3c      	itt	cc
   b9236:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b923a:	bd30      	popcc	{r4, r5, pc}
   b923c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b9240:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b9244:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b9248:	f04f 0000 	mov.w	r0, #0
   b924c:	bd30      	pop	{r4, r5, pc}
   b924e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b9252:	bf1a      	itte	ne
   b9254:	4619      	movne	r1, r3
   b9256:	4610      	movne	r0, r2
   b9258:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b925c:	bf1c      	itt	ne
   b925e:	460b      	movne	r3, r1
   b9260:	4602      	movne	r2, r0
   b9262:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b9266:	bf06      	itte	eq
   b9268:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b926c:	ea91 0f03 	teqeq	r1, r3
   b9270:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b9274:	bd30      	pop	{r4, r5, pc}
   b9276:	bf00      	nop

000b9278 <__aeabi_ui2d>:
   b9278:	f090 0f00 	teq	r0, #0
   b927c:	bf04      	itt	eq
   b927e:	2100      	moveq	r1, #0
   b9280:	4770      	bxeq	lr
   b9282:	b530      	push	{r4, r5, lr}
   b9284:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b9288:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b928c:	f04f 0500 	mov.w	r5, #0
   b9290:	f04f 0100 	mov.w	r1, #0
   b9294:	e750      	b.n	b9138 <__adddf3+0x138>
   b9296:	bf00      	nop

000b9298 <__aeabi_i2d>:
   b9298:	f090 0f00 	teq	r0, #0
   b929c:	bf04      	itt	eq
   b929e:	2100      	moveq	r1, #0
   b92a0:	4770      	bxeq	lr
   b92a2:	b530      	push	{r4, r5, lr}
   b92a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b92a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b92ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b92b0:	bf48      	it	mi
   b92b2:	4240      	negmi	r0, r0
   b92b4:	f04f 0100 	mov.w	r1, #0
   b92b8:	e73e      	b.n	b9138 <__adddf3+0x138>
   b92ba:	bf00      	nop

000b92bc <__aeabi_f2d>:
   b92bc:	0042      	lsls	r2, r0, #1
   b92be:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b92c2:	ea4f 0131 	mov.w	r1, r1, rrx
   b92c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b92ca:	bf1f      	itttt	ne
   b92cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b92d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b92d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b92d8:	4770      	bxne	lr
   b92da:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b92de:	bf08      	it	eq
   b92e0:	4770      	bxeq	lr
   b92e2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b92e6:	bf04      	itt	eq
   b92e8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b92ec:	4770      	bxeq	lr
   b92ee:	b530      	push	{r4, r5, lr}
   b92f0:	f44f 7460 	mov.w	r4, #896	; 0x380
   b92f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b92f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b92fc:	e71c      	b.n	b9138 <__adddf3+0x138>
   b92fe:	bf00      	nop

000b9300 <__aeabi_ul2d>:
   b9300:	ea50 0201 	orrs.w	r2, r0, r1
   b9304:	bf08      	it	eq
   b9306:	4770      	bxeq	lr
   b9308:	b530      	push	{r4, r5, lr}
   b930a:	f04f 0500 	mov.w	r5, #0
   b930e:	e00a      	b.n	b9326 <__aeabi_l2d+0x16>

000b9310 <__aeabi_l2d>:
   b9310:	ea50 0201 	orrs.w	r2, r0, r1
   b9314:	bf08      	it	eq
   b9316:	4770      	bxeq	lr
   b9318:	b530      	push	{r4, r5, lr}
   b931a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b931e:	d502      	bpl.n	b9326 <__aeabi_l2d+0x16>
   b9320:	4240      	negs	r0, r0
   b9322:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b9326:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b932a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b932e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b9332:	f43f aed8 	beq.w	b90e6 <__adddf3+0xe6>
   b9336:	f04f 0203 	mov.w	r2, #3
   b933a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b933e:	bf18      	it	ne
   b9340:	3203      	addne	r2, #3
   b9342:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b9346:	bf18      	it	ne
   b9348:	3203      	addne	r2, #3
   b934a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b934e:	f1c2 0320 	rsb	r3, r2, #32
   b9352:	fa00 fc03 	lsl.w	ip, r0, r3
   b9356:	fa20 f002 	lsr.w	r0, r0, r2
   b935a:	fa01 fe03 	lsl.w	lr, r1, r3
   b935e:	ea40 000e 	orr.w	r0, r0, lr
   b9362:	fa21 f102 	lsr.w	r1, r1, r2
   b9366:	4414      	add	r4, r2
   b9368:	e6bd      	b.n	b90e6 <__adddf3+0xe6>
   b936a:	bf00      	nop

000b936c <__aeabi_dmul>:
   b936c:	b570      	push	{r4, r5, r6, lr}
   b936e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b9372:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b9376:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b937a:	bf1d      	ittte	ne
   b937c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b9380:	ea94 0f0c 	teqne	r4, ip
   b9384:	ea95 0f0c 	teqne	r5, ip
   b9388:	f000 f8de 	bleq	b9548 <__aeabi_dmul+0x1dc>
   b938c:	442c      	add	r4, r5
   b938e:	ea81 0603 	eor.w	r6, r1, r3
   b9392:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b9396:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b939a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b939e:	bf18      	it	ne
   b93a0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b93a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b93a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b93ac:	d038      	beq.n	b9420 <__aeabi_dmul+0xb4>
   b93ae:	fba0 ce02 	umull	ip, lr, r0, r2
   b93b2:	f04f 0500 	mov.w	r5, #0
   b93b6:	fbe1 e502 	umlal	lr, r5, r1, r2
   b93ba:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b93be:	fbe0 e503 	umlal	lr, r5, r0, r3
   b93c2:	f04f 0600 	mov.w	r6, #0
   b93c6:	fbe1 5603 	umlal	r5, r6, r1, r3
   b93ca:	f09c 0f00 	teq	ip, #0
   b93ce:	bf18      	it	ne
   b93d0:	f04e 0e01 	orrne.w	lr, lr, #1
   b93d4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b93d8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b93dc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b93e0:	d204      	bcs.n	b93ec <__aeabi_dmul+0x80>
   b93e2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b93e6:	416d      	adcs	r5, r5
   b93e8:	eb46 0606 	adc.w	r6, r6, r6
   b93ec:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b93f0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b93f4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b93f8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b93fc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b9400:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b9404:	bf88      	it	hi
   b9406:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b940a:	d81e      	bhi.n	b944a <__aeabi_dmul+0xde>
   b940c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b9410:	bf08      	it	eq
   b9412:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b9416:	f150 0000 	adcs.w	r0, r0, #0
   b941a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b941e:	bd70      	pop	{r4, r5, r6, pc}
   b9420:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b9424:	ea46 0101 	orr.w	r1, r6, r1
   b9428:	ea40 0002 	orr.w	r0, r0, r2
   b942c:	ea81 0103 	eor.w	r1, r1, r3
   b9430:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b9434:	bfc2      	ittt	gt
   b9436:	ebd4 050c 	rsbsgt	r5, r4, ip
   b943a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b943e:	bd70      	popgt	{r4, r5, r6, pc}
   b9440:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b9444:	f04f 0e00 	mov.w	lr, #0
   b9448:	3c01      	subs	r4, #1
   b944a:	f300 80ab 	bgt.w	b95a4 <__aeabi_dmul+0x238>
   b944e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b9452:	bfde      	ittt	le
   b9454:	2000      	movle	r0, #0
   b9456:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b945a:	bd70      	pople	{r4, r5, r6, pc}
   b945c:	f1c4 0400 	rsb	r4, r4, #0
   b9460:	3c20      	subs	r4, #32
   b9462:	da35      	bge.n	b94d0 <__aeabi_dmul+0x164>
   b9464:	340c      	adds	r4, #12
   b9466:	dc1b      	bgt.n	b94a0 <__aeabi_dmul+0x134>
   b9468:	f104 0414 	add.w	r4, r4, #20
   b946c:	f1c4 0520 	rsb	r5, r4, #32
   b9470:	fa00 f305 	lsl.w	r3, r0, r5
   b9474:	fa20 f004 	lsr.w	r0, r0, r4
   b9478:	fa01 f205 	lsl.w	r2, r1, r5
   b947c:	ea40 0002 	orr.w	r0, r0, r2
   b9480:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b9484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b9488:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b948c:	fa21 f604 	lsr.w	r6, r1, r4
   b9490:	eb42 0106 	adc.w	r1, r2, r6
   b9494:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b9498:	bf08      	it	eq
   b949a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b949e:	bd70      	pop	{r4, r5, r6, pc}
   b94a0:	f1c4 040c 	rsb	r4, r4, #12
   b94a4:	f1c4 0520 	rsb	r5, r4, #32
   b94a8:	fa00 f304 	lsl.w	r3, r0, r4
   b94ac:	fa20 f005 	lsr.w	r0, r0, r5
   b94b0:	fa01 f204 	lsl.w	r2, r1, r4
   b94b4:	ea40 0002 	orr.w	r0, r0, r2
   b94b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b94bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b94c0:	f141 0100 	adc.w	r1, r1, #0
   b94c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b94c8:	bf08      	it	eq
   b94ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b94ce:	bd70      	pop	{r4, r5, r6, pc}
   b94d0:	f1c4 0520 	rsb	r5, r4, #32
   b94d4:	fa00 f205 	lsl.w	r2, r0, r5
   b94d8:	ea4e 0e02 	orr.w	lr, lr, r2
   b94dc:	fa20 f304 	lsr.w	r3, r0, r4
   b94e0:	fa01 f205 	lsl.w	r2, r1, r5
   b94e4:	ea43 0302 	orr.w	r3, r3, r2
   b94e8:	fa21 f004 	lsr.w	r0, r1, r4
   b94ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b94f0:	fa21 f204 	lsr.w	r2, r1, r4
   b94f4:	ea20 0002 	bic.w	r0, r0, r2
   b94f8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b94fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b9500:	bf08      	it	eq
   b9502:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b9506:	bd70      	pop	{r4, r5, r6, pc}
   b9508:	f094 0f00 	teq	r4, #0
   b950c:	d10f      	bne.n	b952e <__aeabi_dmul+0x1c2>
   b950e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b9512:	0040      	lsls	r0, r0, #1
   b9514:	eb41 0101 	adc.w	r1, r1, r1
   b9518:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b951c:	bf08      	it	eq
   b951e:	3c01      	subeq	r4, #1
   b9520:	d0f7      	beq.n	b9512 <__aeabi_dmul+0x1a6>
   b9522:	ea41 0106 	orr.w	r1, r1, r6
   b9526:	f095 0f00 	teq	r5, #0
   b952a:	bf18      	it	ne
   b952c:	4770      	bxne	lr
   b952e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b9532:	0052      	lsls	r2, r2, #1
   b9534:	eb43 0303 	adc.w	r3, r3, r3
   b9538:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b953c:	bf08      	it	eq
   b953e:	3d01      	subeq	r5, #1
   b9540:	d0f7      	beq.n	b9532 <__aeabi_dmul+0x1c6>
   b9542:	ea43 0306 	orr.w	r3, r3, r6
   b9546:	4770      	bx	lr
   b9548:	ea94 0f0c 	teq	r4, ip
   b954c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b9550:	bf18      	it	ne
   b9552:	ea95 0f0c 	teqne	r5, ip
   b9556:	d00c      	beq.n	b9572 <__aeabi_dmul+0x206>
   b9558:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b955c:	bf18      	it	ne
   b955e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b9562:	d1d1      	bne.n	b9508 <__aeabi_dmul+0x19c>
   b9564:	ea81 0103 	eor.w	r1, r1, r3
   b9568:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b956c:	f04f 0000 	mov.w	r0, #0
   b9570:	bd70      	pop	{r4, r5, r6, pc}
   b9572:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b9576:	bf06      	itte	eq
   b9578:	4610      	moveq	r0, r2
   b957a:	4619      	moveq	r1, r3
   b957c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b9580:	d019      	beq.n	b95b6 <__aeabi_dmul+0x24a>
   b9582:	ea94 0f0c 	teq	r4, ip
   b9586:	d102      	bne.n	b958e <__aeabi_dmul+0x222>
   b9588:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b958c:	d113      	bne.n	b95b6 <__aeabi_dmul+0x24a>
   b958e:	ea95 0f0c 	teq	r5, ip
   b9592:	d105      	bne.n	b95a0 <__aeabi_dmul+0x234>
   b9594:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b9598:	bf1c      	itt	ne
   b959a:	4610      	movne	r0, r2
   b959c:	4619      	movne	r1, r3
   b959e:	d10a      	bne.n	b95b6 <__aeabi_dmul+0x24a>
   b95a0:	ea81 0103 	eor.w	r1, r1, r3
   b95a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b95a8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b95ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b95b0:	f04f 0000 	mov.w	r0, #0
   b95b4:	bd70      	pop	{r4, r5, r6, pc}
   b95b6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b95ba:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b95be:	bd70      	pop	{r4, r5, r6, pc}

000b95c0 <__aeabi_ddiv>:
   b95c0:	b570      	push	{r4, r5, r6, lr}
   b95c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b95c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b95ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b95ce:	bf1d      	ittte	ne
   b95d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b95d4:	ea94 0f0c 	teqne	r4, ip
   b95d8:	ea95 0f0c 	teqne	r5, ip
   b95dc:	f000 f8a7 	bleq	b972e <__aeabi_ddiv+0x16e>
   b95e0:	eba4 0405 	sub.w	r4, r4, r5
   b95e4:	ea81 0e03 	eor.w	lr, r1, r3
   b95e8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b95ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b95f0:	f000 8088 	beq.w	b9704 <__aeabi_ddiv+0x144>
   b95f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b95f8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b95fc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b9600:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b9604:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b9608:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b960c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b9610:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b9614:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b9618:	429d      	cmp	r5, r3
   b961a:	bf08      	it	eq
   b961c:	4296      	cmpeq	r6, r2
   b961e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b9622:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b9626:	d202      	bcs.n	b962e <__aeabi_ddiv+0x6e>
   b9628:	085b      	lsrs	r3, r3, #1
   b962a:	ea4f 0232 	mov.w	r2, r2, rrx
   b962e:	1ab6      	subs	r6, r6, r2
   b9630:	eb65 0503 	sbc.w	r5, r5, r3
   b9634:	085b      	lsrs	r3, r3, #1
   b9636:	ea4f 0232 	mov.w	r2, r2, rrx
   b963a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b963e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b9642:	ebb6 0e02 	subs.w	lr, r6, r2
   b9646:	eb75 0e03 	sbcs.w	lr, r5, r3
   b964a:	bf22      	ittt	cs
   b964c:	1ab6      	subcs	r6, r6, r2
   b964e:	4675      	movcs	r5, lr
   b9650:	ea40 000c 	orrcs.w	r0, r0, ip
   b9654:	085b      	lsrs	r3, r3, #1
   b9656:	ea4f 0232 	mov.w	r2, r2, rrx
   b965a:	ebb6 0e02 	subs.w	lr, r6, r2
   b965e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b9662:	bf22      	ittt	cs
   b9664:	1ab6      	subcs	r6, r6, r2
   b9666:	4675      	movcs	r5, lr
   b9668:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b966c:	085b      	lsrs	r3, r3, #1
   b966e:	ea4f 0232 	mov.w	r2, r2, rrx
   b9672:	ebb6 0e02 	subs.w	lr, r6, r2
   b9676:	eb75 0e03 	sbcs.w	lr, r5, r3
   b967a:	bf22      	ittt	cs
   b967c:	1ab6      	subcs	r6, r6, r2
   b967e:	4675      	movcs	r5, lr
   b9680:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b9684:	085b      	lsrs	r3, r3, #1
   b9686:	ea4f 0232 	mov.w	r2, r2, rrx
   b968a:	ebb6 0e02 	subs.w	lr, r6, r2
   b968e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b9692:	bf22      	ittt	cs
   b9694:	1ab6      	subcs	r6, r6, r2
   b9696:	4675      	movcs	r5, lr
   b9698:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b969c:	ea55 0e06 	orrs.w	lr, r5, r6
   b96a0:	d018      	beq.n	b96d4 <__aeabi_ddiv+0x114>
   b96a2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b96a6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b96aa:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b96ae:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b96b2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b96b6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b96ba:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b96be:	d1c0      	bne.n	b9642 <__aeabi_ddiv+0x82>
   b96c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b96c4:	d10b      	bne.n	b96de <__aeabi_ddiv+0x11e>
   b96c6:	ea41 0100 	orr.w	r1, r1, r0
   b96ca:	f04f 0000 	mov.w	r0, #0
   b96ce:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b96d2:	e7b6      	b.n	b9642 <__aeabi_ddiv+0x82>
   b96d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b96d8:	bf04      	itt	eq
   b96da:	4301      	orreq	r1, r0
   b96dc:	2000      	moveq	r0, #0
   b96de:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b96e2:	bf88      	it	hi
   b96e4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b96e8:	f63f aeaf 	bhi.w	b944a <__aeabi_dmul+0xde>
   b96ec:	ebb5 0c03 	subs.w	ip, r5, r3
   b96f0:	bf04      	itt	eq
   b96f2:	ebb6 0c02 	subseq.w	ip, r6, r2
   b96f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b96fa:	f150 0000 	adcs.w	r0, r0, #0
   b96fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b9702:	bd70      	pop	{r4, r5, r6, pc}
   b9704:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b9708:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b970c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b9710:	bfc2      	ittt	gt
   b9712:	ebd4 050c 	rsbsgt	r5, r4, ip
   b9716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b971a:	bd70      	popgt	{r4, r5, r6, pc}
   b971c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b9720:	f04f 0e00 	mov.w	lr, #0
   b9724:	3c01      	subs	r4, #1
   b9726:	e690      	b.n	b944a <__aeabi_dmul+0xde>
   b9728:	ea45 0e06 	orr.w	lr, r5, r6
   b972c:	e68d      	b.n	b944a <__aeabi_dmul+0xde>
   b972e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b9732:	ea94 0f0c 	teq	r4, ip
   b9736:	bf08      	it	eq
   b9738:	ea95 0f0c 	teqeq	r5, ip
   b973c:	f43f af3b 	beq.w	b95b6 <__aeabi_dmul+0x24a>
   b9740:	ea94 0f0c 	teq	r4, ip
   b9744:	d10a      	bne.n	b975c <__aeabi_ddiv+0x19c>
   b9746:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b974a:	f47f af34 	bne.w	b95b6 <__aeabi_dmul+0x24a>
   b974e:	ea95 0f0c 	teq	r5, ip
   b9752:	f47f af25 	bne.w	b95a0 <__aeabi_dmul+0x234>
   b9756:	4610      	mov	r0, r2
   b9758:	4619      	mov	r1, r3
   b975a:	e72c      	b.n	b95b6 <__aeabi_dmul+0x24a>
   b975c:	ea95 0f0c 	teq	r5, ip
   b9760:	d106      	bne.n	b9770 <__aeabi_ddiv+0x1b0>
   b9762:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b9766:	f43f aefd 	beq.w	b9564 <__aeabi_dmul+0x1f8>
   b976a:	4610      	mov	r0, r2
   b976c:	4619      	mov	r1, r3
   b976e:	e722      	b.n	b95b6 <__aeabi_dmul+0x24a>
   b9770:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b9774:	bf18      	it	ne
   b9776:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b977a:	f47f aec5 	bne.w	b9508 <__aeabi_dmul+0x19c>
   b977e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b9782:	f47f af0d 	bne.w	b95a0 <__aeabi_dmul+0x234>
   b9786:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b978a:	f47f aeeb 	bne.w	b9564 <__aeabi_dmul+0x1f8>
   b978e:	e712      	b.n	b95b6 <__aeabi_dmul+0x24a>

000b9790 <__gedf2>:
   b9790:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b9794:	e006      	b.n	b97a4 <__cmpdf2+0x4>
   b9796:	bf00      	nop

000b9798 <__ledf2>:
   b9798:	f04f 0c01 	mov.w	ip, #1
   b979c:	e002      	b.n	b97a4 <__cmpdf2+0x4>
   b979e:	bf00      	nop

000b97a0 <__cmpdf2>:
   b97a0:	f04f 0c01 	mov.w	ip, #1
   b97a4:	f84d cd04 	str.w	ip, [sp, #-4]!
   b97a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b97ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b97b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b97b4:	bf18      	it	ne
   b97b6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b97ba:	d01b      	beq.n	b97f4 <__cmpdf2+0x54>
   b97bc:	b001      	add	sp, #4
   b97be:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b97c2:	bf0c      	ite	eq
   b97c4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b97c8:	ea91 0f03 	teqne	r1, r3
   b97cc:	bf02      	ittt	eq
   b97ce:	ea90 0f02 	teqeq	r0, r2
   b97d2:	2000      	moveq	r0, #0
   b97d4:	4770      	bxeq	lr
   b97d6:	f110 0f00 	cmn.w	r0, #0
   b97da:	ea91 0f03 	teq	r1, r3
   b97de:	bf58      	it	pl
   b97e0:	4299      	cmppl	r1, r3
   b97e2:	bf08      	it	eq
   b97e4:	4290      	cmpeq	r0, r2
   b97e6:	bf2c      	ite	cs
   b97e8:	17d8      	asrcs	r0, r3, #31
   b97ea:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b97ee:	f040 0001 	orr.w	r0, r0, #1
   b97f2:	4770      	bx	lr
   b97f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b97f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b97fc:	d102      	bne.n	b9804 <__cmpdf2+0x64>
   b97fe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b9802:	d107      	bne.n	b9814 <__cmpdf2+0x74>
   b9804:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b9808:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b980c:	d1d6      	bne.n	b97bc <__cmpdf2+0x1c>
   b980e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b9812:	d0d3      	beq.n	b97bc <__cmpdf2+0x1c>
   b9814:	f85d 0b04 	ldr.w	r0, [sp], #4
   b9818:	4770      	bx	lr
   b981a:	bf00      	nop

000b981c <__aeabi_cdrcmple>:
   b981c:	4684      	mov	ip, r0
   b981e:	4610      	mov	r0, r2
   b9820:	4662      	mov	r2, ip
   b9822:	468c      	mov	ip, r1
   b9824:	4619      	mov	r1, r3
   b9826:	4663      	mov	r3, ip
   b9828:	e000      	b.n	b982c <__aeabi_cdcmpeq>
   b982a:	bf00      	nop

000b982c <__aeabi_cdcmpeq>:
   b982c:	b501      	push	{r0, lr}
   b982e:	f7ff ffb7 	bl	b97a0 <__cmpdf2>
   b9832:	2800      	cmp	r0, #0
   b9834:	bf48      	it	mi
   b9836:	f110 0f00 	cmnmi.w	r0, #0
   b983a:	bd01      	pop	{r0, pc}

000b983c <__aeabi_dcmpeq>:
   b983c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b9840:	f7ff fff4 	bl	b982c <__aeabi_cdcmpeq>
   b9844:	bf0c      	ite	eq
   b9846:	2001      	moveq	r0, #1
   b9848:	2000      	movne	r0, #0
   b984a:	f85d fb08 	ldr.w	pc, [sp], #8
   b984e:	bf00      	nop

000b9850 <__aeabi_dcmplt>:
   b9850:	f84d ed08 	str.w	lr, [sp, #-8]!
   b9854:	f7ff ffea 	bl	b982c <__aeabi_cdcmpeq>
   b9858:	bf34      	ite	cc
   b985a:	2001      	movcc	r0, #1
   b985c:	2000      	movcs	r0, #0
   b985e:	f85d fb08 	ldr.w	pc, [sp], #8
   b9862:	bf00      	nop

000b9864 <__aeabi_dcmple>:
   b9864:	f84d ed08 	str.w	lr, [sp, #-8]!
   b9868:	f7ff ffe0 	bl	b982c <__aeabi_cdcmpeq>
   b986c:	bf94      	ite	ls
   b986e:	2001      	movls	r0, #1
   b9870:	2000      	movhi	r0, #0
   b9872:	f85d fb08 	ldr.w	pc, [sp], #8
   b9876:	bf00      	nop

000b9878 <__aeabi_dcmpge>:
   b9878:	f84d ed08 	str.w	lr, [sp, #-8]!
   b987c:	f7ff ffce 	bl	b981c <__aeabi_cdrcmple>
   b9880:	bf94      	ite	ls
   b9882:	2001      	movls	r0, #1
   b9884:	2000      	movhi	r0, #0
   b9886:	f85d fb08 	ldr.w	pc, [sp], #8
   b988a:	bf00      	nop

000b988c <__aeabi_dcmpgt>:
   b988c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b9890:	f7ff ffc4 	bl	b981c <__aeabi_cdrcmple>
   b9894:	bf34      	ite	cc
   b9896:	2001      	movcc	r0, #1
   b9898:	2000      	movcs	r0, #0
   b989a:	f85d fb08 	ldr.w	pc, [sp], #8
   b989e:	bf00      	nop

000b98a0 <__aeabi_dcmpun>:
   b98a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b98a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b98a8:	d102      	bne.n	b98b0 <__aeabi_dcmpun+0x10>
   b98aa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b98ae:	d10a      	bne.n	b98c6 <__aeabi_dcmpun+0x26>
   b98b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b98b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b98b8:	d102      	bne.n	b98c0 <__aeabi_dcmpun+0x20>
   b98ba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b98be:	d102      	bne.n	b98c6 <__aeabi_dcmpun+0x26>
   b98c0:	f04f 0000 	mov.w	r0, #0
   b98c4:	4770      	bx	lr
   b98c6:	f04f 0001 	mov.w	r0, #1
   b98ca:	4770      	bx	lr

000b98cc <__aeabi_d2f>:
   b98cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b98d0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b98d4:	bf24      	itt	cs
   b98d6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b98da:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b98de:	d90d      	bls.n	b98fc <__aeabi_d2f+0x30>
   b98e0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b98e4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b98e8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b98ec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b98f0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b98f4:	bf08      	it	eq
   b98f6:	f020 0001 	biceq.w	r0, r0, #1
   b98fa:	4770      	bx	lr
   b98fc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b9900:	d121      	bne.n	b9946 <__aeabi_d2f+0x7a>
   b9902:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b9906:	bfbc      	itt	lt
   b9908:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b990c:	4770      	bxlt	lr
   b990e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b9912:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b9916:	f1c2 0218 	rsb	r2, r2, #24
   b991a:	f1c2 0c20 	rsb	ip, r2, #32
   b991e:	fa10 f30c 	lsls.w	r3, r0, ip
   b9922:	fa20 f002 	lsr.w	r0, r0, r2
   b9926:	bf18      	it	ne
   b9928:	f040 0001 	orrne.w	r0, r0, #1
   b992c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b9930:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b9934:	fa03 fc0c 	lsl.w	ip, r3, ip
   b9938:	ea40 000c 	orr.w	r0, r0, ip
   b993c:	fa23 f302 	lsr.w	r3, r3, r2
   b9940:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b9944:	e7cc      	b.n	b98e0 <__aeabi_d2f+0x14>
   b9946:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b994a:	d107      	bne.n	b995c <__aeabi_d2f+0x90>
   b994c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b9950:	bf1e      	ittt	ne
   b9952:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b9956:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b995a:	4770      	bxne	lr
   b995c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b9960:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b9964:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b9968:	4770      	bx	lr
   b996a:	bf00      	nop

000b996c <__aeabi_frsub>:
   b996c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   b9970:	e002      	b.n	b9978 <__addsf3>
   b9972:	bf00      	nop

000b9974 <__aeabi_fsub>:
   b9974:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000b9978 <__addsf3>:
   b9978:	0042      	lsls	r2, r0, #1
   b997a:	bf1f      	itttt	ne
   b997c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   b9980:	ea92 0f03 	teqne	r2, r3
   b9984:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   b9988:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   b998c:	d06a      	beq.n	b9a64 <__addsf3+0xec>
   b998e:	ea4f 6212 	mov.w	r2, r2, lsr #24
   b9992:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   b9996:	bfc1      	itttt	gt
   b9998:	18d2      	addgt	r2, r2, r3
   b999a:	4041      	eorgt	r1, r0
   b999c:	4048      	eorgt	r0, r1
   b999e:	4041      	eorgt	r1, r0
   b99a0:	bfb8      	it	lt
   b99a2:	425b      	neglt	r3, r3
   b99a4:	2b19      	cmp	r3, #25
   b99a6:	bf88      	it	hi
   b99a8:	4770      	bxhi	lr
   b99aa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   b99ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b99b2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   b99b6:	bf18      	it	ne
   b99b8:	4240      	negne	r0, r0
   b99ba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b99be:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   b99c2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   b99c6:	bf18      	it	ne
   b99c8:	4249      	negne	r1, r1
   b99ca:	ea92 0f03 	teq	r2, r3
   b99ce:	d03f      	beq.n	b9a50 <__addsf3+0xd8>
   b99d0:	f1a2 0201 	sub.w	r2, r2, #1
   b99d4:	fa41 fc03 	asr.w	ip, r1, r3
   b99d8:	eb10 000c 	adds.w	r0, r0, ip
   b99dc:	f1c3 0320 	rsb	r3, r3, #32
   b99e0:	fa01 f103 	lsl.w	r1, r1, r3
   b99e4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   b99e8:	d502      	bpl.n	b99f0 <__addsf3+0x78>
   b99ea:	4249      	negs	r1, r1
   b99ec:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   b99f0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b99f4:	d313      	bcc.n	b9a1e <__addsf3+0xa6>
   b99f6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   b99fa:	d306      	bcc.n	b9a0a <__addsf3+0x92>
   b99fc:	0840      	lsrs	r0, r0, #1
   b99fe:	ea4f 0131 	mov.w	r1, r1, rrx
   b9a02:	f102 0201 	add.w	r2, r2, #1
   b9a06:	2afe      	cmp	r2, #254	; 0xfe
   b9a08:	d251      	bcs.n	b9aae <__addsf3+0x136>
   b9a0a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   b9a0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   b9a12:	bf08      	it	eq
   b9a14:	f020 0001 	biceq.w	r0, r0, #1
   b9a18:	ea40 0003 	orr.w	r0, r0, r3
   b9a1c:	4770      	bx	lr
   b9a1e:	0049      	lsls	r1, r1, #1
   b9a20:	eb40 0000 	adc.w	r0, r0, r0
   b9a24:	3a01      	subs	r2, #1
   b9a26:	bf28      	it	cs
   b9a28:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
   b9a2c:	d2ed      	bcs.n	b9a0a <__addsf3+0x92>
   b9a2e:	fab0 fc80 	clz	ip, r0
   b9a32:	f1ac 0c08 	sub.w	ip, ip, #8
   b9a36:	ebb2 020c 	subs.w	r2, r2, ip
   b9a3a:	fa00 f00c 	lsl.w	r0, r0, ip
   b9a3e:	bfaa      	itet	ge
   b9a40:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   b9a44:	4252      	neglt	r2, r2
   b9a46:	4318      	orrge	r0, r3
   b9a48:	bfbc      	itt	lt
   b9a4a:	40d0      	lsrlt	r0, r2
   b9a4c:	4318      	orrlt	r0, r3
   b9a4e:	4770      	bx	lr
   b9a50:	f092 0f00 	teq	r2, #0
   b9a54:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   b9a58:	bf06      	itte	eq
   b9a5a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   b9a5e:	3201      	addeq	r2, #1
   b9a60:	3b01      	subne	r3, #1
   b9a62:	e7b5      	b.n	b99d0 <__addsf3+0x58>
   b9a64:	ea4f 0341 	mov.w	r3, r1, lsl #1
   b9a68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   b9a6c:	bf18      	it	ne
   b9a6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   b9a72:	d021      	beq.n	b9ab8 <__addsf3+0x140>
   b9a74:	ea92 0f03 	teq	r2, r3
   b9a78:	d004      	beq.n	b9a84 <__addsf3+0x10c>
   b9a7a:	f092 0f00 	teq	r2, #0
   b9a7e:	bf08      	it	eq
   b9a80:	4608      	moveq	r0, r1
   b9a82:	4770      	bx	lr
   b9a84:	ea90 0f01 	teq	r0, r1
   b9a88:	bf1c      	itt	ne
   b9a8a:	2000      	movne	r0, #0
   b9a8c:	4770      	bxne	lr
   b9a8e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   b9a92:	d104      	bne.n	b9a9e <__addsf3+0x126>
   b9a94:	0040      	lsls	r0, r0, #1
   b9a96:	bf28      	it	cs
   b9a98:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   b9a9c:	4770      	bx	lr
   b9a9e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   b9aa2:	bf3c      	itt	cc
   b9aa4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   b9aa8:	4770      	bxcc	lr
   b9aaa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   b9aae:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   b9ab2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b9ab6:	4770      	bx	lr
   b9ab8:	ea7f 6222 	mvns.w	r2, r2, asr #24
   b9abc:	bf16      	itet	ne
   b9abe:	4608      	movne	r0, r1
   b9ac0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   b9ac4:	4601      	movne	r1, r0
   b9ac6:	0242      	lsls	r2, r0, #9
   b9ac8:	bf06      	itte	eq
   b9aca:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   b9ace:	ea90 0f01 	teqeq	r0, r1
   b9ad2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   b9ad6:	4770      	bx	lr

000b9ad8 <__aeabi_ui2f>:
   b9ad8:	f04f 0300 	mov.w	r3, #0
   b9adc:	e004      	b.n	b9ae8 <__aeabi_i2f+0x8>
   b9ade:	bf00      	nop

000b9ae0 <__aeabi_i2f>:
   b9ae0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   b9ae4:	bf48      	it	mi
   b9ae6:	4240      	negmi	r0, r0
   b9ae8:	ea5f 0c00 	movs.w	ip, r0
   b9aec:	bf08      	it	eq
   b9aee:	4770      	bxeq	lr
   b9af0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   b9af4:	4601      	mov	r1, r0
   b9af6:	f04f 0000 	mov.w	r0, #0
   b9afa:	e01c      	b.n	b9b36 <__aeabi_l2f+0x2a>

000b9afc <__aeabi_ul2f>:
   b9afc:	ea50 0201 	orrs.w	r2, r0, r1
   b9b00:	bf08      	it	eq
   b9b02:	4770      	bxeq	lr
   b9b04:	f04f 0300 	mov.w	r3, #0
   b9b08:	e00a      	b.n	b9b20 <__aeabi_l2f+0x14>
   b9b0a:	bf00      	nop

000b9b0c <__aeabi_l2f>:
   b9b0c:	ea50 0201 	orrs.w	r2, r0, r1
   b9b10:	bf08      	it	eq
   b9b12:	4770      	bxeq	lr
   b9b14:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   b9b18:	d502      	bpl.n	b9b20 <__aeabi_l2f+0x14>
   b9b1a:	4240      	negs	r0, r0
   b9b1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b9b20:	ea5f 0c01 	movs.w	ip, r1
   b9b24:	bf02      	ittt	eq
   b9b26:	4684      	moveq	ip, r0
   b9b28:	4601      	moveq	r1, r0
   b9b2a:	2000      	moveq	r0, #0
   b9b2c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   b9b30:	bf08      	it	eq
   b9b32:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   b9b36:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   b9b3a:	fabc f28c 	clz	r2, ip
   b9b3e:	3a08      	subs	r2, #8
   b9b40:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   b9b44:	db10      	blt.n	b9b68 <__aeabi_l2f+0x5c>
   b9b46:	fa01 fc02 	lsl.w	ip, r1, r2
   b9b4a:	4463      	add	r3, ip
   b9b4c:	fa00 fc02 	lsl.w	ip, r0, r2
   b9b50:	f1c2 0220 	rsb	r2, r2, #32
   b9b54:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b9b58:	fa20 f202 	lsr.w	r2, r0, r2
   b9b5c:	eb43 0002 	adc.w	r0, r3, r2
   b9b60:	bf08      	it	eq
   b9b62:	f020 0001 	biceq.w	r0, r0, #1
   b9b66:	4770      	bx	lr
   b9b68:	f102 0220 	add.w	r2, r2, #32
   b9b6c:	fa01 fc02 	lsl.w	ip, r1, r2
   b9b70:	f1c2 0220 	rsb	r2, r2, #32
   b9b74:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   b9b78:	fa21 f202 	lsr.w	r2, r1, r2
   b9b7c:	eb43 0002 	adc.w	r0, r3, r2
   b9b80:	bf08      	it	eq
   b9b82:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   b9b86:	4770      	bx	lr

000b9b88 <__aeabi_ldivmod>:
   b9b88:	b97b      	cbnz	r3, b9baa <__aeabi_ldivmod+0x22>
   b9b8a:	b972      	cbnz	r2, b9baa <__aeabi_ldivmod+0x22>
   b9b8c:	2900      	cmp	r1, #0
   b9b8e:	bfbe      	ittt	lt
   b9b90:	2000      	movlt	r0, #0
   b9b92:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   b9b96:	e006      	blt.n	b9ba6 <__aeabi_ldivmod+0x1e>
   b9b98:	bf08      	it	eq
   b9b9a:	2800      	cmpeq	r0, #0
   b9b9c:	bf1c      	itt	ne
   b9b9e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   b9ba2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   b9ba6:	f000 b9a7 	b.w	b9ef8 <__aeabi_idiv0>
   b9baa:	f1ad 0c08 	sub.w	ip, sp, #8
   b9bae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   b9bb2:	2900      	cmp	r1, #0
   b9bb4:	db09      	blt.n	b9bca <__aeabi_ldivmod+0x42>
   b9bb6:	2b00      	cmp	r3, #0
   b9bb8:	db1a      	blt.n	b9bf0 <__aeabi_ldivmod+0x68>
   b9bba:	f000 f835 	bl	b9c28 <__udivmoddi4>
   b9bbe:	f8dd e004 	ldr.w	lr, [sp, #4]
   b9bc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b9bc6:	b004      	add	sp, #16
   b9bc8:	4770      	bx	lr
   b9bca:	4240      	negs	r0, r0
   b9bcc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b9bd0:	2b00      	cmp	r3, #0
   b9bd2:	db1b      	blt.n	b9c0c <__aeabi_ldivmod+0x84>
   b9bd4:	f000 f828 	bl	b9c28 <__udivmoddi4>
   b9bd8:	f8dd e004 	ldr.w	lr, [sp, #4]
   b9bdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b9be0:	b004      	add	sp, #16
   b9be2:	4240      	negs	r0, r0
   b9be4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b9be8:	4252      	negs	r2, r2
   b9bea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b9bee:	4770      	bx	lr
   b9bf0:	4252      	negs	r2, r2
   b9bf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b9bf6:	f000 f817 	bl	b9c28 <__udivmoddi4>
   b9bfa:	f8dd e004 	ldr.w	lr, [sp, #4]
   b9bfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b9c02:	b004      	add	sp, #16
   b9c04:	4240      	negs	r0, r0
   b9c06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b9c0a:	4770      	bx	lr
   b9c0c:	4252      	negs	r2, r2
   b9c0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b9c12:	f000 f809 	bl	b9c28 <__udivmoddi4>
   b9c16:	f8dd e004 	ldr.w	lr, [sp, #4]
   b9c1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b9c1e:	b004      	add	sp, #16
   b9c20:	4252      	negs	r2, r2
   b9c22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b9c26:	4770      	bx	lr

000b9c28 <__udivmoddi4>:
   b9c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b9c2c:	9d08      	ldr	r5, [sp, #32]
   b9c2e:	4604      	mov	r4, r0
   b9c30:	468e      	mov	lr, r1
   b9c32:	2b00      	cmp	r3, #0
   b9c34:	d14d      	bne.n	b9cd2 <__udivmoddi4+0xaa>
   b9c36:	428a      	cmp	r2, r1
   b9c38:	4694      	mov	ip, r2
   b9c3a:	d969      	bls.n	b9d10 <__udivmoddi4+0xe8>
   b9c3c:	fab2 f282 	clz	r2, r2
   b9c40:	b152      	cbz	r2, b9c58 <__udivmoddi4+0x30>
   b9c42:	fa01 f302 	lsl.w	r3, r1, r2
   b9c46:	f1c2 0120 	rsb	r1, r2, #32
   b9c4a:	fa20 f101 	lsr.w	r1, r0, r1
   b9c4e:	fa0c fc02 	lsl.w	ip, ip, r2
   b9c52:	ea41 0e03 	orr.w	lr, r1, r3
   b9c56:	4094      	lsls	r4, r2
   b9c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
   b9c5c:	0c21      	lsrs	r1, r4, #16
   b9c5e:	fbbe f6f8 	udiv	r6, lr, r8
   b9c62:	fa1f f78c 	uxth.w	r7, ip
   b9c66:	fb08 e316 	mls	r3, r8, r6, lr
   b9c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   b9c6e:	fb06 f107 	mul.w	r1, r6, r7
   b9c72:	4299      	cmp	r1, r3
   b9c74:	d90a      	bls.n	b9c8c <__udivmoddi4+0x64>
   b9c76:	eb1c 0303 	adds.w	r3, ip, r3
   b9c7a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
   b9c7e:	f080 811f 	bcs.w	b9ec0 <__udivmoddi4+0x298>
   b9c82:	4299      	cmp	r1, r3
   b9c84:	f240 811c 	bls.w	b9ec0 <__udivmoddi4+0x298>
   b9c88:	3e02      	subs	r6, #2
   b9c8a:	4463      	add	r3, ip
   b9c8c:	1a5b      	subs	r3, r3, r1
   b9c8e:	b2a4      	uxth	r4, r4
   b9c90:	fbb3 f0f8 	udiv	r0, r3, r8
   b9c94:	fb08 3310 	mls	r3, r8, r0, r3
   b9c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   b9c9c:	fb00 f707 	mul.w	r7, r0, r7
   b9ca0:	42a7      	cmp	r7, r4
   b9ca2:	d90a      	bls.n	b9cba <__udivmoddi4+0x92>
   b9ca4:	eb1c 0404 	adds.w	r4, ip, r4
   b9ca8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b9cac:	f080 810a 	bcs.w	b9ec4 <__udivmoddi4+0x29c>
   b9cb0:	42a7      	cmp	r7, r4
   b9cb2:	f240 8107 	bls.w	b9ec4 <__udivmoddi4+0x29c>
   b9cb6:	4464      	add	r4, ip
   b9cb8:	3802      	subs	r0, #2
   b9cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   b9cbe:	1be4      	subs	r4, r4, r7
   b9cc0:	2600      	movs	r6, #0
   b9cc2:	b11d      	cbz	r5, b9ccc <__udivmoddi4+0xa4>
   b9cc4:	40d4      	lsrs	r4, r2
   b9cc6:	2300      	movs	r3, #0
   b9cc8:	e9c5 4300 	strd	r4, r3, [r5]
   b9ccc:	4631      	mov	r1, r6
   b9cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b9cd2:	428b      	cmp	r3, r1
   b9cd4:	d909      	bls.n	b9cea <__udivmoddi4+0xc2>
   b9cd6:	2d00      	cmp	r5, #0
   b9cd8:	f000 80ef 	beq.w	b9eba <__udivmoddi4+0x292>
   b9cdc:	2600      	movs	r6, #0
   b9cde:	e9c5 0100 	strd	r0, r1, [r5]
   b9ce2:	4630      	mov	r0, r6
   b9ce4:	4631      	mov	r1, r6
   b9ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b9cea:	fab3 f683 	clz	r6, r3
   b9cee:	2e00      	cmp	r6, #0
   b9cf0:	d14a      	bne.n	b9d88 <__udivmoddi4+0x160>
   b9cf2:	428b      	cmp	r3, r1
   b9cf4:	d302      	bcc.n	b9cfc <__udivmoddi4+0xd4>
   b9cf6:	4282      	cmp	r2, r0
   b9cf8:	f200 80f9 	bhi.w	b9eee <__udivmoddi4+0x2c6>
   b9cfc:	1a84      	subs	r4, r0, r2
   b9cfe:	eb61 0303 	sbc.w	r3, r1, r3
   b9d02:	2001      	movs	r0, #1
   b9d04:	469e      	mov	lr, r3
   b9d06:	2d00      	cmp	r5, #0
   b9d08:	d0e0      	beq.n	b9ccc <__udivmoddi4+0xa4>
   b9d0a:	e9c5 4e00 	strd	r4, lr, [r5]
   b9d0e:	e7dd      	b.n	b9ccc <__udivmoddi4+0xa4>
   b9d10:	b902      	cbnz	r2, b9d14 <__udivmoddi4+0xec>
   b9d12:	deff      	udf	#255	; 0xff
   b9d14:	fab2 f282 	clz	r2, r2
   b9d18:	2a00      	cmp	r2, #0
   b9d1a:	f040 8092 	bne.w	b9e42 <__udivmoddi4+0x21a>
   b9d1e:	eba1 010c 	sub.w	r1, r1, ip
   b9d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b9d26:	fa1f fe8c 	uxth.w	lr, ip
   b9d2a:	2601      	movs	r6, #1
   b9d2c:	0c20      	lsrs	r0, r4, #16
   b9d2e:	fbb1 f3f7 	udiv	r3, r1, r7
   b9d32:	fb07 1113 	mls	r1, r7, r3, r1
   b9d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b9d3a:	fb0e f003 	mul.w	r0, lr, r3
   b9d3e:	4288      	cmp	r0, r1
   b9d40:	d908      	bls.n	b9d54 <__udivmoddi4+0x12c>
   b9d42:	eb1c 0101 	adds.w	r1, ip, r1
   b9d46:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   b9d4a:	d202      	bcs.n	b9d52 <__udivmoddi4+0x12a>
   b9d4c:	4288      	cmp	r0, r1
   b9d4e:	f200 80cb 	bhi.w	b9ee8 <__udivmoddi4+0x2c0>
   b9d52:	4643      	mov	r3, r8
   b9d54:	1a09      	subs	r1, r1, r0
   b9d56:	b2a4      	uxth	r4, r4
   b9d58:	fbb1 f0f7 	udiv	r0, r1, r7
   b9d5c:	fb07 1110 	mls	r1, r7, r0, r1
   b9d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
   b9d64:	fb0e fe00 	mul.w	lr, lr, r0
   b9d68:	45a6      	cmp	lr, r4
   b9d6a:	d908      	bls.n	b9d7e <__udivmoddi4+0x156>
   b9d6c:	eb1c 0404 	adds.w	r4, ip, r4
   b9d70:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
   b9d74:	d202      	bcs.n	b9d7c <__udivmoddi4+0x154>
   b9d76:	45a6      	cmp	lr, r4
   b9d78:	f200 80bb 	bhi.w	b9ef2 <__udivmoddi4+0x2ca>
   b9d7c:	4608      	mov	r0, r1
   b9d7e:	eba4 040e 	sub.w	r4, r4, lr
   b9d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   b9d86:	e79c      	b.n	b9cc2 <__udivmoddi4+0x9a>
   b9d88:	f1c6 0720 	rsb	r7, r6, #32
   b9d8c:	40b3      	lsls	r3, r6
   b9d8e:	fa22 fc07 	lsr.w	ip, r2, r7
   b9d92:	ea4c 0c03 	orr.w	ip, ip, r3
   b9d96:	fa20 f407 	lsr.w	r4, r0, r7
   b9d9a:	fa01 f306 	lsl.w	r3, r1, r6
   b9d9e:	431c      	orrs	r4, r3
   b9da0:	40f9      	lsrs	r1, r7
   b9da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
   b9da6:	fa00 f306 	lsl.w	r3, r0, r6
   b9daa:	fbb1 f8f9 	udiv	r8, r1, r9
   b9dae:	0c20      	lsrs	r0, r4, #16
   b9db0:	fa1f fe8c 	uxth.w	lr, ip
   b9db4:	fb09 1118 	mls	r1, r9, r8, r1
   b9db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b9dbc:	fb08 f00e 	mul.w	r0, r8, lr
   b9dc0:	4288      	cmp	r0, r1
   b9dc2:	fa02 f206 	lsl.w	r2, r2, r6
   b9dc6:	d90b      	bls.n	b9de0 <__udivmoddi4+0x1b8>
   b9dc8:	eb1c 0101 	adds.w	r1, ip, r1
   b9dcc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
   b9dd0:	f080 8088 	bcs.w	b9ee4 <__udivmoddi4+0x2bc>
   b9dd4:	4288      	cmp	r0, r1
   b9dd6:	f240 8085 	bls.w	b9ee4 <__udivmoddi4+0x2bc>
   b9dda:	f1a8 0802 	sub.w	r8, r8, #2
   b9dde:	4461      	add	r1, ip
   b9de0:	1a09      	subs	r1, r1, r0
   b9de2:	b2a4      	uxth	r4, r4
   b9de4:	fbb1 f0f9 	udiv	r0, r1, r9
   b9de8:	fb09 1110 	mls	r1, r9, r0, r1
   b9dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   b9df0:	fb00 fe0e 	mul.w	lr, r0, lr
   b9df4:	458e      	cmp	lr, r1
   b9df6:	d908      	bls.n	b9e0a <__udivmoddi4+0x1e2>
   b9df8:	eb1c 0101 	adds.w	r1, ip, r1
   b9dfc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
   b9e00:	d26c      	bcs.n	b9edc <__udivmoddi4+0x2b4>
   b9e02:	458e      	cmp	lr, r1
   b9e04:	d96a      	bls.n	b9edc <__udivmoddi4+0x2b4>
   b9e06:	3802      	subs	r0, #2
   b9e08:	4461      	add	r1, ip
   b9e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   b9e0e:	fba0 9402 	umull	r9, r4, r0, r2
   b9e12:	eba1 010e 	sub.w	r1, r1, lr
   b9e16:	42a1      	cmp	r1, r4
   b9e18:	46c8      	mov	r8, r9
   b9e1a:	46a6      	mov	lr, r4
   b9e1c:	d356      	bcc.n	b9ecc <__udivmoddi4+0x2a4>
   b9e1e:	d053      	beq.n	b9ec8 <__udivmoddi4+0x2a0>
   b9e20:	b15d      	cbz	r5, b9e3a <__udivmoddi4+0x212>
   b9e22:	ebb3 0208 	subs.w	r2, r3, r8
   b9e26:	eb61 010e 	sbc.w	r1, r1, lr
   b9e2a:	fa01 f707 	lsl.w	r7, r1, r7
   b9e2e:	fa22 f306 	lsr.w	r3, r2, r6
   b9e32:	40f1      	lsrs	r1, r6
   b9e34:	431f      	orrs	r7, r3
   b9e36:	e9c5 7100 	strd	r7, r1, [r5]
   b9e3a:	2600      	movs	r6, #0
   b9e3c:	4631      	mov	r1, r6
   b9e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b9e42:	f1c2 0320 	rsb	r3, r2, #32
   b9e46:	40d8      	lsrs	r0, r3
   b9e48:	fa0c fc02 	lsl.w	ip, ip, r2
   b9e4c:	fa21 f303 	lsr.w	r3, r1, r3
   b9e50:	4091      	lsls	r1, r2
   b9e52:	4301      	orrs	r1, r0
   b9e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b9e58:	fa1f fe8c 	uxth.w	lr, ip
   b9e5c:	fbb3 f0f7 	udiv	r0, r3, r7
   b9e60:	fb07 3610 	mls	r6, r7, r0, r3
   b9e64:	0c0b      	lsrs	r3, r1, #16
   b9e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   b9e6a:	fb00 f60e 	mul.w	r6, r0, lr
   b9e6e:	429e      	cmp	r6, r3
   b9e70:	fa04 f402 	lsl.w	r4, r4, r2
   b9e74:	d908      	bls.n	b9e88 <__udivmoddi4+0x260>
   b9e76:	eb1c 0303 	adds.w	r3, ip, r3
   b9e7a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
   b9e7e:	d22f      	bcs.n	b9ee0 <__udivmoddi4+0x2b8>
   b9e80:	429e      	cmp	r6, r3
   b9e82:	d92d      	bls.n	b9ee0 <__udivmoddi4+0x2b8>
   b9e84:	3802      	subs	r0, #2
   b9e86:	4463      	add	r3, ip
   b9e88:	1b9b      	subs	r3, r3, r6
   b9e8a:	b289      	uxth	r1, r1
   b9e8c:	fbb3 f6f7 	udiv	r6, r3, r7
   b9e90:	fb07 3316 	mls	r3, r7, r6, r3
   b9e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   b9e98:	fb06 f30e 	mul.w	r3, r6, lr
   b9e9c:	428b      	cmp	r3, r1
   b9e9e:	d908      	bls.n	b9eb2 <__udivmoddi4+0x28a>
   b9ea0:	eb1c 0101 	adds.w	r1, ip, r1
   b9ea4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
   b9ea8:	d216      	bcs.n	b9ed8 <__udivmoddi4+0x2b0>
   b9eaa:	428b      	cmp	r3, r1
   b9eac:	d914      	bls.n	b9ed8 <__udivmoddi4+0x2b0>
   b9eae:	3e02      	subs	r6, #2
   b9eb0:	4461      	add	r1, ip
   b9eb2:	1ac9      	subs	r1, r1, r3
   b9eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   b9eb8:	e738      	b.n	b9d2c <__udivmoddi4+0x104>
   b9eba:	462e      	mov	r6, r5
   b9ebc:	4628      	mov	r0, r5
   b9ebe:	e705      	b.n	b9ccc <__udivmoddi4+0xa4>
   b9ec0:	4606      	mov	r6, r0
   b9ec2:	e6e3      	b.n	b9c8c <__udivmoddi4+0x64>
   b9ec4:	4618      	mov	r0, r3
   b9ec6:	e6f8      	b.n	b9cba <__udivmoddi4+0x92>
   b9ec8:	454b      	cmp	r3, r9
   b9eca:	d2a9      	bcs.n	b9e20 <__udivmoddi4+0x1f8>
   b9ecc:	ebb9 0802 	subs.w	r8, r9, r2
   b9ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
   b9ed4:	3801      	subs	r0, #1
   b9ed6:	e7a3      	b.n	b9e20 <__udivmoddi4+0x1f8>
   b9ed8:	4646      	mov	r6, r8
   b9eda:	e7ea      	b.n	b9eb2 <__udivmoddi4+0x28a>
   b9edc:	4620      	mov	r0, r4
   b9ede:	e794      	b.n	b9e0a <__udivmoddi4+0x1e2>
   b9ee0:	4640      	mov	r0, r8
   b9ee2:	e7d1      	b.n	b9e88 <__udivmoddi4+0x260>
   b9ee4:	46d0      	mov	r8, sl
   b9ee6:	e77b      	b.n	b9de0 <__udivmoddi4+0x1b8>
   b9ee8:	3b02      	subs	r3, #2
   b9eea:	4461      	add	r1, ip
   b9eec:	e732      	b.n	b9d54 <__udivmoddi4+0x12c>
   b9eee:	4630      	mov	r0, r6
   b9ef0:	e709      	b.n	b9d06 <__udivmoddi4+0xde>
   b9ef2:	4464      	add	r4, ip
   b9ef4:	3802      	subs	r0, #2
   b9ef6:	e742      	b.n	b9d7e <__udivmoddi4+0x156>

000b9ef8 <__aeabi_idiv0>:
   b9ef8:	4770      	bx	lr
   b9efa:	bf00      	nop

000b9efc <atexit>:
   b9efc:	2300      	movs	r3, #0
   b9efe:	4601      	mov	r1, r0
   b9f00:	461a      	mov	r2, r3
   b9f02:	4618      	mov	r0, r3
   b9f04:	f000 b87c 	b.w	ba000 <__register_exitproc>

000b9f08 <memcpy>:
   b9f08:	440a      	add	r2, r1
   b9f0a:	4291      	cmp	r1, r2
   b9f0c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b9f10:	d100      	bne.n	b9f14 <memcpy+0xc>
   b9f12:	4770      	bx	lr
   b9f14:	b510      	push	{r4, lr}
   b9f16:	f811 4b01 	ldrb.w	r4, [r1], #1
   b9f1a:	f803 4f01 	strb.w	r4, [r3, #1]!
   b9f1e:	4291      	cmp	r1, r2
   b9f20:	d1f9      	bne.n	b9f16 <memcpy+0xe>
   b9f22:	bd10      	pop	{r4, pc}

000b9f24 <memset>:
   b9f24:	4402      	add	r2, r0
   b9f26:	4603      	mov	r3, r0
   b9f28:	4293      	cmp	r3, r2
   b9f2a:	d100      	bne.n	b9f2e <memset+0xa>
   b9f2c:	4770      	bx	lr
   b9f2e:	f803 1b01 	strb.w	r1, [r3], #1
   b9f32:	e7f9      	b.n	b9f28 <memset+0x4>

000b9f34 <srand>:
   b9f34:	b538      	push	{r3, r4, r5, lr}
   b9f36:	4b10      	ldr	r3, [pc, #64]	; (b9f78 <srand+0x44>)
   b9f38:	681d      	ldr	r5, [r3, #0]
   b9f3a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b9f3c:	4604      	mov	r4, r0
   b9f3e:	b9b3      	cbnz	r3, b9f6e <srand+0x3a>
   b9f40:	2018      	movs	r0, #24
   b9f42:	f7fc f937 	bl	b61b4 <malloc>
   b9f46:	4602      	mov	r2, r0
   b9f48:	63a8      	str	r0, [r5, #56]	; 0x38
   b9f4a:	b920      	cbnz	r0, b9f56 <srand+0x22>
   b9f4c:	4b0b      	ldr	r3, [pc, #44]	; (b9f7c <srand+0x48>)
   b9f4e:	480c      	ldr	r0, [pc, #48]	; (b9f80 <srand+0x4c>)
   b9f50:	2142      	movs	r1, #66	; 0x42
   b9f52:	f7fc f967 	bl	b6224 <__assert_func>
   b9f56:	490b      	ldr	r1, [pc, #44]	; (b9f84 <srand+0x50>)
   b9f58:	4b0b      	ldr	r3, [pc, #44]	; (b9f88 <srand+0x54>)
   b9f5a:	e9c0 1300 	strd	r1, r3, [r0]
   b9f5e:	4b0b      	ldr	r3, [pc, #44]	; (b9f8c <srand+0x58>)
   b9f60:	6083      	str	r3, [r0, #8]
   b9f62:	230b      	movs	r3, #11
   b9f64:	8183      	strh	r3, [r0, #12]
   b9f66:	2100      	movs	r1, #0
   b9f68:	2001      	movs	r0, #1
   b9f6a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b9f6e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b9f70:	2200      	movs	r2, #0
   b9f72:	611c      	str	r4, [r3, #16]
   b9f74:	615a      	str	r2, [r3, #20]
   b9f76:	bd38      	pop	{r3, r4, r5, pc}
   b9f78:	2003e530 	.word	0x2003e530
   b9f7c:	000ba638 	.word	0x000ba638
   b9f80:	000ba64f 	.word	0x000ba64f
   b9f84:	abcd330e 	.word	0xabcd330e
   b9f88:	e66d1234 	.word	0xe66d1234
   b9f8c:	0005deec 	.word	0x0005deec

000b9f90 <strcmp>:
   b9f90:	f810 2b01 	ldrb.w	r2, [r0], #1
   b9f94:	f811 3b01 	ldrb.w	r3, [r1], #1
   b9f98:	2a01      	cmp	r2, #1
   b9f9a:	bf28      	it	cs
   b9f9c:	429a      	cmpcs	r2, r3
   b9f9e:	d0f7      	beq.n	b9f90 <strcmp>
   b9fa0:	1ad0      	subs	r0, r2, r3
   b9fa2:	4770      	bx	lr

000b9fa4 <strcpy>:
   b9fa4:	4603      	mov	r3, r0
   b9fa6:	f811 2b01 	ldrb.w	r2, [r1], #1
   b9faa:	f803 2b01 	strb.w	r2, [r3], #1
   b9fae:	2a00      	cmp	r2, #0
   b9fb0:	d1f9      	bne.n	b9fa6 <strcpy+0x2>
   b9fb2:	4770      	bx	lr

000b9fb4 <strdup>:
   b9fb4:	4b02      	ldr	r3, [pc, #8]	; (b9fc0 <strdup+0xc>)
   b9fb6:	4601      	mov	r1, r0
   b9fb8:	6818      	ldr	r0, [r3, #0]
   b9fba:	f000 b803 	b.w	b9fc4 <_strdup_r>
   b9fbe:	bf00      	nop
   b9fc0:	2003e530 	.word	0x2003e530

000b9fc4 <_strdup_r>:
   b9fc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b9fc6:	4604      	mov	r4, r0
   b9fc8:	4608      	mov	r0, r1
   b9fca:	460d      	mov	r5, r1
   b9fcc:	f000 f80f 	bl	b9fee <strlen>
   b9fd0:	1c42      	adds	r2, r0, #1
   b9fd2:	4611      	mov	r1, r2
   b9fd4:	4620      	mov	r0, r4
   b9fd6:	9201      	str	r2, [sp, #4]
   b9fd8:	f7fc f914 	bl	b6204 <_malloc_r>
   b9fdc:	4604      	mov	r4, r0
   b9fde:	b118      	cbz	r0, b9fe8 <_strdup_r+0x24>
   b9fe0:	9a01      	ldr	r2, [sp, #4]
   b9fe2:	4629      	mov	r1, r5
   b9fe4:	f7ff ff90 	bl	b9f08 <memcpy>
   b9fe8:	4620      	mov	r0, r4
   b9fea:	b003      	add	sp, #12
   b9fec:	bd30      	pop	{r4, r5, pc}

000b9fee <strlen>:
   b9fee:	4603      	mov	r3, r0
   b9ff0:	f813 2b01 	ldrb.w	r2, [r3], #1
   b9ff4:	2a00      	cmp	r2, #0
   b9ff6:	d1fb      	bne.n	b9ff0 <strlen+0x2>
   b9ff8:	1a18      	subs	r0, r3, r0
   b9ffa:	3801      	subs	r0, #1
   b9ffc:	4770      	bx	lr
	...

000ba000 <__register_exitproc>:
   ba000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   ba004:	f8df 80b8 	ldr.w	r8, [pc, #184]	; ba0c0 <__register_exitproc+0xc0>
   ba008:	4606      	mov	r6, r0
   ba00a:	f8d8 0000 	ldr.w	r0, [r8]
   ba00e:	461f      	mov	r7, r3
   ba010:	460d      	mov	r5, r1
   ba012:	4691      	mov	r9, r2
   ba014:	f000 f856 	bl	ba0c4 <__retarget_lock_acquire_recursive>
   ba018:	4b25      	ldr	r3, [pc, #148]	; (ba0b0 <__register_exitproc+0xb0>)
   ba01a:	681c      	ldr	r4, [r3, #0]
   ba01c:	b934      	cbnz	r4, ba02c <__register_exitproc+0x2c>
   ba01e:	4c25      	ldr	r4, [pc, #148]	; (ba0b4 <__register_exitproc+0xb4>)
   ba020:	601c      	str	r4, [r3, #0]
   ba022:	4b25      	ldr	r3, [pc, #148]	; (ba0b8 <__register_exitproc+0xb8>)
   ba024:	b113      	cbz	r3, ba02c <__register_exitproc+0x2c>
   ba026:	681b      	ldr	r3, [r3, #0]
   ba028:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   ba02c:	6863      	ldr	r3, [r4, #4]
   ba02e:	2b1f      	cmp	r3, #31
   ba030:	dd07      	ble.n	ba042 <__register_exitproc+0x42>
   ba032:	f8d8 0000 	ldr.w	r0, [r8]
   ba036:	f000 f847 	bl	ba0c8 <__retarget_lock_release_recursive>
   ba03a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   ba03e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   ba042:	b34e      	cbz	r6, ba098 <__register_exitproc+0x98>
   ba044:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   ba048:	b988      	cbnz	r0, ba06e <__register_exitproc+0x6e>
   ba04a:	4b1c      	ldr	r3, [pc, #112]	; (ba0bc <__register_exitproc+0xbc>)
   ba04c:	b923      	cbnz	r3, ba058 <__register_exitproc+0x58>
   ba04e:	f8d8 0000 	ldr.w	r0, [r8]
   ba052:	f000 f838 	bl	ba0c6 <__retarget_lock_release>
   ba056:	e7f0      	b.n	ba03a <__register_exitproc+0x3a>
   ba058:	f44f 7084 	mov.w	r0, #264	; 0x108
   ba05c:	f7fc f8aa 	bl	b61b4 <malloc>
   ba060:	2800      	cmp	r0, #0
   ba062:	d0f4      	beq.n	ba04e <__register_exitproc+0x4e>
   ba064:	2300      	movs	r3, #0
   ba066:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   ba06a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   ba06e:	6863      	ldr	r3, [r4, #4]
   ba070:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   ba074:	2201      	movs	r2, #1
   ba076:	409a      	lsls	r2, r3
   ba078:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   ba07c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   ba080:	4313      	orrs	r3, r2
   ba082:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   ba086:	2e02      	cmp	r6, #2
   ba088:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   ba08c:	bf02      	ittt	eq
   ba08e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   ba092:	4313      	orreq	r3, r2
   ba094:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   ba098:	6863      	ldr	r3, [r4, #4]
   ba09a:	f8d8 0000 	ldr.w	r0, [r8]
   ba09e:	1c5a      	adds	r2, r3, #1
   ba0a0:	3302      	adds	r3, #2
   ba0a2:	6062      	str	r2, [r4, #4]
   ba0a4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   ba0a8:	f000 f80e 	bl	ba0c8 <__retarget_lock_release_recursive>
   ba0ac:	2000      	movs	r0, #0
   ba0ae:	e7c6      	b.n	ba03e <__register_exitproc+0x3e>
   ba0b0:	2003e7e8 	.word	0x2003e7e8
   ba0b4:	2003e75c 	.word	0x2003e75c
   ba0b8:	00000000 	.word	0x00000000
   ba0bc:	000b61b5 	.word	0x000b61b5
   ba0c0:	2003e594 	.word	0x2003e594

000ba0c4 <__retarget_lock_acquire_recursive>:
   ba0c4:	4770      	bx	lr

000ba0c6 <__retarget_lock_release>:
   ba0c6:	4770      	bx	lr

000ba0c8 <__retarget_lock_release_recursive>:
   ba0c8:	4770      	bx	lr

000ba0ca <link_code_end>:
	...

000ba0cc <dynalib_user>:
   ba0cc:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   ba0dc:	0000 0000 6144 676e 7265 756f 2073 654c     ....Dangerous Le
   ba0ec:	6576 006c 6948 6867 5020 6c6f 7475 6f69     vel.High Polutio
   ba0fc:	006e 6f4c 2077 6f50 756c 6974 6e6f 4600     n.Low Polution.F
   ba10c:	6572 6873 4120 7269 5200 6165 6964 676e     resh Air.Reading
   ba11c:	5520 736e 6375 6563 7373 7566 006c 6577      Unsuccessful.we
   ba12c:	7461 6568 2f72 7473 7461 6f69 2f6e 6164     ather/station/da
   ba13c:	6174 4100 7474 6d65 7470 6e69 2067 514d     ta.Attempting MQ
   ba14c:	5454 6320 6e6f 656e 7463 6f69 006e 6f43     TT connection.Co
   ba15c:	6e6e 6365 6574 0064 6f43 6e6e 6365 6974     nnected.Connecti
   ba16c:	6e6f 7220 7465 7275 206e 6f63 6564 203a     on return code: 
   ba17c:	4600 6961 656c 2064 6f74 6320 6e6f 656e     .Failed to conne
   ba18c:	7463 202e 7254 6979 676e 7420 206f 6572     ct. Trying to re
   ba19c:	6f63 6e6e 6365 2074 6e69 3220 7320 6365     connect in 2 sec
   ba1ac:	6e6f 7364 5700 6165 6874 7265 5320 6174     onds.Weather Sta
   ba1bc:	6974 6e6f 4f20 6c6e 6e69 2065 293a 7400     tion Online :).t
   ba1cc:	6d69 7365 6174 706d 7400 6d65 0070 7568     imestamp.temp.hu
   ba1dc:	696d 6964 7974 7000 6572 7373 7275 0065     midity.pressure.
   ba1ec:	6c61 6974 7574 6564 6100 7269 7551 6c61     altitude.airQual
   ba1fc:	6c00 6f70 765f 6c61 2500 756c 6400 7375     .lpo_val.%lu.dus
   ba20c:	5f74 6172 6974 006f 7564 7473 635f 6e6f     t_ratio.dust_con
   ba21c:	0063 696c 6867 0074 6f73 6e75 0064 6577     c.light.sound.we
   ba22c:	7461 6568 5372 6174 6974 6e6f 6144 6174     atherStationData
   ba23c:	4c00 616f 6964 676e 6d00 6172 6772 6e6f     .Loading.mrargon
   ba24c:	0000 0000                                   ....

000ba250 <_ZTV16JsonWriterStaticILj256EE>:
	...
   ba258:	40b9 000b 40cd 000b 6564 6166 6c75 2074     .@...@..default 
   ba268:	4d00 4253 4c00 4253 3c00 5053 5349 7465     .MSB.LSB.<SPISet
   ba278:	6974 676e 2073 6564 6166 6c75 3e74 3c00     tings default>.<
   ba288:	5053 5349 7465 6974 676e 2073 7325 7525     SPISettings %s%u
   ba298:	2520 2073 4f4d 4544 7525 003e                %s MODE%u>.

000ba2a4 <_ZTVN8particle11SPISettingsE>:
	...
   ba2ac:	4749 000b 471d 000b 471f 000b               IG...G...G..

000ba2b8 <_ZN16AirQualitySensor12FORCE_SIGNALE>:
   ba2b8:	0000 0000                                   ....

000ba2bc <_ZN16AirQualitySensor13LOW_POLLUTIONE>:
   ba2bc:	0002 0000                                   ....

000ba2c0 <_ZN16AirQualitySensor14HIGH_POLLUTIONE>:
   ba2c0:	0001 0000                                   ....

000ba2c4 <_ZN16AirQualitySensor9FRESH_AIRE>:
   ba2c4:	0003 0000 755c 3025 5834 2500 2a2e 666c     ....\u%04X.%.*lf
   ba2d4:	2500 666c 0000 0000                         .%lf....

000ba2dc <_ZTV10JsonBuffer>:
	...
   ba2e4:	5159 000b 5175 000b                         YQ..uQ..

000ba2ec <_ZTV10JsonWriter>:
	...
   ba2f4:	5189 000b 519d 000b 0400 514d 5454 0004     .Q...Q....MQTT..
   ba304:	4d06 4951 6473 0370                         .MQIsdp.

000ba30c <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000ba314 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   ba31c:	62b9 000b 62bf 000b 62fd 000b 62cd 000b     .b...b...b...b..
   ba32c:	62bb 000b                                   .b..

000ba330 <_ZTVN5spark13EthernetClassE>:
	...
   ba338:	6847 000b 683d 000b 6833 000b 6829 000b     Gh..=h..3h..)h..
   ba348:	681d 000b 6811 000b 6ae1 000b 6ae9 000b     .h...h...j...j..
   ba358:	6805 000b 67fd 000b 67f3 000b 67e9 000b     .h...g...g...g..
   ba368:	6b19 000b                                   .k..

000ba36c <_ZTV7TwoWire>:
	...
   ba374:	6865 000b 68af 000b 6887 000b 6867 000b     eh...h...h..gh..
   ba384:	688f 000b 6897 000b 689f 000b 68a7 000b     .h...h...h...h..

000ba394 <_ZTV9IPAddress>:
	...
   ba39c:	6983 000b 6973 000b 6975 000b 7061 0070     .i..si..ui..app.

000ba3ac <_ZTVN5spark12NetworkClassE>:
	...
   ba3b4:	6aa1 000b 6aab 000b 6ab5 000b 6abf 000b     .j...j...j...j..
   ba3c4:	6ac9 000b 6ad5 000b 6ae1 000b 6ae9 000b     .j...j...j...j..
   ba3d4:	6af1 000b 6afd 000b 6b05 000b 6b0f 000b     .j...j...k...k..
   ba3e4:	6b19 000b                                   .k..

000ba3e8 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   ba3e8:	0800 1810 2820 3830 6977 6972 676e 7200     .... (08wiring.r
   ba3f8:	6365 2076 7265 6f72 2072 203d 6425 0000     ecv error = %d..

000ba408 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   ba410:	70b5 000b 70d9 000b 760b 000b 70e7 000b     .p...p...v...p..
   ba420:	70b9 000b                                   .p..

000ba424 <_ZTV9TCPClient>:
	...
   ba42c:	7165 000b 7199 000b 7031 000b 704b 000b     eq...q..1p..Kp..
   ba43c:	74a1 000b 7075 000b 7317 000b 70a9 000b     .t..up...s...p..
   ba44c:	73a9 000b 71e9 000b 7345 000b 7555 000b     .s...q..Es..Uu..
   ba45c:	72e5 000b 70ab 000b 705d 000b 70ed 000b     .r...p..]p...p..
   ba46c:	71c9 000b 5925 252d 2d6d 6425 2554 3a48     .q..%Y-%m-%dT%H:
   ba47c:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000ba48c <_ZTV11USARTSerial>:
	...
   ba494:	7699 000b 7705 000b 76dd 000b 6c05 000b     .v...w...v...l..
   ba4a4:	76ad 000b 76c9 000b 76bb 000b 76d7 000b     .v...v...v...v..
   ba4b4:	769b 000b 769f 000b                         .v...v..

000ba4bc <_ZTV9USBSerial>:
	...
   ba4c4:	7743 000b 77ab 000b 7781 000b 6c05 000b     Cw...w...w...l..
   ba4d4:	7773 000b 7745 000b 7755 000b 77a5 000b     sw..Ew..Uw...w..
   ba4e4:	7765 000b 773d 000b                         ew..=w..

000ba4ec <_ZTVN5spark9WiFiClassE>:
	...
   ba4f4:	78a3 000b 7899 000b 788f 000b 7845 000b     .x...x...x..Ex..
   ba504:	7883 000b 7877 000b 6ae1 000b 6ae9 000b     .x..wx...j...j..
   ba514:	786b 000b 7863 000b 7859 000b 784f 000b     kx..cx..Yx..Ox..
   ba524:	6b19 000b                                   .k..

000ba528 <_ZSt7nothrow>:
	...

000ba529 <_ZTSSt19_Sp_make_shared_tag>:
   ba529:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   ba539:	6572 5f64 6174 0067 0000                     red_tag....

000ba544 <_ZTISt19_Sp_make_shared_tag>:
   ba544:	a584 000b a529 000b                         ....)...

000ba54c <_ZTIN10__cxxabiv117__class_type_infoE>:
   ba54c:	a5e4 000b a558 000b a608 000b               ....X.......

000ba558 <_ZTSN10__cxxabiv117__class_type_infoE>:
   ba558:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   ba568:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   ba578:	0045 0000                                   E...

000ba57c <_ZTVN10__cxxabiv117__class_type_infoE>:
   ba57c:	0000 0000 a54c 000b 7d11 000b 7d25 000b     ....L....}..%}..
   ba58c:	7eb9 000b 7eb9 000b 7d8f 000b 7cd1 000b     .~...~...}...|..
   ba59c:	7d77 000b 7d39 000b 7d03 000b               w}..9}...}..

000ba5a8 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   ba5a8:	a5e4 000b a5b4 000b a54c 000b               ........L...

000ba5b4 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   ba5b4:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   ba5c4:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   ba5d4:	666e 456f 0000 0000                         nfoE....

000ba5dc <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   ba5dc:	0000 0000 a5a8 000b 7db9 000b 7dcd 000b     .........}...}..
   ba5ec:	7eb9 000b 7eb9 000b 7d8f 000b 7cd1 000b     .~...~...}...|..
   ba5fc:	7e8d 000b 7e19 000b 7de1 000b               .~...~...}..

000ba608 <_ZTISt9type_info>:
   ba608:	a584 000b a610 000b                         ........

000ba610 <_ZTSSt9type_info>:
   ba610:	7453 7439 7079 5f65 6e69 6f66 0000 0000     St9type_info....
	...

000ba628 <TWO52>:
   ba628:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.
   ba638:	4552 4e45 2054 616d 6c6c 636f 7320 6375     REENT malloc suc
   ba648:	6563 6465 6465 2f00 6d74 2f70 656a 6b6e     ceeded./tmp/jenk
   ba658:	6e69 2d73 4347 2d43 3031 702d 7069 6c65     ins-GCC-10-pipel
   ba668:	6e69 2d65 3834 325f 3230 3130 3231 5f34     ine-48_20201124_
   ba678:	3631 3630 3831 3630 3933 732f 6372 6e2f     1606180639/src/n
   ba688:	7765 696c 2f62 656e 6c77 6269 6c2f 6269     ewlib/newlib/lib
   ba698:	2f63 7473 6c64 6269 722f 6e61 2e64 0063     c/stdlib/rand.c.

000ba6a8 <link_const_variable_data_end>:
   ba6a8:	000b46b1 	.word	0x000b46b1
   ba6ac:	000b62a9 	.word	0x000b62a9
   ba6b0:	000b6851 	.word	0x000b6851
   ba6b4:	000b6a91 	.word	0x000b6a91
   ba6b8:	000b6bf1 	.word	0x000b6bf1
   ba6bc:	000b6d19 	.word	0x000b6d19
   ba6c0:	000b700d 	.word	0x000b700d
   ba6c4:	000b7685 	.word	0x000b7685
   ba6c8:	000b78ad 	.word	0x000b78ad

000ba6cc <link_constructors_end>:
   ba6cc:	00000000 	.word	0x00000000
