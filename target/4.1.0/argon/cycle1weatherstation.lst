
/Users/lucy/Desktop/AlevelProject/cycle1weatherstation/target/4.1.0/argon/cycle1weatherstation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004680  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b86a0  000b86a0  000086a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.exidx    00000008  000b86c4  000b86c4  000086c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .backup       00000004  2003f400  000b86cc  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  2003e5f0  000b86d0  0001e5f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000190  2003e660  2003e660  0002e660  2**2
                  ALLOC
  8 .module_info_suffix 00000028  000b8740  000b8740  00028740  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b8768  000b8768  00028768  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   0011aca3  00000000  00000000  0002876c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0001240b  00000000  00000000  0014340f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    000365b4  00000000  00000000  0015581a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002858  00000000  00000000  0018bdce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00009d88  00000000  00000000  0018e626  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000392e1  00000000  00000000  001983ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003bc5e  00000000  00000000  001d168f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001381a0  00000000  00000000  0020d2ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000754c  00000000  00000000  00345490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f004 f8e9 	bl	b8208 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f004 f8f1 	bl	b8224 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e5f0 	.word	0x2003e5f0
   b404c:	000b86d0 	.word	0x000b86d0
   b4050:	2003e660 	.word	0x2003e660
   b4054:	2003e660 	.word	0x2003e660
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f001 ff8f 	bl	b5f84 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000b8678 	.word	0x000b8678
   b4080:	000b869c 	.word	0x000b869c

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b82c 	b.w	b40e0 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 f86b 	bl	b4164 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f001 bf2f 	b.w	b5ef4 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f000 bf93 	b.w	b4fc0 <malloc>

000b409a <_Znaj>:
   b409a:	f000 bf91 	b.w	b4fc0 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f000 bf97 	b.w	b4fd0 <free>

000b40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a2:	7800      	ldrb	r0, [r0, #0]
   b40a4:	fab0 f080 	clz	r0, r0
   b40a8:	0940      	lsrs	r0, r0, #5
   b40aa:	4770      	bx	lr

000b40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ac:	2301      	movs	r3, #1
   b40ae:	7003      	strb	r3, [r0, #0]
   b40b0:	4770      	bx	lr

000b40b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b40b2:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b40b4:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b40b6:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b40b8:	b17c      	cbz	r4, b40da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b40ba:	6863      	ldr	r3, [r4, #4]
   b40bc:	3b01      	subs	r3, #1
   b40be:	6063      	str	r3, [r4, #4]
   b40c0:	b95b      	cbnz	r3, b40da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b40c2:	6823      	ldr	r3, [r4, #0]
   b40c4:	4620      	mov	r0, r4
   b40c6:	689b      	ldr	r3, [r3, #8]
   b40c8:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b40ca:	68a3      	ldr	r3, [r4, #8]
   b40cc:	3b01      	subs	r3, #1
   b40ce:	60a3      	str	r3, [r4, #8]
   b40d0:	b91b      	cbnz	r3, b40da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b40d2:	6823      	ldr	r3, [r4, #0]
   b40d4:	4620      	mov	r0, r4
   b40d6:	68db      	ldr	r3, [r3, #12]
   b40d8:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b40da:	4628      	mov	r0, r5
   b40dc:	bd38      	pop	{r3, r4, r5, pc}
	...

000b40e0 <setup>:
int temp = 0;
int humidity = 0;
int pressure = 0;
int altitude = 0;

void setup() {
   b40e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  bme.begin();
   b40e2:	4815      	ldr	r0, [pc, #84]	; (b4138 <setup+0x58>)
   b40e4:	f000 fd4d 	bl	b4b82 <_ZN15Adafruit_BME2805beginEv>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b40e8:	4914      	ldr	r1, [pc, #80]	; (b413c <setup+0x5c>)
   b40ea:	4815      	ldr	r0, [pc, #84]	; (b4140 <setup+0x60>)
   b40ec:	2300      	movs	r3, #0
   b40ee:	2202      	movs	r2, #2
   b40f0:	f000 fee6 	bl	b4ec0 <spark_variable>
   b40f4:	4913      	ldr	r1, [pc, #76]	; (b4144 <setup+0x64>)
   b40f6:	4814      	ldr	r0, [pc, #80]	; (b4148 <setup+0x68>)
   b40f8:	2300      	movs	r3, #0
   b40fa:	2202      	movs	r2, #2
   b40fc:	f000 fee0 	bl	b4ec0 <spark_variable>
   b4100:	4912      	ldr	r1, [pc, #72]	; (b414c <setup+0x6c>)
   b4102:	4813      	ldr	r0, [pc, #76]	; (b4150 <setup+0x70>)
   b4104:	2300      	movs	r3, #0
   b4106:	2202      	movs	r2, #2
   b4108:	f000 feda 	bl	b4ec0 <spark_variable>
   b410c:	4911      	ldr	r1, [pc, #68]	; (b4154 <setup+0x74>)
   b410e:	4812      	ldr	r0, [pc, #72]	; (b4158 <setup+0x78>)
   b4110:	2300      	movs	r3, #0
   b4112:	2202      	movs	r2, #2
   b4114:	f000 fed4 	bl	b4ec0 <spark_variable>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b4118:	4b10      	ldr	r3, [pc, #64]	; (b415c <setup+0x7c>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b411a:	4911      	ldr	r1, [pc, #68]	; (b4160 <setup+0x80>)
   b411c:	781b      	ldrb	r3, [r3, #0]
   b411e:	f88d 3000 	strb.w	r3, [sp]
   b4122:	2200      	movs	r2, #0
   b4124:	233c      	movs	r3, #60	; 0x3c
   b4126:	a802      	add	r0, sp, #8
   b4128:	f001 f8f0 	bl	b530c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b412c:	a803      	add	r0, sp, #12
   b412e:	f7ff ffc0 	bl	b40b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  Particle.variable("humidity", humidity);
  Particle.variable("pressure", pressure);
  Particle.variable("altitude", altitude);

  Particle.publish("Weather Station Online :)");
}
   b4132:	b005      	add	sp, #20
   b4134:	f85d fb04 	ldr.w	pc, [sp], #4
   b4138:	2003e668 	.word	0x2003e668
   b413c:	2003e6b4 	.word	0x2003e6b4
   b4140:	000b83bc 	.word	0x000b83bc
   b4144:	2003e6ac 	.word	0x2003e6ac
   b4148:	000b83c1 	.word	0x000b83c1
   b414c:	2003e6b0 	.word	0x2003e6b0
   b4150:	000b83ca 	.word	0x000b83ca
   b4154:	2003e664 	.word	0x2003e664
   b4158:	000b83d3 	.word	0x000b83d3
   b415c:	2003e660 	.word	0x2003e660
   b4160:	000b83dc 	.word	0x000b83dc

000b4164 <loop>:


void loop() {
   b4164:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  temp = (int)bme.readTemperature();
   b4166:	4819      	ldr	r0, [pc, #100]	; (b41cc <loop+0x68>)
   b4168:	f000 fb2e 	bl	b47c8 <_ZN15Adafruit_BME28015readTemperatureEv>
   b416c:	4b18      	ldr	r3, [pc, #96]	; (b41d0 <loop+0x6c>)
  humidity = (int)bme.readHumidity();
   b416e:	4817      	ldr	r0, [pc, #92]	; (b41cc <loop+0x68>)
  temp = (int)bme.readTemperature();
   b4170:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   b4174:	ed83 0a00 	vstr	s0, [r3]
  humidity = (int)bme.readHumidity();
   b4178:	f000 fb56 	bl	b4828 <_ZN15Adafruit_BME28012readHumidityEv>
   b417c:	4b15      	ldr	r3, [pc, #84]	; (b41d4 <loop+0x70>)
  pressure = (int)bme.readPressure();
   b417e:	4813      	ldr	r0, [pc, #76]	; (b41cc <loop+0x68>)
  humidity = (int)bme.readHumidity();
   b4180:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   b4184:	ed83 0a00 	vstr	s0, [r3]
  pressure = (int)bme.readPressure();
   b4188:	f000 fb98 	bl	b48bc <_ZN15Adafruit_BME28012readPressureEv>
   b418c:	4b12      	ldr	r3, [pc, #72]	; (b41d8 <loop+0x74>)
  altitude = (int)bme.readAltitude(1013.25); //sea level pressure, estimates altitude
   b418e:	480f      	ldr	r0, [pc, #60]	; (b41cc <loop+0x68>)
  pressure = (int)bme.readPressure();
   b4190:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   b4194:	ed83 0a00 	vstr	s0, [r3]
  altitude = (int)bme.readAltitude(1013.25); //sea level pressure, estimates altitude
   b4198:	ed9f 0a10 	vldr	s0, [pc, #64]	; b41dc <loop+0x78>
   b419c:	f000 fc60 	bl	b4a60 <_ZN15Adafruit_BME28012readAltitudeEf>
   b41a0:	4b0f      	ldr	r3, [pc, #60]	; (b41e0 <loop+0x7c>)
   b41a2:	4910      	ldr	r1, [pc, #64]	; (b41e4 <loop+0x80>)
   b41a4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   b41a8:	2200      	movs	r2, #0
   b41aa:	ed83 0a00 	vstr	s0, [r3]
   b41ae:	4b0e      	ldr	r3, [pc, #56]	; (b41e8 <loop+0x84>)
   b41b0:	781b      	ldrb	r3, [r3, #0]
   b41b2:	f88d 3000 	strb.w	r3, [sp]
   b41b6:	a802      	add	r0, sp, #8
   b41b8:	233c      	movs	r3, #60	; 0x3c
   b41ba:	f001 f8a7 	bl	b530c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b41be:	a803      	add	r0, sp, #12
   b41c0:	f7ff ff77 	bl	b40b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

  Particle.publish("testing");

   b41c4:	b005      	add	sp, #20
   b41c6:	f85d fb04 	ldr.w	pc, [sp], #4
   b41ca:	bf00      	nop
   b41cc:	2003e668 	.word	0x2003e668
   b41d0:	2003e6b4 	.word	0x2003e6b4
   b41d4:	2003e6ac 	.word	0x2003e6ac
   b41d8:	2003e6b0 	.word	0x2003e6b0
   b41dc:	447d5000 	.word	0x447d5000
   b41e0:	2003e664 	.word	0x2003e664
   b41e4:	000b83f6 	.word	0x000b83f6
   b41e8:	2003e660 	.word	0x2003e660

000b41ec <_GLOBAL__sub_I_bme>:
        val_(val) {
   b41ec:	4b02      	ldr	r3, [pc, #8]	; (b41f8 <_GLOBAL__sub_I_bme+0xc>)
Adafruit_BME280 bme;
   b41ee:	4803      	ldr	r0, [pc, #12]	; (b41fc <_GLOBAL__sub_I_bme+0x10>)
   b41f0:	2200      	movs	r2, #0
   b41f2:	701a      	strb	r2, [r3, #0]
   b41f4:	f000 b844 	b.w	b4280 <_ZN15Adafruit_BME280C1Ev>
   b41f8:	2003e660 	.word	0x2003e660
   b41fc:	2003e668 	.word	0x2003e668

000b4200 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b4200:	4770      	bx	lr

000b4202 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b4202:	b510      	push	{r4, lr}
  }
   b4204:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b4206:	4604      	mov	r4, r0
  }
   b4208:	f7ff ff49 	bl	b409e <_ZdlPvj>
   b420c:	4620      	mov	r0, r4
   b420e:	bd10      	pop	{r4, pc}

000b4210 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4210:	b40e      	push	{r1, r2, r3}
   b4212:	b503      	push	{r0, r1, lr}
   b4214:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b4216:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4218:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b421c:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b421e:	f001 fc32 	bl	b5a86 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4222:	b002      	add	sp, #8
   b4224:	f85d eb04 	ldr.w	lr, [sp], #4
   b4228:	b003      	add	sp, #12
   b422a:	4770      	bx	lr

000b422c <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b422c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b422e:	4604      	mov	r4, r0
   b4230:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b4232:	7922      	ldrb	r2, [r4, #4]
   b4234:	68a3      	ldr	r3, [r4, #8]
   b4236:	b132      	cbz	r2, b4246 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b4238:	b9a3      	cbnz	r3, b4264 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b423a:	490b      	ldr	r1, [pc, #44]	; (b4268 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b423c:	b002      	add	sp, #8
   b423e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b4242:	f001 bbef 	b.w	b5a24 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4246:	4a09      	ldr	r2, [pc, #36]	; (b426c <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b4248:	7b26      	ldrb	r6, [r4, #12]
   b424a:	4d09      	ldr	r5, [pc, #36]	; (b4270 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b424c:	4909      	ldr	r1, [pc, #36]	; (b4274 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b424e:	7b64      	ldrb	r4, [r4, #13]
   b4250:	2e01      	cmp	r6, #1
   b4252:	bf18      	it	ne
   b4254:	4629      	movne	r1, r5
   b4256:	e9cd 1400 	strd	r1, r4, [sp]
   b425a:	4907      	ldr	r1, [pc, #28]	; (b4278 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b425c:	f7ff ffd8 	bl	b4210 <_ZN5Print6printfEPKcz>
  }
   b4260:	b002      	add	sp, #8
   b4262:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4264:	4a05      	ldr	r2, [pc, #20]	; (b427c <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b4266:	e7ef      	b.n	b4248 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b4268:	000b840f 	.word	0x000b840f
   b426c:	000b8406 	.word	0x000b8406
   b4270:	000b840b 	.word	0x000b840b
   b4274:	000b8407 	.word	0x000b8407
   b4278:	000b8425 	.word	0x000b8425
   b427c:	000b83fe 	.word	0x000b83fe

000b4280 <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   b4280:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b4284:	6103      	str	r3, [r0, #16]
{ }
   b4286:	4770      	bx	lr

000b4288 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b4288:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b428a:	4c0b      	ldr	r4, [pc, #44]	; (b42b8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b428c:	7821      	ldrb	r1, [r4, #0]
   b428e:	f3bf 8f5b 	dmb	ish
   b4292:	f011 0101 	ands.w	r1, r1, #1
   b4296:	d10b      	bne.n	b42b0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b4298:	4620      	mov	r0, r4
   b429a:	9101      	str	r1, [sp, #4]
   b429c:	f7ff ff01 	bl	b40a2 <__cxa_guard_acquire>
   b42a0:	9901      	ldr	r1, [sp, #4]
   b42a2:	b128      	cbz	r0, b42b0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b42a4:	4805      	ldr	r0, [pc, #20]	; (b42bc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b42a6:	f001 fc2b 	bl	b5b00 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b42aa:	4620      	mov	r0, r4
   b42ac:	f7ff fefe 	bl	b40ac <__cxa_guard_release>
        return instance;
    }
   b42b0:	4802      	ldr	r0, [pc, #8]	; (b42bc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b42b2:	b002      	add	sp, #8
   b42b4:	bd10      	pop	{r4, pc}
   b42b6:	bf00      	nop
   b42b8:	2003e6b8 	.word	0x2003e6b8
   b42bc:	2003e6bc 	.word	0x2003e6bc

000b42c0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>:
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
   b42c0:	b508      	push	{r3, lr}
        instance().endTransaction();
   b42c2:	f7ff ffe1 	bl	b4288 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    }
   b42c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        instance().endTransaction();
   b42ca:	f001 bc37 	b.w	b5b3c <_ZN8SPIClass14endTransactionEv>

000b42ce <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>:
    int32_t beginTransaction(const particle::SPISettings& settings) {
   b42ce:	b507      	push	{r0, r1, r2, lr}
   b42d0:	9001      	str	r0, [sp, #4]
        return instance().beginTransaction(settings);
   b42d2:	f7ff ffd9 	bl	b4288 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b42d6:	9901      	ldr	r1, [sp, #4]
    }
   b42d8:	b003      	add	sp, #12
   b42da:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().beginTransaction(settings);
   b42de:	f001 bc47 	b.w	b5b70 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b42e2 <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   b42e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   b42e6:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b42ea:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   b42ec:	4605      	mov	r5, r0
   b42ee:	460f      	mov	r7, r1
    if (_sck == -1)
   b42f0:	d106      	bne.n	b4300 <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b42f2:	f7ff ffc9 	bl	b4288 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b42f6:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   b42f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b42fc:	f001 bca6 	b.w	b5c4c <_ZN8SPIClass8transferEh>
    uint8_t reply = 0;
   b4300:	2400      	movs	r4, #0
    for (int i=7; i>=0; i--) {
   b4302:	2607      	movs	r6, #7
        digitalWrite(_mosi, x & (1<<i));
   b4304:	f04f 0801 	mov.w	r8, #1
        digitalWrite(_sck, LOW);
   b4308:	f995 0013 	ldrsb.w	r0, [r5, #19]
   b430c:	2100      	movs	r1, #0
   b430e:	b280      	uxth	r0, r0
   b4310:	f001 feb9 	bl	b6086 <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   b4314:	f995 0011 	ldrsb.w	r0, [r5, #17]
   b4318:	fa08 f106 	lsl.w	r1, r8, r6
   b431c:	4039      	ands	r1, r7
   b431e:	b280      	uxth	r0, r0
   b4320:	f001 feb1 	bl	b6086 <digitalWrite>
        digitalWrite(_sck, HIGH);
   b4324:	f995 0013 	ldrsb.w	r0, [r5, #19]
   b4328:	2101      	movs	r1, #1
   b432a:	b280      	uxth	r0, r0
   b432c:	f001 feab 	bl	b6086 <digitalWrite>
        if (digitalRead(_miso))
   b4330:	f995 0012 	ldrsb.w	r0, [r5, #18]
        reply <<= 1;
   b4334:	0064      	lsls	r4, r4, #1
        if (digitalRead(_miso))
   b4336:	b280      	uxth	r0, r0
        reply <<= 1;
   b4338:	b2e4      	uxtb	r4, r4
        if (digitalRead(_miso))
   b433a:	f001 febd 	bl	b60b8 <digitalRead>
   b433e:	b108      	cbz	r0, b4344 <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   b4340:	f044 0401 	orr.w	r4, r4, #1
    for (int i=7; i>=0; i--) {
   b4344:	3e01      	subs	r6, #1
   b4346:	d2df      	bcs.n	b4308 <_ZN15Adafruit_BME2807spixferEh+0x26>
}
   b4348:	4620      	mov	r0, r4
   b434a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b4350 <_ZN15Adafruit_BME2806write8Ehh>:
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   b4350:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   b4352:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b4356:	3301      	adds	r3, #1
void Adafruit_BME280::write8(byte reg, byte value) {
   b4358:	4604      	mov	r4, r0
   b435a:	460e      	mov	r6, r1
   b435c:	4615      	mov	r5, r2
    if (_cs == -1) {
   b435e:	d113      	bne.n	b4388 <_ZN15Adafruit_BME2806write8Ehh+0x38>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b4360:	7901      	ldrb	r1, [r0, #4]
   b4362:	6800      	ldr	r0, [r0, #0]
   b4364:	f001 f9f8 	bl	b5758 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b4368:	6820      	ldr	r0, [r4, #0]
   b436a:	6803      	ldr	r3, [r0, #0]
   b436c:	4631      	mov	r1, r6
   b436e:	689b      	ldr	r3, [r3, #8]
   b4370:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   b4372:	6820      	ldr	r0, [r4, #0]
   b4374:	6803      	ldr	r3, [r0, #0]
   b4376:	4629      	mov	r1, r5
   b4378:	689b      	ldr	r3, [r3, #8]
   b437a:	4798      	blx	r3
        _wire -> endTransmission();
   b437c:	6820      	ldr	r0, [r4, #0]
        spixfer(value);
        digitalWrite(_cs, HIGH);
    if (_sck == -1)
        SPI.endTransaction(); // release the SPI bus
    }
}
   b437e:	b004      	add	sp, #16
   b4380:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        _wire -> endTransmission();
   b4384:	f001 b9f0 	b.w	b5768 <_ZN7TwoWire15endTransmissionEv>
        if (_sck == -1)
   b4388:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b438c:	3301      	adds	r3, #1
   b438e:	d10c      	bne.n	b43aa <_ZN15Adafruit_BME2806write8Ehh+0x5a>
      dataMode_{dataMode}
   b4390:	4b16      	ldr	r3, [pc, #88]	; (b43ec <_ZN15Adafruit_BME2806write8Ehh+0x9c>)
   b4392:	9300      	str	r3, [sp, #0]
   b4394:	2300      	movs	r3, #0
   b4396:	f88d 3004 	strb.w	r3, [sp, #4]
   b439a:	4b15      	ldr	r3, [pc, #84]	; (b43f0 <_ZN15Adafruit_BME2806write8Ehh+0xa0>)
   b439c:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b439e:	4668      	mov	r0, sp
   b43a0:	2301      	movs	r3, #1
   b43a2:	f8ad 300c 	strh.w	r3, [sp, #12]
   b43a6:	f7ff ff92 	bl	b42ce <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b43aa:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b43ae:	2100      	movs	r1, #0
   b43b0:	b280      	uxth	r0, r0
   b43b2:	f001 fe68 	bl	b6086 <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   b43b6:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   b43ba:	4620      	mov	r0, r4
   b43bc:	f7ff ff91 	bl	b42e2 <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   b43c0:	4629      	mov	r1, r5
   b43c2:	4620      	mov	r0, r4
   b43c4:	f7ff ff8d 	bl	b42e2 <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   b43c8:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b43cc:	2101      	movs	r1, #1
   b43ce:	b280      	uxth	r0, r0
   b43d0:	f001 fe59 	bl	b6086 <digitalWrite>
    if (_sck == -1)
   b43d4:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b43d8:	3301      	adds	r3, #1
   b43da:	d104      	bne.n	b43e6 <_ZN15Adafruit_BME2806write8Ehh+0x96>
}
   b43dc:	b004      	add	sp, #16
   b43de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        SPI.endTransaction(); // release the SPI bus
   b43e2:	f7ff bf6d 	b.w	b42c0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
}
   b43e6:	b004      	add	sp, #16
   b43e8:	bd70      	pop	{r4, r5, r6, pc}
   b43ea:	bf00      	nop
   b43ec:	000b844c 	.word	0x000b844c
   b43f0:	0007a120 	.word	0x0007a120

000b43f4 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
		 standby_duration  duration) {
   b43f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.osrs_t   = tempSampling;
   b43f6:	00db      	lsls	r3, r3, #3
   b43f8:	f002 0207 	and.w	r2, r2, #7
   b43fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
   b4400:	4313      	orrs	r3, r2
   b4402:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
		 standby_duration  duration) {
   b4406:	f89d 6018 	ldrb.w	r6, [sp, #24]
    _measReg.osrs_t   = tempSampling;
   b440a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    _humReg.osrs_h    = humSampling;
   b440e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 standby_duration  duration) {
   b4412:	f89d 501c 	ldrb.w	r5, [sp, #28]
   b4416:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _humReg.osrs_h    = humSampling;
   b441a:	f366 1347 	bfi	r3, r6, #5, #3
   b441e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.t_sb   = duration;
   b4422:	00ed      	lsls	r5, r5, #3
   b4424:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   b4428:	f007 0707 	and.w	r7, r7, #7
   b442c:	f005 0538 	and.w	r5, r5, #56	; 0x38
   b4430:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   b4434:	433d      	orrs	r5, r7
		 standby_duration  duration) {
   b4436:	4604      	mov	r4, r0
    _configReg.t_sb   = duration;
   b4438:	431d      	orrs	r5, r3
   b443a:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   b443e:	f006 0207 	and.w	r2, r6, #7
   b4442:	21f2      	movs	r1, #242	; 0xf2
   b4444:	f7ff ff84 	bl	b4350 <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   b4448:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   b444c:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   b4450:	f002 0107 	and.w	r1, r2, #7
   b4454:	009b      	lsls	r3, r3, #2
   b4456:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   b445a:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   b445e:	4620      	mov	r0, r4
   b4460:	21f5      	movs	r1, #245	; 0xf5
   b4462:	f7ff ff75 	bl	b4350 <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   b4466:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   b446a:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   b446e:	f002 0107 	and.w	r1, r2, #7
   b4472:	009b      	lsls	r3, r3, #2
   b4474:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   b4478:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   b447c:	4620      	mov	r0, r4
   b447e:	21f4      	movs	r1, #244	; 0xf4
}
   b4480:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   b4484:	f7ff bf64 	b.w	b4350 <_ZN15Adafruit_BME2806write8Ehh>

000b4488 <_ZN15Adafruit_BME2805read8Eh>:
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   b4488:	b530      	push	{r4, r5, lr}
    uint8_t value;
    
    if (_cs == -1) {
   b448a:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b448e:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::read8(byte reg) {
   b4490:	b085      	sub	sp, #20
   b4492:	4604      	mov	r4, r0
   b4494:	460d      	mov	r5, r1
    if (_cs == -1) {
   b4496:	d118      	bne.n	b44ca <_ZN15Adafruit_BME2805read8Eh+0x42>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b4498:	7901      	ldrb	r1, [r0, #4]
   b449a:	6800      	ldr	r0, [r0, #0]
   b449c:	f001 f95c 	bl	b5758 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b44a0:	6820      	ldr	r0, [r4, #0]
   b44a2:	6803      	ldr	r3, [r0, #0]
   b44a4:	4629      	mov	r1, r5
   b44a6:	689b      	ldr	r3, [r3, #8]
   b44a8:	4798      	blx	r3
        _wire -> endTransmission();
   b44aa:	6820      	ldr	r0, [r4, #0]
   b44ac:	f001 f95c 	bl	b5768 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   b44b0:	7921      	ldrb	r1, [r4, #4]
   b44b2:	6820      	ldr	r0, [r4, #0]
   b44b4:	2201      	movs	r2, #1
   b44b6:	f001 f94c 	bl	b5752 <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   b44ba:	6820      	ldr	r0, [r4, #0]
   b44bc:	6803      	ldr	r3, [r0, #0]
   b44be:	695b      	ldr	r3, [r3, #20]
   b44c0:	4798      	blx	r3
   b44c2:	b2c5      	uxtb	r5, r0
        digitalWrite(_cs, HIGH);
        if (_sck == -1)
            SPI.endTransaction(); // release the SPI bus
    }
    return value;
}
   b44c4:	4628      	mov	r0, r5
   b44c6:	b005      	add	sp, #20
   b44c8:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b44ca:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b44ce:	3301      	adds	r3, #1
   b44d0:	d10c      	bne.n	b44ec <_ZN15Adafruit_BME2805read8Eh+0x64>
   b44d2:	4b15      	ldr	r3, [pc, #84]	; (b4528 <_ZN15Adafruit_BME2805read8Eh+0xa0>)
   b44d4:	9300      	str	r3, [sp, #0]
   b44d6:	2300      	movs	r3, #0
   b44d8:	f88d 3004 	strb.w	r3, [sp, #4]
   b44dc:	4b13      	ldr	r3, [pc, #76]	; (b452c <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   b44de:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b44e0:	4668      	mov	r0, sp
   b44e2:	2301      	movs	r3, #1
   b44e4:	f8ad 300c 	strh.w	r3, [sp, #12]
   b44e8:	f7ff fef1 	bl	b42ce <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b44ec:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b44f0:	2100      	movs	r1, #0
   b44f2:	b280      	uxth	r0, r0
   b44f4:	f001 fdc7 	bl	b6086 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b44f8:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b44fc:	4620      	mov	r0, r4
   b44fe:	f7ff fef0 	bl	b42e2 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   b4502:	2100      	movs	r1, #0
   b4504:	4620      	mov	r0, r4
   b4506:	f7ff feec 	bl	b42e2 <_ZN15Adafruit_BME2807spixferEh>
   b450a:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   b450c:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4510:	2101      	movs	r1, #1
   b4512:	b280      	uxth	r0, r0
   b4514:	f001 fdb7 	bl	b6086 <digitalWrite>
        if (_sck == -1)
   b4518:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b451c:	3301      	adds	r3, #1
   b451e:	d1d1      	bne.n	b44c4 <_ZN15Adafruit_BME2805read8Eh+0x3c>
            SPI.endTransaction(); // release the SPI bus
   b4520:	f7ff fece 	bl	b42c0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   b4524:	e7ce      	b.n	b44c4 <_ZN15Adafruit_BME2805read8Eh+0x3c>
   b4526:	bf00      	nop
   b4528:	000b844c 	.word	0x000b844c
   b452c:	0007a120 	.word	0x0007a120

000b4530 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
    @brief return true if chip is busy reading cal data
    @returns true if reading calibration, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::isReadingCalibration(void)
{
   b4530:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   b4532:	21f3      	movs	r1, #243	; 0xf3
   b4534:	f7ff ffa8 	bl	b4488 <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
   b4538:	f000 0001 	and.w	r0, r0, #1
   b453c:	bd08      	pop	{r3, pc}
	...

000b4540 <_ZN15Adafruit_BME2806read16Eh>:
{
   b4540:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   b4542:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b4546:	3301      	adds	r3, #1
{
   b4548:	b085      	sub	sp, #20
   b454a:	4604      	mov	r4, r0
   b454c:	460d      	mov	r5, r1
    if (_cs == -1) {
   b454e:	d11f      	bne.n	b4590 <_ZN15Adafruit_BME2806read16Eh+0x50>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b4550:	7901      	ldrb	r1, [r0, #4]
   b4552:	6800      	ldr	r0, [r0, #0]
   b4554:	f001 f900 	bl	b5758 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b4558:	6820      	ldr	r0, [r4, #0]
   b455a:	6803      	ldr	r3, [r0, #0]
   b455c:	4629      	mov	r1, r5
   b455e:	689b      	ldr	r3, [r3, #8]
   b4560:	4798      	blx	r3
        _wire -> endTransmission();
   b4562:	6820      	ldr	r0, [r4, #0]
   b4564:	f001 f900 	bl	b5768 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   b4568:	7921      	ldrb	r1, [r4, #4]
   b456a:	6820      	ldr	r0, [r4, #0]
   b456c:	2202      	movs	r2, #2
   b456e:	f001 f8f0 	bl	b5752 <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   b4572:	6820      	ldr	r0, [r4, #0]
   b4574:	6803      	ldr	r3, [r0, #0]
   b4576:	695b      	ldr	r3, [r3, #20]
   b4578:	4798      	blx	r3
   b457a:	4605      	mov	r5, r0
   b457c:	6820      	ldr	r0, [r4, #0]
   b457e:	6803      	ldr	r3, [r0, #0]
   b4580:	695b      	ldr	r3, [r3, #20]
   b4582:	4798      	blx	r3
   b4584:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   b4588:	b285      	uxth	r5, r0
}
   b458a:	4628      	mov	r0, r5
   b458c:	b005      	add	sp, #20
   b458e:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b4590:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b4594:	3301      	adds	r3, #1
   b4596:	d10c      	bne.n	b45b2 <_ZN15Adafruit_BME2806read16Eh+0x72>
   b4598:	4b18      	ldr	r3, [pc, #96]	; (b45fc <_ZN15Adafruit_BME2806read16Eh+0xbc>)
   b459a:	9300      	str	r3, [sp, #0]
   b459c:	2300      	movs	r3, #0
   b459e:	f88d 3004 	strb.w	r3, [sp, #4]
   b45a2:	4b17      	ldr	r3, [pc, #92]	; (b4600 <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   b45a4:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b45a6:	4668      	mov	r0, sp
   b45a8:	2301      	movs	r3, #1
   b45aa:	f8ad 300c 	strh.w	r3, [sp, #12]
   b45ae:	f7ff fe8e 	bl	b42ce <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b45b2:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b45b6:	2100      	movs	r1, #0
   b45b8:	b280      	uxth	r0, r0
   b45ba:	f001 fd64 	bl	b6086 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b45be:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b45c2:	4620      	mov	r0, r4
   b45c4:	f7ff fe8d 	bl	b42e2 <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   b45c8:	2100      	movs	r1, #0
   b45ca:	4620      	mov	r0, r4
   b45cc:	f7ff fe89 	bl	b42e2 <_ZN15Adafruit_BME2807spixferEh>
   b45d0:	2100      	movs	r1, #0
   b45d2:	4605      	mov	r5, r0
   b45d4:	4620      	mov	r0, r4
   b45d6:	f7ff fe84 	bl	b42e2 <_ZN15Adafruit_BME2807spixferEh>
   b45da:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   b45de:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   b45e0:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b45e4:	2101      	movs	r1, #1
   b45e6:	b280      	uxth	r0, r0
   b45e8:	f001 fd4d 	bl	b6086 <digitalWrite>
        if (_sck == -1)
   b45ec:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b45f0:	3301      	adds	r3, #1
   b45f2:	d1ca      	bne.n	b458a <_ZN15Adafruit_BME2806read16Eh+0x4a>
            SPI.endTransaction(); // release the SPI bus
   b45f4:	f7ff fe64 	bl	b42c0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   b45f8:	e7c7      	b.n	b458a <_ZN15Adafruit_BME2806read16Eh+0x4a>
   b45fa:	bf00      	nop
   b45fc:	000b844c 	.word	0x000b844c
   b4600:	0007a120 	.word	0x0007a120

000b4604 <_ZN15Adafruit_BME2809read16_LEEh>:
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   b4604:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   b4606:	f7ff ff9b 	bl	b4540 <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   b460a:	ba40      	rev16	r0, r0
}
   b460c:	b280      	uxth	r0, r0
   b460e:	bd08      	pop	{r3, pc}

000b4610 <_ZN15Adafruit_BME28016readCoefficientsEv>:
{
   b4610:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b4612:	2188      	movs	r1, #136	; 0x88
{
   b4614:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b4616:	f7ff fff5 	bl	b4604 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   b461a:	218a      	movs	r1, #138	; 0x8a
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b461c:	82a0      	strh	r0, [r4, #20]
    return (int16_t)read16_LE(reg);
   b461e:	4620      	mov	r0, r4
   b4620:	f7ff fff0 	bl	b4604 <_ZN15Adafruit_BME2809read16_LEEh>
   b4624:	218c      	movs	r1, #140	; 0x8c
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   b4626:	82e0      	strh	r0, [r4, #22]
    return (int16_t)read16_LE(reg);
   b4628:	4620      	mov	r0, r4
   b462a:	f7ff ffeb 	bl	b4604 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b462e:	218e      	movs	r1, #142	; 0x8e
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   b4630:	8320      	strh	r0, [r4, #24]
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b4632:	4620      	mov	r0, r4
   b4634:	f7ff ffe6 	bl	b4604 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   b4638:	2190      	movs	r1, #144	; 0x90
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b463a:	8360      	strh	r0, [r4, #26]
    return (int16_t)read16_LE(reg);
   b463c:	4620      	mov	r0, r4
   b463e:	f7ff ffe1 	bl	b4604 <_ZN15Adafruit_BME2809read16_LEEh>
   b4642:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   b4644:	83a0      	strh	r0, [r4, #28]
    return (int16_t)read16_LE(reg);
   b4646:	4620      	mov	r0, r4
   b4648:	f7ff ffdc 	bl	b4604 <_ZN15Adafruit_BME2809read16_LEEh>
   b464c:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   b464e:	83e0      	strh	r0, [r4, #30]
    return (int16_t)read16_LE(reg);
   b4650:	4620      	mov	r0, r4
   b4652:	f7ff ffd7 	bl	b4604 <_ZN15Adafruit_BME2809read16_LEEh>
   b4656:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   b4658:	8420      	strh	r0, [r4, #32]
    return (int16_t)read16_LE(reg);
   b465a:	4620      	mov	r0, r4
   b465c:	f7ff ffd2 	bl	b4604 <_ZN15Adafruit_BME2809read16_LEEh>
   b4660:	2198      	movs	r1, #152	; 0x98
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   b4662:	8460      	strh	r0, [r4, #34]	; 0x22
    return (int16_t)read16_LE(reg);
   b4664:	4620      	mov	r0, r4
   b4666:	f7ff ffcd 	bl	b4604 <_ZN15Adafruit_BME2809read16_LEEh>
   b466a:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   b466c:	84a0      	strh	r0, [r4, #36]	; 0x24
    return (int16_t)read16_LE(reg);
   b466e:	4620      	mov	r0, r4
   b4670:	f7ff ffc8 	bl	b4604 <_ZN15Adafruit_BME2809read16_LEEh>
   b4674:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   b4676:	84e0      	strh	r0, [r4, #38]	; 0x26
    return (int16_t)read16_LE(reg);
   b4678:	4620      	mov	r0, r4
   b467a:	f7ff ffc3 	bl	b4604 <_ZN15Adafruit_BME2809read16_LEEh>
   b467e:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   b4680:	8520      	strh	r0, [r4, #40]	; 0x28
    return (int16_t)read16_LE(reg);
   b4682:	4620      	mov	r0, r4
   b4684:	f7ff ffbe 	bl	b4604 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b4688:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   b468a:	8560      	strh	r0, [r4, #42]	; 0x2a
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b468c:	4620      	mov	r0, r4
   b468e:	f7ff fefb 	bl	b4488 <_ZN15Adafruit_BME2805read8Eh>
    return (int16_t)read16_LE(reg);
   b4692:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b4694:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    return (int16_t)read16_LE(reg);
   b4698:	4620      	mov	r0, r4
   b469a:	f7ff ffb3 	bl	b4604 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b469e:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   b46a0:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b46a2:	4620      	mov	r0, r4
   b46a4:	f7ff fef0 	bl	b4488 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   b46a8:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b46aa:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   b46ae:	4620      	mov	r0, r4
   b46b0:	f7ff feea 	bl	b4488 <_ZN15Adafruit_BME2805read8Eh>
   b46b4:	21e5      	movs	r1, #229	; 0xe5
   b46b6:	4605      	mov	r5, r0
   b46b8:	4620      	mov	r0, r4
   b46ba:	f7ff fee5 	bl	b4488 <_ZN15Adafruit_BME2805read8Eh>
   b46be:	f000 030f 	and.w	r3, r0, #15
   b46c2:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   b46c6:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   b46c8:	21e6      	movs	r1, #230	; 0xe6
   b46ca:	4620      	mov	r0, r4
   b46cc:	f7ff fedc 	bl	b4488 <_ZN15Adafruit_BME2805read8Eh>
   b46d0:	21e5      	movs	r1, #229	; 0xe5
   b46d2:	4605      	mov	r5, r0
   b46d4:	4620      	mov	r0, r4
   b46d6:	f7ff fed7 	bl	b4488 <_ZN15Adafruit_BME2805read8Eh>
   b46da:	f3c0 1307 	ubfx	r3, r0, #4, #8
   b46de:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   b46e2:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   b46e4:	21e7      	movs	r1, #231	; 0xe7
   b46e6:	4620      	mov	r0, r4
   b46e8:	f7ff fece 	bl	b4488 <_ZN15Adafruit_BME2805read8Eh>
   b46ec:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
}
   b46f0:	bd38      	pop	{r3, r4, r5, pc}
	...

000b46f4 <_ZN15Adafruit_BME2806read24Eh>:
{
   b46f4:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   b46f6:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b46fa:	3301      	adds	r3, #1
{
   b46fc:	b085      	sub	sp, #20
   b46fe:	4604      	mov	r4, r0
   b4700:	460d      	mov	r5, r1
    if (_cs == -1) {
   b4702:	d123      	bne.n	b474c <_ZN15Adafruit_BME2806read24Eh+0x58>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b4704:	7901      	ldrb	r1, [r0, #4]
   b4706:	6800      	ldr	r0, [r0, #0]
   b4708:	f001 f826 	bl	b5758 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b470c:	6820      	ldr	r0, [r4, #0]
   b470e:	6803      	ldr	r3, [r0, #0]
   b4710:	4629      	mov	r1, r5
   b4712:	689b      	ldr	r3, [r3, #8]
   b4714:	4798      	blx	r3
        _wire -> endTransmission();
   b4716:	6820      	ldr	r0, [r4, #0]
   b4718:	f001 f826 	bl	b5768 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
   b471c:	7921      	ldrb	r1, [r4, #4]
   b471e:	6820      	ldr	r0, [r4, #0]
   b4720:	2203      	movs	r2, #3
   b4722:	f001 f816 	bl	b5752 <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   b4726:	6820      	ldr	r0, [r4, #0]
   b4728:	6803      	ldr	r3, [r0, #0]
   b472a:	695b      	ldr	r3, [r3, #20]
   b472c:	4798      	blx	r3
        value <<= 8;
   b472e:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   b4730:	6820      	ldr	r0, [r4, #0]
   b4732:	6803      	ldr	r3, [r0, #0]
   b4734:	695b      	ldr	r3, [r3, #20]
   b4736:	4798      	blx	r3
   b4738:	4328      	orrs	r0, r5
        value <<= 8;
   b473a:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   b473c:	6820      	ldr	r0, [r4, #0]
   b473e:	6803      	ldr	r3, [r0, #0]
   b4740:	695b      	ldr	r3, [r3, #20]
   b4742:	4798      	blx	r3
   b4744:	4305      	orrs	r5, r0
}
   b4746:	4628      	mov	r0, r5
   b4748:	b005      	add	sp, #20
   b474a:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b474c:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b4750:	3301      	adds	r3, #1
   b4752:	d10c      	bne.n	b476e <_ZN15Adafruit_BME2806read24Eh+0x7a>
   b4754:	4b1a      	ldr	r3, [pc, #104]	; (b47c0 <_ZN15Adafruit_BME2806read24Eh+0xcc>)
   b4756:	9300      	str	r3, [sp, #0]
   b4758:	2300      	movs	r3, #0
   b475a:	f88d 3004 	strb.w	r3, [sp, #4]
   b475e:	4b19      	ldr	r3, [pc, #100]	; (b47c4 <_ZN15Adafruit_BME2806read24Eh+0xd0>)
   b4760:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b4762:	4668      	mov	r0, sp
   b4764:	2301      	movs	r3, #1
   b4766:	f8ad 300c 	strh.w	r3, [sp, #12]
   b476a:	f7ff fdb0 	bl	b42ce <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b476e:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4772:	2100      	movs	r1, #0
   b4774:	b280      	uxth	r0, r0
   b4776:	f001 fc86 	bl	b6086 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b477a:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b477e:	4620      	mov	r0, r4
   b4780:	f7ff fdaf 	bl	b42e2 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   b4784:	2100      	movs	r1, #0
   b4786:	4620      	mov	r0, r4
   b4788:	f7ff fdab 	bl	b42e2 <_ZN15Adafruit_BME2807spixferEh>
        value |= spixfer(0);
   b478c:	2100      	movs	r1, #0
        value <<= 8;
   b478e:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   b4790:	4620      	mov	r0, r4
   b4792:	f7ff fda6 	bl	b42e2 <_ZN15Adafruit_BME2807spixferEh>
   b4796:	4328      	orrs	r0, r5
        value <<= 8;
   b4798:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   b479a:	2100      	movs	r1, #0
   b479c:	4620      	mov	r0, r4
   b479e:	f7ff fda0 	bl	b42e2 <_ZN15Adafruit_BME2807spixferEh>
   b47a2:	4305      	orrs	r5, r0
        digitalWrite(_cs, HIGH);
   b47a4:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b47a8:	2101      	movs	r1, #1
   b47aa:	b280      	uxth	r0, r0
   b47ac:	f001 fc6b 	bl	b6086 <digitalWrite>
        if (_sck == -1)
   b47b0:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b47b4:	3301      	adds	r3, #1
   b47b6:	d1c6      	bne.n	b4746 <_ZN15Adafruit_BME2806read24Eh+0x52>
            SPI.endTransaction(); // release the SPI bus
   b47b8:	f7ff fd82 	bl	b42c0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
    return value;
   b47bc:	e7c3      	b.n	b4746 <_ZN15Adafruit_BME2806read24Eh+0x52>
   b47be:	bf00      	nop
   b47c0:	000b844c 	.word	0x000b844c
   b47c4:	0007a120 	.word	0x0007a120

000b47c8 <_ZN15Adafruit_BME28015readTemperatureEv>:
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   b47c8:	b510      	push	{r4, lr}
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   b47ca:	21fa      	movs	r1, #250	; 0xfa
{
   b47cc:	4604      	mov	r4, r0
    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   b47ce:	f7ff ff91 	bl	b46f4 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
   b47d2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b47d6:	d01f      	beq.n	b4818 <_ZN15Adafruit_BME28015readTemperatureEv+0x50>
        return NAN;
    adc_T >>= 4;

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b47d8:	8aa1      	ldrh	r1, [r4, #20]
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   b47da:	ed9f 7a11 	vldr	s14, [pc, #68]	; b4820 <_ZN15Adafruit_BME28015readTemperatureEv+0x58>
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b47de:	004b      	lsls	r3, r1, #1
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b47e0:	ebc1 2220 	rsb	r2, r1, r0, asr #8
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b47e4:	ebc3 11e0 	rsb	r1, r3, r0, asr #7
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
   b47e8:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b47ec:	4359      	muls	r1, r3
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b47ee:	fb02 f302 	mul.w	r3, r2, r2
            ((int32_t)_bme280_calib.dig_T3)) >> 14;
   b47f2:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
   b47f6:	131b      	asrs	r3, r3, #12
   b47f8:	4353      	muls	r3, r2
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b47fa:	139b      	asrs	r3, r3, #14
    t_fine = var1 + var2;
   b47fc:	eb03 23e1 	add.w	r3, r3, r1, asr #11
   b4800:	60e3      	str	r3, [r4, #12]
    float T = (t_fine * 5 + 128) >> 8;
   b4802:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b4806:	3380      	adds	r3, #128	; 0x80
   b4808:	121b      	asrs	r3, r3, #8
   b480a:	ee07 3a90 	vmov	s15, r3
   b480e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    return T/100;
   b4812:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   b4816:	bd10      	pop	{r4, pc}
        return NAN;
   b4818:	ed9f 0a02 	vldr	s0, [pc, #8]	; b4824 <_ZN15Adafruit_BME28015readTemperatureEv+0x5c>
   b481c:	e7fb      	b.n	b4816 <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
   b481e:	bf00      	nop
   b4820:	42c80000 	.word	0x42c80000
   b4824:	7fc00000 	.word	0x7fc00000

000b4828 <_ZN15Adafruit_BME28012readHumidityEv>:
/*!
    @brief  Returns the humidity from the sensor
    @returns the humidity value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readHumidity(void) {
   b4828:	b538      	push	{r3, r4, r5, lr}
   b482a:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   b482c:	f7ff ffcc 	bl	b47c8 <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
   b4830:	21fd      	movs	r1, #253	; 0xfd
   b4832:	4620      	mov	r0, r4
   b4834:	f7ff fe84 	bl	b4540 <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
   b4838:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   b483c:	d038      	beq.n	b48b0 <_ZN15Adafruit_BME28012readHumidityEv+0x88>
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
   b483e:	68e1      	ldr	r1, [r4, #12]

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   b4840:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
    v_x1_u32r = (t_fine - ((int32_t)76800));
   b4844:	f5a1 3596 	sub.w	r5, r1, #76800	; 0x12c00
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   b4848:	f9b4 1032 	ldrsh.w	r1, [r4, #50]	; 0x32
   b484c:	0509      	lsls	r1, r1, #20
   b484e:	ebc1 3380 	rsb	r3, r1, r0, lsl #14
   b4852:	fb05 3312 	mls	r3, r5, r2, r3
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   b4856:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   b485a:	13da      	asrs	r2, r3, #15
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b485c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b4860:	f994 1036 	ldrsb.w	r1, [r4, #54]	; 0x36
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4864:	436b      	muls	r3, r5
   b4866:	12db      	asrs	r3, r3, #11
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b4868:	4369      	muls	r1, r5
   b486a:	1289      	asrs	r1, r1, #10
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b486c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b4870:	434b      	muls	r3, r1
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4872:	129b      	asrs	r3, r3, #10
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   b4874:	f9b4 102e 	ldrsh.w	r1, [r4, #46]	; 0x2e
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4878:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   b487c:	434b      	muls	r3, r1
   b487e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   b4882:	139b      	asrs	r3, r3, #14
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   b4884:	4353      	muls	r3, r2

    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   b4886:	13da      	asrs	r2, r3, #15
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
   b4888:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   b488c:	4352      	muls	r2, r2
   b488e:	11d2      	asrs	r2, r2, #7
   b4890:	434a      	muls	r2, r1
   b4892:	eba3 1322 	sub.w	r3, r3, r2, asr #4

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
   b4896:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
   b489a:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   b489e:	bfa8      	it	ge
   b48a0:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
    float h = (v_x1_u32r>>12);
   b48a4:	131b      	asrs	r3, r3, #12
   b48a6:	ee00 3a10 	vmov	s0, r3
    return  h / 1024.0;
   b48aa:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
}
   b48ae:	bd38      	pop	{r3, r4, r5, pc}
        return NAN;
   b48b0:	ed9f 0a01 	vldr	s0, [pc, #4]	; b48b8 <_ZN15Adafruit_BME28012readHumidityEv+0x90>
   b48b4:	e7fb      	b.n	b48ae <_ZN15Adafruit_BME28012readHumidityEv+0x86>
   b48b6:	bf00      	nop
   b48b8:	7fc00000 	.word	0x7fc00000

000b48bc <_ZN15Adafruit_BME28012readPressureEv>:
float Adafruit_BME280::readPressure(void) {
   b48bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b48c0:	4605      	mov	r5, r0
    readTemperature(); // must be done first to get t_fine
   b48c2:	f7ff ff81 	bl	b47c8 <_ZN15Adafruit_BME28015readTemperatureEv>
    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   b48c6:	21f7      	movs	r1, #247	; 0xf7
   b48c8:	4628      	mov	r0, r5
   b48ca:	f7ff ff13 	bl	b46f4 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   b48ce:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b48d2:	f000 80b6 	beq.w	b4a42 <_ZN15Adafruit_BME28012readPressureEv+0x186>
    var1 = ((int64_t)t_fine) - 128000;
   b48d6:	68e9      	ldr	r1, [r5, #12]
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b48d8:	f9b5 301c 	ldrsh.w	r3, [r5, #28]
    var1 = ((int64_t)t_fine) - 128000;
   b48dc:	ea4f 7ee1 	mov.w	lr, r1, asr #31
   b48e0:	f5b1 31fa 	subs.w	r1, r1, #128000	; 0x1f400
   b48e4:	f14e 3eff 	adc.w	lr, lr, #4294967295	; 0xffffffff
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b48e8:	17dc      	asrs	r4, r3, #31
   b48ea:	fb03 f20e 	mul.w	r2, r3, lr
   b48ee:	fb01 2204 	mla	r2, r1, r4, r2
   b48f2:	fba3 3401 	umull	r3, r4, r3, r1
   b48f6:	4422      	add	r2, r4
   b48f8:	0312      	lsls	r2, r2, #12
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b48fa:	fba1 7801 	umull	r7, r8, r1, r1
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b48fe:	031c      	lsls	r4, r3, #12
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b4900:	fb01 f60e 	mul.w	r6, r1, lr
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b4904:	ea42 5213 	orr.w	r2, r2, r3, lsr #20
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   b4908:	f9b5 301e 	ldrsh.w	r3, [r5, #30]
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b490c:	eb08 0846 	add.w	r8, r8, r6, lsl #1
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   b4910:	ea4f 7ce3 	mov.w	ip, r3, asr #31
   b4914:	fb03 f608 	mul.w	r6, r3, r8
   b4918:	fb07 660c 	mla	r6, r7, ip, r6
   b491c:	fba3 3c07 	umull	r3, ip, r3, r7
   b4920:	4466      	add	r6, ip
   b4922:	0a1b      	lsrs	r3, r3, #8
   b4924:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
   b4928:	191b      	adds	r3, r3, r4
   b492a:	eb42 2226 	adc.w	r2, r2, r6, asr #8
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   b492e:	8b6e      	ldrh	r6, [r5, #26]
   b4930:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
   b4934:	fba3 3406 	umull	r3, r4, r3, r6
   b4938:	fb06 4402 	mla	r4, r6, r2, r4
   b493c:	17e3      	asrs	r3, r4, #31
   b493e:	1062      	asrs	r2, r4, #1
    if (var1 == 0) {
   b4940:	ea53 0464 	orrs.w	r4, r3, r4, asr #1
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   b4944:	f04f 0c00 	mov.w	ip, #0
    if (var1 == 0) {
   b4948:	d07e      	beq.n	b4a48 <_ZN15Adafruit_BME28012readPressureEv+0x18c>
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b494a:	f9b5 4024 	ldrsh.w	r4, [r5, #36]	; 0x24
   b494e:	fb04 f608 	mul.w	r6, r4, r8
   b4952:	ea4f 79e4 	mov.w	r9, r4, asr #31
   b4956:	fb07 6609 	mla	r6, r7, r9, r6
   b495a:	fba4 4707 	umull	r4, r7, r4, r7
   b495e:	443e      	add	r6, r7
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   b4960:	f9b5 7022 	ldrsh.w	r7, [r5, #34]	; 0x22
   b4964:	ea4f 78e7 	mov.w	r8, r7, asr #31
   b4968:	fb07 fe0e 	mul.w	lr, r7, lr
   b496c:	fb01 ee08 	mla	lr, r1, r8, lr
   b4970:	fba7 7101 	umull	r7, r1, r7, r1
   b4974:	4471      	add	r1, lr
   b4976:	0449      	lsls	r1, r1, #17
   b4978:	ea41 31d7 	orr.w	r1, r1, r7, lsr #15
    adc_P >>= 4;
   b497c:	1100      	asrs	r0, r0, #4
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   b497e:	047f      	lsls	r7, r7, #17
   b4980:	193f      	adds	r7, r7, r4
    p = 1048576 - adc_P;
   b4982:	f5c0 1480 	rsb	r4, r0, #1048576	; 0x100000
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   b4986:	eb46 0601 	adc.w	r6, r6, r1
    p = (((p<<31) - var2)*3125) / var1;
   b498a:	f004 4000 	and.w	r0, r4, #2147483648	; 0x80000000
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   b498e:	f9b5 1020 	ldrsh.w	r1, [r5, #32]
   b4992:	eb1c 0707 	adds.w	r7, ip, r7
    p = (((p<<31) - var2)*3125) / var1;
   b4996:	ea40 0054 	orr.w	r0, r0, r4, lsr #1
   b499a:	07e4      	lsls	r4, r4, #31
   b499c:	1be4      	subs	r4, r4, r7
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   b499e:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
    p = (((p<<31) - var2)*3125) / var1;
   b49a2:	f640 4135 	movw	r1, #3125	; 0xc35
   b49a6:	eb60 0606 	sbc.w	r6, r0, r6
   b49aa:	fba4 0401 	umull	r0, r4, r4, r1
   b49ae:	fb01 4106 	mla	r1, r1, r6, r4
   b49b2:	f003 fa69 	bl	b7e88 <__aeabi_ldivmod>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   b49b6:	f9b5 202a 	ldrsh.w	r2, [r5, #42]	; 0x2a
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b49ba:	f9b5 6028 	ldrsh.w	r6, [r5, #40]	; 0x28
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   b49be:	ea4f 3c61 	mov.w	ip, r1, asr #13
   b49c2:	0b43      	lsrs	r3, r0, #13
   b49c4:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
   b49c8:	fb02 f70c 	mul.w	r7, r2, ip
   b49cc:	17d4      	asrs	r4, r2, #31
   b49ce:	fb03 7704 	mla	r7, r3, r4, r7
   b49d2:	fba2 2403 	umull	r2, r4, r2, r3
   b49d6:	443c      	add	r4, r7
   b49d8:	fb02 f70c 	mul.w	r7, r2, ip
   b49dc:	fb03 7704 	mla	r7, r3, r4, r7
   b49e0:	fba2 2303 	umull	r2, r3, r2, r3
   b49e4:	441f      	add	r7, r3
   b49e6:	0e53      	lsrs	r3, r2, #25
   b49e8:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b49ec:	181b      	adds	r3, r3, r0
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b49ee:	ea4f 72e6 	mov.w	r2, r6, asr #31
   b49f2:	fb06 f401 	mul.w	r4, r6, r1
    p = (((p<<31) - var2)*3125) / var1;
   b49f6:	4686      	mov	lr, r0
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b49f8:	eb41 6767 	adc.w	r7, r1, r7, asr #25
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b49fc:	fb02 4100 	mla	r1, r2, r0, r4
   b4a00:	fba6 060e 	umull	r0, r6, r6, lr
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b4a04:	f9b5 4026 	ldrsh.w	r4, [r5, #38]	; 0x26
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b4a08:	4431      	add	r1, r6
   b4a0a:	0cc0      	lsrs	r0, r0, #19
   b4a0c:	ea40 3041 	orr.w	r0, r0, r1, lsl #13
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b4a10:	1818      	adds	r0, r3, r0
   b4a12:	ea4f 75e4 	mov.w	r5, r4, asr #31
   b4a16:	eb47 41e1 	adc.w	r1, r7, r1, asr #19
   b4a1a:	0a00      	lsrs	r0, r0, #8
   b4a1c:	012d      	lsls	r5, r5, #4
   b4a1e:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
   b4a22:	ea45 7514 	orr.w	r5, r5, r4, lsr #28
   b4a26:	0124      	lsls	r4, r4, #4
   b4a28:	1820      	adds	r0, r4, r0
    return (float)p/256;
   b4a2a:	eb45 2121 	adc.w	r1, r5, r1, asr #8
   b4a2e:	f003 f9ed 	bl	b7e0c <__aeabi_l2f>
   b4a32:	ed9f 0a07 	vldr	s0, [pc, #28]	; b4a50 <_ZN15Adafruit_BME28012readPressureEv+0x194>
   b4a36:	ee07 0a90 	vmov	s15, r0
   b4a3a:	ee27 0a80 	vmul.f32	s0, s15, s0
}
   b4a3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return NAN;
   b4a42:	ed9f 0a04 	vldr	s0, [pc, #16]	; b4a54 <_ZN15Adafruit_BME28012readPressureEv+0x198>
   b4a46:	e7fa      	b.n	b4a3e <_ZN15Adafruit_BME28012readPressureEv+0x182>
        return 0; // avoid exception caused by division by zero
   b4a48:	ed9f 0a03 	vldr	s0, [pc, #12]	; b4a58 <_ZN15Adafruit_BME28012readPressureEv+0x19c>
   b4a4c:	e7f7      	b.n	b4a3e <_ZN15Adafruit_BME28012readPressureEv+0x182>
   b4a4e:	bf00      	nop
   b4a50:	3b800000 	.word	0x3b800000
   b4a54:	7fc00000 	.word	0x7fc00000
	...

000b4a60 <_ZN15Adafruit_BME28012readAltitudeEf>:
    @param  seaLevel      Sea-level pressure in hPa
    @returns the altitude value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readAltitude(float seaLevel)
{
   b4a60:	b508      	push	{r3, lr}
   b4a62:	ed2d 8b02 	vpush	{d8}
   b4a66:	eeb0 8a40 	vmov.f32	s16, s0

    // Note that using the equation from wikipedia can give bad results
    // at high altitude. See this thread for more information:
    //  http://forums.adafruit.com/viewtopic.php?f=22&t=58064

    float atmospheric = readPressure() / 100.0F;
   b4a6a:	f7ff ff27 	bl	b48bc <_ZN15Adafruit_BME28012readPressureEv>
   b4a6e:	ed9f 7a16 	vldr	s14, [pc, #88]	; b4ac8 <_ZN15Adafruit_BME28012readAltitudeEf+0x68>
   b4a72:	eec0 7a07 	vdiv.f32	s15, s0, s14
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   b4a76:	eec7 7a88 	vdiv.f32	s15, s15, s16
   b4a7a:	ee17 0a90 	vmov	r0, s15
   b4a7e:	f002 fd9d 	bl	b75bc <__aeabi_f2d>
   b4a82:	ed9f 1b0d 	vldr	d1, [pc, #52]	; b4ab8 <_ZN15Adafruit_BME28012readAltitudeEf+0x58>
   b4a86:	ec41 0b10 	vmov	d0, r0, r1
   b4a8a:	f001 fbad 	bl	b61e8 <pow>
    return 44330.0 * (1.0 - pow(atmospheric / seaLevel, 0.1903));
   b4a8e:	490f      	ldr	r1, [pc, #60]	; (b4acc <_ZN15Adafruit_BME28012readAltitudeEf+0x6c>)
   b4a90:	ec53 2b10 	vmov	r2, r3, d0
   b4a94:	2000      	movs	r0, #0
   b4a96:	f002 fc31 	bl	b72fc <__aeabi_dsub>
   b4a9a:	a309      	add	r3, pc, #36	; (adr r3, b4ac0 <_ZN15Adafruit_BME28012readAltitudeEf+0x60>)
   b4a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4aa0:	f002 fde4 	bl	b766c <__aeabi_dmul>
   b4aa4:	f003 f892 	bl	b7bcc <__aeabi_d2f>
}
   b4aa8:	ecbd 8b02 	vpop	{d8}
   b4aac:	ee00 0a10 	vmov	s0, r0
   b4ab0:	bd08      	pop	{r3, pc}
   b4ab2:	bf00      	nop
   b4ab4:	f3af 8000 	nop.w
   b4ab8:	1a36e2eb 	.word	0x1a36e2eb
   b4abc:	3fc85bc0 	.word	0x3fc85bc0
   b4ac0:	00000000 	.word	0x00000000
   b4ac4:	40e5a540 	.word	0x40e5a540
   b4ac8:	42c80000 	.word	0x42c80000
   b4acc:	3ff00000 	.word	0x3ff00000

000b4ad0 <_ZN15Adafruit_BME2804initEv>:
{
   b4ad0:	b530      	push	{r4, r5, lr}
   b4ad2:	4604      	mov	r4, r0
    if (_cs == -1) {
   b4ad4:	f990 0010 	ldrsb.w	r0, [r0, #16]
   b4ad8:	1c42      	adds	r2, r0, #1
{
   b4ada:	b085      	sub	sp, #20
    if (_cs == -1) {
   b4adc:	d119      	bne.n	b4b12 <_ZN15Adafruit_BME2804initEv+0x42>
        _wire -> begin();
   b4ade:	6820      	ldr	r0, [r4, #0]
   b4ae0:	f000 fe08 	bl	b56f4 <_ZN7TwoWire5beginEv>
    _sensorID = read8(BME280_REGISTER_CHIPID);
   b4ae4:	21d0      	movs	r1, #208	; 0xd0
   b4ae6:	4620      	mov	r0, r4
   b4ae8:	f7ff fcce 	bl	b4488 <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   b4aec:	2860      	cmp	r0, #96	; 0x60
    _sensorID = read8(BME280_REGISTER_CHIPID);
   b4aee:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   b4af0:	d145      	bne.n	b4b7e <_ZN15Adafruit_BME2804initEv+0xae>
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   b4af2:	4620      	mov	r0, r4
   b4af4:	22b6      	movs	r2, #182	; 0xb6
   b4af6:	21e0      	movs	r1, #224	; 0xe0
   b4af8:	f7ff fc2a 	bl	b4350 <_ZN15Adafruit_BME2806write8Ehh>
    delay(300);
   b4afc:	f44f 7096 	mov.w	r0, #300	; 0x12c
   b4b00:	f000 fa9e 	bl	b5040 <delay>
    while (isReadingCalibration())
   b4b04:	4620      	mov	r0, r4
   b4b06:	f7ff fd13 	bl	b4530 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   b4b0a:	4605      	mov	r5, r0
   b4b0c:	b328      	cbz	r0, b4b5a <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   b4b0e:	2064      	movs	r0, #100	; 0x64
   b4b10:	e7f6      	b.n	b4b00 <_ZN15Adafruit_BME2804initEv+0x30>
        digitalWrite(_cs, HIGH);
   b4b12:	2101      	movs	r1, #1
   b4b14:	b280      	uxth	r0, r0
   b4b16:	f001 fab6 	bl	b6086 <digitalWrite>
        pinMode(_cs, OUTPUT);
   b4b1a:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4b1e:	2101      	movs	r1, #1
   b4b20:	b280      	uxth	r0, r0
   b4b22:	f001 fa9f 	bl	b6064 <pinMode>
        if (_sck == -1) {
   b4b26:	f994 0013 	ldrsb.w	r0, [r4, #19]
   b4b2a:	1c43      	adds	r3, r0, #1
   b4b2c:	d104      	bne.n	b4b38 <_ZN15Adafruit_BME2804initEv+0x68>
        instance().begin();
   b4b2e:	f7ff fbab 	bl	b4288 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4b32:	f000 ffef 	bl	b5b14 <_ZN8SPIClass5beginEv>
    }
   b4b36:	e7d5      	b.n	b4ae4 <_ZN15Adafruit_BME2804initEv+0x14>
            pinMode(_sck, OUTPUT);
   b4b38:	2101      	movs	r1, #1
   b4b3a:	b280      	uxth	r0, r0
   b4b3c:	f001 fa92 	bl	b6064 <pinMode>
            pinMode(_mosi, OUTPUT);
   b4b40:	f994 0011 	ldrsb.w	r0, [r4, #17]
   b4b44:	2101      	movs	r1, #1
   b4b46:	b280      	uxth	r0, r0
   b4b48:	f001 fa8c 	bl	b6064 <pinMode>
            pinMode(_miso, INPUT);
   b4b4c:	f994 0012 	ldrsb.w	r0, [r4, #18]
   b4b50:	2100      	movs	r1, #0
   b4b52:	b280      	uxth	r0, r0
   b4b54:	f001 fa86 	bl	b6064 <pinMode>
   b4b58:	e7c4      	b.n	b4ae4 <_ZN15Adafruit_BME2804initEv+0x14>
    readCoefficients(); // read trimming parameters, see DS 4.2.2
   b4b5a:	4620      	mov	r0, r4
   b4b5c:	f7ff fd58 	bl	b4610 <_ZN15Adafruit_BME28016readCoefficientsEv>
    setSampling(); // use defaults
   b4b60:	2305      	movs	r3, #5
   b4b62:	9300      	str	r3, [sp, #0]
   b4b64:	461a      	mov	r2, r3
   b4b66:	2103      	movs	r1, #3
   b4b68:	4620      	mov	r0, r4
   b4b6a:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b4b6e:	f7ff fc41 	bl	b43f4 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
    delay(100);
   b4b72:	2064      	movs	r0, #100	; 0x64
   b4b74:	f000 fa64 	bl	b5040 <delay>
    return true;
   b4b78:	2001      	movs	r0, #1
}
   b4b7a:	b005      	add	sp, #20
   b4b7c:	bd30      	pop	{r4, r5, pc}
        return false;
   b4b7e:	2000      	movs	r0, #0
   b4b80:	e7fb      	b.n	b4b7a <_ZN15Adafruit_BME2804initEv+0xaa>

000b4b82 <_ZN15Adafruit_BME2805beginEv>:
    _i2caddr = BME280_ADDRESS;
   b4b82:	2377      	movs	r3, #119	; 0x77
{
   b4b84:	b510      	push	{r4, lr}
    _i2caddr = BME280_ADDRESS;
   b4b86:	7103      	strb	r3, [r0, #4]
{
   b4b88:	4604      	mov	r4, r0
	_wire = &Wire;
   b4b8a:	f001 fac3 	bl	b6114 <_Z19__fetch_global_Wirev>
   b4b8e:	6020      	str	r0, [r4, #0]
	status = init();
   b4b90:	4620      	mov	r0, r4
   b4b92:	f7ff ff9d 	bl	b4ad0 <_ZN15Adafruit_BME2804initEv>
 	if(!status){
   b4b96:	b930      	cbnz	r0, b4ba6 <_ZN15Adafruit_BME2805beginEv+0x24>
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
   b4b98:	2376      	movs	r3, #118	; 0x76
   b4b9a:	7123      	strb	r3, [r4, #4]
 		status = init();
   b4b9c:	4620      	mov	r0, r4
}
   b4b9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 		status = init();
   b4ba2:	f7ff bf95 	b.w	b4ad0 <_ZN15Adafruit_BME2804initEv>
}
   b4ba6:	bd10      	pop	{r4, pc}

000b4ba8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4ba8:	b508      	push	{r3, lr}
   b4baa:	4b02      	ldr	r3, [pc, #8]	; (b4bb4 <os_mutex_recursive_create+0xc>)
   b4bac:	681b      	ldr	r3, [r3, #0]
   b4bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4bb0:	9301      	str	r3, [sp, #4]
   b4bb2:	bd08      	pop	{r3, pc}
   b4bb4:	00030248 	.word	0x00030248

000b4bb8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4bb8:	b508      	push	{r3, lr}
   b4bba:	4b02      	ldr	r3, [pc, #8]	; (b4bc4 <HAL_RNG_GetRandomNumber+0xc>)
   b4bbc:	681b      	ldr	r3, [r3, #0]
   b4bbe:	685b      	ldr	r3, [r3, #4]
   b4bc0:	9301      	str	r3, [sp, #4]
   b4bc2:	bd08      	pop	{r3, pc}
   b4bc4:	00030218 	.word	0x00030218

000b4bc8 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4bc8:	b508      	push	{r3, lr}
   b4bca:	4b02      	ldr	r3, [pc, #8]	; (b4bd4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4bcc:	681b      	ldr	r3, [r3, #0]
   b4bce:	695b      	ldr	r3, [r3, #20]
   b4bd0:	9301      	str	r3, [sp, #4]
   b4bd2:	bd08      	pop	{r3, pc}
   b4bd4:	00030218 	.word	0x00030218

000b4bd8 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b4bd8:	b508      	push	{r3, lr}
   b4bda:	4b02      	ldr	r3, [pc, #8]	; (b4be4 <HAL_Pin_Mode+0xc>)
   b4bdc:	681b      	ldr	r3, [r3, #0]
   b4bde:	689b      	ldr	r3, [r3, #8]
   b4be0:	9301      	str	r3, [sp, #4]
   b4be2:	bd08      	pop	{r3, pc}
   b4be4:	0003022c 	.word	0x0003022c

000b4be8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b4be8:	b508      	push	{r3, lr}
   b4bea:	4b02      	ldr	r3, [pc, #8]	; (b4bf4 <HAL_Get_Pin_Mode+0xc>)
   b4bec:	681b      	ldr	r3, [r3, #0]
   b4bee:	68db      	ldr	r3, [r3, #12]
   b4bf0:	9301      	str	r3, [sp, #4]
   b4bf2:	bd08      	pop	{r3, pc}
   b4bf4:	0003022c 	.word	0x0003022c

000b4bf8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b4bf8:	b508      	push	{r3, lr}
   b4bfa:	4b02      	ldr	r3, [pc, #8]	; (b4c04 <HAL_GPIO_Write+0xc>)
   b4bfc:	681b      	ldr	r3, [r3, #0]
   b4bfe:	691b      	ldr	r3, [r3, #16]
   b4c00:	9301      	str	r3, [sp, #4]
   b4c02:	bd08      	pop	{r3, pc}
   b4c04:	0003022c 	.word	0x0003022c

000b4c08 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b4c08:	b508      	push	{r3, lr}
   b4c0a:	4b02      	ldr	r3, [pc, #8]	; (b4c14 <HAL_GPIO_Read+0xc>)
   b4c0c:	681b      	ldr	r3, [r3, #0]
   b4c0e:	695b      	ldr	r3, [r3, #20]
   b4c10:	9301      	str	r3, [sp, #4]
   b4c12:	bd08      	pop	{r3, pc}
   b4c14:	0003022c 	.word	0x0003022c

000b4c18 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b4c18:	b508      	push	{r3, lr}
   b4c1a:	4b02      	ldr	r3, [pc, #8]	; (b4c24 <hal_i2c_begin+0xc>)
   b4c1c:	681b      	ldr	r3, [r3, #0]
   b4c1e:	68db      	ldr	r3, [r3, #12]
   b4c20:	9301      	str	r3, [sp, #4]
   b4c22:	bd08      	pop	{r3, pc}
   b4c24:	00030228 	.word	0x00030228

000b4c28 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b4c28:	b508      	push	{r3, lr}
   b4c2a:	4b02      	ldr	r3, [pc, #8]	; (b4c34 <hal_i2c_begin_transmission+0xc>)
   b4c2c:	681b      	ldr	r3, [r3, #0]
   b4c2e:	699b      	ldr	r3, [r3, #24]
   b4c30:	9301      	str	r3, [sp, #4]
   b4c32:	bd08      	pop	{r3, pc}
   b4c34:	00030228 	.word	0x00030228

000b4c38 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b4c38:	b508      	push	{r3, lr}
   b4c3a:	4b02      	ldr	r3, [pc, #8]	; (b4c44 <hal_i2c_end_transmission+0xc>)
   b4c3c:	681b      	ldr	r3, [r3, #0]
   b4c3e:	69db      	ldr	r3, [r3, #28]
   b4c40:	9301      	str	r3, [sp, #4]
   b4c42:	bd08      	pop	{r3, pc}
   b4c44:	00030228 	.word	0x00030228

000b4c48 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4c48:	b508      	push	{r3, lr}
   b4c4a:	4b02      	ldr	r3, [pc, #8]	; (b4c54 <hal_i2c_write+0xc>)
   b4c4c:	681b      	ldr	r3, [r3, #0]
   b4c4e:	6a1b      	ldr	r3, [r3, #32]
   b4c50:	9301      	str	r3, [sp, #4]
   b4c52:	bd08      	pop	{r3, pc}
   b4c54:	00030228 	.word	0x00030228

000b4c58 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4c58:	b508      	push	{r3, lr}
   b4c5a:	4b02      	ldr	r3, [pc, #8]	; (b4c64 <hal_i2c_available+0xc>)
   b4c5c:	681b      	ldr	r3, [r3, #0]
   b4c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4c60:	9301      	str	r3, [sp, #4]
   b4c62:	bd08      	pop	{r3, pc}
   b4c64:	00030228 	.word	0x00030228

000b4c68 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4c68:	b508      	push	{r3, lr}
   b4c6a:	4b02      	ldr	r3, [pc, #8]	; (b4c74 <hal_i2c_read+0xc>)
   b4c6c:	681b      	ldr	r3, [r3, #0]
   b4c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4c70:	9301      	str	r3, [sp, #4]
   b4c72:	bd08      	pop	{r3, pc}
   b4c74:	00030228 	.word	0x00030228

000b4c78 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4c78:	b508      	push	{r3, lr}
   b4c7a:	4b02      	ldr	r3, [pc, #8]	; (b4c84 <hal_i2c_peek+0xc>)
   b4c7c:	681b      	ldr	r3, [r3, #0]
   b4c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4c80:	9301      	str	r3, [sp, #4]
   b4c82:	bd08      	pop	{r3, pc}
   b4c84:	00030228 	.word	0x00030228

000b4c88 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4c88:	b508      	push	{r3, lr}
   b4c8a:	4b02      	ldr	r3, [pc, #8]	; (b4c94 <hal_i2c_flush+0xc>)
   b4c8c:	681b      	ldr	r3, [r3, #0]
   b4c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4c90:	9301      	str	r3, [sp, #4]
   b4c92:	bd08      	pop	{r3, pc}
   b4c94:	00030228 	.word	0x00030228

000b4c98 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4c98:	b508      	push	{r3, lr}
   b4c9a:	4b02      	ldr	r3, [pc, #8]	; (b4ca4 <hal_i2c_is_enabled+0xc>)
   b4c9c:	681b      	ldr	r3, [r3, #0]
   b4c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4ca0:	9301      	str	r3, [sp, #4]
   b4ca2:	bd08      	pop	{r3, pc}
   b4ca4:	00030228 	.word	0x00030228

000b4ca8 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4ca8:	b508      	push	{r3, lr}
   b4caa:	4b02      	ldr	r3, [pc, #8]	; (b4cb4 <hal_i2c_init+0xc>)
   b4cac:	681b      	ldr	r3, [r3, #0]
   b4cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4cb0:	9301      	str	r3, [sp, #4]
   b4cb2:	bd08      	pop	{r3, pc}
   b4cb4:	00030228 	.word	0x00030228

000b4cb8 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b4cb8:	b508      	push	{r3, lr}
   b4cba:	4b02      	ldr	r3, [pc, #8]	; (b4cc4 <hal_i2c_request_ex+0xc>)
   b4cbc:	681b      	ldr	r3, [r3, #0]
   b4cbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4cc0:	9301      	str	r3, [sp, #4]
   b4cc2:	bd08      	pop	{r3, pc}
   b4cc4:	00030228 	.word	0x00030228

000b4cc8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4cc8:	b508      	push	{r3, lr}
   b4cca:	4b02      	ldr	r3, [pc, #8]	; (b4cd4 <inet_inet_ntop+0xc>)
   b4ccc:	681b      	ldr	r3, [r3, #0]
   b4cce:	695b      	ldr	r3, [r3, #20]
   b4cd0:	9301      	str	r3, [sp, #4]
   b4cd2:	bd08      	pop	{r3, pc}
   b4cd4:	00030264 	.word	0x00030264

000b4cd8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4cd8:	b508      	push	{r3, lr}
   b4cda:	4b02      	ldr	r3, [pc, #8]	; (b4ce4 <netdb_freeaddrinfo+0xc>)
   b4cdc:	681b      	ldr	r3, [r3, #0]
   b4cde:	689b      	ldr	r3, [r3, #8]
   b4ce0:	9301      	str	r3, [sp, #4]
   b4ce2:	bd08      	pop	{r3, pc}
   b4ce4:	00030268 	.word	0x00030268

000b4ce8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4ce8:	b508      	push	{r3, lr}
   b4cea:	4b02      	ldr	r3, [pc, #8]	; (b4cf4 <netdb_getaddrinfo+0xc>)
   b4cec:	681b      	ldr	r3, [r3, #0]
   b4cee:	68db      	ldr	r3, [r3, #12]
   b4cf0:	9301      	str	r3, [sp, #4]
   b4cf2:	bd08      	pop	{r3, pc}
   b4cf4:	00030268 	.word	0x00030268

000b4cf8 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b4cf8:	b508      	push	{r3, lr}
   b4cfa:	4b02      	ldr	r3, [pc, #8]	; (b4d04 <hal_spi_begin+0xc>)
   b4cfc:	681b      	ldr	r3, [r3, #0]
   b4cfe:	681b      	ldr	r3, [r3, #0]
   b4d00:	9301      	str	r3, [sp, #4]
   b4d02:	bd08      	pop	{r3, pc}
   b4d04:	00030230 	.word	0x00030230

000b4d08 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b4d08:	b508      	push	{r3, lr}
   b4d0a:	4b02      	ldr	r3, [pc, #8]	; (b4d14 <hal_spi_transfer+0xc>)
   b4d0c:	681b      	ldr	r3, [r3, #0]
   b4d0e:	695b      	ldr	r3, [r3, #20]
   b4d10:	9301      	str	r3, [sp, #4]
   b4d12:	bd08      	pop	{r3, pc}
   b4d14:	00030230 	.word	0x00030230

000b4d18 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4d18:	b508      	push	{r3, lr}
   b4d1a:	4b02      	ldr	r3, [pc, #8]	; (b4d24 <hal_spi_init+0xc>)
   b4d1c:	681b      	ldr	r3, [r3, #0]
   b4d1e:	69db      	ldr	r3, [r3, #28]
   b4d20:	9301      	str	r3, [sp, #4]
   b4d22:	bd08      	pop	{r3, pc}
   b4d24:	00030230 	.word	0x00030230

000b4d28 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4d28:	b508      	push	{r3, lr}
   b4d2a:	4b02      	ldr	r3, [pc, #8]	; (b4d34 <hal_spi_is_enabled+0xc>)
   b4d2c:	681b      	ldr	r3, [r3, #0]
   b4d2e:	6a1b      	ldr	r3, [r3, #32]
   b4d30:	9301      	str	r3, [sp, #4]
   b4d32:	bd08      	pop	{r3, pc}
   b4d34:	00030230 	.word	0x00030230

000b4d38 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b4d38:	b508      	push	{r3, lr}
   b4d3a:	4b02      	ldr	r3, [pc, #8]	; (b4d44 <hal_spi_info+0xc>)
   b4d3c:	681b      	ldr	r3, [r3, #0]
   b4d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4d40:	9301      	str	r3, [sp, #4]
   b4d42:	bd08      	pop	{r3, pc}
   b4d44:	00030230 	.word	0x00030230

000b4d48 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b4d48:	b508      	push	{r3, lr}
   b4d4a:	4b02      	ldr	r3, [pc, #8]	; (b4d54 <hal_spi_set_settings+0xc>)
   b4d4c:	681b      	ldr	r3, [r3, #0]
   b4d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4d50:	9301      	str	r3, [sp, #4]
   b4d52:	bd08      	pop	{r3, pc}
   b4d54:	00030230 	.word	0x00030230

000b4d58 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b4d58:	b508      	push	{r3, lr}
   b4d5a:	4b02      	ldr	r3, [pc, #8]	; (b4d64 <hal_spi_acquire+0xc>)
   b4d5c:	681b      	ldr	r3, [r3, #0]
   b4d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4d60:	9301      	str	r3, [sp, #4]
   b4d62:	bd08      	pop	{r3, pc}
   b4d64:	00030230 	.word	0x00030230

000b4d68 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b4d68:	b508      	push	{r3, lr}
   b4d6a:	4b02      	ldr	r3, [pc, #8]	; (b4d74 <hal_spi_release+0xc>)
   b4d6c:	681b      	ldr	r3, [r3, #0]
   b4d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4d70:	9301      	str	r3, [sp, #4]
   b4d72:	bd08      	pop	{r3, pc}
   b4d74:	00030230 	.word	0x00030230

000b4d78 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4d78:	b508      	push	{r3, lr}
   b4d7a:	4b02      	ldr	r3, [pc, #8]	; (b4d84 <hal_usart_write+0xc>)
   b4d7c:	681b      	ldr	r3, [r3, #0]
   b4d7e:	68db      	ldr	r3, [r3, #12]
   b4d80:	9301      	str	r3, [sp, #4]
   b4d82:	bd08      	pop	{r3, pc}
   b4d84:	0003023c 	.word	0x0003023c

000b4d88 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4d88:	b508      	push	{r3, lr}
   b4d8a:	4b02      	ldr	r3, [pc, #8]	; (b4d94 <hal_usart_available+0xc>)
   b4d8c:	681b      	ldr	r3, [r3, #0]
   b4d8e:	691b      	ldr	r3, [r3, #16]
   b4d90:	9301      	str	r3, [sp, #4]
   b4d92:	bd08      	pop	{r3, pc}
   b4d94:	0003023c 	.word	0x0003023c

000b4d98 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4d98:	b508      	push	{r3, lr}
   b4d9a:	4b02      	ldr	r3, [pc, #8]	; (b4da4 <hal_usart_read+0xc>)
   b4d9c:	681b      	ldr	r3, [r3, #0]
   b4d9e:	695b      	ldr	r3, [r3, #20]
   b4da0:	9301      	str	r3, [sp, #4]
   b4da2:	bd08      	pop	{r3, pc}
   b4da4:	0003023c 	.word	0x0003023c

000b4da8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4da8:	b508      	push	{r3, lr}
   b4daa:	4b02      	ldr	r3, [pc, #8]	; (b4db4 <hal_usart_peek+0xc>)
   b4dac:	681b      	ldr	r3, [r3, #0]
   b4dae:	699b      	ldr	r3, [r3, #24]
   b4db0:	9301      	str	r3, [sp, #4]
   b4db2:	bd08      	pop	{r3, pc}
   b4db4:	0003023c 	.word	0x0003023c

000b4db8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4db8:	b508      	push	{r3, lr}
   b4dba:	4b02      	ldr	r3, [pc, #8]	; (b4dc4 <hal_usart_flush+0xc>)
   b4dbc:	681b      	ldr	r3, [r3, #0]
   b4dbe:	69db      	ldr	r3, [r3, #28]
   b4dc0:	9301      	str	r3, [sp, #4]
   b4dc2:	bd08      	pop	{r3, pc}
   b4dc4:	0003023c 	.word	0x0003023c

000b4dc8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4dc8:	b508      	push	{r3, lr}
   b4dca:	4b02      	ldr	r3, [pc, #8]	; (b4dd4 <hal_usart_is_enabled+0xc>)
   b4dcc:	681b      	ldr	r3, [r3, #0]
   b4dce:	6a1b      	ldr	r3, [r3, #32]
   b4dd0:	9301      	str	r3, [sp, #4]
   b4dd2:	bd08      	pop	{r3, pc}
   b4dd4:	0003023c 	.word	0x0003023c

000b4dd8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4dd8:	b508      	push	{r3, lr}
   b4dda:	4b02      	ldr	r3, [pc, #8]	; (b4de4 <hal_usart_available_data_for_write+0xc>)
   b4ddc:	681b      	ldr	r3, [r3, #0]
   b4dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4de0:	9301      	str	r3, [sp, #4]
   b4de2:	bd08      	pop	{r3, pc}
   b4de4:	0003023c 	.word	0x0003023c

000b4de8 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4de8:	b508      	push	{r3, lr}
   b4dea:	4b02      	ldr	r3, [pc, #8]	; (b4df4 <hal_usart_init_ex+0xc>)
   b4dec:	681b      	ldr	r3, [r3, #0]
   b4dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4df0:	9301      	str	r3, [sp, #4]
   b4df2:	bd08      	pop	{r3, pc}
   b4df4:	0003023c 	.word	0x0003023c

000b4df8 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4df8:	b508      	push	{r3, lr}
   b4dfa:	4b02      	ldr	r3, [pc, #8]	; (b4e04 <HAL_USB_USART_Init+0xc>)
   b4dfc:	681b      	ldr	r3, [r3, #0]
   b4dfe:	681b      	ldr	r3, [r3, #0]
   b4e00:	9301      	str	r3, [sp, #4]
   b4e02:	bd08      	pop	{r3, pc}
   b4e04:	0003024c 	.word	0x0003024c

000b4e08 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4e08:	b508      	push	{r3, lr}
   b4e0a:	4b02      	ldr	r3, [pc, #8]	; (b4e14 <HAL_USB_USART_Available_Data+0xc>)
   b4e0c:	681b      	ldr	r3, [r3, #0]
   b4e0e:	691b      	ldr	r3, [r3, #16]
   b4e10:	9301      	str	r3, [sp, #4]
   b4e12:	bd08      	pop	{r3, pc}
   b4e14:	0003024c 	.word	0x0003024c

000b4e18 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4e18:	b508      	push	{r3, lr}
   b4e1a:	4b02      	ldr	r3, [pc, #8]	; (b4e24 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4e1c:	681b      	ldr	r3, [r3, #0]
   b4e1e:	695b      	ldr	r3, [r3, #20]
   b4e20:	9301      	str	r3, [sp, #4]
   b4e22:	bd08      	pop	{r3, pc}
   b4e24:	0003024c 	.word	0x0003024c

000b4e28 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4e28:	b508      	push	{r3, lr}
   b4e2a:	4b02      	ldr	r3, [pc, #8]	; (b4e34 <HAL_USB_USART_Receive_Data+0xc>)
   b4e2c:	681b      	ldr	r3, [r3, #0]
   b4e2e:	699b      	ldr	r3, [r3, #24]
   b4e30:	9301      	str	r3, [sp, #4]
   b4e32:	bd08      	pop	{r3, pc}
   b4e34:	0003024c 	.word	0x0003024c

000b4e38 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4e38:	b508      	push	{r3, lr}
   b4e3a:	4b02      	ldr	r3, [pc, #8]	; (b4e44 <HAL_USB_USART_Send_Data+0xc>)
   b4e3c:	681b      	ldr	r3, [r3, #0]
   b4e3e:	69db      	ldr	r3, [r3, #28]
   b4e40:	9301      	str	r3, [sp, #4]
   b4e42:	bd08      	pop	{r3, pc}
   b4e44:	0003024c 	.word	0x0003024c

000b4e48 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4e48:	b508      	push	{r3, lr}
   b4e4a:	4b02      	ldr	r3, [pc, #8]	; (b4e54 <HAL_USB_USART_Flush_Data+0xc>)
   b4e4c:	681b      	ldr	r3, [r3, #0]
   b4e4e:	6a1b      	ldr	r3, [r3, #32]
   b4e50:	9301      	str	r3, [sp, #4]
   b4e52:	bd08      	pop	{r3, pc}
   b4e54:	0003024c 	.word	0x0003024c

000b4e58 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4e58:	b508      	push	{r3, lr}
   b4e5a:	4b02      	ldr	r3, [pc, #8]	; (b4e64 <set_system_mode+0xc>)
   b4e5c:	681b      	ldr	r3, [r3, #0]
   b4e5e:	685b      	ldr	r3, [r3, #4]
   b4e60:	9301      	str	r3, [sp, #4]
   b4e62:	bd08      	pop	{r3, pc}
   b4e64:	00030220 	.word	0x00030220

000b4e68 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4e68:	b508      	push	{r3, lr}
   b4e6a:	4b02      	ldr	r3, [pc, #8]	; (b4e74 <system_delay_ms+0xc>)
   b4e6c:	681b      	ldr	r3, [r3, #0]
   b4e6e:	695b      	ldr	r3, [r3, #20]
   b4e70:	9301      	str	r3, [sp, #4]
   b4e72:	bd08      	pop	{r3, pc}
   b4e74:	00030220 	.word	0x00030220

000b4e78 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b4e78:	b508      	push	{r3, lr}
   b4e7a:	4b02      	ldr	r3, [pc, #8]	; (b4e84 <application_thread_current+0xc>)
   b4e7c:	681b      	ldr	r3, [r3, #0]
   b4e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4e80:	9301      	str	r3, [sp, #4]
   b4e82:	bd08      	pop	{r3, pc}
   b4e84:	00030220 	.word	0x00030220

000b4e88 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b4e88:	b508      	push	{r3, lr}
   b4e8a:	4b02      	ldr	r3, [pc, #8]	; (b4e94 <application_thread_invoke+0xc>)
   b4e8c:	681b      	ldr	r3, [r3, #0]
   b4e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4e90:	9301      	str	r3, [sp, #4]
   b4e92:	bd08      	pop	{r3, pc}
   b4e94:	00030220 	.word	0x00030220

000b4e98 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4e98:	b508      	push	{r3, lr}
   b4e9a:	4b03      	ldr	r3, [pc, #12]	; (b4ea8 <system_ctrl_set_app_request_handler+0x10>)
   b4e9c:	681b      	ldr	r3, [r3, #0]
   b4e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4ea2:	9301      	str	r3, [sp, #4]
   b4ea4:	bd08      	pop	{r3, pc}
   b4ea6:	0000      	.short	0x0000
   b4ea8:	00030220 	.word	0x00030220

000b4eac <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4eac:	b508      	push	{r3, lr}
   b4eae:	4b03      	ldr	r3, [pc, #12]	; (b4ebc <system_ctrl_set_result+0x10>)
   b4eb0:	681b      	ldr	r3, [r3, #0]
   b4eb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4eb6:	9301      	str	r3, [sp, #4]
   b4eb8:	bd08      	pop	{r3, pc}
   b4eba:	0000      	.short	0x0000
   b4ebc:	00030220 	.word	0x00030220

000b4ec0 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   b4ec0:	b508      	push	{r3, lr}
   b4ec2:	4b02      	ldr	r3, [pc, #8]	; (b4ecc <spark_variable+0xc>)
   b4ec4:	681b      	ldr	r3, [r3, #0]
   b4ec6:	681b      	ldr	r3, [r3, #0]
   b4ec8:	9301      	str	r3, [sp, #4]
   b4eca:	bd08      	pop	{r3, pc}
   b4ecc:	00030244 	.word	0x00030244

000b4ed0 <spark_cloud_flag_connected>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b4ed0:	b508      	push	{r3, lr}
   b4ed2:	4b02      	ldr	r3, [pc, #8]	; (b4edc <spark_cloud_flag_connected+0xc>)
   b4ed4:	681b      	ldr	r3, [r3, #0]
   b4ed6:	695b      	ldr	r3, [r3, #20]
   b4ed8:	9301      	str	r3, [sp, #4]
   b4eda:	bd08      	pop	{r3, pc}
   b4edc:	00030244 	.word	0x00030244

000b4ee0 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b4ee0:	b508      	push	{r3, lr}
   b4ee2:	4b02      	ldr	r3, [pc, #8]	; (b4eec <spark_send_event+0xc>)
   b4ee4:	681b      	ldr	r3, [r3, #0]
   b4ee6:	6a1b      	ldr	r3, [r3, #32]
   b4ee8:	9301      	str	r3, [sp, #4]
   b4eea:	bd08      	pop	{r3, pc}
   b4eec:	00030244 	.word	0x00030244

000b4ef0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4ef0:	b508      	push	{r3, lr}
   b4ef2:	4b02      	ldr	r3, [pc, #8]	; (b4efc <spark_set_random_seed_from_cloud_handler+0xc>)
   b4ef4:	681b      	ldr	r3, [r3, #0]
   b4ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4ef8:	9301      	str	r3, [sp, #4]
   b4efa:	bd08      	pop	{r3, pc}
   b4efc:	00030244 	.word	0x00030244

000b4f00 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4f00:	b508      	push	{r3, lr}
   b4f02:	4b02      	ldr	r3, [pc, #8]	; (b4f0c <network_connect+0xc>)
   b4f04:	681b      	ldr	r3, [r3, #0]
   b4f06:	685b      	ldr	r3, [r3, #4]
   b4f08:	9301      	str	r3, [sp, #4]
   b4f0a:	bd08      	pop	{r3, pc}
   b4f0c:	00030240 	.word	0x00030240

000b4f10 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4f10:	b508      	push	{r3, lr}
   b4f12:	4b02      	ldr	r3, [pc, #8]	; (b4f1c <network_connecting+0xc>)
   b4f14:	681b      	ldr	r3, [r3, #0]
   b4f16:	689b      	ldr	r3, [r3, #8]
   b4f18:	9301      	str	r3, [sp, #4]
   b4f1a:	bd08      	pop	{r3, pc}
   b4f1c:	00030240 	.word	0x00030240

000b4f20 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4f20:	b508      	push	{r3, lr}
   b4f22:	4b02      	ldr	r3, [pc, #8]	; (b4f2c <network_disconnect+0xc>)
   b4f24:	681b      	ldr	r3, [r3, #0]
   b4f26:	68db      	ldr	r3, [r3, #12]
   b4f28:	9301      	str	r3, [sp, #4]
   b4f2a:	bd08      	pop	{r3, pc}
   b4f2c:	00030240 	.word	0x00030240

000b4f30 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4f30:	b508      	push	{r3, lr}
   b4f32:	4b02      	ldr	r3, [pc, #8]	; (b4f3c <network_ready+0xc>)
   b4f34:	681b      	ldr	r3, [r3, #0]
   b4f36:	691b      	ldr	r3, [r3, #16]
   b4f38:	9301      	str	r3, [sp, #4]
   b4f3a:	bd08      	pop	{r3, pc}
   b4f3c:	00030240 	.word	0x00030240

000b4f40 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4f40:	b508      	push	{r3, lr}
   b4f42:	4b02      	ldr	r3, [pc, #8]	; (b4f4c <network_on+0xc>)
   b4f44:	681b      	ldr	r3, [r3, #0]
   b4f46:	695b      	ldr	r3, [r3, #20]
   b4f48:	9301      	str	r3, [sp, #4]
   b4f4a:	bd08      	pop	{r3, pc}
   b4f4c:	00030240 	.word	0x00030240

000b4f50 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4f50:	b508      	push	{r3, lr}
   b4f52:	4b02      	ldr	r3, [pc, #8]	; (b4f5c <network_off+0xc>)
   b4f54:	681b      	ldr	r3, [r3, #0]
   b4f56:	699b      	ldr	r3, [r3, #24]
   b4f58:	9301      	str	r3, [sp, #4]
   b4f5a:	bd08      	pop	{r3, pc}
   b4f5c:	00030240 	.word	0x00030240

000b4f60 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4f60:	b508      	push	{r3, lr}
   b4f62:	4b02      	ldr	r3, [pc, #8]	; (b4f6c <network_listen+0xc>)
   b4f64:	681b      	ldr	r3, [r3, #0]
   b4f66:	69db      	ldr	r3, [r3, #28]
   b4f68:	9301      	str	r3, [sp, #4]
   b4f6a:	bd08      	pop	{r3, pc}
   b4f6c:	00030240 	.word	0x00030240

000b4f70 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4f70:	b508      	push	{r3, lr}
   b4f72:	4b02      	ldr	r3, [pc, #8]	; (b4f7c <network_listening+0xc>)
   b4f74:	681b      	ldr	r3, [r3, #0]
   b4f76:	6a1b      	ldr	r3, [r3, #32]
   b4f78:	9301      	str	r3, [sp, #4]
   b4f7a:	bd08      	pop	{r3, pc}
   b4f7c:	00030240 	.word	0x00030240

000b4f80 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4f80:	b508      	push	{r3, lr}
   b4f82:	4b02      	ldr	r3, [pc, #8]	; (b4f8c <network_set_listen_timeout+0xc>)
   b4f84:	681b      	ldr	r3, [r3, #0]
   b4f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4f88:	9301      	str	r3, [sp, #4]
   b4f8a:	bd08      	pop	{r3, pc}
   b4f8c:	00030240 	.word	0x00030240

000b4f90 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4f90:	b508      	push	{r3, lr}
   b4f92:	4b02      	ldr	r3, [pc, #8]	; (b4f9c <network_get_listen_timeout+0xc>)
   b4f94:	681b      	ldr	r3, [r3, #0]
   b4f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4f98:	9301      	str	r3, [sp, #4]
   b4f9a:	bd08      	pop	{r3, pc}
   b4f9c:	00030240 	.word	0x00030240

000b4fa0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4fa0:	b508      	push	{r3, lr}
   b4fa2:	4b02      	ldr	r3, [pc, #8]	; (b4fac <network_is_on+0xc>)
   b4fa4:	681b      	ldr	r3, [r3, #0]
   b4fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4fa8:	9301      	str	r3, [sp, #4]
   b4faa:	bd08      	pop	{r3, pc}
   b4fac:	00030240 	.word	0x00030240

000b4fb0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4fb0:	b508      	push	{r3, lr}
   b4fb2:	4b02      	ldr	r3, [pc, #8]	; (b4fbc <network_is_off+0xc>)
   b4fb4:	681b      	ldr	r3, [r3, #0]
   b4fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4fb8:	9301      	str	r3, [sp, #4]
   b4fba:	bd08      	pop	{r3, pc}
   b4fbc:	00030240 	.word	0x00030240

000b4fc0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4fc0:	b508      	push	{r3, lr}
   b4fc2:	4b02      	ldr	r3, [pc, #8]	; (b4fcc <malloc+0xc>)
   b4fc4:	681b      	ldr	r3, [r3, #0]
   b4fc6:	681b      	ldr	r3, [r3, #0]
   b4fc8:	9301      	str	r3, [sp, #4]
   b4fca:	bd08      	pop	{r3, pc}
   b4fcc:	0003021c 	.word	0x0003021c

000b4fd0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4fd0:	b508      	push	{r3, lr}
   b4fd2:	4b02      	ldr	r3, [pc, #8]	; (b4fdc <free+0xc>)
   b4fd4:	681b      	ldr	r3, [r3, #0]
   b4fd6:	685b      	ldr	r3, [r3, #4]
   b4fd8:	9301      	str	r3, [sp, #4]
   b4fda:	bd08      	pop	{r3, pc}
   b4fdc:	0003021c 	.word	0x0003021c

000b4fe0 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b4fe0:	b508      	push	{r3, lr}
   b4fe2:	4b02      	ldr	r3, [pc, #8]	; (b4fec <vsnprintf+0xc>)
   b4fe4:	681b      	ldr	r3, [r3, #0]
   b4fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4fe8:	9301      	str	r3, [sp, #4]
   b4fea:	bd08      	pop	{r3, pc}
   b4fec:	0003021c 	.word	0x0003021c

000b4ff0 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b4ff0:	b508      	push	{r3, lr}
   b4ff2:	4b02      	ldr	r3, [pc, #8]	; (b4ffc <abort+0xc>)
   b4ff4:	681b      	ldr	r3, [r3, #0]
   b4ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4ff8:	9301      	str	r3, [sp, #4]
   b4ffa:	bd08      	pop	{r3, pc}
   b4ffc:	0003021c 	.word	0x0003021c

000b5000 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b5000:	b508      	push	{r3, lr}
   b5002:	4b02      	ldr	r3, [pc, #8]	; (b500c <_malloc_r+0xc>)
   b5004:	681b      	ldr	r3, [r3, #0]
   b5006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5008:	9301      	str	r3, [sp, #4]
   b500a:	bd08      	pop	{r3, pc}
   b500c:	0003021c 	.word	0x0003021c

000b5010 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b5010:	b508      	push	{r3, lr}
   b5012:	4b02      	ldr	r3, [pc, #8]	; (b501c <__errno+0xc>)
   b5014:	681b      	ldr	r3, [r3, #0]
   b5016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5018:	9301      	str	r3, [sp, #4]
   b501a:	bd08      	pop	{r3, pc}
   b501c:	0003021c 	.word	0x0003021c

000b5020 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b5020:	b508      	push	{r3, lr}
   b5022:	4b02      	ldr	r3, [pc, #8]	; (b502c <__assert_func+0xc>)
   b5024:	681b      	ldr	r3, [r3, #0]
   b5026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5028:	9301      	str	r3, [sp, #4]
   b502a:	bd08      	pop	{r3, pc}
   b502c:	0003021c 	.word	0x0003021c

000b5030 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b5030:	b508      	push	{r3, lr}
   b5032:	4b02      	ldr	r3, [pc, #8]	; (b503c <newlib_impure_ptr_callback+0xc>)
   b5034:	681b      	ldr	r3, [r3, #0]
   b5036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5038:	9301      	str	r3, [sp, #4]
   b503a:	bd08      	pop	{r3, pc}
   b503c:	0003021c 	.word	0x0003021c

000b5040 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b5040:	2100      	movs	r1, #0
   b5042:	f7ff bf11 	b.w	b4e68 <system_delay_ms>

000b5046 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b5046:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b5048:	6883      	ldr	r3, [r0, #8]
   b504a:	4604      	mov	r4, r0
   b504c:	b90b      	cbnz	r3, b5052 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b504e:	f001 f8c7 	bl	b61e0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5052:	68c3      	ldr	r3, [r0, #12]
   b5054:	4798      	blx	r3
      if (_M_manager)
   b5056:	68a3      	ldr	r3, [r4, #8]
   b5058:	b11b      	cbz	r3, b5062 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b505a:	2203      	movs	r2, #3
   b505c:	4621      	mov	r1, r4
   b505e:	4620      	mov	r0, r4
   b5060:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b5062:	4620      	mov	r0, r4
   b5064:	2110      	movs	r1, #16
}
   b5066:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b506a:	f7ff b818 	b.w	b409e <_ZdlPvj>

000b506e <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b506e:	b510      	push	{r4, lr}
      if (_M_manager)
   b5070:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b5072:	4604      	mov	r4, r0
      if (_M_manager)
   b5074:	b113      	cbz	r3, b507c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5076:	2203      	movs	r2, #3
   b5078:	4601      	mov	r1, r0
   b507a:	4798      	blx	r3
    }
   b507c:	4620      	mov	r0, r4
   b507e:	bd10      	pop	{r4, pc}

000b5080 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b5080:	b513      	push	{r0, r1, r4, lr}
   b5082:	460b      	mov	r3, r1
   b5084:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5086:	e9d0 0100 	ldrd	r0, r1, [r0]
   b508a:	466c      	mov	r4, sp
   b508c:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b5090:	e893 0003 	ldmia.w	r3, {r0, r1}
   b5094:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b5098:	e894 0003 	ldmia.w	r4, {r0, r1}
   b509c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b50a0:	b002      	add	sp, #8
   b50a2:	bd10      	pop	{r4, pc}

000b50a4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b50a4:	4802      	ldr	r0, [pc, #8]	; (b50b0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b50a6:	2300      	movs	r3, #0
   b50a8:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b50aa:	f7ff bd7d 	b.w	b4ba8 <os_mutex_recursive_create>
   b50ae:	bf00      	nop
   b50b0:	2003e6c4 	.word	0x2003e6c4

000b50b4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b50b4:	4770      	bx	lr

000b50b6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b50b6:	2000      	movs	r0, #0
   b50b8:	4770      	bx	lr

000b50ba <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b50ba:	b510      	push	{r4, lr}
   b50bc:	2110      	movs	r1, #16
   b50be:	4604      	mov	r4, r0
   b50c0:	f7fe ffed 	bl	b409e <_ZdlPvj>
   b50c4:	4620      	mov	r0, r4
   b50c6:	bd10      	pop	{r4, pc}

000b50c8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b50c8:	b508      	push	{r3, lr}
      { delete this; }
   b50ca:	f7ff fff6 	bl	b50ba <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b50ce:	bd08      	pop	{r3, pc}

000b50d0 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b50d0:	b530      	push	{r4, r5, lr}
        type_(type) {
   b50d2:	2200      	movs	r2, #0
   b50d4:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b50d8:	6002      	str	r2, [r0, #0]
   b50da:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b50dc:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b50de:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b50e0:	680c      	ldr	r4, [r1, #0]
   b50e2:	8085      	strh	r5, [r0, #4]
   b50e4:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b50e6:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b50e8:	bd30      	pop	{r4, r5, pc}

000b50ea <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b50ea:	b510      	push	{r4, lr}
   b50ec:	4604      	mov	r4, r0
    free((void*)msg_);
   b50ee:	6800      	ldr	r0, [r0, #0]
   b50f0:	f7ff ff6e 	bl	b4fd0 <free>
}
   b50f4:	4620      	mov	r0, r4
   b50f6:	bd10      	pop	{r4, pc}

000b50f8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b50f8:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b50fa:	68c4      	ldr	r4, [r0, #12]
   b50fc:	b1f4      	cbz	r4, b513c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b50fe:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b5100:	2b02      	cmp	r3, #2
   b5102:	d103      	bne.n	b510c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b5104:	f104 000c 	add.w	r0, r4, #12
   b5108:	f7ff ffef 	bl	b50ea <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b510c:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b510e:	b135      	cbz	r5, b511e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b5110:	4628      	mov	r0, r5
   b5112:	f7ff ffac 	bl	b506e <_ZNSt14_Function_baseD1Ev>
   b5116:	2110      	movs	r1, #16
   b5118:	4628      	mov	r0, r5
   b511a:	f7fe ffc0 	bl	b409e <_ZdlPvj>
   b511e:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b5120:	b135      	cbz	r5, b5130 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b5122:	4628      	mov	r0, r5
   b5124:	f7ff ffa3 	bl	b506e <_ZNSt14_Function_baseD1Ev>
   b5128:	2110      	movs	r1, #16
   b512a:	4628      	mov	r0, r5
   b512c:	f7fe ffb7 	bl	b409e <_ZdlPvj>
   b5130:	4620      	mov	r0, r4
   b5132:	2114      	movs	r1, #20
   b5134:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b5138:	f7fe bfb1 	b.w	b409e <_ZdlPvj>
   b513c:	bd38      	pop	{r3, r4, r5, pc}

000b513e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b513e:	680b      	ldr	r3, [r1, #0]
   b5140:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b5142:	684b      	ldr	r3, [r1, #4]
   b5144:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b5146:	b113      	cbz	r3, b514e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b5148:	685a      	ldr	r2, [r3, #4]
   b514a:	3201      	adds	r2, #1
   b514c:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b514e:	4770      	bx	lr

000b5150 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b5150:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5152:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b5154:	4668      	mov	r0, sp
   b5156:	460d      	mov	r5, r1
   b5158:	f7ff fff1 	bl	b513e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b515c:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b515e:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5160:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b5162:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b5164:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b5166:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b5168:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b516a:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b516c:	f7fe ffa1 	bl	b40b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b5170:	b135      	cbz	r5, b5180 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b5172:	1d28      	adds	r0, r5, #4
   b5174:	f7fe ff9d 	bl	b40b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5178:	2108      	movs	r1, #8
   b517a:	4628      	mov	r0, r5
   b517c:	f7fe ff8f 	bl	b409e <_ZdlPvj>
        return p;
    }
   b5180:	4620      	mov	r0, r4
   b5182:	b003      	add	sp, #12
   b5184:	bd30      	pop	{r4, r5, pc}

000b5186 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b5186:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b5188:	b510      	push	{r4, lr}
      if (_M_empty())
   b518a:	b90a      	cbnz	r2, b5190 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b518c:	f001 f828 	bl	b61e0 <_ZSt25__throw_bad_function_callv>
    }
   b5190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5194:	68c3      	ldr	r3, [r0, #12]
   b5196:	4718      	bx	r3

000b5198 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b5198:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b519a:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b519c:	f100 0110 	add.w	r1, r0, #16
   b51a0:	f7ff fff1 	bl	b5186 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b51a4:	bd08      	pop	{r3, pc}

000b51a6 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b51a6:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b51a8:	b510      	push	{r4, lr}
      if (_M_empty())
   b51aa:	b90a      	cbnz	r2, b51b0 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b51ac:	f001 f818 	bl	b61e0 <_ZSt25__throw_bad_function_callv>
    }
   b51b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b51b4:	68c3      	ldr	r3, [r0, #12]
   b51b6:	4718      	bx	r3

000b51b8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b51b8:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b51ba:	6800      	ldr	r0, [r0, #0]
   b51bc:	f100 0110 	add.w	r1, r0, #16
   b51c0:	f7ff fff1 	bl	b51a6 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b51c4:	bd08      	pop	{r3, pc}
	...

000b51c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b51c8:	b538      	push	{r3, r4, r5, lr}
   b51ca:	2300      	movs	r3, #0
   b51cc:	4604      	mov	r4, r0
   b51ce:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b51d0:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b51d2:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b51d4:	f7fe ff5f 	bl	b4096 <_Znwj>
   b51d8:	b128      	cbz	r0, b51e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b51da:	2301      	movs	r3, #1
   b51dc:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b51e0:	4b02      	ldr	r3, [pc, #8]	; (b51ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b51e2:	6003      	str	r3, [r0, #0]
   b51e4:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b51e6:	6020      	str	r0, [r4, #0]
	}
   b51e8:	4620      	mov	r0, r4
   b51ea:	bd38      	pop	{r3, r4, r5, pc}
   b51ec:	000b8460 	.word	0x000b8460

000b51f0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b51f0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b51f2:	2300      	movs	r3, #0
   b51f4:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b51f6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b51f8:	4604      	mov	r4, r0
   b51fa:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b51fc:	b12b      	cbz	r3, b520a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b51fe:	2202      	movs	r2, #2
   b5200:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b5202:	68eb      	ldr	r3, [r5, #12]
   b5204:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b5206:	68ab      	ldr	r3, [r5, #8]
   b5208:	60a3      	str	r3, [r4, #8]
    }
   b520a:	4620      	mov	r0, r4
   b520c:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5210 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b5210:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5212:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b5214:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b5216:	4668      	mov	r0, sp
   b5218:	f7ff ff5a 	bl	b50d0 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b521c:	f04f 0302 	mov.w	r3, #2
   b5220:	e8d4 2f4f 	ldrexb	r2, [r4]
   b5224:	2a00      	cmp	r2, #0
   b5226:	d103      	bne.n	b5230 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b5228:	e8c4 3f41 	strexb	r1, r3, [r4]
   b522c:	2900      	cmp	r1, #0
   b522e:	d1f7      	bne.n	b5220 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b5230:	d125      	bne.n	b527e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b5232:	f104 050c 	add.w	r5, r4, #12
   b5236:	4669      	mov	r1, sp
   b5238:	4628      	mov	r0, r5
   b523a:	f7ff ff49 	bl	b50d0 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b523e:	f3bf 8f5b 	dmb	ish
   b5242:	2301      	movs	r3, #1
   b5244:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b5246:	2000      	movs	r0, #0
   b5248:	f104 0308 	add.w	r3, r4, #8
   b524c:	f3bf 8f5b 	dmb	ish
   b5250:	e853 6f00 	ldrex	r6, [r3]
   b5254:	e843 0200 	strex	r2, r0, [r3]
   b5258:	2a00      	cmp	r2, #0
   b525a:	d1f9      	bne.n	b5250 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b525c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b5260:	b16e      	cbz	r6, b527e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b5262:	f7ff fe09 	bl	b4e78 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b5266:	b178      	cbz	r0, b5288 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b5268:	4629      	mov	r1, r5
   b526a:	4630      	mov	r0, r6
   b526c:	f7ff ff8b 	bl	b5186 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b5270:	4630      	mov	r0, r6
   b5272:	f7ff fefc 	bl	b506e <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b5276:	2110      	movs	r1, #16
   b5278:	4630      	mov	r0, r6
   b527a:	f7fe ff10 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   b527e:	4668      	mov	r0, sp
   b5280:	f7ff ff33 	bl	b50ea <_ZN8particle5ErrorD1Ev>
    }
   b5284:	b009      	add	sp, #36	; 0x24
   b5286:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b5288:	4631      	mov	r1, r6
   b528a:	a802      	add	r0, sp, #8
   b528c:	f7ff ffb0 	bl	b51f0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b5290:	68e0      	ldr	r0, [r4, #12]
   b5292:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b5296:	b108      	cbz	r0, b529c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b5298:	f002 fffa 	bl	b8290 <strdup>
        type_(type) {
   b529c:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b529e:	2010      	movs	r0, #16
   b52a0:	f8ad 501c 	strh.w	r5, [sp, #28]
   b52a4:	f7fe fef7 	bl	b4096 <_Znwj>
   b52a8:	4605      	mov	r5, r0
   b52aa:	b1e8      	cbz	r0, b52e8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b52ac:	2700      	movs	r7, #0
   b52ae:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b52b0:	2018      	movs	r0, #24
   b52b2:	f7fe fef0 	bl	b4096 <_Znwj>
   b52b6:	4604      	mov	r4, r0
   b52b8:	b188      	cbz	r0, b52de <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b52ba:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b52bc:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b52be:	a802      	add	r0, sp, #8
   b52c0:	f7ff fede 	bl	b5080 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b52c4:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b52c6:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b52c8:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b52ca:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b52cc:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b52ce:	a906      	add	r1, sp, #24
   b52d0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b52d2:	60e3      	str	r3, [r4, #12]
   b52d4:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b52d8:	9205      	str	r2, [sp, #20]
   b52da:	f7ff fef9 	bl	b50d0 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b52de:	4b08      	ldr	r3, [pc, #32]	; (b5300 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b52e0:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b52e2:	4b08      	ldr	r3, [pc, #32]	; (b5304 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b52e4:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b52e6:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b52e8:	a806      	add	r0, sp, #24
   b52ea:	f7ff fefe 	bl	b50ea <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b52ee:	a802      	add	r0, sp, #8
   b52f0:	f7ff febd 	bl	b506e <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b52f4:	2200      	movs	r2, #0
   b52f6:	4629      	mov	r1, r5
   b52f8:	4803      	ldr	r0, [pc, #12]	; (b5308 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b52fa:	f7ff fdc5 	bl	b4e88 <application_thread_invoke>
   b52fe:	e7b7      	b.n	b5270 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b5300:	000b5199 	.word	0x000b5199
   b5304:	000b541d 	.word	0x000b541d
   b5308:	000b5047 	.word	0x000b5047

000b530c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b530c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5310:	b08b      	sub	sp, #44	; 0x2c
   b5312:	4605      	mov	r5, r0
   b5314:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b5318:	460f      	mov	r7, r1
   b531a:	4690      	mov	r8, r2
   b531c:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b531e:	f7ff fdd7 	bl	b4ed0 <spark_cloud_flag_connected>
   b5322:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b5324:	4683      	mov	fp, r0
   b5326:	bb38      	cbnz	r0, b5378 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b5328:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b532c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b532e:	a905      	add	r1, sp, #20
   b5330:	4630      	mov	r0, r6
   b5332:	f8ad 3018 	strh.w	r3, [sp, #24]
   b5336:	f7ff fecb 	bl	b50d0 <_ZN8particle5ErrorC1EOS0_>
   b533a:	2014      	movs	r0, #20
   b533c:	f7fe feab 	bl	b4096 <_Znwj>
   b5340:	4604      	mov	r4, r0
   b5342:	b148      	cbz	r0, b5358 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b5344:	2302      	movs	r3, #2
   b5346:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b5348:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b534a:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b534e:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b5350:	4631      	mov	r1, r6
   b5352:	300c      	adds	r0, #12
   b5354:	f7ff febc 	bl	b50d0 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b5358:	4628      	mov	r0, r5
	: __shared_count(__p)
   b535a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b535c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b5360:	f7ff ff32 	bl	b51c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b5364:	4630      	mov	r0, r6
   b5366:	f7ff fec0 	bl	b50ea <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b536a:	a805      	add	r0, sp, #20
   b536c:	f7ff febd 	bl	b50ea <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b5370:	4628      	mov	r0, r5
   b5372:	b00b      	add	sp, #44	; 0x2c
   b5374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b5378:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b537a:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b537c:	2014      	movs	r0, #20
   b537e:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b5382:	9307      	str	r3, [sp, #28]
   b5384:	f7fe fe87 	bl	b4096 <_Znwj>
   b5388:	4601      	mov	r1, r0
   b538a:	b118      	cbz	r0, b5394 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b538c:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b5390:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b5392:	7044      	strb	r4, [r0, #1]
   b5394:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b5396:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b5398:	f7ff ff16 	bl	b51c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b539c:	4b1e      	ldr	r3, [pc, #120]	; (b5418 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b539e:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b53a0:	2008      	movs	r0, #8
   b53a2:	f7fe fe78 	bl	b4096 <_Znwj>
   b53a6:	4604      	mov	r4, r0
   b53a8:	b110      	cbz	r0, b53b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b53aa:	a903      	add	r1, sp, #12
   b53ac:	f7ff fec7 	bl	b513e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b53b0:	9600      	str	r6, [sp, #0]
   b53b2:	fa5f f38a 	uxtb.w	r3, sl
   b53b6:	464a      	mov	r2, r9
   b53b8:	4641      	mov	r1, r8
   b53ba:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b53bc:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b53be:	f7ff fd8f 	bl	b4ee0 <spark_send_event>
   b53c2:	b9b8      	cbnz	r0, b53f4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b53c4:	9b03      	ldr	r3, [sp, #12]
   b53c6:	785b      	ldrb	r3, [r3, #1]
   b53c8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b53cc:	b993      	cbnz	r3, b53f4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b53ce:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b53d2:	a905      	add	r1, sp, #20
   b53d4:	a803      	add	r0, sp, #12
   b53d6:	9205      	str	r2, [sp, #20]
   b53d8:	f8ad 3018 	strh.w	r3, [sp, #24]
   b53dc:	f7ff ff18 	bl	b5210 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b53e0:	a805      	add	r0, sp, #20
   b53e2:	f7ff fe82 	bl	b50ea <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b53e6:	a805      	add	r0, sp, #20
   b53e8:	9909      	ldr	r1, [sp, #36]	; 0x24
   b53ea:	f7ff feb1 	bl	b5150 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b53ee:	a806      	add	r0, sp, #24
   b53f0:	f7fe fe5f 	bl	b40b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b53f4:	a903      	add	r1, sp, #12
   b53f6:	a805      	add	r0, sp, #20
   b53f8:	f7ff fea1 	bl	b513e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b53fc:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b53fe:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5400:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b5402:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b5404:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b5406:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b5408:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b540a:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b540c:	f7fe fe51 	bl	b40b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5410:	a804      	add	r0, sp, #16
   b5412:	f7fe fe4e 	bl	b40b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b5416:	e7ab      	b.n	b5370 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b5418:	000b5499 	.word	0x000b5499

000b541c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b541c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b541e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5420:	4605      	mov	r5, r0
	switch (__op)
   b5422:	d103      	bne.n	b542c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b5424:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b5426:	6003      	str	r3, [r0, #0]
      }
   b5428:	2000      	movs	r0, #0
   b542a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b542c:	2a02      	cmp	r2, #2
   b542e:	d010      	beq.n	b5452 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b5430:	2a03      	cmp	r2, #3
   b5432:	d1f9      	bne.n	b5428 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b5434:	6804      	ldr	r4, [r0, #0]
   b5436:	2c00      	cmp	r4, #0
   b5438:	d0f6      	beq.n	b5428 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b543a:	f104 0010 	add.w	r0, r4, #16
   b543e:	f7ff fe54 	bl	b50ea <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b5442:	4620      	mov	r0, r4
   b5444:	f7ff fe13 	bl	b506e <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b5448:	2118      	movs	r1, #24
   b544a:	4620      	mov	r0, r4
   b544c:	f7fe fe27 	bl	b409e <_ZdlPvj>
   b5450:	e7ea      	b.n	b5428 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b5452:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b5454:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b5456:	f7fe fe1e 	bl	b4096 <_Znwj>
   b545a:	4604      	mov	r4, r0
   b545c:	b150      	cbz	r0, b5474 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b545e:	4631      	mov	r1, r6
   b5460:	f7ff fec6 	bl	b51f0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b5464:	6930      	ldr	r0, [r6, #16]
   b5466:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b546a:	b108      	cbz	r0, b5470 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b546c:	f002 ff10 	bl	b8290 <strdup>
        type_(type) {
   b5470:	6120      	str	r0, [r4, #16]
   b5472:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b5474:	602c      	str	r4, [r5, #0]
	}
   b5476:	e7d7      	b.n	b5428 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b5478 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b5478:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b547a:	2300      	movs	r3, #0
   b547c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b547e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b5480:	4604      	mov	r4, r0
   b5482:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b5484:	b12b      	cbz	r3, b5492 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b5486:	2202      	movs	r2, #2
   b5488:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b548a:	68eb      	ldr	r3, [r5, #12]
   b548c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b548e:	68ab      	ldr	r3, [r5, #8]
   b5490:	60a3      	str	r3, [r4, #8]
    }
   b5492:	4620      	mov	r0, r4
   b5494:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5498 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b5498:	b5f0      	push	{r4, r5, r6, r7, lr}
   b549a:	b089      	sub	sp, #36	; 0x24
   b549c:	4604      	mov	r4, r0
   b549e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b54a0:	a801      	add	r0, sp, #4
   b54a2:	4611      	mov	r1, r2
   b54a4:	f7ff fe54 	bl	b5150 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b54a8:	b1a4      	cbz	r4, b54d4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b54aa:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b54ac:	b11d      	cbz	r5, b54b6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b54ae:	4628      	mov	r0, r5
   b54b0:	f002 feee 	bl	b8290 <strdup>
   b54b4:	4605      	mov	r5, r0
   b54b6:	a801      	add	r0, sp, #4
   b54b8:	a903      	add	r1, sp, #12
        type_(type) {
   b54ba:	9503      	str	r5, [sp, #12]
   b54bc:	f8ad 4010 	strh.w	r4, [sp, #16]
   b54c0:	f7ff fea6 	bl	b5210 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b54c4:	a803      	add	r0, sp, #12
   b54c6:	f7ff fe10 	bl	b50ea <_ZN8particle5ErrorD1Ev>
   b54ca:	a802      	add	r0, sp, #8
   b54cc:	f7fe fdf1 	bl	b40b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b54d0:	b009      	add	sp, #36	; 0x24
   b54d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b54d4:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b54d6:	2301      	movs	r3, #1
   b54d8:	e8d5 2f4f 	ldrexb	r2, [r5]
   b54dc:	2a00      	cmp	r2, #0
   b54de:	d103      	bne.n	b54e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b54e0:	e8c5 3f41 	strexb	r1, r3, [r5]
   b54e4:	2900      	cmp	r1, #0
   b54e6:	d1f7      	bne.n	b54d8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b54e8:	d1ef      	bne.n	b54ca <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b54ea:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b54ec:	f3bf 8f5b 	dmb	ish
   b54f0:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b54f2:	1d2b      	adds	r3, r5, #4
   b54f4:	f3bf 8f5b 	dmb	ish
   b54f8:	e853 6f00 	ldrex	r6, [r3]
   b54fc:	e843 4200 	strex	r2, r4, [r3]
   b5500:	2a00      	cmp	r2, #0
   b5502:	d1f9      	bne.n	b54f8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b5504:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b5508:	2e00      	cmp	r6, #0
   b550a:	d0de      	beq.n	b54ca <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b550c:	4620      	mov	r0, r4
   b550e:	f7ff fcb3 	bl	b4e78 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b5512:	4607      	mov	r7, r0
   b5514:	b160      	cbz	r0, b5530 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b5516:	f105 010c 	add.w	r1, r5, #12
   b551a:	4630      	mov	r0, r6
   b551c:	f7ff fe43 	bl	b51a6 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b5520:	4630      	mov	r0, r6
   b5522:	f7ff fda4 	bl	b506e <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b5526:	2110      	movs	r1, #16
   b5528:	4630      	mov	r0, r6
   b552a:	f7fe fdb8 	bl	b409e <_ZdlPvj>
   b552e:	e7cc      	b.n	b54ca <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b5530:	4631      	mov	r1, r6
   b5532:	a803      	add	r0, sp, #12
   b5534:	f7ff ffa0 	bl	b5478 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b5538:	7b2b      	ldrb	r3, [r5, #12]
   b553a:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b553e:	2010      	movs	r0, #16
   b5540:	f7fe fda9 	bl	b4096 <_Znwj>
   b5544:	4605      	mov	r5, r0
   b5546:	b1d0      	cbz	r0, b557e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b5548:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b554a:	2014      	movs	r0, #20
   b554c:	f7fe fda3 	bl	b4096 <_Znwj>
   b5550:	4604      	mov	r4, r0
   b5552:	b178      	cbz	r0, b5574 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b5554:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b5556:	4601      	mov	r1, r0
   b5558:	a803      	add	r0, sp, #12
   b555a:	f7ff fd91 	bl	b5080 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b555e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5560:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5562:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5564:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b5566:	9205      	str	r2, [sp, #20]
   b5568:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b556a:	60e3      	str	r3, [r4, #12]
   b556c:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b5570:	9206      	str	r2, [sp, #24]
   b5572:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b5574:	4b06      	ldr	r3, [pc, #24]	; (b5590 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b5576:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b5578:	4b06      	ldr	r3, [pc, #24]	; (b5594 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b557a:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b557c:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b557e:	a803      	add	r0, sp, #12
   b5580:	f7ff fd75 	bl	b506e <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b5584:	2200      	movs	r2, #0
   b5586:	4629      	mov	r1, r5
   b5588:	4803      	ldr	r0, [pc, #12]	; (b5598 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b558a:	f7ff fc7d 	bl	b4e88 <application_thread_invoke>
   b558e:	e7c7      	b.n	b5520 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b5590:	000b51b9 	.word	0x000b51b9
   b5594:	000b559d 	.word	0x000b559d
   b5598:	000b5047 	.word	0x000b5047

000b559c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b559c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b559e:	b570      	push	{r4, r5, r6, lr}
   b55a0:	4604      	mov	r4, r0
	switch (__op)
   b55a2:	d103      	bne.n	b55ac <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b55a4:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b55a6:	6003      	str	r3, [r0, #0]
      }
   b55a8:	2000      	movs	r0, #0
   b55aa:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b55ac:	2a02      	cmp	r2, #2
   b55ae:	d00c      	beq.n	b55ca <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b55b0:	2a03      	cmp	r2, #3
   b55b2:	d1f9      	bne.n	b55a8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b55b4:	6804      	ldr	r4, [r0, #0]
   b55b6:	2c00      	cmp	r4, #0
   b55b8:	d0f6      	beq.n	b55a8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b55ba:	4620      	mov	r0, r4
   b55bc:	f7ff fd57 	bl	b506e <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b55c0:	2114      	movs	r1, #20
   b55c2:	4620      	mov	r0, r4
   b55c4:	f7fe fd6b 	bl	b409e <_ZdlPvj>
   b55c8:	e7ee      	b.n	b55a8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b55ca:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b55cc:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b55ce:	f7fe fd62 	bl	b4096 <_Znwj>
   b55d2:	4605      	mov	r5, r0
   b55d4:	b120      	cbz	r0, b55e0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b55d6:	4631      	mov	r1, r6
   b55d8:	f7ff ff4e 	bl	b5478 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b55dc:	7c33      	ldrb	r3, [r6, #16]
   b55de:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b55e0:	6025      	str	r5, [r4, #0]
	}
   b55e2:	e7e1      	b.n	b55a8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b55e4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b55e4:	2200      	movs	r2, #0
   b55e6:	6840      	ldr	r0, [r0, #4]
   b55e8:	4611      	mov	r1, r2
   b55ea:	f7ff bcc1 	b.w	b4f70 <network_listening>

000b55ee <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b55ee:	2200      	movs	r2, #0
   b55f0:	6840      	ldr	r0, [r0, #4]
   b55f2:	4611      	mov	r1, r2
   b55f4:	f7ff bccc 	b.w	b4f90 <network_get_listen_timeout>

000b55f8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b55f8:	6840      	ldr	r0, [r0, #4]
   b55fa:	2200      	movs	r2, #0
   b55fc:	f7ff bcc0 	b.w	b4f80 <network_set_listen_timeout>

000b5600 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5600:	6840      	ldr	r0, [r0, #4]
   b5602:	2200      	movs	r2, #0
   b5604:	f081 0101 	eor.w	r1, r1, #1
   b5608:	f7ff bcaa 	b.w	b4f60 <network_listen>

000b560c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b560c:	2300      	movs	r3, #0
   b560e:	6840      	ldr	r0, [r0, #4]
   b5610:	461a      	mov	r2, r3
   b5612:	4619      	mov	r1, r3
   b5614:	f7ff bc9c 	b.w	b4f50 <network_off>

000b5618 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5618:	2300      	movs	r3, #0
   b561a:	6840      	ldr	r0, [r0, #4]
   b561c:	461a      	mov	r2, r3
   b561e:	4619      	mov	r1, r3
   b5620:	f7ff bc8e 	b.w	b4f40 <network_on>

000b5624 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b5624:	2200      	movs	r2, #0
   b5626:	6840      	ldr	r0, [r0, #4]
   b5628:	4611      	mov	r1, r2
   b562a:	f7ff bc81 	b.w	b4f30 <network_ready>

000b562e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b562e:	2200      	movs	r2, #0
   b5630:	6840      	ldr	r0, [r0, #4]
   b5632:	4611      	mov	r1, r2
   b5634:	f7ff bc6c 	b.w	b4f10 <network_connecting>

000b5638 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5638:	6840      	ldr	r0, [r0, #4]
   b563a:	2200      	movs	r2, #0
   b563c:	2102      	movs	r1, #2
   b563e:	f7ff bc6f 	b.w	b4f20 <network_disconnect>

000b5642 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5642:	2300      	movs	r3, #0
   b5644:	6840      	ldr	r0, [r0, #4]
   b5646:	461a      	mov	r2, r3
   b5648:	f7ff bc5a 	b.w	b4f00 <network_connect>

000b564c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b564c:	4b02      	ldr	r3, [pc, #8]	; (b5658 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b564e:	2203      	movs	r2, #3
   b5650:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b5652:	4a02      	ldr	r2, [pc, #8]	; (b565c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b5654:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b5656:	4770      	bx	lr
   b5658:	2003e6c8 	.word	0x2003e6c8
   b565c:	000b847c 	.word	0x000b847c

000b5660 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b5660:	4770      	bx	lr

000b5662 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b5662:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5664:	4606      	mov	r6, r0
   b5666:	4615      	mov	r5, r2
   b5668:	460c      	mov	r4, r1
   b566a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b566c:	42bc      	cmp	r4, r7
   b566e:	d006      	beq.n	b567e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b5670:	6833      	ldr	r3, [r6, #0]
   b5672:	f814 1b01 	ldrb.w	r1, [r4], #1
   b5676:	689b      	ldr	r3, [r3, #8]
   b5678:	4630      	mov	r0, r6
   b567a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b567c:	e7f6      	b.n	b566c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b567e:	4628      	mov	r0, r5
   b5680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5682 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b5682:	7c00      	ldrb	r0, [r0, #16]
   b5684:	2200      	movs	r2, #0
   b5686:	f7ff badf 	b.w	b4c48 <hal_i2c_write>

000b568a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b568a:	7c00      	ldrb	r0, [r0, #16]
   b568c:	2100      	movs	r1, #0
   b568e:	f7ff bae3 	b.w	b4c58 <hal_i2c_available>

000b5692 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b5692:	7c00      	ldrb	r0, [r0, #16]
   b5694:	2100      	movs	r1, #0
   b5696:	f7ff bae7 	b.w	b4c68 <hal_i2c_read>

000b569a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b569a:	7c00      	ldrb	r0, [r0, #16]
   b569c:	2100      	movs	r1, #0
   b569e:	f7ff baeb 	b.w	b4c78 <hal_i2c_peek>

000b56a2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b56a2:	7c00      	ldrb	r0, [r0, #16]
   b56a4:	2100      	movs	r1, #0
   b56a6:	f7ff baef 	b.w	b4c88 <hal_i2c_flush>

000b56aa <_ZN7TwoWireD0Ev>:
   b56aa:	b510      	push	{r4, lr}
   b56ac:	2114      	movs	r1, #20
   b56ae:	4604      	mov	r4, r0
   b56b0:	f7fe fcf5 	bl	b409e <_ZdlPvj>
   b56b4:	4620      	mov	r0, r4
   b56b6:	bd10      	pop	{r4, pc}

000b56b8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b56b8:	b538      	push	{r3, r4, r5, lr}
   b56ba:	4604      	mov	r4, r0
   b56bc:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b56be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b56c2:	2200      	movs	r2, #0
   b56c4:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b56c8:	4b09      	ldr	r3, [pc, #36]	; (b56f0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b56ca:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b56cc:	4608      	mov	r0, r1
   b56ce:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b56d0:	4629      	mov	r1, r5
   b56d2:	f7ff fae9 	bl	b4ca8 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b56d6:	30bf      	adds	r0, #191	; 0xbf
   b56d8:	d108      	bne.n	b56ec <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b56da:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b56dc:	07db      	lsls	r3, r3, #31
   b56de:	d505      	bpl.n	b56ec <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b56e0:	6868      	ldr	r0, [r5, #4]
   b56e2:	f7ff fc75 	bl	b4fd0 <free>
    free(conf.tx_buffer);
   b56e6:	68e8      	ldr	r0, [r5, #12]
   b56e8:	f7ff fc72 	bl	b4fd0 <free>
}
   b56ec:	4620      	mov	r0, r4
   b56ee:	bd38      	pop	{r3, r4, r5, pc}
   b56f0:	000b84b8 	.word	0x000b84b8

000b56f4 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b56f4:	2300      	movs	r3, #0
   b56f6:	7c00      	ldrb	r0, [r0, #16]
   b56f8:	461a      	mov	r2, r3
   b56fa:	4619      	mov	r1, r3
   b56fc:	f7ff ba8c 	b.w	b4c18 <hal_i2c_begin>

000b5700 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b5700:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b5702:	2200      	movs	r2, #0
   b5704:	2314      	movs	r3, #20
   b5706:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b570a:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b570e:	780b      	ldrb	r3, [r1, #0]
   b5710:	f88d 3008 	strb.w	r3, [sp, #8]
   b5714:	684b      	ldr	r3, [r1, #4]
   b5716:	9303      	str	r3, [sp, #12]
   b5718:	68cb      	ldr	r3, [r1, #12]
   b571a:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b571c:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b571e:	7a0b      	ldrb	r3, [r1, #8]
   b5720:	9305      	str	r3, [sp, #20]
   b5722:	a901      	add	r1, sp, #4
   b5724:	f7ff fac8 	bl	b4cb8 <hal_i2c_request_ex>
}
   b5728:	b007      	add	sp, #28
   b572a:	f85d fb04 	ldr.w	pc, [sp], #4

000b572e <_ZN7TwoWire11requestFromEhjh>:
{
   b572e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b5730:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b5732:	f88d 1000 	strb.w	r1, [sp]
   b5736:	f04f 0164 	mov.w	r1, #100	; 0x64
   b573a:	9103      	str	r1, [sp, #12]
   b573c:	bf18      	it	ne
   b573e:	2301      	movne	r3, #1
   b5740:	4669      	mov	r1, sp
    size_ = size;
   b5742:	9201      	str	r2, [sp, #4]
   b5744:	f88d 3008 	strb.w	r3, [sp, #8]
   b5748:	f7ff ffda 	bl	b5700 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b574c:	b005      	add	sp, #20
   b574e:	f85d fb04 	ldr.w	pc, [sp], #4

000b5752 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b5752:	2301      	movs	r3, #1
   b5754:	f7ff bfeb 	b.w	b572e <_ZN7TwoWire11requestFromEhjh>

000b5758 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b5758:	7c00      	ldrb	r0, [r0, #16]
   b575a:	2200      	movs	r2, #0
   b575c:	f7ff ba64 	b.w	b4c28 <hal_i2c_begin_transmission>

000b5760 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b5760:	7c00      	ldrb	r0, [r0, #16]
   b5762:	2200      	movs	r2, #0
   b5764:	f7ff ba68 	b.w	b4c38 <hal_i2c_end_transmission>

000b5768 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b5768:	2101      	movs	r1, #1
   b576a:	f7ff bff9 	b.w	b5760 <_ZN7TwoWire15endTransmissionEh>

000b576e <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b576e:	4770      	bx	lr

000b5770 <_ZN9IPAddressD0Ev>:
   b5770:	b510      	push	{r4, lr}
   b5772:	2118      	movs	r1, #24
   b5774:	4604      	mov	r4, r0
   b5776:	f7fe fc92 	bl	b409e <_ZdlPvj>
   b577a:	4620      	mov	r0, r4
   b577c:	bd10      	pop	{r4, pc}

000b577e <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b577e:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b5780:	7d03      	ldrb	r3, [r0, #20]
   b5782:	2b06      	cmp	r3, #6
{
   b5784:	b08d      	sub	sp, #52	; 0x34
   b5786:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5788:	f100 0704 	add.w	r7, r0, #4
   b578c:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b5790:	d012      	beq.n	b57b8 <_ZNK9IPAddress7printToER5Print+0x3a>
   b5792:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5796:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b579a:	220a      	movs	r2, #10
   b579c:	4630      	mov	r0, r6
   b579e:	f000 f954 	bl	b5a4a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b57a2:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b57a4:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b57a6:	d019      	beq.n	b57dc <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b57a8:	2c00      	cmp	r4, #0
   b57aa:	d0f4      	beq.n	b5796 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b57ac:	212e      	movs	r1, #46	; 0x2e
   b57ae:	4630      	mov	r0, r6
   b57b0:	f000 f93c 	bl	b5a2c <_ZN5Print5printEc>
   b57b4:	4404      	add	r4, r0
   b57b6:	e7ee      	b.n	b5796 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b57b8:	232f      	movs	r3, #47	; 0x2f
   b57ba:	466a      	mov	r2, sp
   b57bc:	4639      	mov	r1, r7
   b57be:	200a      	movs	r0, #10
		buf[0] = 0;
   b57c0:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b57c4:	f7ff fa80 	bl	b4cc8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b57c8:	4668      	mov	r0, sp
   b57ca:	f002 fd7e 	bl	b82ca <strlen>
   b57ce:	6833      	ldr	r3, [r6, #0]
   b57d0:	4602      	mov	r2, r0
   b57d2:	68db      	ldr	r3, [r3, #12]
   b57d4:	4669      	mov	r1, sp
   b57d6:	4630      	mov	r0, r6
   b57d8:	4798      	blx	r3
   b57da:	4604      	mov	r4, r0
    }
    return n;
}
   b57dc:	4620      	mov	r0, r4
   b57de:	b00d      	add	sp, #52	; 0x34
   b57e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b57e4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b57e4:	b510      	push	{r4, lr}
   b57e6:	4b05      	ldr	r3, [pc, #20]	; (b57fc <_ZN9IPAddressC1Ev+0x18>)
   b57e8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b57ea:	2211      	movs	r2, #17
   b57ec:	f840 3b04 	str.w	r3, [r0], #4
   b57f0:	2100      	movs	r1, #0
   b57f2:	f002 fd17 	bl	b8224 <memset>
}
   b57f6:	4620      	mov	r0, r4
   b57f8:	bd10      	pop	{r4, pc}
   b57fa:	bf00      	nop
   b57fc:	000b84e0 	.word	0x000b84e0

000b5800 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b5800:	4603      	mov	r3, r0
   b5802:	4a07      	ldr	r2, [pc, #28]	; (b5820 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b5804:	b510      	push	{r4, lr}
   b5806:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b580a:	f101 0210 	add.w	r2, r1, #16
   b580e:	f851 4b04 	ldr.w	r4, [r1], #4
   b5812:	f843 4b04 	str.w	r4, [r3], #4
   b5816:	4291      	cmp	r1, r2
   b5818:	d1f9      	bne.n	b580e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b581a:	780a      	ldrb	r2, [r1, #0]
   b581c:	701a      	strb	r2, [r3, #0]
}
   b581e:	bd10      	pop	{r4, pc}
   b5820:	000b84e0 	.word	0x000b84e0

000b5824 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b5824:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b5826:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b582a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b582e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b5832:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b5836:	2304      	movs	r3, #4
   b5838:	6041      	str	r1, [r0, #4]
   b583a:	7503      	strb	r3, [r0, #20]
}
   b583c:	bd10      	pop	{r4, pc}
	...

000b5840 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5840:	b507      	push	{r0, r1, r2, lr}
   b5842:	4b06      	ldr	r3, [pc, #24]	; (b585c <_ZN9IPAddressC1EPKh+0x1c>)
   b5844:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b5846:	78cb      	ldrb	r3, [r1, #3]
   b5848:	9300      	str	r3, [sp, #0]
   b584a:	788b      	ldrb	r3, [r1, #2]
   b584c:	784a      	ldrb	r2, [r1, #1]
   b584e:	7809      	ldrb	r1, [r1, #0]
   b5850:	f7ff ffe8 	bl	b5824 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b5854:	b003      	add	sp, #12
   b5856:	f85d fb04 	ldr.w	pc, [sp], #4
   b585a:	bf00      	nop
   b585c:	000b84e0 	.word	0x000b84e0

000b5860 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b5860:	4b01      	ldr	r3, [pc, #4]	; (b5868 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b5862:	4a02      	ldr	r2, [pc, #8]	; (b586c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b5864:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b5866:	4770      	bx	lr
   b5868:	2003e6d0 	.word	0x2003e6d0
   b586c:	000b84ec 	.word	0x000b84ec

000b5870 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b5870:	2300      	movs	r3, #0
   b5872:	6840      	ldr	r0, [r0, #4]
   b5874:	461a      	mov	r2, r3
   b5876:	f7ff bb43 	b.w	b4f00 <network_connect>

000b587a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b587a:	6840      	ldr	r0, [r0, #4]
   b587c:	2200      	movs	r2, #0
   b587e:	2102      	movs	r1, #2
   b5880:	f7ff bb4e 	b.w	b4f20 <network_disconnect>

000b5884 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b5884:	2200      	movs	r2, #0
   b5886:	6840      	ldr	r0, [r0, #4]
   b5888:	4611      	mov	r1, r2
   b588a:	f7ff bb41 	b.w	b4f10 <network_connecting>

000b588e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b588e:	2200      	movs	r2, #0
   b5890:	6840      	ldr	r0, [r0, #4]
   b5892:	4611      	mov	r1, r2
   b5894:	f7ff bb4c 	b.w	b4f30 <network_ready>

000b5898 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b5898:	2300      	movs	r3, #0
   b589a:	6840      	ldr	r0, [r0, #4]
   b589c:	461a      	mov	r2, r3
   b589e:	4619      	mov	r1, r3
   b58a0:	f7ff bb4e 	b.w	b4f40 <network_on>

000b58a4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b58a4:	2300      	movs	r3, #0
   b58a6:	6840      	ldr	r0, [r0, #4]
   b58a8:	461a      	mov	r2, r3
   b58aa:	4619      	mov	r1, r3
   b58ac:	f7ff bb50 	b.w	b4f50 <network_off>

000b58b0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b58b0:	6840      	ldr	r0, [r0, #4]
   b58b2:	2100      	movs	r1, #0
   b58b4:	f7ff bb74 	b.w	b4fa0 <network_is_on>

000b58b8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b58b8:	6840      	ldr	r0, [r0, #4]
   b58ba:	2100      	movs	r1, #0
   b58bc:	f7ff bb78 	b.w	b4fb0 <network_is_off>

000b58c0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b58c0:	6840      	ldr	r0, [r0, #4]
   b58c2:	2200      	movs	r2, #0
   b58c4:	f081 0101 	eor.w	r1, r1, #1
   b58c8:	f7ff bb4a 	b.w	b4f60 <network_listen>

000b58cc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b58cc:	6840      	ldr	r0, [r0, #4]
   b58ce:	2200      	movs	r2, #0
   b58d0:	f7ff bb56 	b.w	b4f80 <network_set_listen_timeout>

000b58d4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b58d4:	2200      	movs	r2, #0
   b58d6:	6840      	ldr	r0, [r0, #4]
   b58d8:	4611      	mov	r1, r2
   b58da:	f7ff bb59 	b.w	b4f90 <network_get_listen_timeout>

000b58de <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b58de:	2200      	movs	r2, #0
   b58e0:	6840      	ldr	r0, [r0, #4]
   b58e2:	4611      	mov	r1, r2
   b58e4:	f7ff bb44 	b.w	b4f70 <network_listening>

000b58e8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b58e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b58ec:	b095      	sub	sp, #84	; 0x54
   b58ee:	4614      	mov	r4, r2
   b58f0:	460d      	mov	r5, r1
   b58f2:	4607      	mov	r7, r0
    IPAddress addr;
   b58f4:	f7ff ff76 	bl	b57e4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b58f8:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b58fa:	221c      	movs	r2, #28
   b58fc:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b58fe:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5900:	f002 fc90 	bl	b8224 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b5904:	2340      	movs	r3, #64	; 0x40
   b5906:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b5908:	4620      	mov	r0, r4
   b590a:	466b      	mov	r3, sp
   b590c:	aa0c      	add	r2, sp, #48	; 0x30
   b590e:	2100      	movs	r1, #0
   b5910:	f7ff f9ea 	bl	b4ce8 <netdb_getaddrinfo>
    if (!r) {
   b5914:	4604      	mov	r4, r0
   b5916:	2800      	cmp	r0, #0
   b5918:	d14b      	bne.n	b59b2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b591a:	4602      	mov	r2, r0
   b591c:	2101      	movs	r1, #1
   b591e:	6868      	ldr	r0, [r5, #4]
   b5920:	f7ff fb06 	bl	b4f30 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5924:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5926:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5928:	4622      	mov	r2, r4
   b592a:	6868      	ldr	r0, [r5, #4]
   b592c:	f7ff fb00 	bl	b4f30 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5930:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5932:	4681      	mov	r9, r0
        bool ok = false;
   b5934:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5936:	2e00      	cmp	r6, #0
   b5938:	d03b      	beq.n	b59b2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b593a:	2900      	cmp	r1, #0
   b593c:	d139      	bne.n	b59b2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b593e:	6873      	ldr	r3, [r6, #4]
   b5940:	2b02      	cmp	r3, #2
   b5942:	d003      	beq.n	b594c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b5944:	2b0a      	cmp	r3, #10
   b5946:	d011      	beq.n	b596c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5948:	69f6      	ldr	r6, [r6, #28]
   b594a:	e7f4      	b.n	b5936 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b594c:	f1b8 0f00 	cmp.w	r8, #0
   b5950:	d0fa      	beq.n	b5948 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b5952:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b5954:	a806      	add	r0, sp, #24
   b5956:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5958:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b595a:	f7ff ff71 	bl	b5840 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b595e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5960:	1d3c      	adds	r4, r7, #4
   b5962:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5964:	682b      	ldr	r3, [r5, #0]
   b5966:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5968:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b596a:	e7ed      	b.n	b5948 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b596c:	f1b9 0f00 	cmp.w	r9, #0
   b5970:	d0ea      	beq.n	b5948 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b5972:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b5974:	2210      	movs	r2, #16
   b5976:	a801      	add	r0, sp, #4
   b5978:	f002 fc54 	bl	b8224 <memset>
                    a.v = 6;
   b597c:	2306      	movs	r3, #6
   b597e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5982:	ad01      	add	r5, sp, #4
   b5984:	f104 0308 	add.w	r3, r4, #8
   b5988:	3418      	adds	r4, #24
   b598a:	6818      	ldr	r0, [r3, #0]
   b598c:	6859      	ldr	r1, [r3, #4]
   b598e:	462a      	mov	r2, r5
   b5990:	c203      	stmia	r2!, {r0, r1}
   b5992:	3308      	adds	r3, #8
   b5994:	42a3      	cmp	r3, r4
   b5996:	4615      	mov	r5, r2
   b5998:	d1f7      	bne.n	b598a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b599a:	a901      	add	r1, sp, #4
   b599c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b599e:	ad07      	add	r5, sp, #28
   b59a0:	f7ff ff2e 	bl	b5800 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b59a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b59a6:	1d3c      	adds	r4, r7, #4
   b59a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b59aa:	682b      	ldr	r3, [r5, #0]
   b59ac:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b59ae:	4649      	mov	r1, r9
   b59b0:	e7ca      	b.n	b5948 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b59b2:	9800      	ldr	r0, [sp, #0]
   b59b4:	f7ff f990 	bl	b4cd8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b59b8:	4638      	mov	r0, r7
   b59ba:	b015      	add	sp, #84	; 0x54
   b59bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b59c0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b59c0:	4b02      	ldr	r3, [pc, #8]	; (b59cc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b59c2:	4a03      	ldr	r2, [pc, #12]	; (b59d0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b59c4:	601a      	str	r2, [r3, #0]
   b59c6:	2200      	movs	r2, #0
   b59c8:	605a      	str	r2, [r3, #4]

} // spark
   b59ca:	4770      	bx	lr
   b59cc:	2003e6d4 	.word	0x2003e6d4
   b59d0:	000b84f8 	.word	0x000b84f8

000b59d4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b59d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b59d6:	4606      	mov	r6, r0
   b59d8:	460d      	mov	r5, r1
  size_t n = 0;
   b59da:	188f      	adds	r7, r1, r2
   b59dc:	2400      	movs	r4, #0
  while (size--) {
   b59de:	42bd      	cmp	r5, r7
   b59e0:	d00c      	beq.n	b59fc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b59e2:	6833      	ldr	r3, [r6, #0]
   b59e4:	f815 1b01 	ldrb.w	r1, [r5], #1
   b59e8:	689b      	ldr	r3, [r3, #8]
   b59ea:	4630      	mov	r0, r6
   b59ec:	4798      	blx	r3
     if (chunk>=0)
   b59ee:	1e03      	subs	r3, r0, #0
   b59f0:	db01      	blt.n	b59f6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b59f2:	441c      	add	r4, r3
  while (size--) {
   b59f4:	e7f3      	b.n	b59de <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b59f6:	2c00      	cmp	r4, #0
   b59f8:	bf08      	it	eq
   b59fa:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b59fc:	4620      	mov	r0, r4
   b59fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5a00 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b5a00:	b513      	push	{r0, r1, r4, lr}
   b5a02:	4604      	mov	r4, r0
    }
   b5a04:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b5a06:	b159      	cbz	r1, b5a20 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5a08:	9101      	str	r1, [sp, #4]
   b5a0a:	f002 fc5e 	bl	b82ca <strlen>
   b5a0e:	6823      	ldr	r3, [r4, #0]
   b5a10:	9901      	ldr	r1, [sp, #4]
   b5a12:	68db      	ldr	r3, [r3, #12]
   b5a14:	4602      	mov	r2, r0
   b5a16:	4620      	mov	r0, r4
    }
   b5a18:	b002      	add	sp, #8
   b5a1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b5a1e:	4718      	bx	r3
    }
   b5a20:	b002      	add	sp, #8
   b5a22:	bd10      	pop	{r4, pc}

000b5a24 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b5a24:	b508      	push	{r3, lr}
  return write(str);
   b5a26:	f7ff ffeb 	bl	b5a00 <_ZN5Print5writeEPKc>
}
   b5a2a:	bd08      	pop	{r3, pc}

000b5a2c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b5a2c:	6803      	ldr	r3, [r0, #0]
   b5a2e:	689b      	ldr	r3, [r3, #8]
   b5a30:	4718      	bx	r3

000b5a32 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b5a32:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b5a34:	210d      	movs	r1, #13
{
   b5a36:	4605      	mov	r5, r0
  size_t n = print('\r');
   b5a38:	f7ff fff8 	bl	b5a2c <_ZN5Print5printEc>
  n += print('\n');
   b5a3c:	210a      	movs	r1, #10
  size_t n = print('\r');
   b5a3e:	4604      	mov	r4, r0
  n += print('\n');
   b5a40:	4628      	mov	r0, r5
   b5a42:	f7ff fff3 	bl	b5a2c <_ZN5Print5printEc>
  return n;
}
   b5a46:	4420      	add	r0, r4
   b5a48:	bd38      	pop	{r3, r4, r5, pc}

000b5a4a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b5a4a:	b530      	push	{r4, r5, lr}
   b5a4c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b5a4e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5a50:	2a01      	cmp	r2, #1
  *str = '\0';
   b5a52:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b5a56:	bf98      	it	ls
   b5a58:	220a      	movls	r2, #10
   b5a5a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b5a5c:	460d      	mov	r5, r1
   b5a5e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b5a62:	fb01 5312 	mls	r3, r1, r2, r5
   b5a66:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5a6a:	2b09      	cmp	r3, #9
   b5a6c:	bf94      	ite	ls
   b5a6e:	3330      	addls	r3, #48	; 0x30
   b5a70:	3337      	addhi	r3, #55	; 0x37
   b5a72:	b2db      	uxtb	r3, r3
  } while(n);
   b5a74:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5a76:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b5a7a:	d9ef      	bls.n	b5a5c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b5a7c:	4621      	mov	r1, r4
   b5a7e:	f7ff ffbf 	bl	b5a00 <_ZN5Print5writeEPKc>
}
   b5a82:	b00b      	add	sp, #44	; 0x2c
   b5a84:	bd30      	pop	{r4, r5, pc}

000b5a86 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b5a86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5a8a:	b086      	sub	sp, #24
   b5a8c:	af00      	add	r7, sp, #0
   b5a8e:	4605      	mov	r5, r0
   b5a90:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b5a92:	1d38      	adds	r0, r7, #4
   b5a94:	2114      	movs	r1, #20
{
   b5a96:	4614      	mov	r4, r2
    va_copy(args2, args);
   b5a98:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b5a9a:	f7ff faa1 	bl	b4fe0 <vsnprintf>

    if (n<bufsize)
   b5a9e:	2813      	cmp	r0, #19
   b5aa0:	d80e      	bhi.n	b5ac0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b5aa2:	1d39      	adds	r1, r7, #4
   b5aa4:	4628      	mov	r0, r5
   b5aa6:	f7ff ffab 	bl	b5a00 <_ZN5Print5writeEPKc>
   b5aaa:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b5aac:	b11e      	cbz	r6, b5ab6 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b5aae:	4628      	mov	r0, r5
   b5ab0:	f7ff ffbf 	bl	b5a32 <_ZN5Print7printlnEv>
   b5ab4:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b5ab6:	4620      	mov	r0, r4
   b5ab8:	3718      	adds	r7, #24
   b5aba:	46bd      	mov	sp, r7
   b5abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b5ac0:	f100 0308 	add.w	r3, r0, #8
   b5ac4:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b5ac8:	46e8      	mov	r8, sp
        char bigger[n+1];
   b5aca:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b5ace:	4622      	mov	r2, r4
   b5ad0:	1c41      	adds	r1, r0, #1
   b5ad2:	683b      	ldr	r3, [r7, #0]
   b5ad4:	4668      	mov	r0, sp
   b5ad6:	f7ff fa83 	bl	b4fe0 <vsnprintf>
  return write(str);
   b5ada:	4669      	mov	r1, sp
   b5adc:	4628      	mov	r0, r5
   b5ade:	f7ff ff8f 	bl	b5a00 <_ZN5Print5writeEPKc>
   b5ae2:	4604      	mov	r4, r0
   b5ae4:	46c5      	mov	sp, r8
   b5ae6:	e7e1      	b.n	b5aac <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b5ae8 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b5ae8:	4b01      	ldr	r3, [pc, #4]	; (b5af0 <_GLOBAL__sub_I_RGB+0x8>)
   b5aea:	2200      	movs	r2, #0
   b5aec:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b5aee:	4770      	bx	lr
   b5af0:	2003e6dc 	.word	0x2003e6dc

000b5af4 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b5af4:	2100      	movs	r1, #0
   b5af6:	f7ff b937 	b.w	b4d68 <hal_spi_release>

000b5afa <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b5afa:	2100      	movs	r1, #0
   b5afc:	f7ff b92c 	b.w	b4d58 <hal_spi_acquire>

000b5b00 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b5b00:	b510      	push	{r4, lr}
   b5b02:	4604      	mov	r4, r0
   b5b04:	4608      	mov	r0, r1
{
    _spi = spi;
   b5b06:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b5b08:	f7ff f906 	bl	b4d18 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b5b0c:	2300      	movs	r3, #0
   b5b0e:	6063      	str	r3, [r4, #4]
}
   b5b10:	4620      	mov	r0, r4
   b5b12:	bd10      	pop	{r4, pc}

000b5b14 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b5b14:	b513      	push	{r0, r1, r4, lr}
   b5b16:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b5b18:	7800      	ldrb	r0, [r0, #0]
   b5b1a:	f7ff ffee 	bl	b5afa <_ZN8SPIClass4lockEv.isra.0>
   b5b1e:	b958      	cbnz	r0, b5b38 <_ZN8SPIClass5beginEv+0x24>
   b5b20:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b5b22:	9001      	str	r0, [sp, #4]
   b5b24:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b5b28:	f7ff f8e6 	bl	b4cf8 <hal_spi_begin>
        unlock();
   b5b2c:	9801      	ldr	r0, [sp, #4]
    }
}
   b5b2e:	b002      	add	sp, #8
   b5b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5b34:	f7ff bfde 	b.w	b5af4 <_ZN8SPIClass6unlockEv.isra.0>
   b5b38:	b002      	add	sp, #8
   b5b3a:	bd10      	pop	{r4, pc}

000b5b3c <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b5b3c:	7800      	ldrb	r0, [r0, #0]
   b5b3e:	f7ff bfd9 	b.w	b5af4 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b5b44 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b5b44:	0840      	lsrs	r0, r0, #1
{
   b5b46:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b5b48:	6018      	str	r0, [r3, #0]
   b5b4a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b5b4c:	6818      	ldr	r0, [r3, #0]
   b5b4e:	4288      	cmp	r0, r1
   b5b50:	b2e5      	uxtb	r5, r4
   b5b52:	d906      	bls.n	b5b62 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b5b54:	3401      	adds	r4, #1
   b5b56:	2c08      	cmp	r4, #8
   b5b58:	d002      	beq.n	b5b60 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b5b5a:	0840      	lsrs	r0, r0, #1
   b5b5c:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b5b5e:	e7f5      	b.n	b5b4c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b5b60:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b5b62:	4b02      	ldr	r3, [pc, #8]	; (b5b6c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b5b64:	5d5b      	ldrb	r3, [r3, r5]
   b5b66:	7013      	strb	r3, [r2, #0]
}
   b5b68:	bd30      	pop	{r4, r5, pc}
   b5b6a:	bf00      	nop
   b5b6c:	000b852c 	.word	0x000b852c

000b5b70 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b5b70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5b74:	4606      	mov	r6, r0
   b5b76:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b5b78:	7800      	ldrb	r0, [r0, #0]
{
   b5b7a:	460c      	mov	r4, r1
    CHECK(lock());
   b5b7c:	f7ff ffbd 	bl	b5afa <_ZN8SPIClass4lockEv.isra.0>
   b5b80:	2800      	cmp	r0, #0
   b5b82:	db1b      	blt.n	b5bbc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b5b84:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b5b86:	2214      	movs	r2, #20
   b5b88:	2100      	movs	r1, #0
   b5b8a:	a809      	add	r0, sp, #36	; 0x24
   b5b8c:	f002 fb4a 	bl	b8224 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b5b90:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b5b92:	2200      	movs	r2, #0
   b5b94:	a909      	add	r1, sp, #36	; 0x24
   b5b96:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b5b98:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b5b9c:	f7ff f8cc 	bl	b4d38 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b5ba0:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b5ba4:	b113      	cbz	r3, b5bac <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b5ba6:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b5baa:	b155      	cbz	r5, b5bc2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b5bac:	2700      	movs	r7, #0
   b5bae:	46b9      	mov	r9, r7
   b5bb0:	46b8      	mov	r8, r7
   b5bb2:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b5bb4:	7923      	ldrb	r3, [r4, #4]
   b5bb6:	b15d      	cbz	r5, b5bd0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b5bb8:	b1c3      	cbz	r3, b5bec <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b5bba:	2000      	movs	r0, #0
}
   b5bbc:	b00f      	add	sp, #60	; 0x3c
   b5bbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b5bc2:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b5bc6:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b5bca:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b5bce:	e7f1      	b.n	b5bb4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b5bd0:	2b00      	cmp	r3, #0
   b5bd2:	d135      	bne.n	b5c40 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b5bd4:	68a3      	ldr	r3, [r4, #8]
   b5bd6:	4543      	cmp	r3, r8
   b5bd8:	d108      	bne.n	b5bec <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b5bda:	f88d 9020 	strb.w	r9, [sp, #32]
   b5bde:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b5be2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b5be6:	89a3      	ldrh	r3, [r4, #12]
   b5be8:	429a      	cmp	r2, r3
   b5bea:	d0e6      	beq.n	b5bba <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b5bec:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b5bee:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b5bf0:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b5bf4:	980a      	ldr	r0, [sp, #40]	; 0x28
   b5bf6:	ab04      	add	r3, sp, #16
   b5bf8:	f10d 020f 	add.w	r2, sp, #15
   b5bfc:	f7ff ffa2 	bl	b5b44 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b5c00:	7921      	ldrb	r1, [r4, #4]
   b5c02:	b985      	cbnz	r5, b5c26 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b5c04:	b989      	cbnz	r1, b5c2a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b5c06:	68a3      	ldr	r3, [r4, #8]
   b5c08:	4543      	cmp	r3, r8
   b5c0a:	d30e      	bcc.n	b5c2a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b5c0c:	f88d 9020 	strb.w	r9, [sp, #32]
   b5c10:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b5c14:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b5c18:	89a3      	ldrh	r3, [r4, #12]
   b5c1a:	429a      	cmp	r2, r3
   b5c1c:	d105      	bne.n	b5c2a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b5c1e:	9b04      	ldr	r3, [sp, #16]
   b5c20:	4543      	cmp	r3, r8
   b5c22:	d102      	bne.n	b5c2a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b5c24:	e7c9      	b.n	b5bba <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b5c26:	2900      	cmp	r1, #0
   b5c28:	d1f9      	bne.n	b5c1e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b5c2a:	2300      	movs	r3, #0
   b5c2c:	9301      	str	r3, [sp, #4]
   b5c2e:	7b63      	ldrb	r3, [r4, #13]
   b5c30:	9300      	str	r3, [sp, #0]
   b5c32:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b5c36:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b5c38:	7830      	ldrb	r0, [r6, #0]
   b5c3a:	f7ff f885 	bl	b4d48 <hal_spi_set_settings>
   b5c3e:	e7bc      	b.n	b5bba <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b5c40:	e9cd 5500 	strd	r5, r5, [sp]
   b5c44:	462b      	mov	r3, r5
   b5c46:	462a      	mov	r2, r5
   b5c48:	2101      	movs	r1, #1
   b5c4a:	e7f5      	b.n	b5c38 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b5c4c <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b5c4c:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b5c4e:	7800      	ldrb	r0, [r0, #0]
   b5c50:	f7ff f85a 	bl	b4d08 <hal_spi_transfer>
}
   b5c54:	b2c0      	uxtb	r0, r0
   b5c56:	bd08      	pop	{r3, pc}

000b5c58 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5c58:	4b05      	ldr	r3, [pc, #20]	; (b5c70 <_GLOBAL__sub_I_System+0x18>)
   b5c5a:	2202      	movs	r2, #2
   b5c5c:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5c5e:	4b05      	ldr	r3, [pc, #20]	; (b5c74 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b5c60:	4a05      	ldr	r2, [pc, #20]	; (b5c78 <_GLOBAL__sub_I_System+0x20>)
   b5c62:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5c64:	2000      	movs	r0, #0
   b5c66:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5c6a:	f7ff b8f5 	b.w	b4e58 <set_system_mode>
   b5c6e:	bf00      	nop
   b5c70:	2003e6f8 	.word	0x2003e6f8
   b5c74:	2003e6ec 	.word	0x2003e6ec
   b5c78:	ffff0000 	.word	0xffff0000

000b5c7c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5c7c:	4b02      	ldr	r3, [pc, #8]	; (b5c88 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b5c7e:	681a      	ldr	r2, [r3, #0]
   b5c80:	4b02      	ldr	r3, [pc, #8]	; (b5c8c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b5c82:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5c84:	4770      	bx	lr
   b5c86:	bf00      	nop
   b5c88:	2003e5f0 	.word	0x2003e5f0
   b5c8c:	2003e6fc 	.word	0x2003e6fc

000b5c90 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b5c90:	4770      	bx	lr

000b5c92 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5c92:	7441      	strb	r1, [r0, #17]
}
   b5c94:	4770      	bx	lr

000b5c96 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b5c96:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b5c98:	7c00      	ldrb	r0, [r0, #16]
   b5c9a:	f7ff f89d 	bl	b4dd8 <hal_usart_available_data_for_write>
}
   b5c9e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5ca2:	bd08      	pop	{r3, pc}

000b5ca4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b5ca4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b5ca6:	7c00      	ldrb	r0, [r0, #16]
   b5ca8:	f7ff f86e 	bl	b4d88 <hal_usart_available>
}
   b5cac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5cb0:	bd08      	pop	{r3, pc}

000b5cb2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b5cb2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b5cb4:	7c00      	ldrb	r0, [r0, #16]
   b5cb6:	f7ff f877 	bl	b4da8 <hal_usart_peek>
}
   b5cba:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5cbe:	bd08      	pop	{r3, pc}

000b5cc0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5cc0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b5cc2:	7c00      	ldrb	r0, [r0, #16]
   b5cc4:	f7ff f868 	bl	b4d98 <hal_usart_read>
}
   b5cc8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5ccc:	bd08      	pop	{r3, pc}

000b5cce <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b5cce:	7c00      	ldrb	r0, [r0, #16]
   b5cd0:	f7ff b872 	b.w	b4db8 <hal_usart_flush>

000b5cd4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5cd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5cd6:	7c45      	ldrb	r5, [r0, #17]
{
   b5cd8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5cda:	b12d      	cbz	r5, b5ce8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b5cdc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b5cde:	b003      	add	sp, #12
   b5ce0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b5ce4:	f7ff b848 	b.w	b4d78 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5ce8:	7c00      	ldrb	r0, [r0, #16]
   b5cea:	9101      	str	r1, [sp, #4]
   b5cec:	f7ff f874 	bl	b4dd8 <hal_usart_available_data_for_write>
   b5cf0:	2800      	cmp	r0, #0
   b5cf2:	9901      	ldr	r1, [sp, #4]
   b5cf4:	dcf2      	bgt.n	b5cdc <_ZN11USARTSerial5writeEh+0x8>
}
   b5cf6:	4628      	mov	r0, r5
   b5cf8:	b003      	add	sp, #12
   b5cfa:	bd30      	pop	{r4, r5, pc}

000b5cfc <_ZN11USARTSerialD0Ev>:
   b5cfc:	b510      	push	{r4, lr}
   b5cfe:	2114      	movs	r1, #20
   b5d00:	4604      	mov	r4, r0
   b5d02:	f7fe f9cc 	bl	b409e <_ZdlPvj>
   b5d06:	4620      	mov	r0, r4
   b5d08:	bd10      	pop	{r4, pc}
	...

000b5d0c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b5d0c:	b510      	push	{r4, lr}
   b5d0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5d12:	4604      	mov	r4, r0
   b5d14:	4608      	mov	r0, r1
   b5d16:	4611      	mov	r1, r2
   b5d18:	2200      	movs	r2, #0
   b5d1a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5d1e:	4b04      	ldr	r3, [pc, #16]	; (b5d30 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b5d20:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5d22:	2301      	movs	r3, #1
  _serial = serial;
   b5d24:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5d26:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b5d28:	f7ff f85e 	bl	b4de8 <hal_usart_init_ex>
}
   b5d2c:	4620      	mov	r0, r4
   b5d2e:	bd10      	pop	{r4, pc}
   b5d30:	000b8558 	.word	0x000b8558

000b5d34 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5d34:	7441      	strb	r1, [r0, #17]
}
   b5d36:	4770      	bx	lr

000b5d38 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5d38:	4770      	bx	lr

000b5d3a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b5d3a:	4770      	bx	lr

000b5d3c <_ZN9USBSerial4readEv>:
{
   b5d3c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b5d3e:	2100      	movs	r1, #0
   b5d40:	7c00      	ldrb	r0, [r0, #16]
   b5d42:	f7ff f871 	bl	b4e28 <HAL_USB_USART_Receive_Data>
}
   b5d46:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5d4a:	bd08      	pop	{r3, pc}

000b5d4c <_ZN9USBSerial4peekEv>:
{
   b5d4c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b5d4e:	2101      	movs	r1, #1
   b5d50:	7c00      	ldrb	r0, [r0, #16]
   b5d52:	f7ff f869 	bl	b4e28 <HAL_USB_USART_Receive_Data>
}
   b5d56:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5d5a:	bd08      	pop	{r3, pc}

000b5d5c <_ZN9USBSerial17availableForWriteEv>:
{
   b5d5c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b5d5e:	7c00      	ldrb	r0, [r0, #16]
   b5d60:	f7ff f85a 	bl	b4e18 <HAL_USB_USART_Available_Data_For_Write>
}
   b5d64:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5d68:	bd08      	pop	{r3, pc}

000b5d6a <_ZN9USBSerial9availableEv>:
{
   b5d6a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b5d6c:	7c00      	ldrb	r0, [r0, #16]
   b5d6e:	f7ff f84b 	bl	b4e08 <HAL_USB_USART_Available_Data>
}
   b5d72:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5d76:	bd08      	pop	{r3, pc}

000b5d78 <_ZN9USBSerial5writeEh>:
{
   b5d78:	b513      	push	{r0, r1, r4, lr}
   b5d7a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5d7c:	7c00      	ldrb	r0, [r0, #16]
{
   b5d7e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5d80:	f7ff f84a 	bl	b4e18 <HAL_USB_USART_Available_Data_For_Write>
   b5d84:	2800      	cmp	r0, #0
   b5d86:	9901      	ldr	r1, [sp, #4]
   b5d88:	dc01      	bgt.n	b5d8e <_ZN9USBSerial5writeEh+0x16>
   b5d8a:	7c60      	ldrb	r0, [r4, #17]
   b5d8c:	b120      	cbz	r0, b5d98 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b5d8e:	7c20      	ldrb	r0, [r4, #16]
   b5d90:	f7ff f852 	bl	b4e38 <HAL_USB_USART_Send_Data>
   b5d94:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b5d98:	b002      	add	sp, #8
   b5d9a:	bd10      	pop	{r4, pc}

000b5d9c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b5d9c:	7c00      	ldrb	r0, [r0, #16]
   b5d9e:	f7ff b853 	b.w	b4e48 <HAL_USB_USART_Flush_Data>

000b5da2 <_ZN9USBSerialD0Ev>:
   b5da2:	b510      	push	{r4, lr}
   b5da4:	2114      	movs	r1, #20
   b5da6:	4604      	mov	r4, r0
   b5da8:	f7fe f979 	bl	b409e <_ZdlPvj>
   b5dac:	4620      	mov	r0, r4
   b5dae:	bd10      	pop	{r4, pc}

000b5db0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b5db0:	b510      	push	{r4, lr}
   b5db2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5db6:	4604      	mov	r4, r0
   b5db8:	4608      	mov	r0, r1
   b5dba:	2100      	movs	r1, #0
   b5dbc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5dc0:	4b04      	ldr	r3, [pc, #16]	; (b5dd4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b5dc2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5dc4:	2301      	movs	r3, #1
  _serial = serial;
   b5dc6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5dc8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b5dca:	4611      	mov	r1, r2
   b5dcc:	f7ff f814 	bl	b4df8 <HAL_USB_USART_Init>
}
   b5dd0:	4620      	mov	r0, r4
   b5dd2:	bd10      	pop	{r4, pc}
   b5dd4:	000b8588 	.word	0x000b8588

000b5dd8 <_Z19acquireSerialBufferv>:
{
   b5dd8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b5dda:	2214      	movs	r2, #20
{
   b5ddc:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b5dde:	2100      	movs	r1, #0
   b5de0:	f002 fa20 	bl	b8224 <memset>
}
   b5de4:	4620      	mov	r0, r4
   b5de6:	bd10      	pop	{r4, pc}

000b5de8 <_Z16_fetch_usbserialv>:
{
   b5de8:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5dea:	4c0f      	ldr	r4, [pc, #60]	; (b5e28 <_Z16_fetch_usbserialv+0x40>)
{
   b5dec:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b5dee:	a803      	add	r0, sp, #12
   b5df0:	f7ff fff2 	bl	b5dd8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5df4:	7821      	ldrb	r1, [r4, #0]
   b5df6:	f3bf 8f5b 	dmb	ish
   b5dfa:	f011 0101 	ands.w	r1, r1, #1
   b5dfe:	d10f      	bne.n	b5e20 <_Z16_fetch_usbserialv+0x38>
   b5e00:	4620      	mov	r0, r4
   b5e02:	9101      	str	r1, [sp, #4]
   b5e04:	f7fe f94d 	bl	b40a2 <__cxa_guard_acquire>
   b5e08:	9901      	ldr	r1, [sp, #4]
   b5e0a:	b148      	cbz	r0, b5e20 <_Z16_fetch_usbserialv+0x38>
   b5e0c:	aa03      	add	r2, sp, #12
   b5e0e:	4807      	ldr	r0, [pc, #28]	; (b5e2c <_Z16_fetch_usbserialv+0x44>)
   b5e10:	f7ff ffce 	bl	b5db0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b5e14:	4620      	mov	r0, r4
   b5e16:	f7fe f949 	bl	b40ac <__cxa_guard_release>
   b5e1a:	4805      	ldr	r0, [pc, #20]	; (b5e30 <_Z16_fetch_usbserialv+0x48>)
   b5e1c:	f002 f9ee 	bl	b81fc <atexit>
	return _usbserial;
}
   b5e20:	4802      	ldr	r0, [pc, #8]	; (b5e2c <_Z16_fetch_usbserialv+0x44>)
   b5e22:	b008      	add	sp, #32
   b5e24:	bd10      	pop	{r4, pc}
   b5e26:	bf00      	nop
   b5e28:	2003e700 	.word	0x2003e700
   b5e2c:	2003e704 	.word	0x2003e704
   b5e30:	000b5d39 	.word	0x000b5d39

000b5e34 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b5e34:	2200      	movs	r2, #0
   b5e36:	6840      	ldr	r0, [r0, #4]
   b5e38:	4611      	mov	r1, r2
   b5e3a:	f7ff b879 	b.w	b4f30 <network_ready>

000b5e3e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5e3e:	2200      	movs	r2, #0
   b5e40:	6840      	ldr	r0, [r0, #4]
   b5e42:	4611      	mov	r1, r2
   b5e44:	f7ff b894 	b.w	b4f70 <network_listening>

000b5e48 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5e48:	2200      	movs	r2, #0
   b5e4a:	6840      	ldr	r0, [r0, #4]
   b5e4c:	4611      	mov	r1, r2
   b5e4e:	f7ff b89f 	b.w	b4f90 <network_get_listen_timeout>

000b5e52 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5e52:	6840      	ldr	r0, [r0, #4]
   b5e54:	2200      	movs	r2, #0
   b5e56:	f7ff b893 	b.w	b4f80 <network_set_listen_timeout>

000b5e5a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5e5a:	6840      	ldr	r0, [r0, #4]
   b5e5c:	2200      	movs	r2, #0
   b5e5e:	f081 0101 	eor.w	r1, r1, #1
   b5e62:	f7ff b87d 	b.w	b4f60 <network_listen>

000b5e66 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5e66:	2300      	movs	r3, #0
   b5e68:	6840      	ldr	r0, [r0, #4]
   b5e6a:	461a      	mov	r2, r3
   b5e6c:	4619      	mov	r1, r3
   b5e6e:	f7ff b86f 	b.w	b4f50 <network_off>

000b5e72 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5e72:	2300      	movs	r3, #0
   b5e74:	6840      	ldr	r0, [r0, #4]
   b5e76:	461a      	mov	r2, r3
   b5e78:	4619      	mov	r1, r3
   b5e7a:	f7ff b861 	b.w	b4f40 <network_on>

000b5e7e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5e7e:	2200      	movs	r2, #0
   b5e80:	6840      	ldr	r0, [r0, #4]
   b5e82:	4611      	mov	r1, r2
   b5e84:	f7ff b844 	b.w	b4f10 <network_connecting>

000b5e88 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5e88:	6840      	ldr	r0, [r0, #4]
   b5e8a:	2200      	movs	r2, #0
   b5e8c:	2102      	movs	r1, #2
   b5e8e:	f7ff b847 	b.w	b4f20 <network_disconnect>

000b5e92 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5e92:	2300      	movs	r3, #0
   b5e94:	6840      	ldr	r0, [r0, #4]
   b5e96:	461a      	mov	r2, r3
   b5e98:	f7ff b832 	b.w	b4f00 <network_connect>

000b5e9c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b5e9c:	4b02      	ldr	r3, [pc, #8]	; (b5ea8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b5e9e:	2204      	movs	r2, #4
   b5ea0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b5ea2:	4a02      	ldr	r2, [pc, #8]	; (b5eac <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b5ea4:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b5ea6:	4770      	bx	lr
   b5ea8:	2003e718 	.word	0x2003e718
   b5eac:	000b85b8 	.word	0x000b85b8

000b5eb0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b5eb0:	4b01      	ldr	r3, [pc, #4]	; (b5eb8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b5eb2:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b5eb4:	4770      	bx	lr
   b5eb6:	bf00      	nop
   b5eb8:	2003e5f8 	.word	0x2003e5f8

000b5ebc <serialEventRun>:
{
   b5ebc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b5ebe:	4b0b      	ldr	r3, [pc, #44]	; (b5eec <serialEventRun+0x30>)
   b5ec0:	b143      	cbz	r3, b5ed4 <serialEventRun+0x18>
   b5ec2:	f7ff ff91 	bl	b5de8 <_Z16_fetch_usbserialv>
   b5ec6:	6803      	ldr	r3, [r0, #0]
   b5ec8:	691b      	ldr	r3, [r3, #16]
   b5eca:	4798      	blx	r3
   b5ecc:	2800      	cmp	r0, #0
   b5ece:	dd01      	ble.n	b5ed4 <serialEventRun+0x18>
        serialEvent();
   b5ed0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b5ed4:	4b06      	ldr	r3, [pc, #24]	; (b5ef0 <serialEventRun+0x34>)
   b5ed6:	b143      	cbz	r3, b5eea <serialEventRun+0x2e>
   b5ed8:	f000 f95c 	bl	b6194 <_Z22__fetch_global_Serial1v>
   b5edc:	6803      	ldr	r3, [r0, #0]
   b5ede:	691b      	ldr	r3, [r3, #16]
   b5ee0:	4798      	blx	r3
   b5ee2:	2800      	cmp	r0, #0
   b5ee4:	dd01      	ble.n	b5eea <serialEventRun+0x2e>
        serialEvent1();
   b5ee6:	f3af 8000 	nop.w
}
   b5eea:	bd08      	pop	{r3, pc}
	...

000b5ef4 <_post_loop>:
{
   b5ef4:	b508      	push	{r3, lr}
	serialEventRun();
   b5ef6:	f7ff ffe1 	bl	b5ebc <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5efa:	f7fe fe65 	bl	b4bc8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5efe:	4b01      	ldr	r3, [pc, #4]	; (b5f04 <_post_loop+0x10>)
   b5f00:	6018      	str	r0, [r3, #0]
}
   b5f02:	bd08      	pop	{r3, pc}
   b5f04:	2003e728 	.word	0x2003e728

000b5f08 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5f08:	4805      	ldr	r0, [pc, #20]	; (b5f20 <_Z33system_initialize_user_backup_ramv+0x18>)
   b5f0a:	4a06      	ldr	r2, [pc, #24]	; (b5f24 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b5f0c:	4906      	ldr	r1, [pc, #24]	; (b5f28 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b5f0e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5f10:	1a12      	subs	r2, r2, r0
   b5f12:	f002 f979 	bl	b8208 <memcpy>
    __backup_sram_signature = signature;
   b5f16:	4b05      	ldr	r3, [pc, #20]	; (b5f2c <_Z33system_initialize_user_backup_ramv+0x24>)
   b5f18:	4a05      	ldr	r2, [pc, #20]	; (b5f30 <_Z33system_initialize_user_backup_ramv+0x28>)
   b5f1a:	601a      	str	r2, [r3, #0]
}
   b5f1c:	bd08      	pop	{r3, pc}
   b5f1e:	bf00      	nop
   b5f20:	2003f400 	.word	0x2003f400
   b5f24:	2003f404 	.word	0x2003f404
   b5f28:	000b86cc 	.word	0x000b86cc
   b5f2c:	2003f400 	.word	0x2003f400
   b5f30:	9a271c1e 	.word	0x9a271c1e

000b5f34 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b5f34:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5f36:	2300      	movs	r3, #0
   b5f38:	9300      	str	r3, [sp, #0]
   b5f3a:	461a      	mov	r2, r3
   b5f3c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5f40:	f7fe ffb4 	bl	b4eac <system_ctrl_set_result>
}
   b5f44:	b003      	add	sp, #12
   b5f46:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5f4c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b5f4c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b5f4e:	8843      	ldrh	r3, [r0, #2]
   b5f50:	2b0a      	cmp	r3, #10
   b5f52:	d008      	beq.n	b5f66 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b5f54:	2b50      	cmp	r3, #80	; 0x50
   b5f56:	d10b      	bne.n	b5f70 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b5f58:	4b09      	ldr	r3, [pc, #36]	; (b5f80 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b5f5a:	681b      	ldr	r3, [r3, #0]
   b5f5c:	b14b      	cbz	r3, b5f72 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b5f5e:	b003      	add	sp, #12
   b5f60:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b5f64:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b5f66:	f7ff ffe5 	bl	b5f34 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b5f6a:	b003      	add	sp, #12
   b5f6c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5f70:	2300      	movs	r3, #0
   b5f72:	9300      	str	r3, [sp, #0]
   b5f74:	461a      	mov	r2, r3
   b5f76:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5f7a:	f7fe ff97 	bl	b4eac <system_ctrl_set_result>
}
   b5f7e:	e7f4      	b.n	b5f6a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b5f80:	2003e724 	.word	0x2003e724

000b5f84 <module_user_init_hook>:
{
   b5f84:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b5f86:	4812      	ldr	r0, [pc, #72]	; (b5fd0 <module_user_init_hook+0x4c>)
   b5f88:	2100      	movs	r1, #0
   b5f8a:	f7ff f851 	bl	b5030 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b5f8e:	4b11      	ldr	r3, [pc, #68]	; (b5fd4 <module_user_init_hook+0x50>)
   b5f90:	681a      	ldr	r2, [r3, #0]
   b5f92:	4b11      	ldr	r3, [pc, #68]	; (b5fd8 <module_user_init_hook+0x54>)
   b5f94:	429a      	cmp	r2, r3
   b5f96:	4b11      	ldr	r3, [pc, #68]	; (b5fdc <module_user_init_hook+0x58>)
   b5f98:	bf0c      	ite	eq
   b5f9a:	2201      	moveq	r2, #1
   b5f9c:	2200      	movne	r2, #0
   b5f9e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b5fa0:	d001      	beq.n	b5fa6 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b5fa2:	f7ff ffb1 	bl	b5f08 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b5fa6:	f7fe fe07 	bl	b4bb8 <HAL_RNG_GetRandomNumber>
   b5faa:	4604      	mov	r4, r0
    srand(seed);
   b5fac:	f002 f942 	bl	b8234 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b5fb0:	4b0b      	ldr	r3, [pc, #44]	; (b5fe0 <module_user_init_hook+0x5c>)
   b5fb2:	b113      	cbz	r3, b5fba <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b5fb4:	4620      	mov	r0, r4
   b5fb6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b5fba:	2100      	movs	r1, #0
   b5fbc:	4808      	ldr	r0, [pc, #32]	; (b5fe0 <module_user_init_hook+0x5c>)
   b5fbe:	f7fe ff97 	bl	b4ef0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b5fc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b5fc6:	4807      	ldr	r0, [pc, #28]	; (b5fe4 <module_user_init_hook+0x60>)
   b5fc8:	2100      	movs	r1, #0
   b5fca:	f7fe bf65 	b.w	b4e98 <system_ctrl_set_app_request_handler>
   b5fce:	bf00      	nop
   b5fd0:	000b5eb1 	.word	0x000b5eb1
   b5fd4:	2003f400 	.word	0x2003f400
   b5fd8:	9a271c1e 	.word	0x9a271c1e
   b5fdc:	2003e720 	.word	0x2003e720
   b5fe0:	00000000 	.word	0x00000000
   b5fe4:	000b5f4d 	.word	0x000b5f4d

000b5fe8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b5fe8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b5fea:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b5fec:	d902      	bls.n	b5ff4 <pinAvailable+0xc>
    return false;
   b5fee:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b5ff0:	b002      	add	sp, #8
   b5ff2:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b5ff4:	f1a0 030b 	sub.w	r3, r0, #11
   b5ff8:	2b02      	cmp	r3, #2
   b5ffa:	d81a      	bhi.n	b6032 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b5ffc:	4c17      	ldr	r4, [pc, #92]	; (b605c <pinAvailable+0x74>)
   b5ffe:	7821      	ldrb	r1, [r4, #0]
   b6000:	f3bf 8f5b 	dmb	ish
   b6004:	f011 0101 	ands.w	r1, r1, #1
   b6008:	d10b      	bne.n	b6022 <pinAvailable+0x3a>
   b600a:	4620      	mov	r0, r4
   b600c:	9101      	str	r1, [sp, #4]
   b600e:	f7fe f848 	bl	b40a2 <__cxa_guard_acquire>
   b6012:	9901      	ldr	r1, [sp, #4]
   b6014:	b128      	cbz	r0, b6022 <pinAvailable+0x3a>
   b6016:	4812      	ldr	r0, [pc, #72]	; (b6060 <pinAvailable+0x78>)
   b6018:	f7ff fd72 	bl	b5b00 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b601c:	4620      	mov	r0, r4
   b601e:	f7fe f845 	bl	b40ac <__cxa_guard_release>
   b6022:	4b0f      	ldr	r3, [pc, #60]	; (b6060 <pinAvailable+0x78>)
   b6024:	7818      	ldrb	r0, [r3, #0]
   b6026:	f7fe fe7f 	bl	b4d28 <hal_spi_is_enabled>
   b602a:	2800      	cmp	r0, #0
   b602c:	d1df      	bne.n	b5fee <pinAvailable+0x6>
  return true; // 'pin' is available
   b602e:	2001      	movs	r0, #1
   b6030:	e7de      	b.n	b5ff0 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b6032:	2801      	cmp	r0, #1
   b6034:	d809      	bhi.n	b604a <pinAvailable+0x62>
   b6036:	f000 f86d 	bl	b6114 <_Z19__fetch_global_Wirev>
   b603a:	2100      	movs	r1, #0
   b603c:	7c00      	ldrb	r0, [r0, #16]
   b603e:	f7fe fe2b 	bl	b4c98 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b6042:	f080 0001 	eor.w	r0, r0, #1
   b6046:	b2c0      	uxtb	r0, r0
   b6048:	e7d2      	b.n	b5ff0 <pinAvailable+0x8>
   b604a:	3809      	subs	r0, #9
   b604c:	2801      	cmp	r0, #1
   b604e:	d8ee      	bhi.n	b602e <pinAvailable+0x46>
   b6050:	f000 f8a0 	bl	b6194 <_Z22__fetch_global_Serial1v>
   b6054:	7c00      	ldrb	r0, [r0, #16]
   b6056:	f7fe feb7 	bl	b4dc8 <hal_usart_is_enabled>
   b605a:	e7f2      	b.n	b6042 <pinAvailable+0x5a>
   b605c:	2003e6b8 	.word	0x2003e6b8
   b6060:	2003e6bc 	.word	0x2003e6bc

000b6064 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6064:	2823      	cmp	r0, #35	; 0x23
{
   b6066:	b538      	push	{r3, r4, r5, lr}
   b6068:	4604      	mov	r4, r0
   b606a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b606c:	d80a      	bhi.n	b6084 <pinMode+0x20>
   b606e:	29ff      	cmp	r1, #255	; 0xff
   b6070:	d008      	beq.n	b6084 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b6072:	f7ff ffb9 	bl	b5fe8 <pinAvailable>
   b6076:	b128      	cbz	r0, b6084 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b6078:	4629      	mov	r1, r5
   b607a:	4620      	mov	r0, r4
}
   b607c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b6080:	f7fe bdaa 	b.w	b4bd8 <HAL_Pin_Mode>
}
   b6084:	bd38      	pop	{r3, r4, r5, pc}

000b6086 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b6086:	b538      	push	{r3, r4, r5, lr}
   b6088:	4604      	mov	r4, r0
   b608a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b608c:	f7fe fdac 	bl	b4be8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b6090:	28ff      	cmp	r0, #255	; 0xff
   b6092:	d010      	beq.n	b60b6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b6094:	2806      	cmp	r0, #6
   b6096:	d804      	bhi.n	b60a2 <digitalWrite+0x1c>
   b6098:	234d      	movs	r3, #77	; 0x4d
   b609a:	fa23 f000 	lsr.w	r0, r3, r0
   b609e:	07c3      	lsls	r3, r0, #31
   b60a0:	d409      	bmi.n	b60b6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b60a2:	4620      	mov	r0, r4
   b60a4:	f7ff ffa0 	bl	b5fe8 <pinAvailable>
   b60a8:	b128      	cbz	r0, b60b6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b60aa:	4629      	mov	r1, r5
   b60ac:	4620      	mov	r0, r4
}
   b60ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b60b2:	f7fe bda1 	b.w	b4bf8 <HAL_GPIO_Write>
}
   b60b6:	bd38      	pop	{r3, r4, r5, pc}

000b60b8 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b60b8:	b510      	push	{r4, lr}
   b60ba:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b60bc:	f7fe fd94 	bl	b4be8 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b60c0:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b60c2:	b2db      	uxtb	r3, r3
   b60c4:	2b01      	cmp	r3, #1
   b60c6:	d908      	bls.n	b60da <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b60c8:	4620      	mov	r0, r4
   b60ca:	f7ff ff8d 	bl	b5fe8 <pinAvailable>
   b60ce:	b120      	cbz	r0, b60da <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b60d0:	4620      	mov	r0, r4
}
   b60d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b60d6:	f7fe bd97 	b.w	b4c08 <HAL_GPIO_Read>
}
   b60da:	2000      	movs	r0, #0
   b60dc:	bd10      	pop	{r4, pc}

000b60de <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b60de:	4770      	bx	lr

000b60e0 <_Z17acquireWireBufferv>:
{
   b60e0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b60e2:	4b0a      	ldr	r3, [pc, #40]	; (b610c <_Z17acquireWireBufferv+0x2c>)
   b60e4:	6003      	str	r3, [r0, #0]
   b60e6:	2301      	movs	r3, #1
{
   b60e8:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b60ea:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b60ec:	4908      	ldr	r1, [pc, #32]	; (b6110 <_Z17acquireWireBufferv+0x30>)
   b60ee:	2020      	movs	r0, #32
   b60f0:	f000 f874 	bl	b61dc <_ZnajRKSt9nothrow_t>
	};
   b60f4:	2520      	movs	r5, #32
   b60f6:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b60f8:	4905      	ldr	r1, [pc, #20]	; (b6110 <_Z17acquireWireBufferv+0x30>)
	};
   b60fa:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b60fc:	4628      	mov	r0, r5
   b60fe:	f000 f86d 	bl	b61dc <_ZnajRKSt9nothrow_t>
	};
   b6102:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b6106:	4620      	mov	r0, r4
   b6108:	bd38      	pop	{r3, r4, r5, pc}
   b610a:	bf00      	nop
   b610c:	00010018 	.word	0x00010018
   b6110:	000b85ec 	.word	0x000b85ec

000b6114 <_Z19__fetch_global_Wirev>:
{
   b6114:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6116:	4d0e      	ldr	r5, [pc, #56]	; (b6150 <_Z19__fetch_global_Wirev+0x3c>)
   b6118:	7829      	ldrb	r1, [r5, #0]
   b611a:	f3bf 8f5b 	dmb	ish
   b611e:	f011 0401 	ands.w	r4, r1, #1
{
   b6122:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6124:	d111      	bne.n	b614a <_Z19__fetch_global_Wirev+0x36>
   b6126:	4628      	mov	r0, r5
   b6128:	f7fd ffbb 	bl	b40a2 <__cxa_guard_acquire>
   b612c:	b168      	cbz	r0, b614a <_Z19__fetch_global_Wirev+0x36>
   b612e:	4668      	mov	r0, sp
   b6130:	f7ff ffd6 	bl	b60e0 <_Z17acquireWireBufferv>
   b6134:	466a      	mov	r2, sp
   b6136:	4621      	mov	r1, r4
   b6138:	4806      	ldr	r0, [pc, #24]	; (b6154 <_Z19__fetch_global_Wirev+0x40>)
   b613a:	f7ff fabd 	bl	b56b8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b613e:	4628      	mov	r0, r5
   b6140:	f7fd ffb4 	bl	b40ac <__cxa_guard_release>
   b6144:	4804      	ldr	r0, [pc, #16]	; (b6158 <_Z19__fetch_global_Wirev+0x44>)
   b6146:	f002 f859 	bl	b81fc <atexit>
	return wire;
}
   b614a:	4802      	ldr	r0, [pc, #8]	; (b6154 <_Z19__fetch_global_Wirev+0x40>)
   b614c:	b007      	add	sp, #28
   b614e:	bd30      	pop	{r4, r5, pc}
   b6150:	2003e72c 	.word	0x2003e72c
   b6154:	2003e730 	.word	0x2003e730
   b6158:	000b60df 	.word	0x000b60df

000b615c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b615c:	4770      	bx	lr
	...

000b6160 <_Z20acquireSerial1Bufferv>:
{
   b6160:	b538      	push	{r3, r4, r5, lr}
   b6162:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b6164:	2514      	movs	r5, #20
   b6166:	462a      	mov	r2, r5
   b6168:	2100      	movs	r1, #0
   b616a:	f002 f85b 	bl	b8224 <memset>
   b616e:	8025      	strh	r5, [r4, #0]
   b6170:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6172:	4907      	ldr	r1, [pc, #28]	; (b6190 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b6174:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6176:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b6178:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b617a:	f000 f82f 	bl	b61dc <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b617e:	4904      	ldr	r1, [pc, #16]	; (b6190 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b6180:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6182:	4628      	mov	r0, r5
   b6184:	f000 f82a 	bl	b61dc <_ZnajRKSt9nothrow_t>
    };
   b6188:	60e0      	str	r0, [r4, #12]
}
   b618a:	4620      	mov	r0, r4
   b618c:	bd38      	pop	{r3, r4, r5, pc}
   b618e:	bf00      	nop
   b6190:	000b85ec 	.word	0x000b85ec

000b6194 <_Z22__fetch_global_Serial1v>:
{
   b6194:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6196:	4d0e      	ldr	r5, [pc, #56]	; (b61d0 <_Z22__fetch_global_Serial1v+0x3c>)
   b6198:	7829      	ldrb	r1, [r5, #0]
   b619a:	f3bf 8f5b 	dmb	ish
   b619e:	f011 0401 	ands.w	r4, r1, #1
{
   b61a2:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b61a4:	d111      	bne.n	b61ca <_Z22__fetch_global_Serial1v+0x36>
   b61a6:	4628      	mov	r0, r5
   b61a8:	f7fd ff7b 	bl	b40a2 <__cxa_guard_acquire>
   b61ac:	b168      	cbz	r0, b61ca <_Z22__fetch_global_Serial1v+0x36>
   b61ae:	a801      	add	r0, sp, #4
   b61b0:	f7ff ffd6 	bl	b6160 <_Z20acquireSerial1Bufferv>
   b61b4:	aa01      	add	r2, sp, #4
   b61b6:	4621      	mov	r1, r4
   b61b8:	4806      	ldr	r0, [pc, #24]	; (b61d4 <_Z22__fetch_global_Serial1v+0x40>)
   b61ba:	f7ff fda7 	bl	b5d0c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b61be:	4628      	mov	r0, r5
   b61c0:	f7fd ff74 	bl	b40ac <__cxa_guard_release>
   b61c4:	4804      	ldr	r0, [pc, #16]	; (b61d8 <_Z22__fetch_global_Serial1v+0x44>)
   b61c6:	f002 f819 	bl	b81fc <atexit>
    return serial1;
}
   b61ca:	4802      	ldr	r0, [pc, #8]	; (b61d4 <_Z22__fetch_global_Serial1v+0x40>)
   b61cc:	b007      	add	sp, #28
   b61ce:	bd30      	pop	{r4, r5, pc}
   b61d0:	2003e744 	.word	0x2003e744
   b61d4:	2003e748 	.word	0x2003e748
   b61d8:	000b615d 	.word	0x000b615d

000b61dc <_ZnajRKSt9nothrow_t>:
   b61dc:	f7fd bf5d 	b.w	b409a <_Znaj>

000b61e0 <_ZSt25__throw_bad_function_callv>:
   b61e0:	b508      	push	{r3, lr}
   b61e2:	f7fe ff05 	bl	b4ff0 <abort>
	...

000b61e8 <pow>:
   b61e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b61ea:	ed2d 8b02 	vpush	{d8}
   b61ee:	ec57 6b10 	vmov	r6, r7, d0
   b61f2:	ec55 4b11 	vmov	r4, r5, d1
   b61f6:	f000 f8cb 	bl	b6390 <__ieee754_pow>
   b61fa:	4b63      	ldr	r3, [pc, #396]	; (b6388 <pow+0x1a0>)
   b61fc:	eeb0 8a40 	vmov.f32	s16, s0
   b6200:	eef0 8a60 	vmov.f32	s17, s1
   b6204:	f993 3000 	ldrsb.w	r3, [r3]
   b6208:	3301      	adds	r3, #1
   b620a:	d02a      	beq.n	b6262 <pow+0x7a>
   b620c:	4622      	mov	r2, r4
   b620e:	462b      	mov	r3, r5
   b6210:	4620      	mov	r0, r4
   b6212:	4629      	mov	r1, r5
   b6214:	f001 fcc4 	bl	b7ba0 <__aeabi_dcmpun>
   b6218:	bb18      	cbnz	r0, b6262 <pow+0x7a>
   b621a:	4632      	mov	r2, r6
   b621c:	463b      	mov	r3, r7
   b621e:	4630      	mov	r0, r6
   b6220:	4639      	mov	r1, r7
   b6222:	f001 fcbd 	bl	b7ba0 <__aeabi_dcmpun>
   b6226:	2800      	cmp	r0, #0
   b6228:	d144      	bne.n	b62b4 <pow+0xcc>
   b622a:	2200      	movs	r2, #0
   b622c:	2300      	movs	r3, #0
   b622e:	4630      	mov	r0, r6
   b6230:	4639      	mov	r1, r7
   b6232:	f001 fc83 	bl	b7b3c <__aeabi_dcmpeq>
   b6236:	b1d8      	cbz	r0, b6270 <pow+0x88>
   b6238:	2200      	movs	r2, #0
   b623a:	2300      	movs	r3, #0
   b623c:	4620      	mov	r0, r4
   b623e:	4629      	mov	r1, r5
   b6240:	f001 fc7c 	bl	b7b3c <__aeabi_dcmpeq>
   b6244:	2800      	cmp	r0, #0
   b6246:	d13d      	bne.n	b62c4 <pow+0xdc>
   b6248:	ec45 4b10 	vmov	d0, r4, r5
   b624c:	f000 ff10 	bl	b7070 <finite>
   b6250:	b138      	cbz	r0, b6262 <pow+0x7a>
   b6252:	4620      	mov	r0, r4
   b6254:	4629      	mov	r1, r5
   b6256:	2200      	movs	r2, #0
   b6258:	2300      	movs	r3, #0
   b625a:	f001 fc79 	bl	b7b50 <__aeabi_dcmplt>
   b625e:	2800      	cmp	r0, #0
   b6260:	d15c      	bne.n	b631c <pow+0x134>
   b6262:	eeb0 0a48 	vmov.f32	s0, s16
   b6266:	eef0 0a68 	vmov.f32	s1, s17
   b626a:	ecbd 8b02 	vpop	{d8}
   b626e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b6270:	eeb0 0a48 	vmov.f32	s0, s16
   b6274:	eef0 0a68 	vmov.f32	s1, s17
   b6278:	f000 fefa 	bl	b7070 <finite>
   b627c:	b358      	cbz	r0, b62d6 <pow+0xee>
   b627e:	ec51 0b18 	vmov	r0, r1, d8
   b6282:	2200      	movs	r2, #0
   b6284:	2300      	movs	r3, #0
   b6286:	f001 fc59 	bl	b7b3c <__aeabi_dcmpeq>
   b628a:	2800      	cmp	r0, #0
   b628c:	d0e9      	beq.n	b6262 <pow+0x7a>
   b628e:	ec47 6b10 	vmov	d0, r6, r7
   b6292:	f000 feed 	bl	b7070 <finite>
   b6296:	2800      	cmp	r0, #0
   b6298:	d0e3      	beq.n	b6262 <pow+0x7a>
   b629a:	ec45 4b10 	vmov	d0, r4, r5
   b629e:	f000 fee7 	bl	b7070 <finite>
   b62a2:	2800      	cmp	r0, #0
   b62a4:	d0dd      	beq.n	b6262 <pow+0x7a>
   b62a6:	f7fe feb3 	bl	b5010 <__errno>
   b62aa:	2322      	movs	r3, #34	; 0x22
   b62ac:	ed9f 8b2e 	vldr	d8, [pc, #184]	; b6368 <pow+0x180>
   b62b0:	6003      	str	r3, [r0, #0]
   b62b2:	e7d6      	b.n	b6262 <pow+0x7a>
   b62b4:	4620      	mov	r0, r4
   b62b6:	4629      	mov	r1, r5
   b62b8:	2200      	movs	r2, #0
   b62ba:	2300      	movs	r3, #0
   b62bc:	f001 fc3e 	bl	b7b3c <__aeabi_dcmpeq>
   b62c0:	2800      	cmp	r0, #0
   b62c2:	d0ce      	beq.n	b6262 <pow+0x7a>
   b62c4:	ed9f 8b2a 	vldr	d8, [pc, #168]	; b6370 <pow+0x188>
   b62c8:	eeb0 0a48 	vmov.f32	s0, s16
   b62cc:	eef0 0a68 	vmov.f32	s1, s17
   b62d0:	ecbd 8b02 	vpop	{d8}
   b62d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b62d6:	ec47 6b10 	vmov	d0, r6, r7
   b62da:	f000 fec9 	bl	b7070 <finite>
   b62de:	2800      	cmp	r0, #0
   b62e0:	d0cd      	beq.n	b627e <pow+0x96>
   b62e2:	ec45 4b10 	vmov	d0, r4, r5
   b62e6:	f000 fec3 	bl	b7070 <finite>
   b62ea:	2800      	cmp	r0, #0
   b62ec:	d0c7      	beq.n	b627e <pow+0x96>
   b62ee:	ec53 2b18 	vmov	r2, r3, d8
   b62f2:	ee18 0a10 	vmov	r0, s16
   b62f6:	4619      	mov	r1, r3
   b62f8:	f001 fc52 	bl	b7ba0 <__aeabi_dcmpun>
   b62fc:	bb20      	cbnz	r0, b6348 <pow+0x160>
   b62fe:	f7fe fe87 	bl	b5010 <__errno>
   b6302:	4603      	mov	r3, r0
   b6304:	2222      	movs	r2, #34	; 0x22
   b6306:	601a      	str	r2, [r3, #0]
   b6308:	4630      	mov	r0, r6
   b630a:	4639      	mov	r1, r7
   b630c:	2200      	movs	r2, #0
   b630e:	2300      	movs	r3, #0
   b6310:	f001 fc1e 	bl	b7b50 <__aeabi_dcmplt>
   b6314:	b948      	cbnz	r0, b632a <pow+0x142>
   b6316:	ed9f 8b18 	vldr	d8, [pc, #96]	; b6378 <pow+0x190>
   b631a:	e7a2      	b.n	b6262 <pow+0x7a>
   b631c:	f7fe fe78 	bl	b5010 <__errno>
   b6320:	2321      	movs	r3, #33	; 0x21
   b6322:	ed9f 8b17 	vldr	d8, [pc, #92]	; b6380 <pow+0x198>
   b6326:	6003      	str	r3, [r0, #0]
   b6328:	e79b      	b.n	b6262 <pow+0x7a>
   b632a:	ec45 4b10 	vmov	d0, r4, r5
   b632e:	f000 feb3 	bl	b7098 <rint>
   b6332:	4622      	mov	r2, r4
   b6334:	ec51 0b10 	vmov	r0, r1, d0
   b6338:	462b      	mov	r3, r5
   b633a:	f001 fbff 	bl	b7b3c <__aeabi_dcmpeq>
   b633e:	2800      	cmp	r0, #0
   b6340:	d1e9      	bne.n	b6316 <pow+0x12e>
   b6342:	ed9f 8b0f 	vldr	d8, [pc, #60]	; b6380 <pow+0x198>
   b6346:	e78c      	b.n	b6262 <pow+0x7a>
   b6348:	f7fe fe62 	bl	b5010 <__errno>
   b634c:	2200      	movs	r2, #0
   b634e:	2300      	movs	r3, #0
   b6350:	2121      	movs	r1, #33	; 0x21
   b6352:	6001      	str	r1, [r0, #0]
   b6354:	4610      	mov	r0, r2
   b6356:	4619      	mov	r1, r3
   b6358:	f001 fab2 	bl	b78c0 <__aeabi_ddiv>
   b635c:	ec41 0b18 	vmov	d8, r0, r1
   b6360:	e77f      	b.n	b6262 <pow+0x7a>
   b6362:	bf00      	nop
   b6364:	f3af 8000 	nop.w
	...
   b6374:	3ff00000 	.word	0x3ff00000
   b6378:	00000000 	.word	0x00000000
   b637c:	7ff00000 	.word	0x7ff00000
   b6380:	00000000 	.word	0x00000000
   b6384:	fff00000 	.word	0xfff00000
   b6388:	2003e5f4 	.word	0x2003e5f4
   b638c:	00000000 	.word	0x00000000

000b6390 <__ieee754_pow>:
   b6390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6394:	ec57 6b11 	vmov	r6, r7, d1
   b6398:	ed2d 8b0c 	vpush	{d8-d13}
   b639c:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   b63a0:	ea5a 0206 	orrs.w	r2, sl, r6
   b63a4:	b087      	sub	sp, #28
   b63a6:	d03d      	beq.n	b6424 <__ieee754_pow+0x94>
   b63a8:	ec55 4b10 	vmov	r4, r5, d0
   b63ac:	4972      	ldr	r1, [pc, #456]	; (b6578 <__ieee754_pow+0x1e8>)
   b63ae:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
   b63b2:	4588      	cmp	r8, r1
   b63b4:	ee10 2a10 	vmov	r2, s0
   b63b8:	46a9      	mov	r9, r5
   b63ba:	dc2c      	bgt.n	b6416 <__ieee754_pow+0x86>
   b63bc:	ee11 3a10 	vmov	r3, s2
   b63c0:	46bb      	mov	fp, r7
   b63c2:	d036      	beq.n	b6432 <__ieee754_pow+0xa2>
   b63c4:	458a      	cmp	sl, r1
   b63c6:	dc26      	bgt.n	b6416 <__ieee754_pow+0x86>
   b63c8:	496b      	ldr	r1, [pc, #428]	; (b6578 <__ieee754_pow+0x1e8>)
   b63ca:	458a      	cmp	sl, r1
   b63cc:	d021      	beq.n	b6412 <__ieee754_pow+0x82>
   b63ce:	f1b9 0f00 	cmp.w	r9, #0
   b63d2:	db39      	blt.n	b6448 <__ieee754_pow+0xb8>
   b63d4:	2100      	movs	r1, #0
   b63d6:	9100      	str	r1, [sp, #0]
   b63d8:	2b00      	cmp	r3, #0
   b63da:	d151      	bne.n	b6480 <__ieee754_pow+0xf0>
   b63dc:	4b66      	ldr	r3, [pc, #408]	; (b6578 <__ieee754_pow+0x1e8>)
   b63de:	459a      	cmp	sl, r3
   b63e0:	f000 80a2 	beq.w	b6528 <__ieee754_pow+0x198>
   b63e4:	4b65      	ldr	r3, [pc, #404]	; (b657c <__ieee754_pow+0x1ec>)
   b63e6:	459a      	cmp	sl, r3
   b63e8:	f000 80b0 	beq.w	b654c <__ieee754_pow+0x1bc>
   b63ec:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
   b63f0:	f000 84c0 	beq.w	b6d74 <__ieee754_pow+0x9e4>
   b63f4:	4b62      	ldr	r3, [pc, #392]	; (b6580 <__ieee754_pow+0x1f0>)
   b63f6:	459b      	cmp	fp, r3
   b63f8:	d142      	bne.n	b6480 <__ieee754_pow+0xf0>
   b63fa:	f1b9 0f00 	cmp.w	r9, #0
   b63fe:	db3f      	blt.n	b6480 <__ieee754_pow+0xf0>
   b6400:	ec45 4b10 	vmov	d0, r4, r5
   b6404:	b007      	add	sp, #28
   b6406:	ecbd 8b0c 	vpop	{d8-d13}
   b640a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b640e:	f000 bd59 	b.w	b6ec4 <__ieee754_sqrt>
   b6412:	2b00      	cmp	r3, #0
   b6414:	d0db      	beq.n	b63ce <__ieee754_pow+0x3e>
   b6416:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   b641a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   b641e:	ea58 0302 	orrs.w	r3, r8, r2
   b6422:	d109      	bne.n	b6438 <__ieee754_pow+0xa8>
   b6424:	ed9f 0b50 	vldr	d0, [pc, #320]	; b6568 <__ieee754_pow+0x1d8>
   b6428:	b007      	add	sp, #28
   b642a:	ecbd 8b0c 	vpop	{d8-d13}
   b642e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6432:	b90c      	cbnz	r4, b6438 <__ieee754_pow+0xa8>
   b6434:	45c2      	cmp	sl, r8
   b6436:	ddc7      	ble.n	b63c8 <__ieee754_pow+0x38>
   b6438:	4852      	ldr	r0, [pc, #328]	; (b6584 <__ieee754_pow+0x1f4>)
   b643a:	b007      	add	sp, #28
   b643c:	ecbd 8b0c 	vpop	{d8-d13}
   b6440:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6444:	f000 be20 	b.w	b7088 <nan>
   b6448:	494f      	ldr	r1, [pc, #316]	; (b6588 <__ieee754_pow+0x1f8>)
   b644a:	458a      	cmp	sl, r1
   b644c:	f300 8085 	bgt.w	b655a <__ieee754_pow+0x1ca>
   b6450:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
   b6454:	458a      	cmp	sl, r1
   b6456:	dd0f      	ble.n	b6478 <__ieee754_pow+0xe8>
   b6458:	ea4f 512a 	mov.w	r1, sl, asr #20
   b645c:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   b6460:	2914      	cmp	r1, #20
   b6462:	f340 849b 	ble.w	b6d9c <__ieee754_pow+0xa0c>
   b6466:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
   b646a:	fa23 f001 	lsr.w	r0, r3, r1
   b646e:	fa00 f101 	lsl.w	r1, r0, r1
   b6472:	4299      	cmp	r1, r3
   b6474:	f000 84ed 	beq.w	b6e52 <__ieee754_pow+0xac2>
   b6478:	2100      	movs	r1, #0
   b647a:	9100      	str	r1, [sp, #0]
   b647c:	2b00      	cmp	r3, #0
   b647e:	d0b1      	beq.n	b63e4 <__ieee754_pow+0x54>
   b6480:	ec45 4b10 	vmov	d0, r4, r5
   b6484:	9202      	str	r2, [sp, #8]
   b6486:	f000 fde9 	bl	b705c <fabs>
   b648a:	9a02      	ldr	r2, [sp, #8]
   b648c:	bb5a      	cbnz	r2, b64e6 <__ieee754_pow+0x156>
   b648e:	f1b8 0f00 	cmp.w	r8, #0
   b6492:	d004      	beq.n	b649e <__ieee754_pow+0x10e>
   b6494:	4b39      	ldr	r3, [pc, #228]	; (b657c <__ieee754_pow+0x1ec>)
   b6496:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
   b649a:	429a      	cmp	r2, r3
   b649c:	d123      	bne.n	b64e6 <__ieee754_pow+0x156>
   b649e:	f1bb 0f00 	cmp.w	fp, #0
   b64a2:	da07      	bge.n	b64b4 <__ieee754_pow+0x124>
   b64a4:	ec53 2b10 	vmov	r2, r3, d0
   b64a8:	4934      	ldr	r1, [pc, #208]	; (b657c <__ieee754_pow+0x1ec>)
   b64aa:	2000      	movs	r0, #0
   b64ac:	f001 fa08 	bl	b78c0 <__aeabi_ddiv>
   b64b0:	ec41 0b10 	vmov	d0, r0, r1
   b64b4:	f1b9 0f00 	cmp.w	r9, #0
   b64b8:	dab6      	bge.n	b6428 <__ieee754_pow+0x98>
   b64ba:	9b00      	ldr	r3, [sp, #0]
   b64bc:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   b64c0:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   b64c4:	ea58 0303 	orrs.w	r3, r8, r3
   b64c8:	f040 848d 	bne.w	b6de6 <__ieee754_pow+0xa56>
   b64cc:	ec53 2b10 	vmov	r2, r3, d0
   b64d0:	4610      	mov	r0, r2
   b64d2:	4619      	mov	r1, r3
   b64d4:	f000 ff12 	bl	b72fc <__aeabi_dsub>
   b64d8:	4602      	mov	r2, r0
   b64da:	460b      	mov	r3, r1
   b64dc:	f001 f9f0 	bl	b78c0 <__aeabi_ddiv>
   b64e0:	ec41 0b10 	vmov	d0, r0, r1
   b64e4:	e7a0      	b.n	b6428 <__ieee754_pow+0x98>
   b64e6:	9a00      	ldr	r2, [sp, #0]
   b64e8:	ea4f 73d9 	mov.w	r3, r9, lsr #31
   b64ec:	3b01      	subs	r3, #1
   b64ee:	9304      	str	r3, [sp, #16]
   b64f0:	4313      	orrs	r3, r2
   b64f2:	d035      	beq.n	b6560 <__ieee754_pow+0x1d0>
   b64f4:	4b25      	ldr	r3, [pc, #148]	; (b658c <__ieee754_pow+0x1fc>)
   b64f6:	459a      	cmp	sl, r3
   b64f8:	dd4c      	ble.n	b6594 <__ieee754_pow+0x204>
   b64fa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   b64fe:	459a      	cmp	sl, r3
   b6500:	4b23      	ldr	r3, [pc, #140]	; (b6590 <__ieee754_pow+0x200>)
   b6502:	f340 83db 	ble.w	b6cbc <__ieee754_pow+0x92c>
   b6506:	4598      	cmp	r8, r3
   b6508:	f340 8360 	ble.w	b6bcc <__ieee754_pow+0x83c>
   b650c:	f1bb 0f00 	cmp.w	fp, #0
   b6510:	f340 8360 	ble.w	b6bd4 <__ieee754_pow+0x844>
   b6514:	a316      	add	r3, pc, #88	; (adr r3, b6570 <__ieee754_pow+0x1e0>)
   b6516:	e9d3 2300 	ldrd	r2, r3, [r3]
   b651a:	4610      	mov	r0, r2
   b651c:	4619      	mov	r1, r3
   b651e:	f001 f8a5 	bl	b766c <__aeabi_dmul>
   b6522:	ec41 0b10 	vmov	d0, r0, r1
   b6526:	e77f      	b.n	b6428 <__ieee754_pow+0x98>
   b6528:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
   b652c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   b6530:	4313      	orrs	r3, r2
   b6532:	f43f af77 	beq.w	b6424 <__ieee754_pow+0x94>
   b6536:	4b16      	ldr	r3, [pc, #88]	; (b6590 <__ieee754_pow+0x200>)
   b6538:	4598      	cmp	r8, r3
   b653a:	f340 837a 	ble.w	b6c32 <__ieee754_pow+0x8a2>
   b653e:	f1bb 0f00 	cmp.w	fp, #0
   b6542:	f2c0 8347 	blt.w	b6bd4 <__ieee754_pow+0x844>
   b6546:	ec47 6b10 	vmov	d0, r6, r7
   b654a:	e76d      	b.n	b6428 <__ieee754_pow+0x98>
   b654c:	f1bb 0f00 	cmp.w	fp, #0
   b6550:	f2c0 841a 	blt.w	b6d88 <__ieee754_pow+0x9f8>
   b6554:	ec45 4b10 	vmov	d0, r4, r5
   b6558:	e766      	b.n	b6428 <__ieee754_pow+0x98>
   b655a:	2102      	movs	r1, #2
   b655c:	9100      	str	r1, [sp, #0]
   b655e:	e73b      	b.n	b63d8 <__ieee754_pow+0x48>
   b6560:	4622      	mov	r2, r4
   b6562:	462b      	mov	r3, r5
   b6564:	e7b4      	b.n	b64d0 <__ieee754_pow+0x140>
   b6566:	bf00      	nop
   b6568:	00000000 	.word	0x00000000
   b656c:	3ff00000 	.word	0x3ff00000
   b6570:	8800759c 	.word	0x8800759c
   b6574:	7e37e43c 	.word	0x7e37e43c
   b6578:	7ff00000 	.word	0x7ff00000
   b657c:	3ff00000 	.word	0x3ff00000
   b6580:	3fe00000 	.word	0x3fe00000
   b6584:	000b85f0 	.word	0x000b85f0
   b6588:	433fffff 	.word	0x433fffff
   b658c:	41e00000 	.word	0x41e00000
   b6590:	3fefffff 	.word	0x3fefffff
   b6594:	4be4      	ldr	r3, [pc, #912]	; (b6928 <__ieee754_pow+0x598>)
   b6596:	ea09 0303 	and.w	r3, r9, r3
   b659a:	2200      	movs	r2, #0
   b659c:	b953      	cbnz	r3, b65b4 <__ieee754_pow+0x224>
   b659e:	ec51 0b10 	vmov	r0, r1, d0
   b65a2:	4be2      	ldr	r3, [pc, #904]	; (b692c <__ieee754_pow+0x59c>)
   b65a4:	f001 f862 	bl	b766c <__aeabi_dmul>
   b65a8:	ec41 0b10 	vmov	d0, r0, r1
   b65ac:	ee10 8a90 	vmov	r8, s1
   b65b0:	f06f 0234 	mvn.w	r2, #52	; 0x34
   b65b4:	ea4f 5328 	mov.w	r3, r8, asr #20
   b65b8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   b65bc:	189a      	adds	r2, r3, r2
   b65be:	4bdc      	ldr	r3, [pc, #880]	; (b6930 <__ieee754_pow+0x5a0>)
   b65c0:	9205      	str	r2, [sp, #20]
   b65c2:	f3c8 0813 	ubfx	r8, r8, #0, #20
   b65c6:	f048 547f 	orr.w	r4, r8, #1069547520	; 0x3fc00000
   b65ca:	4598      	cmp	r8, r3
   b65cc:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   b65d0:	dd07      	ble.n	b65e2 <__ieee754_pow+0x252>
   b65d2:	4bd8      	ldr	r3, [pc, #864]	; (b6934 <__ieee754_pow+0x5a4>)
   b65d4:	4598      	cmp	r8, r3
   b65d6:	f340 8414 	ble.w	b6e02 <__ieee754_pow+0xa72>
   b65da:	3201      	adds	r2, #1
   b65dc:	9205      	str	r2, [sp, #20]
   b65de:	f5a4 1480 	sub.w	r4, r4, #1048576	; 0x100000
   b65e2:	ed9f 6bb9 	vldr	d6, [pc, #740]	; b68c8 <__ieee754_pow+0x538>
   b65e6:	ed9f 7bba 	vldr	d7, [pc, #744]	; b68d0 <__ieee754_pow+0x540>
   b65ea:	ec53 2b16 	vmov	r2, r3, d6
   b65ee:	eeb0 ca47 	vmov.f32	s24, s14
   b65f2:	eef0 ca67 	vmov.f32	s25, s15
   b65f6:	2500      	movs	r5, #0
   b65f8:	eeb0 da47 	vmov.f32	s26, s14
   b65fc:	eef0 da67 	vmov.f32	s27, s15
   b6600:	ec5b ab10 	vmov	sl, fp, d0
   b6604:	46a3      	mov	fp, r4
   b6606:	4650      	mov	r0, sl
   b6608:	4659      	mov	r1, fp
   b660a:	ec43 2b1a 	vmov	d10, r2, r3
   b660e:	f000 fe75 	bl	b72fc <__aeabi_dsub>
   b6612:	ec53 2b1a 	vmov	r2, r3, d10
   b6616:	4680      	mov	r8, r0
   b6618:	4689      	mov	r9, r1
   b661a:	4650      	mov	r0, sl
   b661c:	4659      	mov	r1, fp
   b661e:	f000 fe6f 	bl	b7300 <__adddf3>
   b6622:	4602      	mov	r2, r0
   b6624:	460b      	mov	r3, r1
   b6626:	2000      	movs	r0, #0
   b6628:	49c3      	ldr	r1, [pc, #780]	; (b6938 <__ieee754_pow+0x5a8>)
   b662a:	f001 f949 	bl	b78c0 <__aeabi_ddiv>
   b662e:	ec41 0b1b 	vmov	d11, r0, r1
   b6632:	4640      	mov	r0, r8
   b6634:	ec53 2b1b 	vmov	r2, r3, d11
   b6638:	4649      	mov	r1, r9
   b663a:	f001 f817 	bl	b766c <__aeabi_dmul>
   b663e:	ec41 0b18 	vmov	d8, r0, r1
   b6642:	460a      	mov	r2, r1
   b6644:	4601      	mov	r1, r0
   b6646:	e9cd 1202 	strd	r1, r2, [sp, #8]
   b664a:	2100      	movs	r1, #0
   b664c:	9102      	str	r1, [sp, #8]
   b664e:	1064      	asrs	r4, r4, #1
   b6650:	ec4b ab19 	vmov	d9, sl, fp
   b6654:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
   b6658:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   b665c:	f504 2300 	add.w	r3, r4, #524288	; 0x80000
   b6660:	2000      	movs	r0, #0
   b6662:	1959      	adds	r1, r3, r5
   b6664:	4604      	mov	r4, r0
   b6666:	460d      	mov	r5, r1
   b6668:	4602      	mov	r2, r0
   b666a:	460b      	mov	r3, r1
   b666c:	4650      	mov	r0, sl
   b666e:	4659      	mov	r1, fp
   b6670:	f000 fffc 	bl	b766c <__aeabi_dmul>
   b6674:	4602      	mov	r2, r0
   b6676:	460b      	mov	r3, r1
   b6678:	4640      	mov	r0, r8
   b667a:	4649      	mov	r1, r9
   b667c:	f000 fe3e 	bl	b72fc <__aeabi_dsub>
   b6680:	ec53 2b1a 	vmov	r2, r3, d10
   b6684:	4680      	mov	r8, r0
   b6686:	4689      	mov	r9, r1
   b6688:	4620      	mov	r0, r4
   b668a:	4629      	mov	r1, r5
   b668c:	f000 fe36 	bl	b72fc <__aeabi_dsub>
   b6690:	4602      	mov	r2, r0
   b6692:	460b      	mov	r3, r1
   b6694:	ec51 0b19 	vmov	r0, r1, d9
   b6698:	f000 fe30 	bl	b72fc <__aeabi_dsub>
   b669c:	4652      	mov	r2, sl
   b669e:	465b      	mov	r3, fp
   b66a0:	f000 ffe4 	bl	b766c <__aeabi_dmul>
   b66a4:	4602      	mov	r2, r0
   b66a6:	460b      	mov	r3, r1
   b66a8:	4640      	mov	r0, r8
   b66aa:	4649      	mov	r1, r9
   b66ac:	f000 fe26 	bl	b72fc <__aeabi_dsub>
   b66b0:	ec53 2b1b 	vmov	r2, r3, d11
   b66b4:	f000 ffda 	bl	b766c <__aeabi_dmul>
   b66b8:	ec53 2b18 	vmov	r2, r3, d8
   b66bc:	ec41 0b19 	vmov	d9, r0, r1
   b66c0:	ec51 0b18 	vmov	r0, r1, d8
   b66c4:	f000 ffd2 	bl	b766c <__aeabi_dmul>
   b66c8:	a383      	add	r3, pc, #524	; (adr r3, b68d8 <__ieee754_pow+0x548>)
   b66ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   b66ce:	4604      	mov	r4, r0
   b66d0:	460d      	mov	r5, r1
   b66d2:	f000 ffcb 	bl	b766c <__aeabi_dmul>
   b66d6:	a382      	add	r3, pc, #520	; (adr r3, b68e0 <__ieee754_pow+0x550>)
   b66d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b66dc:	f000 fe10 	bl	b7300 <__adddf3>
   b66e0:	4622      	mov	r2, r4
   b66e2:	462b      	mov	r3, r5
   b66e4:	f000 ffc2 	bl	b766c <__aeabi_dmul>
   b66e8:	a37f      	add	r3, pc, #508	; (adr r3, b68e8 <__ieee754_pow+0x558>)
   b66ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   b66ee:	f000 fe07 	bl	b7300 <__adddf3>
   b66f2:	4622      	mov	r2, r4
   b66f4:	462b      	mov	r3, r5
   b66f6:	f000 ffb9 	bl	b766c <__aeabi_dmul>
   b66fa:	a37d      	add	r3, pc, #500	; (adr r3, b68f0 <__ieee754_pow+0x560>)
   b66fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6700:	f000 fdfe 	bl	b7300 <__adddf3>
   b6704:	4622      	mov	r2, r4
   b6706:	462b      	mov	r3, r5
   b6708:	f000 ffb0 	bl	b766c <__aeabi_dmul>
   b670c:	a37a      	add	r3, pc, #488	; (adr r3, b68f8 <__ieee754_pow+0x568>)
   b670e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6712:	f000 fdf5 	bl	b7300 <__adddf3>
   b6716:	4622      	mov	r2, r4
   b6718:	462b      	mov	r3, r5
   b671a:	f000 ffa7 	bl	b766c <__aeabi_dmul>
   b671e:	a378      	add	r3, pc, #480	; (adr r3, b6900 <__ieee754_pow+0x570>)
   b6720:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6724:	f000 fdec 	bl	b7300 <__adddf3>
   b6728:	4622      	mov	r2, r4
   b672a:	4680      	mov	r8, r0
   b672c:	4689      	mov	r9, r1
   b672e:	462b      	mov	r3, r5
   b6730:	4620      	mov	r0, r4
   b6732:	4629      	mov	r1, r5
   b6734:	f000 ff9a 	bl	b766c <__aeabi_dmul>
   b6738:	4602      	mov	r2, r0
   b673a:	460b      	mov	r3, r1
   b673c:	4640      	mov	r0, r8
   b673e:	4649      	mov	r1, r9
   b6740:	f000 ff94 	bl	b766c <__aeabi_dmul>
   b6744:	4652      	mov	r2, sl
   b6746:	4604      	mov	r4, r0
   b6748:	460d      	mov	r5, r1
   b674a:	465b      	mov	r3, fp
   b674c:	ec51 0b18 	vmov	r0, r1, d8
   b6750:	f000 fdd6 	bl	b7300 <__adddf3>
   b6754:	ec53 2b19 	vmov	r2, r3, d9
   b6758:	f000 ff88 	bl	b766c <__aeabi_dmul>
   b675c:	4622      	mov	r2, r4
   b675e:	462b      	mov	r3, r5
   b6760:	f000 fdce 	bl	b7300 <__adddf3>
   b6764:	4652      	mov	r2, sl
   b6766:	4680      	mov	r8, r0
   b6768:	4689      	mov	r9, r1
   b676a:	465b      	mov	r3, fp
   b676c:	4650      	mov	r0, sl
   b676e:	4659      	mov	r1, fp
   b6770:	f000 ff7c 	bl	b766c <__aeabi_dmul>
   b6774:	4602      	mov	r2, r0
   b6776:	460b      	mov	r3, r1
   b6778:	ec43 2b1a 	vmov	d10, r2, r3
   b677c:	4b6f      	ldr	r3, [pc, #444]	; (b693c <__ieee754_pow+0x5ac>)
   b677e:	2200      	movs	r2, #0
   b6780:	f000 fdbe 	bl	b7300 <__adddf3>
   b6784:	4642      	mov	r2, r8
   b6786:	464b      	mov	r3, r9
   b6788:	f000 fdba 	bl	b7300 <__adddf3>
   b678c:	2400      	movs	r4, #0
   b678e:	460d      	mov	r5, r1
   b6790:	4622      	mov	r2, r4
   b6792:	462b      	mov	r3, r5
   b6794:	4650      	mov	r0, sl
   b6796:	4659      	mov	r1, fp
   b6798:	f000 ff68 	bl	b766c <__aeabi_dmul>
   b679c:	4b67      	ldr	r3, [pc, #412]	; (b693c <__ieee754_pow+0x5ac>)
   b679e:	4682      	mov	sl, r0
   b67a0:	468b      	mov	fp, r1
   b67a2:	2200      	movs	r2, #0
   b67a4:	4620      	mov	r0, r4
   b67a6:	4629      	mov	r1, r5
   b67a8:	f000 fda8 	bl	b72fc <__aeabi_dsub>
   b67ac:	ec53 2b1a 	vmov	r2, r3, d10
   b67b0:	f000 fda4 	bl	b72fc <__aeabi_dsub>
   b67b4:	4602      	mov	r2, r0
   b67b6:	460b      	mov	r3, r1
   b67b8:	4640      	mov	r0, r8
   b67ba:	4649      	mov	r1, r9
   b67bc:	f000 fd9e 	bl	b72fc <__aeabi_dsub>
   b67c0:	ec53 2b18 	vmov	r2, r3, d8
   b67c4:	f000 ff52 	bl	b766c <__aeabi_dmul>
   b67c8:	4622      	mov	r2, r4
   b67ca:	462b      	mov	r3, r5
   b67cc:	4604      	mov	r4, r0
   b67ce:	460d      	mov	r5, r1
   b67d0:	ec51 0b19 	vmov	r0, r1, d9
   b67d4:	f000 ff4a 	bl	b766c <__aeabi_dmul>
   b67d8:	4602      	mov	r2, r0
   b67da:	460b      	mov	r3, r1
   b67dc:	4620      	mov	r0, r4
   b67de:	4629      	mov	r1, r5
   b67e0:	f000 fd8e 	bl	b7300 <__adddf3>
   b67e4:	4680      	mov	r8, r0
   b67e6:	4689      	mov	r9, r1
   b67e8:	4642      	mov	r2, r8
   b67ea:	464b      	mov	r3, r9
   b67ec:	4650      	mov	r0, sl
   b67ee:	4659      	mov	r1, fp
   b67f0:	f000 fd86 	bl	b7300 <__adddf3>
   b67f4:	a344      	add	r3, pc, #272	; (adr r3, b6908 <__ieee754_pow+0x578>)
   b67f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b67fa:	2000      	movs	r0, #0
   b67fc:	4604      	mov	r4, r0
   b67fe:	460d      	mov	r5, r1
   b6800:	f000 ff34 	bl	b766c <__aeabi_dmul>
   b6804:	4652      	mov	r2, sl
   b6806:	ec41 0b19 	vmov	d9, r0, r1
   b680a:	465b      	mov	r3, fp
   b680c:	4620      	mov	r0, r4
   b680e:	4629      	mov	r1, r5
   b6810:	f000 fd74 	bl	b72fc <__aeabi_dsub>
   b6814:	4602      	mov	r2, r0
   b6816:	460b      	mov	r3, r1
   b6818:	4640      	mov	r0, r8
   b681a:	4649      	mov	r1, r9
   b681c:	f000 fd6e 	bl	b72fc <__aeabi_dsub>
   b6820:	a33b      	add	r3, pc, #236	; (adr r3, b6910 <__ieee754_pow+0x580>)
   b6822:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6826:	f000 ff21 	bl	b766c <__aeabi_dmul>
   b682a:	4602      	mov	r2, r0
   b682c:	460b      	mov	r3, r1
   b682e:	4620      	mov	r0, r4
   b6830:	4629      	mov	r1, r5
   b6832:	4614      	mov	r4, r2
   b6834:	461d      	mov	r5, r3
   b6836:	a338      	add	r3, pc, #224	; (adr r3, b6918 <__ieee754_pow+0x588>)
   b6838:	e9d3 2300 	ldrd	r2, r3, [r3]
   b683c:	f000 ff16 	bl	b766c <__aeabi_dmul>
   b6840:	4602      	mov	r2, r0
   b6842:	460b      	mov	r3, r1
   b6844:	4620      	mov	r0, r4
   b6846:	4629      	mov	r1, r5
   b6848:	f000 fd5a 	bl	b7300 <__adddf3>
   b684c:	ec53 2b1d 	vmov	r2, r3, d13
   b6850:	f000 fd56 	bl	b7300 <__adddf3>
   b6854:	4680      	mov	r8, r0
   b6856:	9805      	ldr	r0, [sp, #20]
   b6858:	4689      	mov	r9, r1
   b685a:	f000 fe9d 	bl	b7598 <__aeabi_i2d>
   b685e:	4642      	mov	r2, r8
   b6860:	4682      	mov	sl, r0
   b6862:	468b      	mov	fp, r1
   b6864:	464b      	mov	r3, r9
   b6866:	ec51 0b19 	vmov	r0, r1, d9
   b686a:	f000 fd49 	bl	b7300 <__adddf3>
   b686e:	ec53 2b1c 	vmov	r2, r3, d12
   b6872:	f000 fd45 	bl	b7300 <__adddf3>
   b6876:	4652      	mov	r2, sl
   b6878:	465b      	mov	r3, fp
   b687a:	f000 fd41 	bl	b7300 <__adddf3>
   b687e:	4652      	mov	r2, sl
   b6880:	465b      	mov	r3, fp
   b6882:	2000      	movs	r0, #0
   b6884:	4604      	mov	r4, r0
   b6886:	460d      	mov	r5, r1
   b6888:	f000 fd38 	bl	b72fc <__aeabi_dsub>
   b688c:	ec53 2b1c 	vmov	r2, r3, d12
   b6890:	f000 fd34 	bl	b72fc <__aeabi_dsub>
   b6894:	ec53 2b19 	vmov	r2, r3, d9
   b6898:	f000 fd30 	bl	b72fc <__aeabi_dsub>
   b689c:	4602      	mov	r2, r0
   b689e:	460b      	mov	r3, r1
   b68a0:	4640      	mov	r0, r8
   b68a2:	4649      	mov	r1, r9
   b68a4:	f000 fd2a 	bl	b72fc <__aeabi_dsub>
   b68a8:	9b00      	ldr	r3, [sp, #0]
   b68aa:	9a04      	ldr	r2, [sp, #16]
   b68ac:	3b01      	subs	r3, #1
   b68ae:	4313      	orrs	r3, r2
   b68b0:	4682      	mov	sl, r0
   b68b2:	468b      	mov	fp, r1
   b68b4:	f040 81b6 	bne.w	b6c24 <__ieee754_pow+0x894>
   b68b8:	ed9f 7b19 	vldr	d7, [pc, #100]	; b6920 <__ieee754_pow+0x590>
   b68bc:	eeb0 8a47 	vmov.f32	s16, s14
   b68c0:	eef0 8a67 	vmov.f32	s17, s15
   b68c4:	e03c      	b.n	b6940 <__ieee754_pow+0x5b0>
   b68c6:	bf00      	nop
   b68c8:	00000000 	.word	0x00000000
   b68cc:	3ff00000 	.word	0x3ff00000
	...
   b68d8:	4a454eef 	.word	0x4a454eef
   b68dc:	3fca7e28 	.word	0x3fca7e28
   b68e0:	93c9db65 	.word	0x93c9db65
   b68e4:	3fcd864a 	.word	0x3fcd864a
   b68e8:	a91d4101 	.word	0xa91d4101
   b68ec:	3fd17460 	.word	0x3fd17460
   b68f0:	518f264d 	.word	0x518f264d
   b68f4:	3fd55555 	.word	0x3fd55555
   b68f8:	db6fabff 	.word	0xdb6fabff
   b68fc:	3fdb6db6 	.word	0x3fdb6db6
   b6900:	33333303 	.word	0x33333303
   b6904:	3fe33333 	.word	0x3fe33333
   b6908:	e0000000 	.word	0xe0000000
   b690c:	3feec709 	.word	0x3feec709
   b6910:	dc3a03fd 	.word	0xdc3a03fd
   b6914:	3feec709 	.word	0x3feec709
   b6918:	145b01f5 	.word	0x145b01f5
   b691c:	be3e2fe0 	.word	0xbe3e2fe0
   b6920:	00000000 	.word	0x00000000
   b6924:	bff00000 	.word	0xbff00000
   b6928:	7ff00000 	.word	0x7ff00000
   b692c:	43400000 	.word	0x43400000
   b6930:	0003988e 	.word	0x0003988e
   b6934:	000bb679 	.word	0x000bb679
   b6938:	3ff00000 	.word	0x3ff00000
   b693c:	40080000 	.word	0x40080000
   b6940:	2300      	movs	r3, #0
   b6942:	e9cd 6700 	strd	r6, r7, [sp]
   b6946:	9300      	str	r3, [sp, #0]
   b6948:	e9dd 8900 	ldrd	r8, r9, [sp]
   b694c:	4630      	mov	r0, r6
   b694e:	4642      	mov	r2, r8
   b6950:	464b      	mov	r3, r9
   b6952:	4639      	mov	r1, r7
   b6954:	f000 fcd2 	bl	b72fc <__aeabi_dsub>
   b6958:	4622      	mov	r2, r4
   b695a:	462b      	mov	r3, r5
   b695c:	f000 fe86 	bl	b766c <__aeabi_dmul>
   b6960:	4632      	mov	r2, r6
   b6962:	463b      	mov	r3, r7
   b6964:	4606      	mov	r6, r0
   b6966:	460f      	mov	r7, r1
   b6968:	4650      	mov	r0, sl
   b696a:	4659      	mov	r1, fp
   b696c:	f000 fe7e 	bl	b766c <__aeabi_dmul>
   b6970:	4602      	mov	r2, r0
   b6972:	460b      	mov	r3, r1
   b6974:	4630      	mov	r0, r6
   b6976:	4639      	mov	r1, r7
   b6978:	f000 fcc2 	bl	b7300 <__adddf3>
   b697c:	4642      	mov	r2, r8
   b697e:	464b      	mov	r3, r9
   b6980:	4606      	mov	r6, r0
   b6982:	460f      	mov	r7, r1
   b6984:	4620      	mov	r0, r4
   b6986:	4629      	mov	r1, r5
   b6988:	f000 fe70 	bl	b766c <__aeabi_dmul>
   b698c:	4604      	mov	r4, r0
   b698e:	460d      	mov	r5, r1
   b6990:	462b      	mov	r3, r5
   b6992:	4630      	mov	r0, r6
   b6994:	4639      	mov	r1, r7
   b6996:	4622      	mov	r2, r4
   b6998:	f000 fcb2 	bl	b7300 <__adddf3>
   b699c:	4bc2      	ldr	r3, [pc, #776]	; (b6ca8 <__ieee754_pow+0x918>)
   b699e:	4299      	cmp	r1, r3
   b69a0:	4680      	mov	r8, r0
   b69a2:	4689      	mov	r9, r1
   b69a4:	468a      	mov	sl, r1
   b69a6:	f340 8118 	ble.w	b6bda <__ieee754_pow+0x84a>
   b69aa:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   b69ae:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   b69b2:	4303      	orrs	r3, r0
   b69b4:	f040 8207 	bne.w	b6dc6 <__ieee754_pow+0xa36>
   b69b8:	a3a3      	add	r3, pc, #652	; (adr r3, b6c48 <__ieee754_pow+0x8b8>)
   b69ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   b69be:	4630      	mov	r0, r6
   b69c0:	4639      	mov	r1, r7
   b69c2:	f000 fc9d 	bl	b7300 <__adddf3>
   b69c6:	4602      	mov	r2, r0
   b69c8:	460b      	mov	r3, r1
   b69ca:	4640      	mov	r0, r8
   b69cc:	4649      	mov	r1, r9
   b69ce:	4690      	mov	r8, r2
   b69d0:	4699      	mov	r9, r3
   b69d2:	4622      	mov	r2, r4
   b69d4:	462b      	mov	r3, r5
   b69d6:	f000 fc91 	bl	b72fc <__aeabi_dsub>
   b69da:	4602      	mov	r2, r0
   b69dc:	460b      	mov	r3, r1
   b69de:	4640      	mov	r0, r8
   b69e0:	4649      	mov	r1, r9
   b69e2:	f001 f8d3 	bl	b7b8c <__aeabi_dcmpgt>
   b69e6:	2800      	cmp	r0, #0
   b69e8:	f040 81ed 	bne.w	b6dc6 <__ieee754_pow+0xa36>
   b69ec:	f3ca 530a 	ubfx	r3, sl, #20, #11
   b69f0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   b69f4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   b69f8:	fa42 f303 	asr.w	r3, r2, r3
   b69fc:	4453      	add	r3, sl
   b69fe:	49ab      	ldr	r1, [pc, #684]	; (b6cac <__ieee754_pow+0x91c>)
   b6a00:	f3c3 520a 	ubfx	r2, r3, #20, #11
   b6a04:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   b6a08:	fa41 fc02 	asr.w	ip, r1, r2
   b6a0c:	f3c3 0113 	ubfx	r1, r3, #0, #20
   b6a10:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6a14:	f1c2 0214 	rsb	r2, r2, #20
   b6a18:	fa41 f202 	asr.w	r2, r1, r2
   b6a1c:	2000      	movs	r0, #0
   b6a1e:	ea23 010c 	bic.w	r1, r3, ip
   b6a22:	f1ba 0f00 	cmp.w	sl, #0
   b6a26:	9200      	str	r2, [sp, #0]
   b6a28:	460b      	mov	r3, r1
   b6a2a:	4602      	mov	r2, r0
   b6a2c:	da02      	bge.n	b6a34 <__ieee754_pow+0x6a4>
   b6a2e:	9900      	ldr	r1, [sp, #0]
   b6a30:	4249      	negs	r1, r1
   b6a32:	9100      	str	r1, [sp, #0]
   b6a34:	4620      	mov	r0, r4
   b6a36:	4629      	mov	r1, r5
   b6a38:	f000 fc60 	bl	b72fc <__aeabi_dsub>
   b6a3c:	9b00      	ldr	r3, [sp, #0]
   b6a3e:	051b      	lsls	r3, r3, #20
   b6a40:	9302      	str	r3, [sp, #8]
   b6a42:	4602      	mov	r2, r0
   b6a44:	460b      	mov	r3, r1
   b6a46:	4604      	mov	r4, r0
   b6a48:	460d      	mov	r5, r1
   b6a4a:	4630      	mov	r0, r6
   b6a4c:	4639      	mov	r1, r7
   b6a4e:	f000 fc57 	bl	b7300 <__adddf3>
   b6a52:	4689      	mov	r9, r1
   b6a54:	f04f 0800 	mov.w	r8, #0
   b6a58:	a37d      	add	r3, pc, #500	; (adr r3, b6c50 <__ieee754_pow+0x8c0>)
   b6a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6a5e:	4640      	mov	r0, r8
   b6a60:	4649      	mov	r1, r9
   b6a62:	f000 fe03 	bl	b766c <__aeabi_dmul>
   b6a66:	4622      	mov	r2, r4
   b6a68:	462b      	mov	r3, r5
   b6a6a:	4682      	mov	sl, r0
   b6a6c:	468b      	mov	fp, r1
   b6a6e:	4640      	mov	r0, r8
   b6a70:	4649      	mov	r1, r9
   b6a72:	f000 fc43 	bl	b72fc <__aeabi_dsub>
   b6a76:	4602      	mov	r2, r0
   b6a78:	460b      	mov	r3, r1
   b6a7a:	4630      	mov	r0, r6
   b6a7c:	4639      	mov	r1, r7
   b6a7e:	f000 fc3d 	bl	b72fc <__aeabi_dsub>
   b6a82:	a375      	add	r3, pc, #468	; (adr r3, b6c58 <__ieee754_pow+0x8c8>)
   b6a84:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6a88:	f000 fdf0 	bl	b766c <__aeabi_dmul>
   b6a8c:	a374      	add	r3, pc, #464	; (adr r3, b6c60 <__ieee754_pow+0x8d0>)
   b6a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6a92:	4604      	mov	r4, r0
   b6a94:	460d      	mov	r5, r1
   b6a96:	4640      	mov	r0, r8
   b6a98:	4649      	mov	r1, r9
   b6a9a:	f000 fde7 	bl	b766c <__aeabi_dmul>
   b6a9e:	4602      	mov	r2, r0
   b6aa0:	460b      	mov	r3, r1
   b6aa2:	4620      	mov	r0, r4
   b6aa4:	4629      	mov	r1, r5
   b6aa6:	f000 fc2b 	bl	b7300 <__adddf3>
   b6aaa:	4606      	mov	r6, r0
   b6aac:	460f      	mov	r7, r1
   b6aae:	4632      	mov	r2, r6
   b6ab0:	463b      	mov	r3, r7
   b6ab2:	4650      	mov	r0, sl
   b6ab4:	4659      	mov	r1, fp
   b6ab6:	f000 fc23 	bl	b7300 <__adddf3>
   b6aba:	4652      	mov	r2, sl
   b6abc:	465b      	mov	r3, fp
   b6abe:	4604      	mov	r4, r0
   b6ac0:	460d      	mov	r5, r1
   b6ac2:	f000 fc1b 	bl	b72fc <__aeabi_dsub>
   b6ac6:	4602      	mov	r2, r0
   b6ac8:	460b      	mov	r3, r1
   b6aca:	4630      	mov	r0, r6
   b6acc:	4639      	mov	r1, r7
   b6ace:	f000 fc15 	bl	b72fc <__aeabi_dsub>
   b6ad2:	4622      	mov	r2, r4
   b6ad4:	4680      	mov	r8, r0
   b6ad6:	4689      	mov	r9, r1
   b6ad8:	462b      	mov	r3, r5
   b6ada:	4620      	mov	r0, r4
   b6adc:	4629      	mov	r1, r5
   b6ade:	f000 fdc5 	bl	b766c <__aeabi_dmul>
   b6ae2:	a361      	add	r3, pc, #388	; (adr r3, b6c68 <__ieee754_pow+0x8d8>)
   b6ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6ae8:	4606      	mov	r6, r0
   b6aea:	460f      	mov	r7, r1
   b6aec:	f000 fdbe 	bl	b766c <__aeabi_dmul>
   b6af0:	a35f      	add	r3, pc, #380	; (adr r3, b6c70 <__ieee754_pow+0x8e0>)
   b6af2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6af6:	f000 fc01 	bl	b72fc <__aeabi_dsub>
   b6afa:	4632      	mov	r2, r6
   b6afc:	463b      	mov	r3, r7
   b6afe:	f000 fdb5 	bl	b766c <__aeabi_dmul>
   b6b02:	a35d      	add	r3, pc, #372	; (adr r3, b6c78 <__ieee754_pow+0x8e8>)
   b6b04:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6b08:	f000 fbfa 	bl	b7300 <__adddf3>
   b6b0c:	4632      	mov	r2, r6
   b6b0e:	463b      	mov	r3, r7
   b6b10:	f000 fdac 	bl	b766c <__aeabi_dmul>
   b6b14:	a35a      	add	r3, pc, #360	; (adr r3, b6c80 <__ieee754_pow+0x8f0>)
   b6b16:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6b1a:	f000 fbef 	bl	b72fc <__aeabi_dsub>
   b6b1e:	4632      	mov	r2, r6
   b6b20:	463b      	mov	r3, r7
   b6b22:	f000 fda3 	bl	b766c <__aeabi_dmul>
   b6b26:	a358      	add	r3, pc, #352	; (adr r3, b6c88 <__ieee754_pow+0x8f8>)
   b6b28:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6b2c:	f000 fbe8 	bl	b7300 <__adddf3>
   b6b30:	4632      	mov	r2, r6
   b6b32:	463b      	mov	r3, r7
   b6b34:	f000 fd9a 	bl	b766c <__aeabi_dmul>
   b6b38:	4602      	mov	r2, r0
   b6b3a:	460b      	mov	r3, r1
   b6b3c:	4620      	mov	r0, r4
   b6b3e:	4629      	mov	r1, r5
   b6b40:	f000 fbdc 	bl	b72fc <__aeabi_dsub>
   b6b44:	4606      	mov	r6, r0
   b6b46:	460f      	mov	r7, r1
   b6b48:	4632      	mov	r2, r6
   b6b4a:	463b      	mov	r3, r7
   b6b4c:	4620      	mov	r0, r4
   b6b4e:	4629      	mov	r1, r5
   b6b50:	f000 fd8c 	bl	b766c <__aeabi_dmul>
   b6b54:	4602      	mov	r2, r0
   b6b56:	460b      	mov	r3, r1
   b6b58:	4630      	mov	r0, r6
   b6b5a:	4639      	mov	r1, r7
   b6b5c:	4616      	mov	r6, r2
   b6b5e:	461f      	mov	r7, r3
   b6b60:	2200      	movs	r2, #0
   b6b62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b6b66:	f000 fbc9 	bl	b72fc <__aeabi_dsub>
   b6b6a:	4602      	mov	r2, r0
   b6b6c:	460b      	mov	r3, r1
   b6b6e:	4630      	mov	r0, r6
   b6b70:	4639      	mov	r1, r7
   b6b72:	f000 fea5 	bl	b78c0 <__aeabi_ddiv>
   b6b76:	4642      	mov	r2, r8
   b6b78:	4606      	mov	r6, r0
   b6b7a:	460f      	mov	r7, r1
   b6b7c:	464b      	mov	r3, r9
   b6b7e:	4620      	mov	r0, r4
   b6b80:	4629      	mov	r1, r5
   b6b82:	f000 fd73 	bl	b766c <__aeabi_dmul>
   b6b86:	4642      	mov	r2, r8
   b6b88:	464b      	mov	r3, r9
   b6b8a:	f000 fbb9 	bl	b7300 <__adddf3>
   b6b8e:	4602      	mov	r2, r0
   b6b90:	460b      	mov	r3, r1
   b6b92:	4630      	mov	r0, r6
   b6b94:	4639      	mov	r1, r7
   b6b96:	f000 fbb1 	bl	b72fc <__aeabi_dsub>
   b6b9a:	4622      	mov	r2, r4
   b6b9c:	462b      	mov	r3, r5
   b6b9e:	f000 fbad 	bl	b72fc <__aeabi_dsub>
   b6ba2:	4602      	mov	r2, r0
   b6ba4:	460b      	mov	r3, r1
   b6ba6:	2000      	movs	r0, #0
   b6ba8:	4941      	ldr	r1, [pc, #260]	; (b6cb0 <__ieee754_pow+0x920>)
   b6baa:	f000 fba7 	bl	b72fc <__aeabi_dsub>
   b6bae:	9a02      	ldr	r2, [sp, #8]
   b6bb0:	460b      	mov	r3, r1
   b6bb2:	4413      	add	r3, r2
   b6bb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   b6bb8:	f2c0 8143 	blt.w	b6e42 <__ieee754_pow+0xab2>
   b6bbc:	4619      	mov	r1, r3
   b6bbe:	ec53 2b18 	vmov	r2, r3, d8
   b6bc2:	f000 fd53 	bl	b766c <__aeabi_dmul>
   b6bc6:	ec41 0b10 	vmov	d0, r0, r1
   b6bca:	e42d      	b.n	b6428 <__ieee754_pow+0x98>
   b6bcc:	f1bb 0f00 	cmp.w	fp, #0
   b6bd0:	f6ff aca0 	blt.w	b6514 <__ieee754_pow+0x184>
   b6bd4:	ed9f 0b2e 	vldr	d0, [pc, #184]	; b6c90 <__ieee754_pow+0x900>
   b6bd8:	e426      	b.n	b6428 <__ieee754_pow+0x98>
   b6bda:	f8df c0dc 	ldr.w	ip, [pc, #220]	; b6cb8 <__ieee754_pow+0x928>
   b6bde:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   b6be2:	4563      	cmp	r3, ip
   b6be4:	f340 80e7 	ble.w	b6db6 <__ieee754_pow+0xa26>
   b6be8:	4b32      	ldr	r3, [pc, #200]	; (b6cb4 <__ieee754_pow+0x924>)
   b6bea:	440b      	add	r3, r1
   b6bec:	4303      	orrs	r3, r0
   b6bee:	d10a      	bne.n	b6c06 <__ieee754_pow+0x876>
   b6bf0:	4622      	mov	r2, r4
   b6bf2:	462b      	mov	r3, r5
   b6bf4:	f000 fb82 	bl	b72fc <__aeabi_dsub>
   b6bf8:	4632      	mov	r2, r6
   b6bfa:	463b      	mov	r3, r7
   b6bfc:	f000 ffbc 	bl	b7b78 <__aeabi_dcmpge>
   b6c00:	2800      	cmp	r0, #0
   b6c02:	f43f aef3 	beq.w	b69ec <__ieee754_pow+0x65c>
   b6c06:	a324      	add	r3, pc, #144	; (adr r3, b6c98 <__ieee754_pow+0x908>)
   b6c08:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6c0c:	ec51 0b18 	vmov	r0, r1, d8
   b6c10:	f000 fd2c 	bl	b766c <__aeabi_dmul>
   b6c14:	a320      	add	r3, pc, #128	; (adr r3, b6c98 <__ieee754_pow+0x908>)
   b6c16:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6c1a:	f000 fd27 	bl	b766c <__aeabi_dmul>
   b6c1e:	ec41 0b10 	vmov	d0, r0, r1
   b6c22:	e401      	b.n	b6428 <__ieee754_pow+0x98>
   b6c24:	ed9f 7b1e 	vldr	d7, [pc, #120]	; b6ca0 <__ieee754_pow+0x910>
   b6c28:	eeb0 8a47 	vmov.f32	s16, s14
   b6c2c:	eef0 8a67 	vmov.f32	s17, s15
   b6c30:	e686      	b.n	b6940 <__ieee754_pow+0x5b0>
   b6c32:	f1bb 0f00 	cmp.w	fp, #0
   b6c36:	dacd      	bge.n	b6bd4 <__ieee754_pow+0x844>
   b6c38:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   b6c3c:	ee00 6a10 	vmov	s0, r6
   b6c40:	ee00 3a90 	vmov	s1, r3
   b6c44:	f7ff bbf0 	b.w	b6428 <__ieee754_pow+0x98>
   b6c48:	652b82fe 	.word	0x652b82fe
   b6c4c:	3c971547 	.word	0x3c971547
   b6c50:	00000000 	.word	0x00000000
   b6c54:	3fe62e43 	.word	0x3fe62e43
   b6c58:	fefa39ef 	.word	0xfefa39ef
   b6c5c:	3fe62e42 	.word	0x3fe62e42
   b6c60:	0ca86c39 	.word	0x0ca86c39
   b6c64:	be205c61 	.word	0xbe205c61
   b6c68:	72bea4d0 	.word	0x72bea4d0
   b6c6c:	3e663769 	.word	0x3e663769
   b6c70:	c5d26bf1 	.word	0xc5d26bf1
   b6c74:	3ebbbd41 	.word	0x3ebbbd41
   b6c78:	af25de2c 	.word	0xaf25de2c
   b6c7c:	3f11566a 	.word	0x3f11566a
   b6c80:	16bebd93 	.word	0x16bebd93
   b6c84:	3f66c16c 	.word	0x3f66c16c
   b6c88:	5555553e 	.word	0x5555553e
   b6c8c:	3fc55555 	.word	0x3fc55555
	...
   b6c98:	c2f8f359 	.word	0xc2f8f359
   b6c9c:	01a56e1f 	.word	0x01a56e1f
   b6ca0:	00000000 	.word	0x00000000
   b6ca4:	3ff00000 	.word	0x3ff00000
   b6ca8:	408fffff 	.word	0x408fffff
   b6cac:	000fffff 	.word	0x000fffff
   b6cb0:	3ff00000 	.word	0x3ff00000
   b6cb4:	3f6f3400 	.word	0x3f6f3400
   b6cb8:	4090cbff 	.word	0x4090cbff
   b6cbc:	4598      	cmp	r8, r3
   b6cbe:	db85      	blt.n	b6bcc <__ieee754_pow+0x83c>
   b6cc0:	4b7d      	ldr	r3, [pc, #500]	; (b6eb8 <__ieee754_pow+0xb28>)
   b6cc2:	4598      	cmp	r8, r3
   b6cc4:	f73f ac22 	bgt.w	b650c <__ieee754_pow+0x17c>
   b6cc8:	ec51 0b10 	vmov	r0, r1, d0
   b6ccc:	4b7a      	ldr	r3, [pc, #488]	; (b6eb8 <__ieee754_pow+0xb28>)
   b6cce:	2200      	movs	r2, #0
   b6cd0:	f000 fb14 	bl	b72fc <__aeabi_dsub>
   b6cd4:	a368      	add	r3, pc, #416	; (adr r3, b6e78 <__ieee754_pow+0xae8>)
   b6cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6cda:	4604      	mov	r4, r0
   b6cdc:	460d      	mov	r5, r1
   b6cde:	f000 fcc5 	bl	b766c <__aeabi_dmul>
   b6ce2:	a367      	add	r3, pc, #412	; (adr r3, b6e80 <__ieee754_pow+0xaf0>)
   b6ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6ce8:	4682      	mov	sl, r0
   b6cea:	468b      	mov	fp, r1
   b6cec:	4620      	mov	r0, r4
   b6cee:	4629      	mov	r1, r5
   b6cf0:	f000 fcbc 	bl	b766c <__aeabi_dmul>
   b6cf4:	4b71      	ldr	r3, [pc, #452]	; (b6ebc <__ieee754_pow+0xb2c>)
   b6cf6:	ec41 0b18 	vmov	d8, r0, r1
   b6cfa:	2200      	movs	r2, #0
   b6cfc:	4620      	mov	r0, r4
   b6cfe:	4629      	mov	r1, r5
   b6d00:	f000 fcb4 	bl	b766c <__aeabi_dmul>
   b6d04:	4602      	mov	r2, r0
   b6d06:	460b      	mov	r3, r1
   b6d08:	a15f      	add	r1, pc, #380	; (adr r1, b6e88 <__ieee754_pow+0xaf8>)
   b6d0a:	e9d1 0100 	ldrd	r0, r1, [r1]
   b6d0e:	f000 faf5 	bl	b72fc <__aeabi_dsub>
   b6d12:	4622      	mov	r2, r4
   b6d14:	462b      	mov	r3, r5
   b6d16:	f000 fca9 	bl	b766c <__aeabi_dmul>
   b6d1a:	4602      	mov	r2, r0
   b6d1c:	460b      	mov	r3, r1
   b6d1e:	2000      	movs	r0, #0
   b6d20:	4967      	ldr	r1, [pc, #412]	; (b6ec0 <__ieee754_pow+0xb30>)
   b6d22:	f000 faeb 	bl	b72fc <__aeabi_dsub>
   b6d26:	4622      	mov	r2, r4
   b6d28:	4680      	mov	r8, r0
   b6d2a:	4689      	mov	r9, r1
   b6d2c:	462b      	mov	r3, r5
   b6d2e:	4620      	mov	r0, r4
   b6d30:	4629      	mov	r1, r5
   b6d32:	f000 fc9b 	bl	b766c <__aeabi_dmul>
   b6d36:	4602      	mov	r2, r0
   b6d38:	460b      	mov	r3, r1
   b6d3a:	4640      	mov	r0, r8
   b6d3c:	4649      	mov	r1, r9
   b6d3e:	f000 fc95 	bl	b766c <__aeabi_dmul>
   b6d42:	a353      	add	r3, pc, #332	; (adr r3, b6e90 <__ieee754_pow+0xb00>)
   b6d44:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6d48:	f000 fc90 	bl	b766c <__aeabi_dmul>
   b6d4c:	4602      	mov	r2, r0
   b6d4e:	460b      	mov	r3, r1
   b6d50:	ec51 0b18 	vmov	r0, r1, d8
   b6d54:	f000 fad2 	bl	b72fc <__aeabi_dsub>
   b6d58:	4680      	mov	r8, r0
   b6d5a:	4689      	mov	r9, r1
   b6d5c:	4642      	mov	r2, r8
   b6d5e:	464b      	mov	r3, r9
   b6d60:	4650      	mov	r0, sl
   b6d62:	4659      	mov	r1, fp
   b6d64:	f000 facc 	bl	b7300 <__adddf3>
   b6d68:	2000      	movs	r0, #0
   b6d6a:	4652      	mov	r2, sl
   b6d6c:	465b      	mov	r3, fp
   b6d6e:	4604      	mov	r4, r0
   b6d70:	460d      	mov	r5, r1
   b6d72:	e591      	b.n	b6898 <__ieee754_pow+0x508>
   b6d74:	4622      	mov	r2, r4
   b6d76:	462b      	mov	r3, r5
   b6d78:	4620      	mov	r0, r4
   b6d7a:	4629      	mov	r1, r5
   b6d7c:	f000 fc76 	bl	b766c <__aeabi_dmul>
   b6d80:	ec41 0b10 	vmov	d0, r0, r1
   b6d84:	f7ff bb50 	b.w	b6428 <__ieee754_pow+0x98>
   b6d88:	494b      	ldr	r1, [pc, #300]	; (b6eb8 <__ieee754_pow+0xb28>)
   b6d8a:	2000      	movs	r0, #0
   b6d8c:	4622      	mov	r2, r4
   b6d8e:	462b      	mov	r3, r5
   b6d90:	f000 fd96 	bl	b78c0 <__aeabi_ddiv>
   b6d94:	ec41 0b10 	vmov	d0, r0, r1
   b6d98:	f7ff bb46 	b.w	b6428 <__ieee754_pow+0x98>
   b6d9c:	2b00      	cmp	r3, #0
   b6d9e:	d144      	bne.n	b6e2a <__ieee754_pow+0xa9a>
   b6da0:	f1c1 0114 	rsb	r1, r1, #20
   b6da4:	fa4a f001 	asr.w	r0, sl, r1
   b6da8:	fa00 f101 	lsl.w	r1, r0, r1
   b6dac:	4551      	cmp	r1, sl
   b6dae:	d05a      	beq.n	b6e66 <__ieee754_pow+0xad6>
   b6db0:	9300      	str	r3, [sp, #0]
   b6db2:	f7ff bb17 	b.w	b63e4 <__ieee754_pow+0x54>
   b6db6:	4a42      	ldr	r2, [pc, #264]	; (b6ec0 <__ieee754_pow+0xb30>)
   b6db8:	4293      	cmp	r3, r2
   b6dba:	dc5b      	bgt.n	b6e74 <__ieee754_pow+0xae4>
   b6dbc:	e9dd 1200 	ldrd	r1, r2, [sp]
   b6dc0:	9102      	str	r1, [sp, #8]
   b6dc2:	9100      	str	r1, [sp, #0]
   b6dc4:	e646      	b.n	b6a54 <__ieee754_pow+0x6c4>
   b6dc6:	a334      	add	r3, pc, #208	; (adr r3, b6e98 <__ieee754_pow+0xb08>)
   b6dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6dcc:	ec51 0b18 	vmov	r0, r1, d8
   b6dd0:	f000 fc4c 	bl	b766c <__aeabi_dmul>
   b6dd4:	a330      	add	r3, pc, #192	; (adr r3, b6e98 <__ieee754_pow+0xb08>)
   b6dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6dda:	f000 fc47 	bl	b766c <__aeabi_dmul>
   b6dde:	ec41 0b10 	vmov	d0, r0, r1
   b6de2:	f7ff bb21 	b.w	b6428 <__ieee754_pow+0x98>
   b6de6:	9b00      	ldr	r3, [sp, #0]
   b6de8:	2b01      	cmp	r3, #1
   b6dea:	f47f ab1d 	bne.w	b6428 <__ieee754_pow+0x98>
   b6dee:	ee10 1a90 	vmov	r1, s1
   b6df2:	ee10 2a10 	vmov	r2, s0
   b6df6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b6dfa:	ec43 2b10 	vmov	d0, r2, r3
   b6dfe:	f7ff bb13 	b.w	b6428 <__ieee754_pow+0x98>
   b6e02:	ed9f 7b27 	vldr	d7, [pc, #156]	; b6ea0 <__ieee754_pow+0xb10>
   b6e06:	eeb0 ca47 	vmov.f32	s24, s14
   b6e0a:	eef0 ca67 	vmov.f32	s25, s15
   b6e0e:	ed9f 7b26 	vldr	d7, [pc, #152]	; b6ea8 <__ieee754_pow+0xb18>
   b6e12:	eeb0 da47 	vmov.f32	s26, s14
   b6e16:	eef0 da67 	vmov.f32	s27, s15
   b6e1a:	ed9f 7b25 	vldr	d7, [pc, #148]	; b6eb0 <__ieee754_pow+0xb20>
   b6e1e:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   b6e22:	ec53 2b17 	vmov	r2, r3, d7
   b6e26:	f7ff bbeb 	b.w	b6600 <__ieee754_pow+0x270>
   b6e2a:	ec45 4b10 	vmov	d0, r4, r5
   b6e2e:	9200      	str	r2, [sp, #0]
   b6e30:	f000 f914 	bl	b705c <fabs>
   b6e34:	9a00      	ldr	r2, [sp, #0]
   b6e36:	2a00      	cmp	r2, #0
   b6e38:	f47f ab92 	bne.w	b6560 <__ieee754_pow+0x1d0>
   b6e3c:	9200      	str	r2, [sp, #0]
   b6e3e:	f7ff bb26 	b.w	b648e <__ieee754_pow+0xfe>
   b6e42:	ec41 0b10 	vmov	d0, r0, r1
   b6e46:	9800      	ldr	r0, [sp, #0]
   b6e48:	f000 f9c2 	bl	b71d0 <scalbn>
   b6e4c:	ec51 0b10 	vmov	r0, r1, d0
   b6e50:	e6b5      	b.n	b6bbe <__ieee754_pow+0x82e>
   b6e52:	f000 0001 	and.w	r0, r0, #1
   b6e56:	f1c0 0102 	rsb	r1, r0, #2
   b6e5a:	9100      	str	r1, [sp, #0]
   b6e5c:	2b00      	cmp	r3, #0
   b6e5e:	f43f aac1 	beq.w	b63e4 <__ieee754_pow+0x54>
   b6e62:	f7ff bb0d 	b.w	b6480 <__ieee754_pow+0xf0>
   b6e66:	f000 0001 	and.w	r0, r0, #1
   b6e6a:	f1c0 0302 	rsb	r3, r0, #2
   b6e6e:	9300      	str	r3, [sp, #0]
   b6e70:	f7ff bab8 	b.w	b63e4 <__ieee754_pow+0x54>
   b6e74:	151b      	asrs	r3, r3, #20
   b6e76:	e5bb      	b.n	b69f0 <__ieee754_pow+0x660>
   b6e78:	60000000 	.word	0x60000000
   b6e7c:	3ff71547 	.word	0x3ff71547
   b6e80:	f85ddf44 	.word	0xf85ddf44
   b6e84:	3e54ae0b 	.word	0x3e54ae0b
   b6e88:	55555555 	.word	0x55555555
   b6e8c:	3fd55555 	.word	0x3fd55555
   b6e90:	652b82fe 	.word	0x652b82fe
   b6e94:	3ff71547 	.word	0x3ff71547
   b6e98:	8800759c 	.word	0x8800759c
   b6e9c:	7e37e43c 	.word	0x7e37e43c
   b6ea0:	40000000 	.word	0x40000000
   b6ea4:	3fe2b803 	.word	0x3fe2b803
   b6ea8:	43cfd006 	.word	0x43cfd006
   b6eac:	3e4cfdeb 	.word	0x3e4cfdeb
   b6eb0:	00000000 	.word	0x00000000
   b6eb4:	3ff80000 	.word	0x3ff80000
   b6eb8:	3ff00000 	.word	0x3ff00000
   b6ebc:	3fd00000 	.word	0x3fd00000
   b6ec0:	3fe00000 	.word	0x3fe00000

000b6ec4 <__ieee754_sqrt>:
   b6ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6ec8:	4a63      	ldr	r2, [pc, #396]	; (b7058 <__ieee754_sqrt+0x194>)
   b6eca:	ec55 4b10 	vmov	r4, r5, d0
   b6ece:	43aa      	bics	r2, r5
   b6ed0:	f000 809f 	beq.w	b7012 <__ieee754_sqrt+0x14e>
   b6ed4:	2d00      	cmp	r5, #0
   b6ed6:	ee10 ca10 	vmov	ip, s0
   b6eda:	462b      	mov	r3, r5
   b6edc:	dd54      	ble.n	b6f88 <__ieee754_sqrt+0xc4>
   b6ede:	1529      	asrs	r1, r5, #20
   b6ee0:	d063      	beq.n	b6faa <__ieee754_sqrt+0xe6>
   b6ee2:	f3c3 0313 	ubfx	r3, r3, #0, #20
   b6ee6:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   b6eea:	07c9      	lsls	r1, r1, #31
   b6eec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b6ef0:	d404      	bmi.n	b6efc <__ieee754_sqrt+0x38>
   b6ef2:	005b      	lsls	r3, r3, #1
   b6ef4:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   b6ef8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b6efc:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   b6f00:	2600      	movs	r6, #0
   b6f02:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   b6f06:	107f      	asrs	r7, r7, #1
   b6f08:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b6f0c:	f04f 0e16 	mov.w	lr, #22
   b6f10:	4634      	mov	r4, r6
   b6f12:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   b6f16:	18a1      	adds	r1, r4, r2
   b6f18:	4299      	cmp	r1, r3
   b6f1a:	dc02      	bgt.n	b6f22 <__ieee754_sqrt+0x5e>
   b6f1c:	1a5b      	subs	r3, r3, r1
   b6f1e:	188c      	adds	r4, r1, r2
   b6f20:	4416      	add	r6, r2
   b6f22:	005b      	lsls	r3, r3, #1
   b6f24:	f1be 0e01 	subs.w	lr, lr, #1
   b6f28:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   b6f2c:	ea4f 0252 	mov.w	r2, r2, lsr #1
   b6f30:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b6f34:	d1ef      	bne.n	b6f16 <__ieee754_sqrt+0x52>
   b6f36:	4675      	mov	r5, lr
   b6f38:	2020      	movs	r0, #32
   b6f3a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   b6f3e:	e00a      	b.n	b6f56 <__ieee754_sqrt+0x92>
   b6f40:	d044      	beq.n	b6fcc <__ieee754_sqrt+0x108>
   b6f42:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   b6f46:	3801      	subs	r0, #1
   b6f48:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   b6f4c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b6f50:	ea4f 0252 	mov.w	r2, r2, lsr #1
   b6f54:	d043      	beq.n	b6fde <__ieee754_sqrt+0x11a>
   b6f56:	42a3      	cmp	r3, r4
   b6f58:	eb02 010e 	add.w	r1, r2, lr
   b6f5c:	ddf0      	ble.n	b6f40 <__ieee754_sqrt+0x7c>
   b6f5e:	2900      	cmp	r1, #0
   b6f60:	eb01 0e02 	add.w	lr, r1, r2
   b6f64:	db0a      	blt.n	b6f7c <__ieee754_sqrt+0xb8>
   b6f66:	46a0      	mov	r8, r4
   b6f68:	1b1b      	subs	r3, r3, r4
   b6f6a:	4561      	cmp	r1, ip
   b6f6c:	bf88      	it	hi
   b6f6e:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   b6f72:	ebac 0c01 	sub.w	ip, ip, r1
   b6f76:	4415      	add	r5, r2
   b6f78:	4644      	mov	r4, r8
   b6f7a:	e7e2      	b.n	b6f42 <__ieee754_sqrt+0x7e>
   b6f7c:	f1be 0f00 	cmp.w	lr, #0
   b6f80:	dbf1      	blt.n	b6f66 <__ieee754_sqrt+0xa2>
   b6f82:	f104 0801 	add.w	r8, r4, #1
   b6f86:	e7ef      	b.n	b6f68 <__ieee754_sqrt+0xa4>
   b6f88:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   b6f8c:	4322      	orrs	r2, r4
   b6f8e:	d038      	beq.n	b7002 <__ieee754_sqrt+0x13e>
   b6f90:	2d00      	cmp	r5, #0
   b6f92:	d14e      	bne.n	b7032 <__ieee754_sqrt+0x16e>
   b6f94:	4629      	mov	r1, r5
   b6f96:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   b6f9a:	3915      	subs	r1, #21
   b6f9c:	4613      	mov	r3, r2
   b6f9e:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   b6fa2:	2a00      	cmp	r2, #0
   b6fa4:	d0f7      	beq.n	b6f96 <__ieee754_sqrt+0xd2>
   b6fa6:	02d6      	lsls	r6, r2, #11
   b6fa8:	d450      	bmi.n	b704c <__ieee754_sqrt+0x188>
   b6faa:	2000      	movs	r0, #0
   b6fac:	005b      	lsls	r3, r3, #1
   b6fae:	02dd      	lsls	r5, r3, #11
   b6fb0:	4604      	mov	r4, r0
   b6fb2:	f100 0001 	add.w	r0, r0, #1
   b6fb6:	d5f9      	bpl.n	b6fac <__ieee754_sqrt+0xe8>
   b6fb8:	461a      	mov	r2, r3
   b6fba:	4663      	mov	r3, ip
   b6fbc:	fa0c fc00 	lsl.w	ip, ip, r0
   b6fc0:	f1c0 0020 	rsb	r0, r0, #32
   b6fc4:	40c3      	lsrs	r3, r0
   b6fc6:	1b09      	subs	r1, r1, r4
   b6fc8:	4313      	orrs	r3, r2
   b6fca:	e78a      	b.n	b6ee2 <__ieee754_sqrt+0x1e>
   b6fcc:	4561      	cmp	r1, ip
   b6fce:	d8b8      	bhi.n	b6f42 <__ieee754_sqrt+0x7e>
   b6fd0:	2900      	cmp	r1, #0
   b6fd2:	eb01 0e02 	add.w	lr, r1, r2
   b6fd6:	dbd1      	blt.n	b6f7c <__ieee754_sqrt+0xb8>
   b6fd8:	4698      	mov	r8, r3
   b6fda:	2300      	movs	r3, #0
   b6fdc:	e7c9      	b.n	b6f72 <__ieee754_sqrt+0xae>
   b6fde:	ea53 030c 	orrs.w	r3, r3, ip
   b6fe2:	d110      	bne.n	b7006 <__ieee754_sqrt+0x142>
   b6fe4:	0868      	lsrs	r0, r5, #1
   b6fe6:	1071      	asrs	r1, r6, #1
   b6fe8:	07f3      	lsls	r3, r6, #31
   b6fea:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   b6fee:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   b6ff2:	bf48      	it	mi
   b6ff4:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   b6ff8:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   b6ffc:	4602      	mov	r2, r0
   b6ffe:	ec43 2b10 	vmov	d0, r2, r3
   b7002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7006:	1c6a      	adds	r2, r5, #1
   b7008:	bf16      	itet	ne
   b700a:	1c68      	addne	r0, r5, #1
   b700c:	3601      	addeq	r6, #1
   b700e:	0840      	lsrne	r0, r0, #1
   b7010:	e7e9      	b.n	b6fe6 <__ieee754_sqrt+0x122>
   b7012:	ee10 2a10 	vmov	r2, s0
   b7016:	ee10 0a10 	vmov	r0, s0
   b701a:	462b      	mov	r3, r5
   b701c:	4629      	mov	r1, r5
   b701e:	f000 fb25 	bl	b766c <__aeabi_dmul>
   b7022:	4622      	mov	r2, r4
   b7024:	462b      	mov	r3, r5
   b7026:	f000 f96b 	bl	b7300 <__adddf3>
   b702a:	ec41 0b10 	vmov	d0, r0, r1
   b702e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7032:	ee10 2a10 	vmov	r2, s0
   b7036:	4620      	mov	r0, r4
   b7038:	4629      	mov	r1, r5
   b703a:	f000 f95f 	bl	b72fc <__aeabi_dsub>
   b703e:	4602      	mov	r2, r0
   b7040:	460b      	mov	r3, r1
   b7042:	f000 fc3d 	bl	b78c0 <__aeabi_ddiv>
   b7046:	ec41 0b10 	vmov	d0, r0, r1
   b704a:	e7da      	b.n	b7002 <__ieee754_sqrt+0x13e>
   b704c:	4663      	mov	r3, ip
   b704e:	2020      	movs	r0, #32
   b7050:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b7054:	e7b6      	b.n	b6fc4 <__ieee754_sqrt+0x100>
   b7056:	bf00      	nop
   b7058:	7ff00000 	.word	0x7ff00000

000b705c <fabs>:
   b705c:	ec51 0b10 	vmov	r0, r1, d0
   b7060:	ee10 2a10 	vmov	r2, s0
   b7064:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   b7068:	ec43 2b10 	vmov	d0, r2, r3
   b706c:	4770      	bx	lr
   b706e:	bf00      	nop

000b7070 <finite>:
   b7070:	b082      	sub	sp, #8
   b7072:	ed8d 0b00 	vstr	d0, [sp]
   b7076:	9801      	ldr	r0, [sp, #4]
   b7078:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   b707c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   b7080:	0fc0      	lsrs	r0, r0, #31
   b7082:	b002      	add	sp, #8
   b7084:	4770      	bx	lr
   b7086:	bf00      	nop

000b7088 <nan>:
   b7088:	ed9f 0b01 	vldr	d0, [pc, #4]	; b7090 <nan+0x8>
   b708c:	4770      	bx	lr
   b708e:	bf00      	nop
   b7090:	00000000 	.word	0x00000000
   b7094:	7ff80000 	.word	0x7ff80000

000b7098 <rint>:
   b7098:	b5f0      	push	{r4, r5, r6, r7, lr}
   b709a:	ec53 2b10 	vmov	r2, r3, d0
   b709e:	f3c3 5c0a 	ubfx	ip, r3, #20, #11
   b70a2:	f2ac 31ff 	subw	r1, ip, #1023	; 0x3ff
   b70a6:	2913      	cmp	r1, #19
   b70a8:	ee10 0a10 	vmov	r0, s0
   b70ac:	b083      	sub	sp, #12
   b70ae:	461c      	mov	r4, r3
   b70b0:	ea4f 7ed3 	mov.w	lr, r3, lsr #31
   b70b4:	dc3a      	bgt.n	b712c <rint+0x94>
   b70b6:	2900      	cmp	r1, #0
   b70b8:	db30      	blt.n	b711c <rint+0x84>
   b70ba:	4d42      	ldr	r5, [pc, #264]	; (b71c4 <rint+0x12c>)
   b70bc:	fa45 fc01 	asr.w	ip, r5, r1
   b70c0:	ea03 050c 	and.w	r5, r3, ip
   b70c4:	4315      	orrs	r5, r2
   b70c6:	d02d      	beq.n	b7124 <rint+0x8c>
   b70c8:	ea03 035c 	and.w	r3, r3, ip, lsr #1
   b70cc:	4318      	orrs	r0, r3
   b70ce:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   b70d2:	d00c      	beq.n	b70ee <rint+0x56>
   b70d4:	ea24 0c0c 	bic.w	ip, r4, ip
   b70d8:	f44f 2480 	mov.w	r4, #262144	; 0x40000
   b70dc:	2913      	cmp	r1, #19
   b70de:	fa44 f101 	asr.w	r1, r4, r1
   b70e2:	bf0c      	ite	eq
   b70e4:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
   b70e8:	2000      	movne	r0, #0
   b70ea:	ea4c 0401 	orr.w	r4, ip, r1
   b70ee:	4936      	ldr	r1, [pc, #216]	; (b71c8 <rint+0x130>)
   b70f0:	eb01 0ece 	add.w	lr, r1, lr, lsl #3
   b70f4:	4623      	mov	r3, r4
   b70f6:	e9de 4500 	ldrd	r4, r5, [lr]
   b70fa:	4602      	mov	r2, r0
   b70fc:	4629      	mov	r1, r5
   b70fe:	4620      	mov	r0, r4
   b7100:	f000 f8fe 	bl	b7300 <__adddf3>
   b7104:	e9cd 0100 	strd	r0, r1, [sp]
   b7108:	e9dd 0100 	ldrd	r0, r1, [sp]
   b710c:	4622      	mov	r2, r4
   b710e:	462b      	mov	r3, r5
   b7110:	f000 f8f4 	bl	b72fc <__aeabi_dsub>
   b7114:	ec41 0b10 	vmov	d0, r0, r1
   b7118:	b003      	add	sp, #12
   b711a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b711c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   b7120:	4311      	orrs	r1, r2
   b7122:	d124      	bne.n	b716e <rint+0xd6>
   b7124:	ec43 2b10 	vmov	d0, r2, r3
   b7128:	b003      	add	sp, #12
   b712a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b712c:	2933      	cmp	r1, #51	; 0x33
   b712e:	dd08      	ble.n	b7142 <rint+0xaa>
   b7130:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   b7134:	d1f6      	bne.n	b7124 <rint+0x8c>
   b7136:	4619      	mov	r1, r3
   b7138:	f000 f8e2 	bl	b7300 <__adddf3>
   b713c:	ec41 0b10 	vmov	d0, r0, r1
   b7140:	e7f2      	b.n	b7128 <rint+0x90>
   b7142:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
   b7146:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b714a:	fa21 f10c 	lsr.w	r1, r1, ip
   b714e:	420a      	tst	r2, r1
   b7150:	d0e8      	beq.n	b7124 <rint+0x8c>
   b7152:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
   b7156:	ea4f 0351 	mov.w	r3, r1, lsr #1
   b715a:	d0c8      	beq.n	b70ee <rint+0x56>
   b715c:	ea20 0303 	bic.w	r3, r0, r3
   b7160:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   b7164:	fa40 fc0c 	asr.w	ip, r0, ip
   b7168:	ea43 000c 	orr.w	r0, r3, ip
   b716c:	e7bf      	b.n	b70ee <rint+0x56>
   b716e:	f3c3 0313 	ubfx	r3, r3, #0, #20
   b7172:	4318      	orrs	r0, r3
   b7174:	4a14      	ldr	r2, [pc, #80]	; (b71c8 <rint+0x130>)
   b7176:	4243      	negs	r3, r0
   b7178:	4303      	orrs	r3, r0
   b717a:	eb02 0ece 	add.w	lr, r2, lr, lsl #3
   b717e:	0b1b      	lsrs	r3, r3, #12
   b7180:	0c62      	lsrs	r2, r4, #17
   b7182:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
   b7186:	0452      	lsls	r2, r2, #17
   b7188:	ea43 0702 	orr.w	r7, r3, r2
   b718c:	463b      	mov	r3, r7
   b718e:	e9de 6700 	ldrd	r6, r7, [lr]
   b7192:	ee10 2a10 	vmov	r2, s0
   b7196:	4630      	mov	r0, r6
   b7198:	4639      	mov	r1, r7
   b719a:	f000 f8b1 	bl	b7300 <__adddf3>
   b719e:	e9cd 0100 	strd	r0, r1, [sp]
   b71a2:	4632      	mov	r2, r6
   b71a4:	463b      	mov	r3, r7
   b71a6:	e9dd 0100 	ldrd	r0, r1, [sp]
   b71aa:	f000 f8a7 	bl	b72fc <__aeabi_dsub>
   b71ae:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
   b71b2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b71b6:	4602      	mov	r2, r0
   b71b8:	ea41 0304 	orr.w	r3, r1, r4
   b71bc:	ec43 2b10 	vmov	d0, r2, r3
   b71c0:	b003      	add	sp, #12
   b71c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b71c4:	000fffff 	.word	0x000fffff
   b71c8:	000b85f8 	.word	0x000b85f8
   b71cc:	00000000 	.word	0x00000000

000b71d0 <scalbn>:
   b71d0:	b538      	push	{r3, r4, r5, lr}
   b71d2:	ec53 2b10 	vmov	r2, r3, d0
   b71d6:	f3c3 510a 	ubfx	r1, r3, #20, #11
   b71da:	4604      	mov	r4, r0
   b71dc:	469c      	mov	ip, r3
   b71de:	bb89      	cbnz	r1, b7244 <scalbn+0x74>
   b71e0:	ee10 1a10 	vmov	r1, s0
   b71e4:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
   b71e8:	ea5c 0101 	orrs.w	r1, ip, r1
   b71ec:	d029      	beq.n	b7242 <scalbn+0x72>
   b71ee:	4619      	mov	r1, r3
   b71f0:	2200      	movs	r2, #0
   b71f2:	4b3d      	ldr	r3, [pc, #244]	; (b72e8 <scalbn+0x118>)
   b71f4:	4d3d      	ldr	r5, [pc, #244]	; (b72ec <scalbn+0x11c>)
   b71f6:	ee10 0a10 	vmov	r0, s0
   b71fa:	f000 fa37 	bl	b766c <__aeabi_dmul>
   b71fe:	42ac      	cmp	r4, r5
   b7200:	4602      	mov	r2, r0
   b7202:	460b      	mov	r3, r1
   b7204:	db16      	blt.n	b7234 <scalbn+0x64>
   b7206:	468c      	mov	ip, r1
   b7208:	f3c1 510a 	ubfx	r1, r1, #20, #11
   b720c:	3936      	subs	r1, #54	; 0x36
   b720e:	4421      	add	r1, r4
   b7210:	f240 70fe 	movw	r0, #2046	; 0x7fe
   b7214:	4281      	cmp	r1, r0
   b7216:	dc21      	bgt.n	b725c <scalbn+0x8c>
   b7218:	2900      	cmp	r1, #0
   b721a:	dc47      	bgt.n	b72ac <scalbn+0xdc>
   b721c:	f111 0f35 	cmn.w	r1, #53	; 0x35
   b7220:	da34      	bge.n	b728c <scalbn+0xbc>
   b7222:	f24c 3150 	movw	r1, #50000	; 0xc350
   b7226:	428c      	cmp	r4, r1
   b7228:	dc18      	bgt.n	b725c <scalbn+0x8c>
   b722a:	2b00      	cmp	r3, #0
   b722c:	a126      	add	r1, pc, #152	; (adr r1, b72c8 <scalbn+0xf8>)
   b722e:	e9d1 0100 	ldrd	r0, r1, [r1]
   b7232:	db44      	blt.n	b72be <scalbn+0xee>
   b7234:	a324      	add	r3, pc, #144	; (adr r3, b72c8 <scalbn+0xf8>)
   b7236:	e9d3 2300 	ldrd	r2, r3, [r3]
   b723a:	f000 fa17 	bl	b766c <__aeabi_dmul>
   b723e:	ec41 0b10 	vmov	d0, r0, r1
   b7242:	bd38      	pop	{r3, r4, r5, pc}
   b7244:	f240 70ff 	movw	r0, #2047	; 0x7ff
   b7248:	4281      	cmp	r1, r0
   b724a:	d1e0      	bne.n	b720e <scalbn+0x3e>
   b724c:	ee10 0a10 	vmov	r0, s0
   b7250:	4619      	mov	r1, r3
   b7252:	f000 f855 	bl	b7300 <__adddf3>
   b7256:	ec41 0b10 	vmov	d0, r0, r1
   b725a:	bd38      	pop	{r3, r4, r5, pc}
   b725c:	2b00      	cmp	r3, #0
   b725e:	a11c      	add	r1, pc, #112	; (adr r1, b72d0 <scalbn+0x100>)
   b7260:	e9d1 0100 	ldrd	r0, r1, [r1]
   b7264:	db07      	blt.n	b7276 <scalbn+0xa6>
   b7266:	a31a      	add	r3, pc, #104	; (adr r3, b72d0 <scalbn+0x100>)
   b7268:	e9d3 2300 	ldrd	r2, r3, [r3]
   b726c:	f000 f9fe 	bl	b766c <__aeabi_dmul>
   b7270:	ec41 0b10 	vmov	d0, r0, r1
   b7274:	bd38      	pop	{r3, r4, r5, pc}
   b7276:	a118      	add	r1, pc, #96	; (adr r1, b72d8 <scalbn+0x108>)
   b7278:	e9d1 0100 	ldrd	r0, r1, [r1]
   b727c:	a314      	add	r3, pc, #80	; (adr r3, b72d0 <scalbn+0x100>)
   b727e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7282:	f000 f9f3 	bl	b766c <__aeabi_dmul>
   b7286:	ec41 0b10 	vmov	d0, r0, r1
   b728a:	e7f3      	b.n	b7274 <scalbn+0xa4>
   b728c:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   b7290:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   b7294:	3136      	adds	r1, #54	; 0x36
   b7296:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   b729a:	4610      	mov	r0, r2
   b729c:	4619      	mov	r1, r3
   b729e:	2200      	movs	r2, #0
   b72a0:	4b13      	ldr	r3, [pc, #76]	; (b72f0 <scalbn+0x120>)
   b72a2:	f000 f9e3 	bl	b766c <__aeabi_dmul>
   b72a6:	ec41 0b10 	vmov	d0, r0, r1
   b72aa:	bd38      	pop	{r3, r4, r5, pc}
   b72ac:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   b72b0:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   b72b4:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   b72b8:	ec43 2b10 	vmov	d0, r2, r3
   b72bc:	bd38      	pop	{r3, r4, r5, pc}
   b72be:	a108      	add	r1, pc, #32	; (adr r1, b72e0 <scalbn+0x110>)
   b72c0:	e9d1 0100 	ldrd	r0, r1, [r1]
   b72c4:	e7b6      	b.n	b7234 <scalbn+0x64>
   b72c6:	bf00      	nop
   b72c8:	c2f8f359 	.word	0xc2f8f359
   b72cc:	01a56e1f 	.word	0x01a56e1f
   b72d0:	8800759c 	.word	0x8800759c
   b72d4:	7e37e43c 	.word	0x7e37e43c
   b72d8:	8800759c 	.word	0x8800759c
   b72dc:	fe37e43c 	.word	0xfe37e43c
   b72e0:	c2f8f359 	.word	0xc2f8f359
   b72e4:	81a56e1f 	.word	0x81a56e1f
   b72e8:	43500000 	.word	0x43500000
   b72ec:	ffff3cb0 	.word	0xffff3cb0
   b72f0:	3c900000 	.word	0x3c900000

000b72f4 <__aeabi_drsub>:
   b72f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b72f8:	e002      	b.n	b7300 <__adddf3>
   b72fa:	bf00      	nop

000b72fc <__aeabi_dsub>:
   b72fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b7300 <__adddf3>:
   b7300:	b530      	push	{r4, r5, lr}
   b7302:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b7306:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b730a:	ea94 0f05 	teq	r4, r5
   b730e:	bf08      	it	eq
   b7310:	ea90 0f02 	teqeq	r0, r2
   b7314:	bf1f      	itttt	ne
   b7316:	ea54 0c00 	orrsne.w	ip, r4, r0
   b731a:	ea55 0c02 	orrsne.w	ip, r5, r2
   b731e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b7322:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b7326:	f000 80e2 	beq.w	b74ee <__adddf3+0x1ee>
   b732a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b732e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b7332:	bfb8      	it	lt
   b7334:	426d      	neglt	r5, r5
   b7336:	dd0c      	ble.n	b7352 <__adddf3+0x52>
   b7338:	442c      	add	r4, r5
   b733a:	ea80 0202 	eor.w	r2, r0, r2
   b733e:	ea81 0303 	eor.w	r3, r1, r3
   b7342:	ea82 0000 	eor.w	r0, r2, r0
   b7346:	ea83 0101 	eor.w	r1, r3, r1
   b734a:	ea80 0202 	eor.w	r2, r0, r2
   b734e:	ea81 0303 	eor.w	r3, r1, r3
   b7352:	2d36      	cmp	r5, #54	; 0x36
   b7354:	bf88      	it	hi
   b7356:	bd30      	pophi	{r4, r5, pc}
   b7358:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b735c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b7360:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b7364:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b7368:	d002      	beq.n	b7370 <__adddf3+0x70>
   b736a:	4240      	negs	r0, r0
   b736c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7370:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b7374:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b7378:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b737c:	d002      	beq.n	b7384 <__adddf3+0x84>
   b737e:	4252      	negs	r2, r2
   b7380:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b7384:	ea94 0f05 	teq	r4, r5
   b7388:	f000 80a7 	beq.w	b74da <__adddf3+0x1da>
   b738c:	f1a4 0401 	sub.w	r4, r4, #1
   b7390:	f1d5 0e20 	rsbs	lr, r5, #32
   b7394:	db0d      	blt.n	b73b2 <__adddf3+0xb2>
   b7396:	fa02 fc0e 	lsl.w	ip, r2, lr
   b739a:	fa22 f205 	lsr.w	r2, r2, r5
   b739e:	1880      	adds	r0, r0, r2
   b73a0:	f141 0100 	adc.w	r1, r1, #0
   b73a4:	fa03 f20e 	lsl.w	r2, r3, lr
   b73a8:	1880      	adds	r0, r0, r2
   b73aa:	fa43 f305 	asr.w	r3, r3, r5
   b73ae:	4159      	adcs	r1, r3
   b73b0:	e00e      	b.n	b73d0 <__adddf3+0xd0>
   b73b2:	f1a5 0520 	sub.w	r5, r5, #32
   b73b6:	f10e 0e20 	add.w	lr, lr, #32
   b73ba:	2a01      	cmp	r2, #1
   b73bc:	fa03 fc0e 	lsl.w	ip, r3, lr
   b73c0:	bf28      	it	cs
   b73c2:	f04c 0c02 	orrcs.w	ip, ip, #2
   b73c6:	fa43 f305 	asr.w	r3, r3, r5
   b73ca:	18c0      	adds	r0, r0, r3
   b73cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b73d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b73d4:	d507      	bpl.n	b73e6 <__adddf3+0xe6>
   b73d6:	f04f 0e00 	mov.w	lr, #0
   b73da:	f1dc 0c00 	rsbs	ip, ip, #0
   b73de:	eb7e 0000 	sbcs.w	r0, lr, r0
   b73e2:	eb6e 0101 	sbc.w	r1, lr, r1
   b73e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b73ea:	d31b      	bcc.n	b7424 <__adddf3+0x124>
   b73ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b73f0:	d30c      	bcc.n	b740c <__adddf3+0x10c>
   b73f2:	0849      	lsrs	r1, r1, #1
   b73f4:	ea5f 0030 	movs.w	r0, r0, rrx
   b73f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b73fc:	f104 0401 	add.w	r4, r4, #1
   b7400:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b7404:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b7408:	f080 809a 	bcs.w	b7540 <__adddf3+0x240>
   b740c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b7410:	bf08      	it	eq
   b7412:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b7416:	f150 0000 	adcs.w	r0, r0, #0
   b741a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b741e:	ea41 0105 	orr.w	r1, r1, r5
   b7422:	bd30      	pop	{r4, r5, pc}
   b7424:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b7428:	4140      	adcs	r0, r0
   b742a:	eb41 0101 	adc.w	r1, r1, r1
   b742e:	3c01      	subs	r4, #1
   b7430:	bf28      	it	cs
   b7432:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b7436:	d2e9      	bcs.n	b740c <__adddf3+0x10c>
   b7438:	f091 0f00 	teq	r1, #0
   b743c:	bf04      	itt	eq
   b743e:	4601      	moveq	r1, r0
   b7440:	2000      	moveq	r0, #0
   b7442:	fab1 f381 	clz	r3, r1
   b7446:	bf08      	it	eq
   b7448:	3320      	addeq	r3, #32
   b744a:	f1a3 030b 	sub.w	r3, r3, #11
   b744e:	f1b3 0220 	subs.w	r2, r3, #32
   b7452:	da0c      	bge.n	b746e <__adddf3+0x16e>
   b7454:	320c      	adds	r2, #12
   b7456:	dd08      	ble.n	b746a <__adddf3+0x16a>
   b7458:	f102 0c14 	add.w	ip, r2, #20
   b745c:	f1c2 020c 	rsb	r2, r2, #12
   b7460:	fa01 f00c 	lsl.w	r0, r1, ip
   b7464:	fa21 f102 	lsr.w	r1, r1, r2
   b7468:	e00c      	b.n	b7484 <__adddf3+0x184>
   b746a:	f102 0214 	add.w	r2, r2, #20
   b746e:	bfd8      	it	le
   b7470:	f1c2 0c20 	rsble	ip, r2, #32
   b7474:	fa01 f102 	lsl.w	r1, r1, r2
   b7478:	fa20 fc0c 	lsr.w	ip, r0, ip
   b747c:	bfdc      	itt	le
   b747e:	ea41 010c 	orrle.w	r1, r1, ip
   b7482:	4090      	lslle	r0, r2
   b7484:	1ae4      	subs	r4, r4, r3
   b7486:	bfa2      	ittt	ge
   b7488:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b748c:	4329      	orrge	r1, r5
   b748e:	bd30      	popge	{r4, r5, pc}
   b7490:	ea6f 0404 	mvn.w	r4, r4
   b7494:	3c1f      	subs	r4, #31
   b7496:	da1c      	bge.n	b74d2 <__adddf3+0x1d2>
   b7498:	340c      	adds	r4, #12
   b749a:	dc0e      	bgt.n	b74ba <__adddf3+0x1ba>
   b749c:	f104 0414 	add.w	r4, r4, #20
   b74a0:	f1c4 0220 	rsb	r2, r4, #32
   b74a4:	fa20 f004 	lsr.w	r0, r0, r4
   b74a8:	fa01 f302 	lsl.w	r3, r1, r2
   b74ac:	ea40 0003 	orr.w	r0, r0, r3
   b74b0:	fa21 f304 	lsr.w	r3, r1, r4
   b74b4:	ea45 0103 	orr.w	r1, r5, r3
   b74b8:	bd30      	pop	{r4, r5, pc}
   b74ba:	f1c4 040c 	rsb	r4, r4, #12
   b74be:	f1c4 0220 	rsb	r2, r4, #32
   b74c2:	fa20 f002 	lsr.w	r0, r0, r2
   b74c6:	fa01 f304 	lsl.w	r3, r1, r4
   b74ca:	ea40 0003 	orr.w	r0, r0, r3
   b74ce:	4629      	mov	r1, r5
   b74d0:	bd30      	pop	{r4, r5, pc}
   b74d2:	fa21 f004 	lsr.w	r0, r1, r4
   b74d6:	4629      	mov	r1, r5
   b74d8:	bd30      	pop	{r4, r5, pc}
   b74da:	f094 0f00 	teq	r4, #0
   b74de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b74e2:	bf06      	itte	eq
   b74e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b74e8:	3401      	addeq	r4, #1
   b74ea:	3d01      	subne	r5, #1
   b74ec:	e74e      	b.n	b738c <__adddf3+0x8c>
   b74ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b74f2:	bf18      	it	ne
   b74f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b74f8:	d029      	beq.n	b754e <__adddf3+0x24e>
   b74fa:	ea94 0f05 	teq	r4, r5
   b74fe:	bf08      	it	eq
   b7500:	ea90 0f02 	teqeq	r0, r2
   b7504:	d005      	beq.n	b7512 <__adddf3+0x212>
   b7506:	ea54 0c00 	orrs.w	ip, r4, r0
   b750a:	bf04      	itt	eq
   b750c:	4619      	moveq	r1, r3
   b750e:	4610      	moveq	r0, r2
   b7510:	bd30      	pop	{r4, r5, pc}
   b7512:	ea91 0f03 	teq	r1, r3
   b7516:	bf1e      	ittt	ne
   b7518:	2100      	movne	r1, #0
   b751a:	2000      	movne	r0, #0
   b751c:	bd30      	popne	{r4, r5, pc}
   b751e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b7522:	d105      	bne.n	b7530 <__adddf3+0x230>
   b7524:	0040      	lsls	r0, r0, #1
   b7526:	4149      	adcs	r1, r1
   b7528:	bf28      	it	cs
   b752a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b752e:	bd30      	pop	{r4, r5, pc}
   b7530:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b7534:	bf3c      	itt	cc
   b7536:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b753a:	bd30      	popcc	{r4, r5, pc}
   b753c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7540:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b7544:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b7548:	f04f 0000 	mov.w	r0, #0
   b754c:	bd30      	pop	{r4, r5, pc}
   b754e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b7552:	bf1a      	itte	ne
   b7554:	4619      	movne	r1, r3
   b7556:	4610      	movne	r0, r2
   b7558:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b755c:	bf1c      	itt	ne
   b755e:	460b      	movne	r3, r1
   b7560:	4602      	movne	r2, r0
   b7562:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b7566:	bf06      	itte	eq
   b7568:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b756c:	ea91 0f03 	teqeq	r1, r3
   b7570:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b7574:	bd30      	pop	{r4, r5, pc}
   b7576:	bf00      	nop

000b7578 <__aeabi_ui2d>:
   b7578:	f090 0f00 	teq	r0, #0
   b757c:	bf04      	itt	eq
   b757e:	2100      	moveq	r1, #0
   b7580:	4770      	bxeq	lr
   b7582:	b530      	push	{r4, r5, lr}
   b7584:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7588:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b758c:	f04f 0500 	mov.w	r5, #0
   b7590:	f04f 0100 	mov.w	r1, #0
   b7594:	e750      	b.n	b7438 <__adddf3+0x138>
   b7596:	bf00      	nop

000b7598 <__aeabi_i2d>:
   b7598:	f090 0f00 	teq	r0, #0
   b759c:	bf04      	itt	eq
   b759e:	2100      	moveq	r1, #0
   b75a0:	4770      	bxeq	lr
   b75a2:	b530      	push	{r4, r5, lr}
   b75a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b75a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b75ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b75b0:	bf48      	it	mi
   b75b2:	4240      	negmi	r0, r0
   b75b4:	f04f 0100 	mov.w	r1, #0
   b75b8:	e73e      	b.n	b7438 <__adddf3+0x138>
   b75ba:	bf00      	nop

000b75bc <__aeabi_f2d>:
   b75bc:	0042      	lsls	r2, r0, #1
   b75be:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b75c2:	ea4f 0131 	mov.w	r1, r1, rrx
   b75c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b75ca:	bf1f      	itttt	ne
   b75cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b75d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b75d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b75d8:	4770      	bxne	lr
   b75da:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b75de:	bf08      	it	eq
   b75e0:	4770      	bxeq	lr
   b75e2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b75e6:	bf04      	itt	eq
   b75e8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b75ec:	4770      	bxeq	lr
   b75ee:	b530      	push	{r4, r5, lr}
   b75f0:	f44f 7460 	mov.w	r4, #896	; 0x380
   b75f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b75f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b75fc:	e71c      	b.n	b7438 <__adddf3+0x138>
   b75fe:	bf00      	nop

000b7600 <__aeabi_ul2d>:
   b7600:	ea50 0201 	orrs.w	r2, r0, r1
   b7604:	bf08      	it	eq
   b7606:	4770      	bxeq	lr
   b7608:	b530      	push	{r4, r5, lr}
   b760a:	f04f 0500 	mov.w	r5, #0
   b760e:	e00a      	b.n	b7626 <__aeabi_l2d+0x16>

000b7610 <__aeabi_l2d>:
   b7610:	ea50 0201 	orrs.w	r2, r0, r1
   b7614:	bf08      	it	eq
   b7616:	4770      	bxeq	lr
   b7618:	b530      	push	{r4, r5, lr}
   b761a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b761e:	d502      	bpl.n	b7626 <__aeabi_l2d+0x16>
   b7620:	4240      	negs	r0, r0
   b7622:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7626:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b762a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b762e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b7632:	f43f aed8 	beq.w	b73e6 <__adddf3+0xe6>
   b7636:	f04f 0203 	mov.w	r2, #3
   b763a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b763e:	bf18      	it	ne
   b7640:	3203      	addne	r2, #3
   b7642:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b7646:	bf18      	it	ne
   b7648:	3203      	addne	r2, #3
   b764a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b764e:	f1c2 0320 	rsb	r3, r2, #32
   b7652:	fa00 fc03 	lsl.w	ip, r0, r3
   b7656:	fa20 f002 	lsr.w	r0, r0, r2
   b765a:	fa01 fe03 	lsl.w	lr, r1, r3
   b765e:	ea40 000e 	orr.w	r0, r0, lr
   b7662:	fa21 f102 	lsr.w	r1, r1, r2
   b7666:	4414      	add	r4, r2
   b7668:	e6bd      	b.n	b73e6 <__adddf3+0xe6>
   b766a:	bf00      	nop

000b766c <__aeabi_dmul>:
   b766c:	b570      	push	{r4, r5, r6, lr}
   b766e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b7672:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b7676:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b767a:	bf1d      	ittte	ne
   b767c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b7680:	ea94 0f0c 	teqne	r4, ip
   b7684:	ea95 0f0c 	teqne	r5, ip
   b7688:	f000 f8de 	bleq	b7848 <__aeabi_dmul+0x1dc>
   b768c:	442c      	add	r4, r5
   b768e:	ea81 0603 	eor.w	r6, r1, r3
   b7692:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b7696:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b769a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b769e:	bf18      	it	ne
   b76a0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b76a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b76a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b76ac:	d038      	beq.n	b7720 <__aeabi_dmul+0xb4>
   b76ae:	fba0 ce02 	umull	ip, lr, r0, r2
   b76b2:	f04f 0500 	mov.w	r5, #0
   b76b6:	fbe1 e502 	umlal	lr, r5, r1, r2
   b76ba:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b76be:	fbe0 e503 	umlal	lr, r5, r0, r3
   b76c2:	f04f 0600 	mov.w	r6, #0
   b76c6:	fbe1 5603 	umlal	r5, r6, r1, r3
   b76ca:	f09c 0f00 	teq	ip, #0
   b76ce:	bf18      	it	ne
   b76d0:	f04e 0e01 	orrne.w	lr, lr, #1
   b76d4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b76d8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b76dc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b76e0:	d204      	bcs.n	b76ec <__aeabi_dmul+0x80>
   b76e2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b76e6:	416d      	adcs	r5, r5
   b76e8:	eb46 0606 	adc.w	r6, r6, r6
   b76ec:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b76f0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b76f4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b76f8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b76fc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b7700:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b7704:	bf88      	it	hi
   b7706:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b770a:	d81e      	bhi.n	b774a <__aeabi_dmul+0xde>
   b770c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b7710:	bf08      	it	eq
   b7712:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b7716:	f150 0000 	adcs.w	r0, r0, #0
   b771a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b771e:	bd70      	pop	{r4, r5, r6, pc}
   b7720:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b7724:	ea46 0101 	orr.w	r1, r6, r1
   b7728:	ea40 0002 	orr.w	r0, r0, r2
   b772c:	ea81 0103 	eor.w	r1, r1, r3
   b7730:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b7734:	bfc2      	ittt	gt
   b7736:	ebd4 050c 	rsbsgt	r5, r4, ip
   b773a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b773e:	bd70      	popgt	{r4, r5, r6, pc}
   b7740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7744:	f04f 0e00 	mov.w	lr, #0
   b7748:	3c01      	subs	r4, #1
   b774a:	f300 80ab 	bgt.w	b78a4 <__aeabi_dmul+0x238>
   b774e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b7752:	bfde      	ittt	le
   b7754:	2000      	movle	r0, #0
   b7756:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b775a:	bd70      	pople	{r4, r5, r6, pc}
   b775c:	f1c4 0400 	rsb	r4, r4, #0
   b7760:	3c20      	subs	r4, #32
   b7762:	da35      	bge.n	b77d0 <__aeabi_dmul+0x164>
   b7764:	340c      	adds	r4, #12
   b7766:	dc1b      	bgt.n	b77a0 <__aeabi_dmul+0x134>
   b7768:	f104 0414 	add.w	r4, r4, #20
   b776c:	f1c4 0520 	rsb	r5, r4, #32
   b7770:	fa00 f305 	lsl.w	r3, r0, r5
   b7774:	fa20 f004 	lsr.w	r0, r0, r4
   b7778:	fa01 f205 	lsl.w	r2, r1, r5
   b777c:	ea40 0002 	orr.w	r0, r0, r2
   b7780:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b7784:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b7788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b778c:	fa21 f604 	lsr.w	r6, r1, r4
   b7790:	eb42 0106 	adc.w	r1, r2, r6
   b7794:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7798:	bf08      	it	eq
   b779a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b779e:	bd70      	pop	{r4, r5, r6, pc}
   b77a0:	f1c4 040c 	rsb	r4, r4, #12
   b77a4:	f1c4 0520 	rsb	r5, r4, #32
   b77a8:	fa00 f304 	lsl.w	r3, r0, r4
   b77ac:	fa20 f005 	lsr.w	r0, r0, r5
   b77b0:	fa01 f204 	lsl.w	r2, r1, r4
   b77b4:	ea40 0002 	orr.w	r0, r0, r2
   b77b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b77bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b77c0:	f141 0100 	adc.w	r1, r1, #0
   b77c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b77c8:	bf08      	it	eq
   b77ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b77ce:	bd70      	pop	{r4, r5, r6, pc}
   b77d0:	f1c4 0520 	rsb	r5, r4, #32
   b77d4:	fa00 f205 	lsl.w	r2, r0, r5
   b77d8:	ea4e 0e02 	orr.w	lr, lr, r2
   b77dc:	fa20 f304 	lsr.w	r3, r0, r4
   b77e0:	fa01 f205 	lsl.w	r2, r1, r5
   b77e4:	ea43 0302 	orr.w	r3, r3, r2
   b77e8:	fa21 f004 	lsr.w	r0, r1, r4
   b77ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b77f0:	fa21 f204 	lsr.w	r2, r1, r4
   b77f4:	ea20 0002 	bic.w	r0, r0, r2
   b77f8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b77fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7800:	bf08      	it	eq
   b7802:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b7806:	bd70      	pop	{r4, r5, r6, pc}
   b7808:	f094 0f00 	teq	r4, #0
   b780c:	d10f      	bne.n	b782e <__aeabi_dmul+0x1c2>
   b780e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b7812:	0040      	lsls	r0, r0, #1
   b7814:	eb41 0101 	adc.w	r1, r1, r1
   b7818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b781c:	bf08      	it	eq
   b781e:	3c01      	subeq	r4, #1
   b7820:	d0f7      	beq.n	b7812 <__aeabi_dmul+0x1a6>
   b7822:	ea41 0106 	orr.w	r1, r1, r6
   b7826:	f095 0f00 	teq	r5, #0
   b782a:	bf18      	it	ne
   b782c:	4770      	bxne	lr
   b782e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b7832:	0052      	lsls	r2, r2, #1
   b7834:	eb43 0303 	adc.w	r3, r3, r3
   b7838:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b783c:	bf08      	it	eq
   b783e:	3d01      	subeq	r5, #1
   b7840:	d0f7      	beq.n	b7832 <__aeabi_dmul+0x1c6>
   b7842:	ea43 0306 	orr.w	r3, r3, r6
   b7846:	4770      	bx	lr
   b7848:	ea94 0f0c 	teq	r4, ip
   b784c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b7850:	bf18      	it	ne
   b7852:	ea95 0f0c 	teqne	r5, ip
   b7856:	d00c      	beq.n	b7872 <__aeabi_dmul+0x206>
   b7858:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b785c:	bf18      	it	ne
   b785e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b7862:	d1d1      	bne.n	b7808 <__aeabi_dmul+0x19c>
   b7864:	ea81 0103 	eor.w	r1, r1, r3
   b7868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b786c:	f04f 0000 	mov.w	r0, #0
   b7870:	bd70      	pop	{r4, r5, r6, pc}
   b7872:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b7876:	bf06      	itte	eq
   b7878:	4610      	moveq	r0, r2
   b787a:	4619      	moveq	r1, r3
   b787c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b7880:	d019      	beq.n	b78b6 <__aeabi_dmul+0x24a>
   b7882:	ea94 0f0c 	teq	r4, ip
   b7886:	d102      	bne.n	b788e <__aeabi_dmul+0x222>
   b7888:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b788c:	d113      	bne.n	b78b6 <__aeabi_dmul+0x24a>
   b788e:	ea95 0f0c 	teq	r5, ip
   b7892:	d105      	bne.n	b78a0 <__aeabi_dmul+0x234>
   b7894:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b7898:	bf1c      	itt	ne
   b789a:	4610      	movne	r0, r2
   b789c:	4619      	movne	r1, r3
   b789e:	d10a      	bne.n	b78b6 <__aeabi_dmul+0x24a>
   b78a0:	ea81 0103 	eor.w	r1, r1, r3
   b78a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b78a8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b78ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b78b0:	f04f 0000 	mov.w	r0, #0
   b78b4:	bd70      	pop	{r4, r5, r6, pc}
   b78b6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b78ba:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b78be:	bd70      	pop	{r4, r5, r6, pc}

000b78c0 <__aeabi_ddiv>:
   b78c0:	b570      	push	{r4, r5, r6, lr}
   b78c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b78c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b78ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b78ce:	bf1d      	ittte	ne
   b78d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b78d4:	ea94 0f0c 	teqne	r4, ip
   b78d8:	ea95 0f0c 	teqne	r5, ip
   b78dc:	f000 f8a7 	bleq	b7a2e <__aeabi_ddiv+0x16e>
   b78e0:	eba4 0405 	sub.w	r4, r4, r5
   b78e4:	ea81 0e03 	eor.w	lr, r1, r3
   b78e8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b78ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b78f0:	f000 8088 	beq.w	b7a04 <__aeabi_ddiv+0x144>
   b78f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b78f8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b78fc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b7900:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b7904:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b7908:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b790c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b7910:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b7914:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b7918:	429d      	cmp	r5, r3
   b791a:	bf08      	it	eq
   b791c:	4296      	cmpeq	r6, r2
   b791e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b7922:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b7926:	d202      	bcs.n	b792e <__aeabi_ddiv+0x6e>
   b7928:	085b      	lsrs	r3, r3, #1
   b792a:	ea4f 0232 	mov.w	r2, r2, rrx
   b792e:	1ab6      	subs	r6, r6, r2
   b7930:	eb65 0503 	sbc.w	r5, r5, r3
   b7934:	085b      	lsrs	r3, r3, #1
   b7936:	ea4f 0232 	mov.w	r2, r2, rrx
   b793a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b793e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b7942:	ebb6 0e02 	subs.w	lr, r6, r2
   b7946:	eb75 0e03 	sbcs.w	lr, r5, r3
   b794a:	bf22      	ittt	cs
   b794c:	1ab6      	subcs	r6, r6, r2
   b794e:	4675      	movcs	r5, lr
   b7950:	ea40 000c 	orrcs.w	r0, r0, ip
   b7954:	085b      	lsrs	r3, r3, #1
   b7956:	ea4f 0232 	mov.w	r2, r2, rrx
   b795a:	ebb6 0e02 	subs.w	lr, r6, r2
   b795e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7962:	bf22      	ittt	cs
   b7964:	1ab6      	subcs	r6, r6, r2
   b7966:	4675      	movcs	r5, lr
   b7968:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b796c:	085b      	lsrs	r3, r3, #1
   b796e:	ea4f 0232 	mov.w	r2, r2, rrx
   b7972:	ebb6 0e02 	subs.w	lr, r6, r2
   b7976:	eb75 0e03 	sbcs.w	lr, r5, r3
   b797a:	bf22      	ittt	cs
   b797c:	1ab6      	subcs	r6, r6, r2
   b797e:	4675      	movcs	r5, lr
   b7980:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b7984:	085b      	lsrs	r3, r3, #1
   b7986:	ea4f 0232 	mov.w	r2, r2, rrx
   b798a:	ebb6 0e02 	subs.w	lr, r6, r2
   b798e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7992:	bf22      	ittt	cs
   b7994:	1ab6      	subcs	r6, r6, r2
   b7996:	4675      	movcs	r5, lr
   b7998:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b799c:	ea55 0e06 	orrs.w	lr, r5, r6
   b79a0:	d018      	beq.n	b79d4 <__aeabi_ddiv+0x114>
   b79a2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b79a6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b79aa:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b79ae:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b79b2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b79b6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b79ba:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b79be:	d1c0      	bne.n	b7942 <__aeabi_ddiv+0x82>
   b79c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b79c4:	d10b      	bne.n	b79de <__aeabi_ddiv+0x11e>
   b79c6:	ea41 0100 	orr.w	r1, r1, r0
   b79ca:	f04f 0000 	mov.w	r0, #0
   b79ce:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b79d2:	e7b6      	b.n	b7942 <__aeabi_ddiv+0x82>
   b79d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b79d8:	bf04      	itt	eq
   b79da:	4301      	orreq	r1, r0
   b79dc:	2000      	moveq	r0, #0
   b79de:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b79e2:	bf88      	it	hi
   b79e4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b79e8:	f63f aeaf 	bhi.w	b774a <__aeabi_dmul+0xde>
   b79ec:	ebb5 0c03 	subs.w	ip, r5, r3
   b79f0:	bf04      	itt	eq
   b79f2:	ebb6 0c02 	subseq.w	ip, r6, r2
   b79f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b79fa:	f150 0000 	adcs.w	r0, r0, #0
   b79fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b7a02:	bd70      	pop	{r4, r5, r6, pc}
   b7a04:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b7a08:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b7a0c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b7a10:	bfc2      	ittt	gt
   b7a12:	ebd4 050c 	rsbsgt	r5, r4, ip
   b7a16:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b7a1a:	bd70      	popgt	{r4, r5, r6, pc}
   b7a1c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7a20:	f04f 0e00 	mov.w	lr, #0
   b7a24:	3c01      	subs	r4, #1
   b7a26:	e690      	b.n	b774a <__aeabi_dmul+0xde>
   b7a28:	ea45 0e06 	orr.w	lr, r5, r6
   b7a2c:	e68d      	b.n	b774a <__aeabi_dmul+0xde>
   b7a2e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b7a32:	ea94 0f0c 	teq	r4, ip
   b7a36:	bf08      	it	eq
   b7a38:	ea95 0f0c 	teqeq	r5, ip
   b7a3c:	f43f af3b 	beq.w	b78b6 <__aeabi_dmul+0x24a>
   b7a40:	ea94 0f0c 	teq	r4, ip
   b7a44:	d10a      	bne.n	b7a5c <__aeabi_ddiv+0x19c>
   b7a46:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b7a4a:	f47f af34 	bne.w	b78b6 <__aeabi_dmul+0x24a>
   b7a4e:	ea95 0f0c 	teq	r5, ip
   b7a52:	f47f af25 	bne.w	b78a0 <__aeabi_dmul+0x234>
   b7a56:	4610      	mov	r0, r2
   b7a58:	4619      	mov	r1, r3
   b7a5a:	e72c      	b.n	b78b6 <__aeabi_dmul+0x24a>
   b7a5c:	ea95 0f0c 	teq	r5, ip
   b7a60:	d106      	bne.n	b7a70 <__aeabi_ddiv+0x1b0>
   b7a62:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b7a66:	f43f aefd 	beq.w	b7864 <__aeabi_dmul+0x1f8>
   b7a6a:	4610      	mov	r0, r2
   b7a6c:	4619      	mov	r1, r3
   b7a6e:	e722      	b.n	b78b6 <__aeabi_dmul+0x24a>
   b7a70:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b7a74:	bf18      	it	ne
   b7a76:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b7a7a:	f47f aec5 	bne.w	b7808 <__aeabi_dmul+0x19c>
   b7a7e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b7a82:	f47f af0d 	bne.w	b78a0 <__aeabi_dmul+0x234>
   b7a86:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b7a8a:	f47f aeeb 	bne.w	b7864 <__aeabi_dmul+0x1f8>
   b7a8e:	e712      	b.n	b78b6 <__aeabi_dmul+0x24a>

000b7a90 <__gedf2>:
   b7a90:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b7a94:	e006      	b.n	b7aa4 <__cmpdf2+0x4>
   b7a96:	bf00      	nop

000b7a98 <__ledf2>:
   b7a98:	f04f 0c01 	mov.w	ip, #1
   b7a9c:	e002      	b.n	b7aa4 <__cmpdf2+0x4>
   b7a9e:	bf00      	nop

000b7aa0 <__cmpdf2>:
   b7aa0:	f04f 0c01 	mov.w	ip, #1
   b7aa4:	f84d cd04 	str.w	ip, [sp, #-4]!
   b7aa8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b7aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b7ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b7ab4:	bf18      	it	ne
   b7ab6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b7aba:	d01b      	beq.n	b7af4 <__cmpdf2+0x54>
   b7abc:	b001      	add	sp, #4
   b7abe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b7ac2:	bf0c      	ite	eq
   b7ac4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b7ac8:	ea91 0f03 	teqne	r1, r3
   b7acc:	bf02      	ittt	eq
   b7ace:	ea90 0f02 	teqeq	r0, r2
   b7ad2:	2000      	moveq	r0, #0
   b7ad4:	4770      	bxeq	lr
   b7ad6:	f110 0f00 	cmn.w	r0, #0
   b7ada:	ea91 0f03 	teq	r1, r3
   b7ade:	bf58      	it	pl
   b7ae0:	4299      	cmppl	r1, r3
   b7ae2:	bf08      	it	eq
   b7ae4:	4290      	cmpeq	r0, r2
   b7ae6:	bf2c      	ite	cs
   b7ae8:	17d8      	asrcs	r0, r3, #31
   b7aea:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b7aee:	f040 0001 	orr.w	r0, r0, #1
   b7af2:	4770      	bx	lr
   b7af4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b7af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b7afc:	d102      	bne.n	b7b04 <__cmpdf2+0x64>
   b7afe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b7b02:	d107      	bne.n	b7b14 <__cmpdf2+0x74>
   b7b04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b7b08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b7b0c:	d1d6      	bne.n	b7abc <__cmpdf2+0x1c>
   b7b0e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b7b12:	d0d3      	beq.n	b7abc <__cmpdf2+0x1c>
   b7b14:	f85d 0b04 	ldr.w	r0, [sp], #4
   b7b18:	4770      	bx	lr
   b7b1a:	bf00      	nop

000b7b1c <__aeabi_cdrcmple>:
   b7b1c:	4684      	mov	ip, r0
   b7b1e:	4610      	mov	r0, r2
   b7b20:	4662      	mov	r2, ip
   b7b22:	468c      	mov	ip, r1
   b7b24:	4619      	mov	r1, r3
   b7b26:	4663      	mov	r3, ip
   b7b28:	e000      	b.n	b7b2c <__aeabi_cdcmpeq>
   b7b2a:	bf00      	nop

000b7b2c <__aeabi_cdcmpeq>:
   b7b2c:	b501      	push	{r0, lr}
   b7b2e:	f7ff ffb7 	bl	b7aa0 <__cmpdf2>
   b7b32:	2800      	cmp	r0, #0
   b7b34:	bf48      	it	mi
   b7b36:	f110 0f00 	cmnmi.w	r0, #0
   b7b3a:	bd01      	pop	{r0, pc}

000b7b3c <__aeabi_dcmpeq>:
   b7b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7b40:	f7ff fff4 	bl	b7b2c <__aeabi_cdcmpeq>
   b7b44:	bf0c      	ite	eq
   b7b46:	2001      	moveq	r0, #1
   b7b48:	2000      	movne	r0, #0
   b7b4a:	f85d fb08 	ldr.w	pc, [sp], #8
   b7b4e:	bf00      	nop

000b7b50 <__aeabi_dcmplt>:
   b7b50:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7b54:	f7ff ffea 	bl	b7b2c <__aeabi_cdcmpeq>
   b7b58:	bf34      	ite	cc
   b7b5a:	2001      	movcc	r0, #1
   b7b5c:	2000      	movcs	r0, #0
   b7b5e:	f85d fb08 	ldr.w	pc, [sp], #8
   b7b62:	bf00      	nop

000b7b64 <__aeabi_dcmple>:
   b7b64:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7b68:	f7ff ffe0 	bl	b7b2c <__aeabi_cdcmpeq>
   b7b6c:	bf94      	ite	ls
   b7b6e:	2001      	movls	r0, #1
   b7b70:	2000      	movhi	r0, #0
   b7b72:	f85d fb08 	ldr.w	pc, [sp], #8
   b7b76:	bf00      	nop

000b7b78 <__aeabi_dcmpge>:
   b7b78:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7b7c:	f7ff ffce 	bl	b7b1c <__aeabi_cdrcmple>
   b7b80:	bf94      	ite	ls
   b7b82:	2001      	movls	r0, #1
   b7b84:	2000      	movhi	r0, #0
   b7b86:	f85d fb08 	ldr.w	pc, [sp], #8
   b7b8a:	bf00      	nop

000b7b8c <__aeabi_dcmpgt>:
   b7b8c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7b90:	f7ff ffc4 	bl	b7b1c <__aeabi_cdrcmple>
   b7b94:	bf34      	ite	cc
   b7b96:	2001      	movcc	r0, #1
   b7b98:	2000      	movcs	r0, #0
   b7b9a:	f85d fb08 	ldr.w	pc, [sp], #8
   b7b9e:	bf00      	nop

000b7ba0 <__aeabi_dcmpun>:
   b7ba0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b7ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b7ba8:	d102      	bne.n	b7bb0 <__aeabi_dcmpun+0x10>
   b7baa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b7bae:	d10a      	bne.n	b7bc6 <__aeabi_dcmpun+0x26>
   b7bb0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b7bb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b7bb8:	d102      	bne.n	b7bc0 <__aeabi_dcmpun+0x20>
   b7bba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b7bbe:	d102      	bne.n	b7bc6 <__aeabi_dcmpun+0x26>
   b7bc0:	f04f 0000 	mov.w	r0, #0
   b7bc4:	4770      	bx	lr
   b7bc6:	f04f 0001 	mov.w	r0, #1
   b7bca:	4770      	bx	lr

000b7bcc <__aeabi_d2f>:
   b7bcc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b7bd0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b7bd4:	bf24      	itt	cs
   b7bd6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b7bda:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b7bde:	d90d      	bls.n	b7bfc <__aeabi_d2f+0x30>
   b7be0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b7be4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b7be8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b7bec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b7bf0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b7bf4:	bf08      	it	eq
   b7bf6:	f020 0001 	biceq.w	r0, r0, #1
   b7bfa:	4770      	bx	lr
   b7bfc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b7c00:	d121      	bne.n	b7c46 <__aeabi_d2f+0x7a>
   b7c02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b7c06:	bfbc      	itt	lt
   b7c08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b7c0c:	4770      	bxlt	lr
   b7c0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7c12:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b7c16:	f1c2 0218 	rsb	r2, r2, #24
   b7c1a:	f1c2 0c20 	rsb	ip, r2, #32
   b7c1e:	fa10 f30c 	lsls.w	r3, r0, ip
   b7c22:	fa20 f002 	lsr.w	r0, r0, r2
   b7c26:	bf18      	it	ne
   b7c28:	f040 0001 	orrne.w	r0, r0, #1
   b7c2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b7c30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b7c34:	fa03 fc0c 	lsl.w	ip, r3, ip
   b7c38:	ea40 000c 	orr.w	r0, r0, ip
   b7c3c:	fa23 f302 	lsr.w	r3, r3, r2
   b7c40:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b7c44:	e7cc      	b.n	b7be0 <__aeabi_d2f+0x14>
   b7c46:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b7c4a:	d107      	bne.n	b7c5c <__aeabi_d2f+0x90>
   b7c4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b7c50:	bf1e      	ittt	ne
   b7c52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b7c56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b7c5a:	4770      	bxne	lr
   b7c5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b7c60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b7c64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b7c68:	4770      	bx	lr
   b7c6a:	bf00      	nop

000b7c6c <__aeabi_frsub>:
   b7c6c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   b7c70:	e002      	b.n	b7c78 <__addsf3>
   b7c72:	bf00      	nop

000b7c74 <__aeabi_fsub>:
   b7c74:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000b7c78 <__addsf3>:
   b7c78:	0042      	lsls	r2, r0, #1
   b7c7a:	bf1f      	itttt	ne
   b7c7c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   b7c80:	ea92 0f03 	teqne	r2, r3
   b7c84:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   b7c88:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   b7c8c:	d06a      	beq.n	b7d64 <__addsf3+0xec>
   b7c8e:	ea4f 6212 	mov.w	r2, r2, lsr #24
   b7c92:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   b7c96:	bfc1      	itttt	gt
   b7c98:	18d2      	addgt	r2, r2, r3
   b7c9a:	4041      	eorgt	r1, r0
   b7c9c:	4048      	eorgt	r0, r1
   b7c9e:	4041      	eorgt	r1, r0
   b7ca0:	bfb8      	it	lt
   b7ca2:	425b      	neglt	r3, r3
   b7ca4:	2b19      	cmp	r3, #25
   b7ca6:	bf88      	it	hi
   b7ca8:	4770      	bxhi	lr
   b7caa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   b7cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b7cb2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   b7cb6:	bf18      	it	ne
   b7cb8:	4240      	negne	r0, r0
   b7cba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b7cbe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   b7cc2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   b7cc6:	bf18      	it	ne
   b7cc8:	4249      	negne	r1, r1
   b7cca:	ea92 0f03 	teq	r2, r3
   b7cce:	d03f      	beq.n	b7d50 <__addsf3+0xd8>
   b7cd0:	f1a2 0201 	sub.w	r2, r2, #1
   b7cd4:	fa41 fc03 	asr.w	ip, r1, r3
   b7cd8:	eb10 000c 	adds.w	r0, r0, ip
   b7cdc:	f1c3 0320 	rsb	r3, r3, #32
   b7ce0:	fa01 f103 	lsl.w	r1, r1, r3
   b7ce4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   b7ce8:	d502      	bpl.n	b7cf0 <__addsf3+0x78>
   b7cea:	4249      	negs	r1, r1
   b7cec:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   b7cf0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b7cf4:	d313      	bcc.n	b7d1e <__addsf3+0xa6>
   b7cf6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   b7cfa:	d306      	bcc.n	b7d0a <__addsf3+0x92>
   b7cfc:	0840      	lsrs	r0, r0, #1
   b7cfe:	ea4f 0131 	mov.w	r1, r1, rrx
   b7d02:	f102 0201 	add.w	r2, r2, #1
   b7d06:	2afe      	cmp	r2, #254	; 0xfe
   b7d08:	d251      	bcs.n	b7dae <__addsf3+0x136>
   b7d0a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   b7d0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   b7d12:	bf08      	it	eq
   b7d14:	f020 0001 	biceq.w	r0, r0, #1
   b7d18:	ea40 0003 	orr.w	r0, r0, r3
   b7d1c:	4770      	bx	lr
   b7d1e:	0049      	lsls	r1, r1, #1
   b7d20:	eb40 0000 	adc.w	r0, r0, r0
   b7d24:	3a01      	subs	r2, #1
   b7d26:	bf28      	it	cs
   b7d28:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
   b7d2c:	d2ed      	bcs.n	b7d0a <__addsf3+0x92>
   b7d2e:	fab0 fc80 	clz	ip, r0
   b7d32:	f1ac 0c08 	sub.w	ip, ip, #8
   b7d36:	ebb2 020c 	subs.w	r2, r2, ip
   b7d3a:	fa00 f00c 	lsl.w	r0, r0, ip
   b7d3e:	bfaa      	itet	ge
   b7d40:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   b7d44:	4252      	neglt	r2, r2
   b7d46:	4318      	orrge	r0, r3
   b7d48:	bfbc      	itt	lt
   b7d4a:	40d0      	lsrlt	r0, r2
   b7d4c:	4318      	orrlt	r0, r3
   b7d4e:	4770      	bx	lr
   b7d50:	f092 0f00 	teq	r2, #0
   b7d54:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   b7d58:	bf06      	itte	eq
   b7d5a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   b7d5e:	3201      	addeq	r2, #1
   b7d60:	3b01      	subne	r3, #1
   b7d62:	e7b5      	b.n	b7cd0 <__addsf3+0x58>
   b7d64:	ea4f 0341 	mov.w	r3, r1, lsl #1
   b7d68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   b7d6c:	bf18      	it	ne
   b7d6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   b7d72:	d021      	beq.n	b7db8 <__addsf3+0x140>
   b7d74:	ea92 0f03 	teq	r2, r3
   b7d78:	d004      	beq.n	b7d84 <__addsf3+0x10c>
   b7d7a:	f092 0f00 	teq	r2, #0
   b7d7e:	bf08      	it	eq
   b7d80:	4608      	moveq	r0, r1
   b7d82:	4770      	bx	lr
   b7d84:	ea90 0f01 	teq	r0, r1
   b7d88:	bf1c      	itt	ne
   b7d8a:	2000      	movne	r0, #0
   b7d8c:	4770      	bxne	lr
   b7d8e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   b7d92:	d104      	bne.n	b7d9e <__addsf3+0x126>
   b7d94:	0040      	lsls	r0, r0, #1
   b7d96:	bf28      	it	cs
   b7d98:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   b7d9c:	4770      	bx	lr
   b7d9e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   b7da2:	bf3c      	itt	cc
   b7da4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   b7da8:	4770      	bxcc	lr
   b7daa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   b7dae:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   b7db2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b7db6:	4770      	bx	lr
   b7db8:	ea7f 6222 	mvns.w	r2, r2, asr #24
   b7dbc:	bf16      	itet	ne
   b7dbe:	4608      	movne	r0, r1
   b7dc0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   b7dc4:	4601      	movne	r1, r0
   b7dc6:	0242      	lsls	r2, r0, #9
   b7dc8:	bf06      	itte	eq
   b7dca:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   b7dce:	ea90 0f01 	teqeq	r0, r1
   b7dd2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   b7dd6:	4770      	bx	lr

000b7dd8 <__aeabi_ui2f>:
   b7dd8:	f04f 0300 	mov.w	r3, #0
   b7ddc:	e004      	b.n	b7de8 <__aeabi_i2f+0x8>
   b7dde:	bf00      	nop

000b7de0 <__aeabi_i2f>:
   b7de0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   b7de4:	bf48      	it	mi
   b7de6:	4240      	negmi	r0, r0
   b7de8:	ea5f 0c00 	movs.w	ip, r0
   b7dec:	bf08      	it	eq
   b7dee:	4770      	bxeq	lr
   b7df0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   b7df4:	4601      	mov	r1, r0
   b7df6:	f04f 0000 	mov.w	r0, #0
   b7dfa:	e01c      	b.n	b7e36 <__aeabi_l2f+0x2a>

000b7dfc <__aeabi_ul2f>:
   b7dfc:	ea50 0201 	orrs.w	r2, r0, r1
   b7e00:	bf08      	it	eq
   b7e02:	4770      	bxeq	lr
   b7e04:	f04f 0300 	mov.w	r3, #0
   b7e08:	e00a      	b.n	b7e20 <__aeabi_l2f+0x14>
   b7e0a:	bf00      	nop

000b7e0c <__aeabi_l2f>:
   b7e0c:	ea50 0201 	orrs.w	r2, r0, r1
   b7e10:	bf08      	it	eq
   b7e12:	4770      	bxeq	lr
   b7e14:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   b7e18:	d502      	bpl.n	b7e20 <__aeabi_l2f+0x14>
   b7e1a:	4240      	negs	r0, r0
   b7e1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7e20:	ea5f 0c01 	movs.w	ip, r1
   b7e24:	bf02      	ittt	eq
   b7e26:	4684      	moveq	ip, r0
   b7e28:	4601      	moveq	r1, r0
   b7e2a:	2000      	moveq	r0, #0
   b7e2c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   b7e30:	bf08      	it	eq
   b7e32:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   b7e36:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   b7e3a:	fabc f28c 	clz	r2, ip
   b7e3e:	3a08      	subs	r2, #8
   b7e40:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   b7e44:	db10      	blt.n	b7e68 <__aeabi_l2f+0x5c>
   b7e46:	fa01 fc02 	lsl.w	ip, r1, r2
   b7e4a:	4463      	add	r3, ip
   b7e4c:	fa00 fc02 	lsl.w	ip, r0, r2
   b7e50:	f1c2 0220 	rsb	r2, r2, #32
   b7e54:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b7e58:	fa20 f202 	lsr.w	r2, r0, r2
   b7e5c:	eb43 0002 	adc.w	r0, r3, r2
   b7e60:	bf08      	it	eq
   b7e62:	f020 0001 	biceq.w	r0, r0, #1
   b7e66:	4770      	bx	lr
   b7e68:	f102 0220 	add.w	r2, r2, #32
   b7e6c:	fa01 fc02 	lsl.w	ip, r1, r2
   b7e70:	f1c2 0220 	rsb	r2, r2, #32
   b7e74:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   b7e78:	fa21 f202 	lsr.w	r2, r1, r2
   b7e7c:	eb43 0002 	adc.w	r0, r3, r2
   b7e80:	bf08      	it	eq
   b7e82:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   b7e86:	4770      	bx	lr

000b7e88 <__aeabi_ldivmod>:
   b7e88:	b97b      	cbnz	r3, b7eaa <__aeabi_ldivmod+0x22>
   b7e8a:	b972      	cbnz	r2, b7eaa <__aeabi_ldivmod+0x22>
   b7e8c:	2900      	cmp	r1, #0
   b7e8e:	bfbe      	ittt	lt
   b7e90:	2000      	movlt	r0, #0
   b7e92:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   b7e96:	e006      	blt.n	b7ea6 <__aeabi_ldivmod+0x1e>
   b7e98:	bf08      	it	eq
   b7e9a:	2800      	cmpeq	r0, #0
   b7e9c:	bf1c      	itt	ne
   b7e9e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   b7ea2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   b7ea6:	f000 b9a7 	b.w	b81f8 <__aeabi_idiv0>
   b7eaa:	f1ad 0c08 	sub.w	ip, sp, #8
   b7eae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   b7eb2:	2900      	cmp	r1, #0
   b7eb4:	db09      	blt.n	b7eca <__aeabi_ldivmod+0x42>
   b7eb6:	2b00      	cmp	r3, #0
   b7eb8:	db1a      	blt.n	b7ef0 <__aeabi_ldivmod+0x68>
   b7eba:	f000 f835 	bl	b7f28 <__udivmoddi4>
   b7ebe:	f8dd e004 	ldr.w	lr, [sp, #4]
   b7ec2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b7ec6:	b004      	add	sp, #16
   b7ec8:	4770      	bx	lr
   b7eca:	4240      	negs	r0, r0
   b7ecc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7ed0:	2b00      	cmp	r3, #0
   b7ed2:	db1b      	blt.n	b7f0c <__aeabi_ldivmod+0x84>
   b7ed4:	f000 f828 	bl	b7f28 <__udivmoddi4>
   b7ed8:	f8dd e004 	ldr.w	lr, [sp, #4]
   b7edc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b7ee0:	b004      	add	sp, #16
   b7ee2:	4240      	negs	r0, r0
   b7ee4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7ee8:	4252      	negs	r2, r2
   b7eea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b7eee:	4770      	bx	lr
   b7ef0:	4252      	negs	r2, r2
   b7ef2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b7ef6:	f000 f817 	bl	b7f28 <__udivmoddi4>
   b7efa:	f8dd e004 	ldr.w	lr, [sp, #4]
   b7efe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b7f02:	b004      	add	sp, #16
   b7f04:	4240      	negs	r0, r0
   b7f06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7f0a:	4770      	bx	lr
   b7f0c:	4252      	negs	r2, r2
   b7f0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b7f12:	f000 f809 	bl	b7f28 <__udivmoddi4>
   b7f16:	f8dd e004 	ldr.w	lr, [sp, #4]
   b7f1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b7f1e:	b004      	add	sp, #16
   b7f20:	4252      	negs	r2, r2
   b7f22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b7f26:	4770      	bx	lr

000b7f28 <__udivmoddi4>:
   b7f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b7f2c:	9d08      	ldr	r5, [sp, #32]
   b7f2e:	4604      	mov	r4, r0
   b7f30:	468e      	mov	lr, r1
   b7f32:	2b00      	cmp	r3, #0
   b7f34:	d14d      	bne.n	b7fd2 <__udivmoddi4+0xaa>
   b7f36:	428a      	cmp	r2, r1
   b7f38:	4694      	mov	ip, r2
   b7f3a:	d969      	bls.n	b8010 <__udivmoddi4+0xe8>
   b7f3c:	fab2 f282 	clz	r2, r2
   b7f40:	b152      	cbz	r2, b7f58 <__udivmoddi4+0x30>
   b7f42:	fa01 f302 	lsl.w	r3, r1, r2
   b7f46:	f1c2 0120 	rsb	r1, r2, #32
   b7f4a:	fa20 f101 	lsr.w	r1, r0, r1
   b7f4e:	fa0c fc02 	lsl.w	ip, ip, r2
   b7f52:	ea41 0e03 	orr.w	lr, r1, r3
   b7f56:	4094      	lsls	r4, r2
   b7f58:	ea4f 481c 	mov.w	r8, ip, lsr #16
   b7f5c:	0c21      	lsrs	r1, r4, #16
   b7f5e:	fbbe f6f8 	udiv	r6, lr, r8
   b7f62:	fa1f f78c 	uxth.w	r7, ip
   b7f66:	fb08 e316 	mls	r3, r8, r6, lr
   b7f6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   b7f6e:	fb06 f107 	mul.w	r1, r6, r7
   b7f72:	4299      	cmp	r1, r3
   b7f74:	d90a      	bls.n	b7f8c <__udivmoddi4+0x64>
   b7f76:	eb1c 0303 	adds.w	r3, ip, r3
   b7f7a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
   b7f7e:	f080 811f 	bcs.w	b81c0 <__udivmoddi4+0x298>
   b7f82:	4299      	cmp	r1, r3
   b7f84:	f240 811c 	bls.w	b81c0 <__udivmoddi4+0x298>
   b7f88:	3e02      	subs	r6, #2
   b7f8a:	4463      	add	r3, ip
   b7f8c:	1a5b      	subs	r3, r3, r1
   b7f8e:	b2a4      	uxth	r4, r4
   b7f90:	fbb3 f0f8 	udiv	r0, r3, r8
   b7f94:	fb08 3310 	mls	r3, r8, r0, r3
   b7f98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   b7f9c:	fb00 f707 	mul.w	r7, r0, r7
   b7fa0:	42a7      	cmp	r7, r4
   b7fa2:	d90a      	bls.n	b7fba <__udivmoddi4+0x92>
   b7fa4:	eb1c 0404 	adds.w	r4, ip, r4
   b7fa8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b7fac:	f080 810a 	bcs.w	b81c4 <__udivmoddi4+0x29c>
   b7fb0:	42a7      	cmp	r7, r4
   b7fb2:	f240 8107 	bls.w	b81c4 <__udivmoddi4+0x29c>
   b7fb6:	4464      	add	r4, ip
   b7fb8:	3802      	subs	r0, #2
   b7fba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   b7fbe:	1be4      	subs	r4, r4, r7
   b7fc0:	2600      	movs	r6, #0
   b7fc2:	b11d      	cbz	r5, b7fcc <__udivmoddi4+0xa4>
   b7fc4:	40d4      	lsrs	r4, r2
   b7fc6:	2300      	movs	r3, #0
   b7fc8:	e9c5 4300 	strd	r4, r3, [r5]
   b7fcc:	4631      	mov	r1, r6
   b7fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7fd2:	428b      	cmp	r3, r1
   b7fd4:	d909      	bls.n	b7fea <__udivmoddi4+0xc2>
   b7fd6:	2d00      	cmp	r5, #0
   b7fd8:	f000 80ef 	beq.w	b81ba <__udivmoddi4+0x292>
   b7fdc:	2600      	movs	r6, #0
   b7fde:	e9c5 0100 	strd	r0, r1, [r5]
   b7fe2:	4630      	mov	r0, r6
   b7fe4:	4631      	mov	r1, r6
   b7fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7fea:	fab3 f683 	clz	r6, r3
   b7fee:	2e00      	cmp	r6, #0
   b7ff0:	d14a      	bne.n	b8088 <__udivmoddi4+0x160>
   b7ff2:	428b      	cmp	r3, r1
   b7ff4:	d302      	bcc.n	b7ffc <__udivmoddi4+0xd4>
   b7ff6:	4282      	cmp	r2, r0
   b7ff8:	f200 80f9 	bhi.w	b81ee <__udivmoddi4+0x2c6>
   b7ffc:	1a84      	subs	r4, r0, r2
   b7ffe:	eb61 0303 	sbc.w	r3, r1, r3
   b8002:	2001      	movs	r0, #1
   b8004:	469e      	mov	lr, r3
   b8006:	2d00      	cmp	r5, #0
   b8008:	d0e0      	beq.n	b7fcc <__udivmoddi4+0xa4>
   b800a:	e9c5 4e00 	strd	r4, lr, [r5]
   b800e:	e7dd      	b.n	b7fcc <__udivmoddi4+0xa4>
   b8010:	b902      	cbnz	r2, b8014 <__udivmoddi4+0xec>
   b8012:	deff      	udf	#255	; 0xff
   b8014:	fab2 f282 	clz	r2, r2
   b8018:	2a00      	cmp	r2, #0
   b801a:	f040 8092 	bne.w	b8142 <__udivmoddi4+0x21a>
   b801e:	eba1 010c 	sub.w	r1, r1, ip
   b8022:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b8026:	fa1f fe8c 	uxth.w	lr, ip
   b802a:	2601      	movs	r6, #1
   b802c:	0c20      	lsrs	r0, r4, #16
   b802e:	fbb1 f3f7 	udiv	r3, r1, r7
   b8032:	fb07 1113 	mls	r1, r7, r3, r1
   b8036:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b803a:	fb0e f003 	mul.w	r0, lr, r3
   b803e:	4288      	cmp	r0, r1
   b8040:	d908      	bls.n	b8054 <__udivmoddi4+0x12c>
   b8042:	eb1c 0101 	adds.w	r1, ip, r1
   b8046:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   b804a:	d202      	bcs.n	b8052 <__udivmoddi4+0x12a>
   b804c:	4288      	cmp	r0, r1
   b804e:	f200 80cb 	bhi.w	b81e8 <__udivmoddi4+0x2c0>
   b8052:	4643      	mov	r3, r8
   b8054:	1a09      	subs	r1, r1, r0
   b8056:	b2a4      	uxth	r4, r4
   b8058:	fbb1 f0f7 	udiv	r0, r1, r7
   b805c:	fb07 1110 	mls	r1, r7, r0, r1
   b8060:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
   b8064:	fb0e fe00 	mul.w	lr, lr, r0
   b8068:	45a6      	cmp	lr, r4
   b806a:	d908      	bls.n	b807e <__udivmoddi4+0x156>
   b806c:	eb1c 0404 	adds.w	r4, ip, r4
   b8070:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
   b8074:	d202      	bcs.n	b807c <__udivmoddi4+0x154>
   b8076:	45a6      	cmp	lr, r4
   b8078:	f200 80bb 	bhi.w	b81f2 <__udivmoddi4+0x2ca>
   b807c:	4608      	mov	r0, r1
   b807e:	eba4 040e 	sub.w	r4, r4, lr
   b8082:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   b8086:	e79c      	b.n	b7fc2 <__udivmoddi4+0x9a>
   b8088:	f1c6 0720 	rsb	r7, r6, #32
   b808c:	40b3      	lsls	r3, r6
   b808e:	fa22 fc07 	lsr.w	ip, r2, r7
   b8092:	ea4c 0c03 	orr.w	ip, ip, r3
   b8096:	fa20 f407 	lsr.w	r4, r0, r7
   b809a:	fa01 f306 	lsl.w	r3, r1, r6
   b809e:	431c      	orrs	r4, r3
   b80a0:	40f9      	lsrs	r1, r7
   b80a2:	ea4f 491c 	mov.w	r9, ip, lsr #16
   b80a6:	fa00 f306 	lsl.w	r3, r0, r6
   b80aa:	fbb1 f8f9 	udiv	r8, r1, r9
   b80ae:	0c20      	lsrs	r0, r4, #16
   b80b0:	fa1f fe8c 	uxth.w	lr, ip
   b80b4:	fb09 1118 	mls	r1, r9, r8, r1
   b80b8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b80bc:	fb08 f00e 	mul.w	r0, r8, lr
   b80c0:	4288      	cmp	r0, r1
   b80c2:	fa02 f206 	lsl.w	r2, r2, r6
   b80c6:	d90b      	bls.n	b80e0 <__udivmoddi4+0x1b8>
   b80c8:	eb1c 0101 	adds.w	r1, ip, r1
   b80cc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
   b80d0:	f080 8088 	bcs.w	b81e4 <__udivmoddi4+0x2bc>
   b80d4:	4288      	cmp	r0, r1
   b80d6:	f240 8085 	bls.w	b81e4 <__udivmoddi4+0x2bc>
   b80da:	f1a8 0802 	sub.w	r8, r8, #2
   b80de:	4461      	add	r1, ip
   b80e0:	1a09      	subs	r1, r1, r0
   b80e2:	b2a4      	uxth	r4, r4
   b80e4:	fbb1 f0f9 	udiv	r0, r1, r9
   b80e8:	fb09 1110 	mls	r1, r9, r0, r1
   b80ec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   b80f0:	fb00 fe0e 	mul.w	lr, r0, lr
   b80f4:	458e      	cmp	lr, r1
   b80f6:	d908      	bls.n	b810a <__udivmoddi4+0x1e2>
   b80f8:	eb1c 0101 	adds.w	r1, ip, r1
   b80fc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
   b8100:	d26c      	bcs.n	b81dc <__udivmoddi4+0x2b4>
   b8102:	458e      	cmp	lr, r1
   b8104:	d96a      	bls.n	b81dc <__udivmoddi4+0x2b4>
   b8106:	3802      	subs	r0, #2
   b8108:	4461      	add	r1, ip
   b810a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   b810e:	fba0 9402 	umull	r9, r4, r0, r2
   b8112:	eba1 010e 	sub.w	r1, r1, lr
   b8116:	42a1      	cmp	r1, r4
   b8118:	46c8      	mov	r8, r9
   b811a:	46a6      	mov	lr, r4
   b811c:	d356      	bcc.n	b81cc <__udivmoddi4+0x2a4>
   b811e:	d053      	beq.n	b81c8 <__udivmoddi4+0x2a0>
   b8120:	b15d      	cbz	r5, b813a <__udivmoddi4+0x212>
   b8122:	ebb3 0208 	subs.w	r2, r3, r8
   b8126:	eb61 010e 	sbc.w	r1, r1, lr
   b812a:	fa01 f707 	lsl.w	r7, r1, r7
   b812e:	fa22 f306 	lsr.w	r3, r2, r6
   b8132:	40f1      	lsrs	r1, r6
   b8134:	431f      	orrs	r7, r3
   b8136:	e9c5 7100 	strd	r7, r1, [r5]
   b813a:	2600      	movs	r6, #0
   b813c:	4631      	mov	r1, r6
   b813e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b8142:	f1c2 0320 	rsb	r3, r2, #32
   b8146:	40d8      	lsrs	r0, r3
   b8148:	fa0c fc02 	lsl.w	ip, ip, r2
   b814c:	fa21 f303 	lsr.w	r3, r1, r3
   b8150:	4091      	lsls	r1, r2
   b8152:	4301      	orrs	r1, r0
   b8154:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b8158:	fa1f fe8c 	uxth.w	lr, ip
   b815c:	fbb3 f0f7 	udiv	r0, r3, r7
   b8160:	fb07 3610 	mls	r6, r7, r0, r3
   b8164:	0c0b      	lsrs	r3, r1, #16
   b8166:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   b816a:	fb00 f60e 	mul.w	r6, r0, lr
   b816e:	429e      	cmp	r6, r3
   b8170:	fa04 f402 	lsl.w	r4, r4, r2
   b8174:	d908      	bls.n	b8188 <__udivmoddi4+0x260>
   b8176:	eb1c 0303 	adds.w	r3, ip, r3
   b817a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
   b817e:	d22f      	bcs.n	b81e0 <__udivmoddi4+0x2b8>
   b8180:	429e      	cmp	r6, r3
   b8182:	d92d      	bls.n	b81e0 <__udivmoddi4+0x2b8>
   b8184:	3802      	subs	r0, #2
   b8186:	4463      	add	r3, ip
   b8188:	1b9b      	subs	r3, r3, r6
   b818a:	b289      	uxth	r1, r1
   b818c:	fbb3 f6f7 	udiv	r6, r3, r7
   b8190:	fb07 3316 	mls	r3, r7, r6, r3
   b8194:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   b8198:	fb06 f30e 	mul.w	r3, r6, lr
   b819c:	428b      	cmp	r3, r1
   b819e:	d908      	bls.n	b81b2 <__udivmoddi4+0x28a>
   b81a0:	eb1c 0101 	adds.w	r1, ip, r1
   b81a4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
   b81a8:	d216      	bcs.n	b81d8 <__udivmoddi4+0x2b0>
   b81aa:	428b      	cmp	r3, r1
   b81ac:	d914      	bls.n	b81d8 <__udivmoddi4+0x2b0>
   b81ae:	3e02      	subs	r6, #2
   b81b0:	4461      	add	r1, ip
   b81b2:	1ac9      	subs	r1, r1, r3
   b81b4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   b81b8:	e738      	b.n	b802c <__udivmoddi4+0x104>
   b81ba:	462e      	mov	r6, r5
   b81bc:	4628      	mov	r0, r5
   b81be:	e705      	b.n	b7fcc <__udivmoddi4+0xa4>
   b81c0:	4606      	mov	r6, r0
   b81c2:	e6e3      	b.n	b7f8c <__udivmoddi4+0x64>
   b81c4:	4618      	mov	r0, r3
   b81c6:	e6f8      	b.n	b7fba <__udivmoddi4+0x92>
   b81c8:	454b      	cmp	r3, r9
   b81ca:	d2a9      	bcs.n	b8120 <__udivmoddi4+0x1f8>
   b81cc:	ebb9 0802 	subs.w	r8, r9, r2
   b81d0:	eb64 0e0c 	sbc.w	lr, r4, ip
   b81d4:	3801      	subs	r0, #1
   b81d6:	e7a3      	b.n	b8120 <__udivmoddi4+0x1f8>
   b81d8:	4646      	mov	r6, r8
   b81da:	e7ea      	b.n	b81b2 <__udivmoddi4+0x28a>
   b81dc:	4620      	mov	r0, r4
   b81de:	e794      	b.n	b810a <__udivmoddi4+0x1e2>
   b81e0:	4640      	mov	r0, r8
   b81e2:	e7d1      	b.n	b8188 <__udivmoddi4+0x260>
   b81e4:	46d0      	mov	r8, sl
   b81e6:	e77b      	b.n	b80e0 <__udivmoddi4+0x1b8>
   b81e8:	3b02      	subs	r3, #2
   b81ea:	4461      	add	r1, ip
   b81ec:	e732      	b.n	b8054 <__udivmoddi4+0x12c>
   b81ee:	4630      	mov	r0, r6
   b81f0:	e709      	b.n	b8006 <__udivmoddi4+0xde>
   b81f2:	4464      	add	r4, ip
   b81f4:	3802      	subs	r0, #2
   b81f6:	e742      	b.n	b807e <__udivmoddi4+0x156>

000b81f8 <__aeabi_idiv0>:
   b81f8:	4770      	bx	lr
   b81fa:	bf00      	nop

000b81fc <atexit>:
   b81fc:	2300      	movs	r3, #0
   b81fe:	4601      	mov	r1, r0
   b8200:	461a      	mov	r2, r3
   b8202:	4618      	mov	r0, r3
   b8204:	f000 b86a 	b.w	b82dc <__register_exitproc>

000b8208 <memcpy>:
   b8208:	440a      	add	r2, r1
   b820a:	4291      	cmp	r1, r2
   b820c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b8210:	d100      	bne.n	b8214 <memcpy+0xc>
   b8212:	4770      	bx	lr
   b8214:	b510      	push	{r4, lr}
   b8216:	f811 4b01 	ldrb.w	r4, [r1], #1
   b821a:	f803 4f01 	strb.w	r4, [r3, #1]!
   b821e:	4291      	cmp	r1, r2
   b8220:	d1f9      	bne.n	b8216 <memcpy+0xe>
   b8222:	bd10      	pop	{r4, pc}

000b8224 <memset>:
   b8224:	4402      	add	r2, r0
   b8226:	4603      	mov	r3, r0
   b8228:	4293      	cmp	r3, r2
   b822a:	d100      	bne.n	b822e <memset+0xa>
   b822c:	4770      	bx	lr
   b822e:	f803 1b01 	strb.w	r1, [r3], #1
   b8232:	e7f9      	b.n	b8228 <memset+0x4>

000b8234 <srand>:
   b8234:	b538      	push	{r3, r4, r5, lr}
   b8236:	4b10      	ldr	r3, [pc, #64]	; (b8278 <srand+0x44>)
   b8238:	681d      	ldr	r5, [r3, #0]
   b823a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b823c:	4604      	mov	r4, r0
   b823e:	b9b3      	cbnz	r3, b826e <srand+0x3a>
   b8240:	2018      	movs	r0, #24
   b8242:	f7fc febd 	bl	b4fc0 <malloc>
   b8246:	4602      	mov	r2, r0
   b8248:	63a8      	str	r0, [r5, #56]	; 0x38
   b824a:	b920      	cbnz	r0, b8256 <srand+0x22>
   b824c:	4b0b      	ldr	r3, [pc, #44]	; (b827c <srand+0x48>)
   b824e:	480c      	ldr	r0, [pc, #48]	; (b8280 <srand+0x4c>)
   b8250:	2142      	movs	r1, #66	; 0x42
   b8252:	f7fc fee5 	bl	b5020 <__assert_func>
   b8256:	490b      	ldr	r1, [pc, #44]	; (b8284 <srand+0x50>)
   b8258:	4b0b      	ldr	r3, [pc, #44]	; (b8288 <srand+0x54>)
   b825a:	e9c0 1300 	strd	r1, r3, [r0]
   b825e:	4b0b      	ldr	r3, [pc, #44]	; (b828c <srand+0x58>)
   b8260:	6083      	str	r3, [r0, #8]
   b8262:	230b      	movs	r3, #11
   b8264:	8183      	strh	r3, [r0, #12]
   b8266:	2100      	movs	r1, #0
   b8268:	2001      	movs	r0, #1
   b826a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b826e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8270:	2200      	movs	r2, #0
   b8272:	611c      	str	r4, [r3, #16]
   b8274:	615a      	str	r2, [r3, #20]
   b8276:	bd38      	pop	{r3, r4, r5, pc}
   b8278:	2003e5f8 	.word	0x2003e5f8
   b827c:	000b8608 	.word	0x000b8608
   b8280:	000b861f 	.word	0x000b861f
   b8284:	abcd330e 	.word	0xabcd330e
   b8288:	e66d1234 	.word	0xe66d1234
   b828c:	0005deec 	.word	0x0005deec

000b8290 <strdup>:
   b8290:	4b02      	ldr	r3, [pc, #8]	; (b829c <strdup+0xc>)
   b8292:	4601      	mov	r1, r0
   b8294:	6818      	ldr	r0, [r3, #0]
   b8296:	f000 b803 	b.w	b82a0 <_strdup_r>
   b829a:	bf00      	nop
   b829c:	2003e5f8 	.word	0x2003e5f8

000b82a0 <_strdup_r>:
   b82a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b82a2:	4604      	mov	r4, r0
   b82a4:	4608      	mov	r0, r1
   b82a6:	460d      	mov	r5, r1
   b82a8:	f000 f80f 	bl	b82ca <strlen>
   b82ac:	1c42      	adds	r2, r0, #1
   b82ae:	4611      	mov	r1, r2
   b82b0:	4620      	mov	r0, r4
   b82b2:	9201      	str	r2, [sp, #4]
   b82b4:	f7fc fea4 	bl	b5000 <_malloc_r>
   b82b8:	4604      	mov	r4, r0
   b82ba:	b118      	cbz	r0, b82c4 <_strdup_r+0x24>
   b82bc:	9a01      	ldr	r2, [sp, #4]
   b82be:	4629      	mov	r1, r5
   b82c0:	f7ff ffa2 	bl	b8208 <memcpy>
   b82c4:	4620      	mov	r0, r4
   b82c6:	b003      	add	sp, #12
   b82c8:	bd30      	pop	{r4, r5, pc}

000b82ca <strlen>:
   b82ca:	4603      	mov	r3, r0
   b82cc:	f813 2b01 	ldrb.w	r2, [r3], #1
   b82d0:	2a00      	cmp	r2, #0
   b82d2:	d1fb      	bne.n	b82cc <strlen+0x2>
   b82d4:	1a18      	subs	r0, r3, r0
   b82d6:	3801      	subs	r0, #1
   b82d8:	4770      	bx	lr
	...

000b82dc <__register_exitproc>:
   b82dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b82e0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b839c <__register_exitproc+0xc0>
   b82e4:	4606      	mov	r6, r0
   b82e6:	f8d8 0000 	ldr.w	r0, [r8]
   b82ea:	461f      	mov	r7, r3
   b82ec:	460d      	mov	r5, r1
   b82ee:	4691      	mov	r9, r2
   b82f0:	f000 f856 	bl	b83a0 <__retarget_lock_acquire_recursive>
   b82f4:	4b25      	ldr	r3, [pc, #148]	; (b838c <__register_exitproc+0xb0>)
   b82f6:	681c      	ldr	r4, [r3, #0]
   b82f8:	b934      	cbnz	r4, b8308 <__register_exitproc+0x2c>
   b82fa:	4c25      	ldr	r4, [pc, #148]	; (b8390 <__register_exitproc+0xb4>)
   b82fc:	601c      	str	r4, [r3, #0]
   b82fe:	4b25      	ldr	r3, [pc, #148]	; (b8394 <__register_exitproc+0xb8>)
   b8300:	b113      	cbz	r3, b8308 <__register_exitproc+0x2c>
   b8302:	681b      	ldr	r3, [r3, #0]
   b8304:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b8308:	6863      	ldr	r3, [r4, #4]
   b830a:	2b1f      	cmp	r3, #31
   b830c:	dd07      	ble.n	b831e <__register_exitproc+0x42>
   b830e:	f8d8 0000 	ldr.w	r0, [r8]
   b8312:	f000 f847 	bl	b83a4 <__retarget_lock_release_recursive>
   b8316:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b831a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b831e:	b34e      	cbz	r6, b8374 <__register_exitproc+0x98>
   b8320:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b8324:	b988      	cbnz	r0, b834a <__register_exitproc+0x6e>
   b8326:	4b1c      	ldr	r3, [pc, #112]	; (b8398 <__register_exitproc+0xbc>)
   b8328:	b923      	cbnz	r3, b8334 <__register_exitproc+0x58>
   b832a:	f8d8 0000 	ldr.w	r0, [r8]
   b832e:	f000 f838 	bl	b83a2 <__retarget_lock_release>
   b8332:	e7f0      	b.n	b8316 <__register_exitproc+0x3a>
   b8334:	f44f 7084 	mov.w	r0, #264	; 0x108
   b8338:	f7fc fe42 	bl	b4fc0 <malloc>
   b833c:	2800      	cmp	r0, #0
   b833e:	d0f4      	beq.n	b832a <__register_exitproc+0x4e>
   b8340:	2300      	movs	r3, #0
   b8342:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b8346:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b834a:	6863      	ldr	r3, [r4, #4]
   b834c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b8350:	2201      	movs	r2, #1
   b8352:	409a      	lsls	r2, r3
   b8354:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b8358:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b835c:	4313      	orrs	r3, r2
   b835e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b8362:	2e02      	cmp	r6, #2
   b8364:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b8368:	bf02      	ittt	eq
   b836a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b836e:	4313      	orreq	r3, r2
   b8370:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b8374:	6863      	ldr	r3, [r4, #4]
   b8376:	f8d8 0000 	ldr.w	r0, [r8]
   b837a:	1c5a      	adds	r2, r3, #1
   b837c:	3302      	adds	r3, #2
   b837e:	6062      	str	r2, [r4, #4]
   b8380:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b8384:	f000 f80e 	bl	b83a4 <__retarget_lock_release_recursive>
   b8388:	2000      	movs	r0, #0
   b838a:	e7c6      	b.n	b831a <__register_exitproc+0x3e>
   b838c:	2003e7e8 	.word	0x2003e7e8
   b8390:	2003e75c 	.word	0x2003e75c
   b8394:	00000000 	.word	0x00000000
   b8398:	000b4fc1 	.word	0x000b4fc1
   b839c:	2003e65c 	.word	0x2003e65c

000b83a0 <__retarget_lock_acquire_recursive>:
   b83a0:	4770      	bx	lr

000b83a2 <__retarget_lock_release>:
   b83a2:	4770      	bx	lr

000b83a4 <__retarget_lock_release_recursive>:
   b83a4:	4770      	bx	lr

000b83a6 <link_code_end>:
	...

000b83a8 <dynalib_user>:
   b83a8:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b83b8:	0000 0000 6574 706d 6800 6d75 6469 7469     ....temp.humidit
   b83c8:	0079 7270 7365 7573 6572 6100 746c 7469     y.pressure.altit
   b83d8:	6475 0065 6557 7461 6568 2072 7453 7461     ude.Weather Stat
   b83e8:	6f69 206e 6e4f 696c 656e 3a20 0029 6574     ion Online :).te
   b83f8:	7473 6e69 0067 6564 6166 6c75 2074 4d00     sting.default .M
   b8408:	4253 4c00 4253 3c00 5053 5349 7465 6974     SB.LSB.<SPISetti
   b8418:	676e 2073 6564 6166 6c75 3e74 3c00 5053     ngs default>.<SP
   b8428:	5349 7465 6974 676e 2073 7325 7525 2520     ISettings %s%u %
   b8438:	2073 4f4d 4544 7525 003e 0000               s MODE%u>...

000b8444 <_ZTVN8particle11SPISettingsE>:
	...
   b844c:	422d 000b 4201 000b 4203 000b               -B...B...B..

000b8458 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b8460:	50b5 000b 50bb 000b 50f9 000b 50c9 000b     .P...P...P...P..
   b8470:	50b7 000b                                   .P..

000b8474 <_ZTVN5spark13EthernetClassE>:
	...
   b847c:	5643 000b 5639 000b 562f 000b 5625 000b     CV..9V../V..%V..
   b848c:	5619 000b 560d 000b 58b1 000b 58b9 000b     .V...V...X...X..
   b849c:	5601 000b 55f9 000b 55ef 000b 55e5 000b     .V...U...U...U..
   b84ac:	58e9 000b                                   .X..

000b84b0 <_ZTV7TwoWire>:
	...
   b84b8:	5661 000b 56ab 000b 5683 000b 5663 000b     aV...V...V..cV..
   b84c8:	568b 000b 5693 000b 569b 000b 56a3 000b     .V...V...V...V..

000b84d8 <_ZTV9IPAddress>:
	...
   b84e0:	577f 000b 576f 000b 5771 000b 7061 0070     .W..oW..qW..app.

000b84f0 <_ZTVN5spark12NetworkClassE>:
	...
   b84f8:	5871 000b 587b 000b 5885 000b 588f 000b     qX..{X...X...X..
   b8508:	5899 000b 58a5 000b 58b1 000b 58b9 000b     .X...X...X...X..
   b8518:	58c1 000b 58cd 000b 58d5 000b 58df 000b     .X...X...X...X..
   b8528:	58e9 000b                                   .X..

000b852c <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b852c:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   b853c:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   b854c:	6d69 0065                                   ime.

000b8550 <_ZTV11USARTSerial>:
	...
   b8558:	5c91 000b 5cfd 000b 5cd5 000b 59d5 000b     .\...\...\...Y..
   b8568:	5ca5 000b 5cc1 000b 5cb3 000b 5ccf 000b     .\...\...\...\..
   b8578:	5c93 000b 5c97 000b                         .\...\..

000b8580 <_ZTV9USBSerial>:
	...
   b8588:	5d3b 000b 5da3 000b 5d79 000b 59d5 000b     ;]...]..y]...Y..
   b8598:	5d6b 000b 5d3d 000b 5d4d 000b 5d9d 000b     k]..=]..M]...]..
   b85a8:	5d5d 000b 5d35 000b                         ]]..5]..

000b85b0 <_ZTVN5spark9WiFiClassE>:
	...
   b85b8:	5e93 000b 5e89 000b 5e7f 000b 5e35 000b     .^...^...^..5^..
   b85c8:	5e73 000b 5e67 000b 58b1 000b 58b9 000b     s^..g^...X...X..
   b85d8:	5e5b 000b 5e53 000b 5e49 000b 5e3f 000b     [^..S^..I^..?^..
   b85e8:	58e9 000b                                   .X..

000b85ec <_ZSt7nothrow>:
	...

000b85f8 <TWO52>:
   b85f8:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.
   b8608:	4552 4e45 2054 616d 6c6c 636f 7320 6375     REENT malloc suc
   b8618:	6563 6465 6465 2f00 6d74 2f70 656a 6b6e     ceeded./tmp/jenk
   b8628:	6e69 2d73 4347 2d43 3031 702d 7069 6c65     ins-GCC-10-pipel
   b8638:	6e69 2d65 3834 325f 3230 3130 3231 5f34     ine-48_20201124_
   b8648:	3631 3630 3831 3630 3933 732f 6372 6e2f     1606180639/src/n
   b8658:	7765 696c 2f62 656e 6c77 6269 6c2f 6269     ewlib/newlib/lib
   b8668:	2f63 7473 6c64 6269 722f 6e61 2e64 0063     c/stdlib/rand.c.

000b8678 <link_const_variable_data_end>:
   b8678:	000b41ed 	.word	0x000b41ed
   b867c:	000b50a5 	.word	0x000b50a5
   b8680:	000b564d 	.word	0x000b564d
   b8684:	000b5861 	.word	0x000b5861
   b8688:	000b59c1 	.word	0x000b59c1
   b868c:	000b5ae9 	.word	0x000b5ae9
   b8690:	000b5c59 	.word	0x000b5c59
   b8694:	000b5c7d 	.word	0x000b5c7d
   b8698:	000b5e9d 	.word	0x000b5e9d

000b869c <link_constructors_end>:
   b869c:	00000000 	.word	0x00000000
