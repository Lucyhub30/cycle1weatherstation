
/Users/lucy/Desktop/AlevelProject/cycle1weatherstation/target/4.1.0/argon/cycle1weatherstation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005120  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b9140  000b9140  00009140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.exidx    00000008  000b9164  000b9164  00009164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .backup       00000004  2003f400  000b916c  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  2003e5a4  000b9170  0001e5a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001dc  2003e618  2003e618  0002e618  2**3
                  ALLOC
  8 .module_info_suffix 00000028  000b91e0  000b91e0  000291e0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b9208  000b9208  00029208  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   00128ce8  00000000  00000000  0002920c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00013e0d  00000000  00000000  00151ef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0003b129  00000000  00000000  00165d01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002bf8  00000000  00000000  001a0e2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000a5c8  00000000  00000000  001a3a22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003af72  00000000  00000000  001adfea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00041361  00000000  00000000  001e8f5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00138efe  00000000  00000000  0022a2bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000080e0  00000000  00000000  003631bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f004 fdb5 	bl	b8ba0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f004 fdbd 	bl	b8bbc <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e5a4 	.word	0x2003e5a4
   b404c:	000b9170 	.word	0x000b9170
   b4050:	2003e614 	.word	0x2003e614
   b4054:	2003e618 	.word	0x2003e618
   b4058:	2003e7f1 	.word	0x2003e7f1

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f002 fbf7 	bl	b6854 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000b9118 	.word	0x000b9118
   b4080:	000b913c 	.word	0x000b913c

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b95a 	b.w	b433c <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 f9db 	bl	b4444 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f002 bb97 	b.w	b67c4 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f001 ba27 	b.w	b54e8 <malloc>

000b409a <_Znaj>:
   b409a:	f001 ba25 	b.w	b54e8 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f001 ba2b 	b.w	b54f8 <free>

000b40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a2:	7800      	ldrb	r0, [r0, #0]
   b40a4:	fab0 f080 	clz	r0, r0
   b40a8:	0940      	lsrs	r0, r0, #5
   b40aa:	4770      	bx	lr

000b40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ac:	2301      	movs	r3, #1
   b40ae:	7003      	strb	r3, [r0, #0]
   b40b0:	4770      	bx	lr

000b40b2 <_ZN10CloudClass22update_string_variableEPKc18Spark_Data_TypeDefPKvPv>:

    static const void* update_string_variable(const char* name, Spark_Data_TypeDef type, const void* var, void* reserved)
    {
        const String* s = (const String*)var;
        return s->c_str();
    }
   b40b2:	6810      	ldr	r0, [r2, #0]
   b40b4:	4770      	bx	lr

000b40b6 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>:

    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value), int> = 0>
    size_t println(T b, int base = DEC) {
   b40b6:	b570      	push	{r4, r5, r6, lr}
   b40b8:	4605      	mov	r5, r0
   b40ba:	460c      	mov	r4, r1

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
   b40bc:	4616      	mov	r6, r2
   b40be:	b942      	cbnz	r2, b40d2 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x1c>
        return write(n);
   b40c0:	6803      	ldr	r3, [r0, #0]
   b40c2:	b2c9      	uxtb	r1, r1
   b40c4:	689b      	ldr	r3, [r3, #8]
   b40c6:	4798      	blx	r3
        n += println();
   b40c8:	4628      	mov	r0, r5
    }
   b40ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        n += println();
   b40ce:	f001 bf4c 	b.w	b5f6a <_ZN5Print7printlnEv>
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b40d2:	2900      	cmp	r1, #0
   b40d4:	da0a      	bge.n	b40ec <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x36>
   b40d6:	2a0a      	cmp	r2, #10
   b40d8:	d108      	bne.n	b40ec <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x36>
            t = print('-');
   b40da:	212d      	movs	r1, #45	; 0x2d
   b40dc:	f001 ff42 	bl	b5f64 <_ZN5Print5printEc>
            val = -n;
   b40e0:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b40e2:	b2f2      	uxtb	r2, r6
   b40e4:	4628      	mov	r0, r5
   b40e6:	f001 ff56 	bl	b5f96 <_ZN5Print11printNumberEmh>
   b40ea:	e7ed      	b.n	b40c8 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x12>
            val = n;
   b40ec:	4621      	mov	r1, r4
   b40ee:	e7f8      	b.n	b40e2 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x2c>

000b40f0 <_ZN10CloudClass7publishEPKcS1_.isra.0>:

inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   b40f0:	b513      	push	{r0, r1, r4, lr}
   b40f2:	4b05      	ldr	r3, [pc, #20]	; (b4108 <_ZN10CloudClass7publishEPKcS1_.isra.0+0x18>)
   b40f4:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b40f6:	f88d 3000 	strb.w	r3, [sp]
   b40fa:	233c      	movs	r3, #60	; 0x3c
inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   b40fc:	4604      	mov	r4, r0
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b40fe:	f001 fba1 	bl	b5844 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, data, PUBLIC);
}
   b4102:	4620      	mov	r0, r4
   b4104:	b002      	add	sp, #8
   b4106:	bd10      	pop	{r4, pc}
   b4108:	2003e618 	.word	0x2003e618

000b410c <_ZN5Print8printlnfEPKcz>:
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b410c:	b40e      	push	{r1, r2, r3}
   b410e:	b503      	push	{r0, r1, lr}
   b4110:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(true, format, args);
   b4112:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4114:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4118:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b411a:	f002 f82e 	bl	b617a <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b411e:	b002      	add	sp, #8
   b4120:	f85d eb04 	ldr.w	lr, [sp], #4
   b4124:	b003      	add	sp, #12
   b4126:	4770      	bx	lr

000b4128 <_Z20getBarometerReadingsv>:
int altitude = 0;


// BAROMETER SENSOR CODE

void getBarometerReadings() {
   b4128:	b508      	push	{r3, lr}
  //Collects readings from sensors
  temp = (int)bme.readTemperature();
   b412a:	4811      	ldr	r0, [pc, #68]	; (b4170 <_Z20getBarometerReadingsv+0x48>)
   b412c:	f000 fd74 	bl	b4c18 <_ZN15Adafruit_BME28015readTemperatureEv>
   b4130:	4b10      	ldr	r3, [pc, #64]	; (b4174 <_Z20getBarometerReadingsv+0x4c>)
  humidity = (int)bme.readHumidity();
   b4132:	480f      	ldr	r0, [pc, #60]	; (b4170 <_Z20getBarometerReadingsv+0x48>)
  temp = (int)bme.readTemperature();
   b4134:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   b4138:	ed83 0a00 	vstr	s0, [r3]
  humidity = (int)bme.readHumidity();
   b413c:	f000 fd9c 	bl	b4c78 <_ZN15Adafruit_BME28012readHumidityEv>
   b4140:	4b0d      	ldr	r3, [pc, #52]	; (b4178 <_Z20getBarometerReadingsv+0x50>)
  pressure = (int)bme.readPressure();
   b4142:	480b      	ldr	r0, [pc, #44]	; (b4170 <_Z20getBarometerReadingsv+0x48>)
  humidity = (int)bme.readHumidity();
   b4144:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   b4148:	ed83 0a00 	vstr	s0, [r3]
  pressure = (int)bme.readPressure();
   b414c:	f000 fdde 	bl	b4d0c <_ZN15Adafruit_BME28012readPressureEv>
   b4150:	4b0a      	ldr	r3, [pc, #40]	; (b417c <_Z20getBarometerReadingsv+0x54>)
  altitude = (int)bme.readAltitude(1013.25);
   b4152:	4807      	ldr	r0, [pc, #28]	; (b4170 <_Z20getBarometerReadingsv+0x48>)
  pressure = (int)bme.readPressure();
   b4154:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   b4158:	ed83 0a00 	vstr	s0, [r3]
  altitude = (int)bme.readAltitude(1013.25);
   b415c:	ed9f 0a08 	vldr	s0, [pc, #32]	; b4180 <_Z20getBarometerReadingsv+0x58>
   b4160:	f000 fea6 	bl	b4eb0 <_ZN15Adafruit_BME28012readAltitudeEf>
   b4164:	4b07      	ldr	r3, [pc, #28]	; (b4184 <_Z20getBarometerReadingsv+0x5c>)
   b4166:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   b416a:	ed83 0a00 	vstr	s0, [r3]
}
   b416e:	bd08      	pop	{r3, pc}
   b4170:	2003e64c 	.word	0x2003e64c
   b4174:	2003e6b8 	.word	0x2003e6b8
   b4178:	2003e69c 	.word	0x2003e69c
   b417c:	2003e6ac 	.word	0x2003e6ac
   b4180:	447d5000 	.word	0x447d5000
   b4184:	2003e62c 	.word	0x2003e62c

000b4188 <_Z21getAirQualityReadingsv>:
//Initiates variable airQuality
String airQuality = "Loading";

//Function that collects readings from AQ sensor

void getAirQualityReadings(){
   b4188:	b508      	push	{r3, lr}

  //Gets sensor reading
  int airQualityVal = aqSensor.slope();
   b418a:	4810      	ldr	r0, [pc, #64]	; (b41cc <_Z21getAirQualityReadingsv+0x44>)
   b418c:	f000 ff52 	bl	b5034 <_ZN16AirQualitySensor5slopeEv>

  //Assigns air quality
  if (airQualityVal == AirQualitySensor:: FORCE_SIGNAL) {
   b4190:	4b0f      	ldr	r3, [pc, #60]	; (b41d0 <_Z21getAirQualityReadingsv+0x48>)
   b4192:	681b      	ldr	r3, [r3, #0]
   b4194:	4283      	cmp	r3, r0
   b4196:	d105      	bne.n	b41a4 <_Z21getAirQualityReadingsv+0x1c>
    airQuality = "Dangerous Level";
   b4198:	490e      	ldr	r1, [pc, #56]	; (b41d4 <_Z21getAirQualityReadingsv+0x4c>)
  }
  else if (airQualityVal == AirQualitySensor:: FRESH_AIR) {
    airQuality = "Fresh Air";
  }
  else {
    airQuality = "Reading Unsuccessful";
   b419a:	480f      	ldr	r0, [pc, #60]	; (b41d8 <_Z21getAirQualityReadingsv+0x50>)
  }

}
   b419c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    airQuality = "Reading Unsuccessful";
   b41a0:	f002 b94d 	b.w	b643e <_ZN6StringaSEPKc>
  else if (airQualityVal == AirQualitySensor:: HIGH_POLLUTION) {
   b41a4:	4b0d      	ldr	r3, [pc, #52]	; (b41dc <_Z21getAirQualityReadingsv+0x54>)
   b41a6:	681b      	ldr	r3, [r3, #0]
   b41a8:	4283      	cmp	r3, r0
   b41aa:	d101      	bne.n	b41b0 <_Z21getAirQualityReadingsv+0x28>
    airQuality = "High Polution";
   b41ac:	490c      	ldr	r1, [pc, #48]	; (b41e0 <_Z21getAirQualityReadingsv+0x58>)
   b41ae:	e7f4      	b.n	b419a <_Z21getAirQualityReadingsv+0x12>
  else if (airQualityVal == AirQualitySensor:: LOW_POLLUTION) {
   b41b0:	4b0c      	ldr	r3, [pc, #48]	; (b41e4 <_Z21getAirQualityReadingsv+0x5c>)
   b41b2:	681b      	ldr	r3, [r3, #0]
   b41b4:	4283      	cmp	r3, r0
   b41b6:	d101      	bne.n	b41bc <_Z21getAirQualityReadingsv+0x34>
    airQuality = "Low Polution";
   b41b8:	490b      	ldr	r1, [pc, #44]	; (b41e8 <_Z21getAirQualityReadingsv+0x60>)
   b41ba:	e7ee      	b.n	b419a <_Z21getAirQualityReadingsv+0x12>
  else if (airQualityVal == AirQualitySensor:: FRESH_AIR) {
   b41bc:	4b0b      	ldr	r3, [pc, #44]	; (b41ec <_Z21getAirQualityReadingsv+0x64>)
   b41be:	681b      	ldr	r3, [r3, #0]
   b41c0:	4283      	cmp	r3, r0
    airQuality = "Fresh Air";
   b41c2:	bf0c      	ite	eq
   b41c4:	490a      	ldreq	r1, [pc, #40]	; (b41f0 <_Z21getAirQualityReadingsv+0x68>)
    airQuality = "Reading Unsuccessful";
   b41c6:	490b      	ldrne	r1, [pc, #44]	; (b41f4 <_Z21getAirQualityReadingsv+0x6c>)
   b41c8:	e7e7      	b.n	b419a <_Z21getAirQualityReadingsv+0x12>
   b41ca:	bf00      	nop
   b41cc:	2003e630 	.word	0x2003e630
   b41d0:	000b8edc 	.word	0x000b8edc
   b41d4:	000b8d54 	.word	0x000b8d54
   b41d8:	2003e61c 	.word	0x2003e61c
   b41dc:	000b8ee4 	.word	0x000b8ee4
   b41e0:	000b8d64 	.word	0x000b8d64
   b41e4:	000b8ee0 	.word	0x000b8ee0
   b41e8:	000b8d72 	.word	0x000b8d72
   b41ec:	000b8ee8 	.word	0x000b8ee8
   b41f0:	000b8d7f 	.word	0x000b8d7f
   b41f4:	000b8d89 	.word	0x000b8d89

000b41f8 <_Z21getDustSensorReadingsv>:
double ratio = 0;
double concentration = 0;



void getDustSensorReadings(){
   b41f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (lowpulseoccupancy == 0){
   b41fc:	4c3c      	ldr	r4, [pc, #240]	; (b42f0 <_Z21getDustSensorReadingsv+0xf8>)
   b41fe:	4b3d      	ldr	r3, [pc, #244]	; (b42f4 <_Z21getDustSensorReadingsv+0xfc>)
   b4200:	6822      	ldr	r2, [r4, #0]
   b4202:	2a00      	cmp	r2, #0
   b4204:	d15b      	bne.n	b42be <_Z21getDustSensorReadingsv+0xc6>
    lowpulseoccupancy = last_lpo;
   b4206:	681b      	ldr	r3, [r3, #0]
   b4208:	6023      	str	r3, [r4, #0]
  }
  else{
    last_lpo = lowpulseoccupancy;
  }

  ratio = lowpulseoccupancy / (SENSOR_READING_INTERVAL * 10.0);
   b420a:	6820      	ldr	r0, [r4, #0]
   b420c:	f8df a0fc 	ldr.w	sl, [pc, #252]	; b430c <_Z21getDustSensorReadingsv+0x114>
  concentration = 1.1 * pow(ratio, 3) - 3.8 * pow(ratio, 2) + 520 * ratio + 0.62;
   b4210:	4d39      	ldr	r5, [pc, #228]	; (b42f8 <_Z21getDustSensorReadingsv+0x100>)
  ratio = lowpulseoccupancy / (SENSOR_READING_INTERVAL * 10.0);
   b4212:	f003 fe35 	bl	b7e80 <__aeabi_ui2d>
   b4216:	a32c      	add	r3, pc, #176	; (adr r3, b42c8 <_Z21getDustSensorReadingsv+0xd0>)
   b4218:	e9d3 2300 	ldrd	r2, r3, [r3]
   b421c:	f003 ffd4 	bl	b81c8 <__aeabi_ddiv>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   b4220:	ed9f 1b2b 	vldr	d1, [pc, #172]	; b42d0 <_Z21getDustSensorReadingsv+0xd8>
   b4224:	ec41 0b10 	vmov	d0, r0, r1
   b4228:	e9ca 0100 	strd	r0, r1, [sl]
   b422c:	f002 fc60 	bl	b6af0 <pow>
  concentration = 1.1 * pow(ratio, 3) - 3.8 * pow(ratio, 2) + 520 * ratio + 0.62;
   b4230:	a329      	add	r3, pc, #164	; (adr r3, b42d8 <_Z21getDustSensorReadingsv+0xe0>)
   b4232:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4236:	ec51 0b10 	vmov	r0, r1, d0
   b423a:	f003 fe9b 	bl	b7f74 <__aeabi_dmul>
   b423e:	e9da 8900 	ldrd	r8, r9, [sl]
   b4242:	4606      	mov	r6, r0
   b4244:	460f      	mov	r7, r1
   b4246:	4642      	mov	r2, r8
   b4248:	464b      	mov	r3, r9
   b424a:	4640      	mov	r0, r8
   b424c:	4649      	mov	r1, r9
   b424e:	f003 fe91 	bl	b7f74 <__aeabi_dmul>
   b4252:	a323      	add	r3, pc, #140	; (adr r3, b42e0 <_Z21getDustSensorReadingsv+0xe8>)
   b4254:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4258:	f003 fe8c 	bl	b7f74 <__aeabi_dmul>
   b425c:	4602      	mov	r2, r0
   b425e:	460b      	mov	r3, r1
   b4260:	4630      	mov	r0, r6
   b4262:	4639      	mov	r1, r7
   b4264:	f003 fcce 	bl	b7c04 <__aeabi_dsub>
   b4268:	4b24      	ldr	r3, [pc, #144]	; (b42fc <_Z21getDustSensorReadingsv+0x104>)
   b426a:	4606      	mov	r6, r0
   b426c:	460f      	mov	r7, r1
   b426e:	2200      	movs	r2, #0
   b4270:	4640      	mov	r0, r8
   b4272:	4649      	mov	r1, r9
   b4274:	f003 fe7e 	bl	b7f74 <__aeabi_dmul>
   b4278:	4602      	mov	r2, r0
   b427a:	460b      	mov	r3, r1
   b427c:	4630      	mov	r0, r6
   b427e:	4639      	mov	r1, r7
   b4280:	f003 fcc2 	bl	b7c08 <__adddf3>
   b4284:	a318      	add	r3, pc, #96	; (adr r3, b42e8 <_Z21getDustSensorReadingsv+0xf0>)
   b4286:	e9d3 2300 	ldrd	r2, r3, [r3]
   b428a:	f003 fcbd 	bl	b7c08 <__adddf3>
   b428e:	e9c5 0100 	strd	r0, r1, [r5]



  Serial.printlnf("LPO: %lu", lowpulseoccupancy);
   b4292:	f002 f9c5 	bl	b6620 <_Z16_fetch_usbserialv>
   b4296:	6822      	ldr	r2, [r4, #0]
   b4298:	4919      	ldr	r1, [pc, #100]	; (b4300 <_Z21getDustSensorReadingsv+0x108>)
   b429a:	f7ff ff37 	bl	b410c <_ZN5Print8printlnfEPKcz>
  Serial.printlnf("Ratio: %f%%", ratio);
   b429e:	f002 f9bf 	bl	b6620 <_Z16_fetch_usbserialv>
   b42a2:	e9da 2300 	ldrd	r2, r3, [sl]
   b42a6:	4917      	ldr	r1, [pc, #92]	; (b4304 <_Z21getDustSensorReadingsv+0x10c>)
   b42a8:	f7ff ff30 	bl	b410c <_ZN5Print8printlnfEPKcz>
  Serial.printlnf("Concentration: %f pcs/L", concentration);
   b42ac:	f002 f9b8 	bl	b6620 <_Z16_fetch_usbserialv>
   b42b0:	e9d5 2300 	ldrd	r2, r3, [r5]
   b42b4:	4914      	ldr	r1, [pc, #80]	; (b4308 <_Z21getDustSensorReadingsv+0x110>)
   b42b6:	f7ff ff29 	bl	b410c <_ZN5Print8printlnfEPKcz>
}
   b42ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    last_lpo = lowpulseoccupancy;
   b42be:	601a      	str	r2, [r3, #0]
   b42c0:	e7a3      	b.n	b420a <_Z21getDustSensorReadingsv+0x12>
   b42c2:	bf00      	nop
   b42c4:	f3af 8000 	nop.w
   b42c8:	00000000 	.word	0x00000000
   b42cc:	41124f80 	.word	0x41124f80
   b42d0:	00000000 	.word	0x00000000
   b42d4:	40080000 	.word	0x40080000
   b42d8:	9999999a 	.word	0x9999999a
   b42dc:	3ff19999 	.word	0x3ff19999
   b42e0:	66666666 	.word	0x66666666
   b42e4:	400e6666 	.word	0x400e6666
   b42e8:	3d70a3d7 	.word	0x3d70a3d7
   b42ec:	3fe3d70a 	.word	0x3fe3d70a
   b42f0:	2003e6a8 	.word	0x2003e6a8
   b42f4:	2003e6a4 	.word	0x2003e6a4
   b42f8:	2003e690 	.word	0x2003e690
   b42fc:	40804000 	.word	0x40804000
   b4300:	000b8d9e 	.word	0x000b8d9e
   b4304:	000b8da7 	.word	0x000b8da7
   b4308:	000b8db3 	.word	0x000b8db3
   b430c:	2003e6b0 	.word	0x2003e6b0

000b4310 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b4310:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b4312:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b4314:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b4316:	b17c      	cbz	r4, b4338 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b4318:	6863      	ldr	r3, [r4, #4]
   b431a:	3b01      	subs	r3, #1
   b431c:	6063      	str	r3, [r4, #4]
   b431e:	b95b      	cbnz	r3, b4338 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b4320:	6823      	ldr	r3, [r4, #0]
   b4322:	4620      	mov	r0, r4
   b4324:	689b      	ldr	r3, [r3, #8]
   b4326:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4328:	68a3      	ldr	r3, [r4, #8]
   b432a:	3b01      	subs	r3, #1
   b432c:	60a3      	str	r3, [r4, #8]
   b432e:	b91b      	cbnz	r3, b4338 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b4330:	6823      	ldr	r3, [r4, #0]
   b4332:	4620      	mov	r0, r4
   b4334:	68db      	ldr	r3, [r3, #12]
   b4336:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b4338:	4628      	mov	r0, r5
   b433a:	bd38      	pop	{r3, r4, r5, pc}

000b433c <setup>:

void setup() {
   b433c:	b510      	push	{r4, lr}
  bme.begin();
   b433e:	482c      	ldr	r0, [pc, #176]	; (b43f0 <setup+0xb4>)
void setup() {
   b4340:	b086      	sub	sp, #24
  bme.begin();
   b4342:	f000 fe46 	bl	b4fd2 <_ZN15Adafruit_BME2805beginEv>

  Serial.begin(9600);
   b4346:	f002 f96b 	bl	b6620 <_Z16_fetch_usbserialv>
   b434a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b434e:	f002 f95b 	bl	b6608 <_ZN9USBSerial5beginEl>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b4352:	4928      	ldr	r1, [pc, #160]	; (b43f4 <setup+0xb8>)
   b4354:	4828      	ldr	r0, [pc, #160]	; (b43f8 <setup+0xbc>)
   b4356:	2300      	movs	r3, #0
   b4358:	2202      	movs	r2, #2
   b435a:	f001 f845 	bl	b53e8 <spark_variable>
   b435e:	4927      	ldr	r1, [pc, #156]	; (b43fc <setup+0xc0>)
   b4360:	4827      	ldr	r0, [pc, #156]	; (b4400 <setup+0xc4>)
   b4362:	2300      	movs	r3, #0
   b4364:	2202      	movs	r2, #2
   b4366:	f001 f83f 	bl	b53e8 <spark_variable>
   b436a:	4926      	ldr	r1, [pc, #152]	; (b4404 <setup+0xc8>)
   b436c:	4826      	ldr	r0, [pc, #152]	; (b4408 <setup+0xcc>)
   b436e:	2300      	movs	r3, #0
   b4370:	2202      	movs	r2, #2
   b4372:	f001 f839 	bl	b53e8 <spark_variable>
   b4376:	4925      	ldr	r1, [pc, #148]	; (b440c <setup+0xd0>)
   b4378:	4825      	ldr	r0, [pc, #148]	; (b4410 <setup+0xd4>)
   b437a:	2300      	movs	r3, #0
   b437c:	2202      	movs	r2, #2
   b437e:	f001 f833 	bl	b53e8 <spark_variable>
        spark_variable_t extra = {};
   b4382:	2400      	movs	r4, #0
        extra.size = sizeof(extra);
   b4384:	230c      	movs	r3, #12
        spark_variable_t extra = {};
   b4386:	9403      	str	r4, [sp, #12]
        extra.size = sizeof(extra);
   b4388:	f8ad 300c 	strh.w	r3, [sp, #12]
        extra.update = update_string_variable;
   b438c:	4b21      	ldr	r3, [pc, #132]	; (b4414 <setup+0xd8>)
   b438e:	9304      	str	r3, [sp, #16]
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
   b4390:	4921      	ldr	r1, [pc, #132]	; (b4418 <setup+0xdc>)
   b4392:	4822      	ldr	r0, [pc, #136]	; (b441c <setup+0xe0>)
        spark_variable_t extra = {};
   b4394:	9405      	str	r4, [sp, #20]
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
   b4396:	ab03      	add	r3, sp, #12
   b4398:	2204      	movs	r2, #4
   b439a:	f001 f825 	bl	b53e8 <spark_variable>
        return spark_variable(varKey, (const void*)userVar, CloudVariableTypeInt::TYPE_ID, NULL);
   b439e:	4623      	mov	r3, r4
   b43a0:	491f      	ldr	r1, [pc, #124]	; (b4420 <setup+0xe4>)
   b43a2:	4820      	ldr	r0, [pc, #128]	; (b4424 <setup+0xe8>)
   b43a4:	2202      	movs	r2, #2
   b43a6:	f001 f81f 	bl	b53e8 <spark_variable>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b43aa:	4623      	mov	r3, r4
   b43ac:	491e      	ldr	r1, [pc, #120]	; (b4428 <setup+0xec>)
   b43ae:	481f      	ldr	r0, [pc, #124]	; (b442c <setup+0xf0>)
   b43b0:	2209      	movs	r2, #9
   b43b2:	f001 f819 	bl	b53e8 <spark_variable>
   b43b6:	4623      	mov	r3, r4
   b43b8:	491d      	ldr	r1, [pc, #116]	; (b4430 <setup+0xf4>)
   b43ba:	481e      	ldr	r0, [pc, #120]	; (b4434 <setup+0xf8>)
   b43bc:	2209      	movs	r2, #9
   b43be:	f001 f813 	bl	b53e8 <spark_variable>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b43c2:	4b1d      	ldr	r3, [pc, #116]	; (b4438 <setup+0xfc>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b43c4:	491d      	ldr	r1, [pc, #116]	; (b443c <setup+0x100>)
   b43c6:	781b      	ldrb	r3, [r3, #0]
   b43c8:	f88d 3000 	strb.w	r3, [sp]
   b43cc:	4622      	mov	r2, r4
   b43ce:	233c      	movs	r3, #60	; 0x3c
   b43d0:	a803      	add	r0, sp, #12
   b43d2:	f001 fa37 	bl	b5844 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b43d6:	a804      	add	r0, sp, #16
   b43d8:	f7ff ff9a 	bl	b4310 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  Particle.variable("lpo", lowpulseoccupancy);
  Particle.variable("ratio", ratio);
  Particle.variable("conc", concentration);

  Particle.publish("Weather Station Online :)");
  pinMode(DUST_SENSOR_PIN, INPUT);
   b43dc:	4621      	mov	r1, r4
   b43de:	2011      	movs	r0, #17
   b43e0:	f002 faa8 	bl	b6934 <pinMode>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b43e4:	f000 fe64 	bl	b50b0 <HAL_Timer_Get_Milli_Seconds>
  lastInterval = millis();
   b43e8:	4b15      	ldr	r3, [pc, #84]	; (b4440 <setup+0x104>)
   b43ea:	6018      	str	r0, [r3, #0]
}
   b43ec:	b006      	add	sp, #24
   b43ee:	bd10      	pop	{r4, pc}
   b43f0:	2003e64c 	.word	0x2003e64c
   b43f4:	2003e6b8 	.word	0x2003e6b8
   b43f8:	000b8dcb 	.word	0x000b8dcb
   b43fc:	2003e69c 	.word	0x2003e69c
   b4400:	000b8dd0 	.word	0x000b8dd0
   b4404:	2003e6ac 	.word	0x2003e6ac
   b4408:	000b8dd9 	.word	0x000b8dd9
   b440c:	2003e62c 	.word	0x2003e62c
   b4410:	000b8de2 	.word	0x000b8de2
   b4414:	000b40b3 	.word	0x000b40b3
   b4418:	2003e61c 	.word	0x2003e61c
   b441c:	000b8deb 	.word	0x000b8deb
   b4420:	2003e6a8 	.word	0x2003e6a8
   b4424:	000b8df6 	.word	0x000b8df6
   b4428:	2003e6b0 	.word	0x2003e6b0
   b442c:	000b8dfa 	.word	0x000b8dfa
   b4430:	2003e690 	.word	0x2003e690
   b4434:	000b8e00 	.word	0x000b8e00
   b4438:	2003e618 	.word	0x2003e618
   b443c:	000b8e05 	.word	0x000b8e05
   b4440:	2003e6a0 	.word	0x2003e6a0

000b4444 <loop>:


void loop() {
   b4444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4448:	b086      	sub	sp, #24

  getBarometerReadings();
   b444a:	f7ff fe6d 	bl	b4128 <_Z20getBarometerReadingsv>
  getAirQualityReadings();
   b444e:	f7ff fe9b 	bl	b4188 <_Z21getAirQualityReadingsv>
  


  duration = pulseIn(DUST_SENSOR_PIN, LOW);
   b4452:	2100      	movs	r1, #0
   b4454:	2011      	movs	r0, #17
   b4456:	f002 fac1 	bl	b69dc <pulseIn>
   b445a:	4d5f      	ldr	r5, [pc, #380]	; (b45d8 <loop+0x194>)
  Serial.print("Duration: ");
  Serial.print(duration);
  lowpulseoccupancy = lowpulseoccupancy + duration;
   b445c:	4c5f      	ldr	r4, [pc, #380]	; (b45dc <loop+0x198>)
  duration = pulseIn(DUST_SENSOR_PIN, LOW);
   b445e:	6028      	str	r0, [r5, #0]
  Serial.print("Duration: ");
   b4460:	f002 f8de 	bl	b6620 <_Z16_fetch_usbserialv>
   b4464:	495e      	ldr	r1, [pc, #376]	; (b45e0 <loop+0x19c>)
   b4466:	f001 fd79 	bl	b5f5c <_ZN5Print5printEPKc>
  Serial.print(duration);
   b446a:	f002 f8d9 	bl	b6620 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   b446e:	6829      	ldr	r1, [r5, #0]
   b4470:	220a      	movs	r2, #10
   b4472:	f001 fd90 	bl	b5f96 <_ZN5Print11printNumberEmh>
  lowpulseoccupancy = lowpulseoccupancy + duration;
   b4476:	6823      	ldr	r3, [r4, #0]
   b4478:	682a      	ldr	r2, [r5, #0]

  if ((millis() - lastInterval) > SENSOR_READING_INTERVAL)
   b447a:	4d5a      	ldr	r5, [pc, #360]	; (b45e4 <loop+0x1a0>)
  lowpulseoccupancy = lowpulseoccupancy + duration;
   b447c:	4413      	add	r3, r2
   b447e:	6023      	str	r3, [r4, #0]
   b4480:	f000 fe16 	bl	b50b0 <HAL_Timer_Get_Milli_Seconds>
  if ((millis() - lastInterval) > SENSOR_READING_INTERVAL)
   b4484:	682b      	ldr	r3, [r5, #0]
   b4486:	1ac0      	subs	r0, r0, r3
   b4488:	f247 5330 	movw	r3, #30000	; 0x7530
   b448c:	4298      	cmp	r0, r3
   b448e:	d906      	bls.n	b449e <loop+0x5a>
  {
    getDustSensorReadings();
   b4490:	f7ff feb2 	bl	b41f8 <_Z21getDustSensorReadingsv>

    lowpulseoccupancy = 0;
   b4494:	2300      	movs	r3, #0
   b4496:	6023      	str	r3, [r4, #0]
   b4498:	f000 fe0a 	bl	b50b0 <HAL_Timer_Get_Milli_Seconds>
    lastInterval = millis();
   b449c:	6028      	str	r0, [r5, #0]
  }

  Particle.publish("Altitude: ", String(altitude));
   b449e:	4d52      	ldr	r5, [pc, #328]	; (b45e8 <loop+0x1a4>)
  Particle.publish("Temperature: ", String(temp));
   b44a0:	f8df 8170 	ldr.w	r8, [pc, #368]	; b4614 <loop+0x1d0>
  Particle.publish("Altitude: ", String(altitude));
   b44a4:	6829      	ldr	r1, [r5, #0]
  Particle.publish("Humidity: ", String(humidity));
   b44a6:	4f51      	ldr	r7, [pc, #324]	; (b45ec <loop+0x1a8>)
  Particle.publish("Pressure: ", String(pressure));
   b44a8:	4e51      	ldr	r6, [pc, #324]	; (b45f0 <loop+0x1ac>)
  Particle.publish("Air Quality: ", String(airQuality));
   b44aa:	4c52      	ldr	r4, [pc, #328]	; (b45f4 <loop+0x1b0>)
  Particle.publish("Altitude: ", String(altitude));
   b44ac:	220a      	movs	r2, #10
   b44ae:	a802      	add	r0, sp, #8
   b44b0:	f001 ffd7 	bl	b6462 <_ZN6StringC1Eih>
   b44b4:	9a02      	ldr	r2, [sp, #8]
   b44b6:	4950      	ldr	r1, [pc, #320]	; (b45f8 <loop+0x1b4>)
   b44b8:	4668      	mov	r0, sp
   b44ba:	f7ff fe19 	bl	b40f0 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b44be:	a801      	add	r0, sp, #4
   b44c0:	f7ff ff26 	bl	b4310 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b44c4:	a802      	add	r0, sp, #8
   b44c6:	f001 ff41 	bl	b634c <_ZN6StringD1Ev>
  Particle.publish("Temperature: ", String(temp));
   b44ca:	f8d8 1000 	ldr.w	r1, [r8]
   b44ce:	220a      	movs	r2, #10
   b44d0:	a802      	add	r0, sp, #8
   b44d2:	f001 ffc6 	bl	b6462 <_ZN6StringC1Eih>
   b44d6:	9a02      	ldr	r2, [sp, #8]
   b44d8:	4948      	ldr	r1, [pc, #288]	; (b45fc <loop+0x1b8>)
   b44da:	4668      	mov	r0, sp
   b44dc:	f7ff fe08 	bl	b40f0 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b44e0:	a801      	add	r0, sp, #4
   b44e2:	f7ff ff15 	bl	b4310 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b44e6:	a802      	add	r0, sp, #8
   b44e8:	f001 ff30 	bl	b634c <_ZN6StringD1Ev>
  Particle.publish("Humidity: ", String(humidity));
   b44ec:	6839      	ldr	r1, [r7, #0]
   b44ee:	220a      	movs	r2, #10
   b44f0:	a802      	add	r0, sp, #8
   b44f2:	f001 ffb6 	bl	b6462 <_ZN6StringC1Eih>
   b44f6:	9a02      	ldr	r2, [sp, #8]
   b44f8:	4941      	ldr	r1, [pc, #260]	; (b4600 <loop+0x1bc>)
   b44fa:	4668      	mov	r0, sp
   b44fc:	f7ff fdf8 	bl	b40f0 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b4500:	a801      	add	r0, sp, #4
   b4502:	f7ff ff05 	bl	b4310 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4506:	a802      	add	r0, sp, #8
   b4508:	f001 ff20 	bl	b634c <_ZN6StringD1Ev>
  Particle.publish("Pressure: ", String(pressure));
   b450c:	6831      	ldr	r1, [r6, #0]
   b450e:	220a      	movs	r2, #10
   b4510:	a802      	add	r0, sp, #8
   b4512:	f001 ffa6 	bl	b6462 <_ZN6StringC1Eih>
   b4516:	9a02      	ldr	r2, [sp, #8]
   b4518:	493a      	ldr	r1, [pc, #232]	; (b4604 <loop+0x1c0>)
   b451a:	4668      	mov	r0, sp
   b451c:	f7ff fde8 	bl	b40f0 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b4520:	a801      	add	r0, sp, #4
   b4522:	f7ff fef5 	bl	b4310 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4526:	a802      	add	r0, sp, #8
   b4528:	f001 ff10 	bl	b634c <_ZN6StringD1Ev>
  Particle.publish("Air Quality: ", String(airQuality));
   b452c:	4621      	mov	r1, r4
   b452e:	a802      	add	r0, sp, #8
   b4530:	f001 ff7a 	bl	b6428 <_ZN6StringC1ERKS_>
   b4534:	9a02      	ldr	r2, [sp, #8]
   b4536:	4934      	ldr	r1, [pc, #208]	; (b4608 <loop+0x1c4>)
   b4538:	4668      	mov	r0, sp
   b453a:	f7ff fdd9 	bl	b40f0 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b453e:	a801      	add	r0, sp, #4
   b4540:	f7ff fee6 	bl	b4310 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4544:	a802      	add	r0, sp, #8
   b4546:	f001 ff01 	bl	b634c <_ZN6StringD1Ev>
  //Particle.publish("Dust concentration: ", String(concentration));
  
  Serial.print("Temperature: ");
   b454a:	f002 f869 	bl	b6620 <_Z16_fetch_usbserialv>
   b454e:	492b      	ldr	r1, [pc, #172]	; (b45fc <loop+0x1b8>)
   b4550:	f001 fd04 	bl	b5f5c <_ZN5Print5printEPKc>
  Serial.println(temp);
   b4554:	f002 f864 	bl	b6620 <_Z16_fetch_usbserialv>
   b4558:	220a      	movs	r2, #10
   b455a:	f8d8 1000 	ldr.w	r1, [r8]
   b455e:	f7ff fdaa 	bl	b40b6 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>

  Serial.print("Humidity: ");
   b4562:	f002 f85d 	bl	b6620 <_Z16_fetch_usbserialv>
   b4566:	4926      	ldr	r1, [pc, #152]	; (b4600 <loop+0x1bc>)
   b4568:	f001 fcf8 	bl	b5f5c <_ZN5Print5printEPKc>
  Serial.println(humidity);
   b456c:	f002 f858 	bl	b6620 <_Z16_fetch_usbserialv>
   b4570:	220a      	movs	r2, #10
   b4572:	6839      	ldr	r1, [r7, #0]
   b4574:	f7ff fd9f 	bl	b40b6 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>

  Serial.print("Pressure: ");
   b4578:	f002 f852 	bl	b6620 <_Z16_fetch_usbserialv>
   b457c:	4921      	ldr	r1, [pc, #132]	; (b4604 <loop+0x1c0>)
   b457e:	f001 fced 	bl	b5f5c <_ZN5Print5printEPKc>
  Serial.println(pressure);
   b4582:	f002 f84d 	bl	b6620 <_Z16_fetch_usbserialv>
   b4586:	220a      	movs	r2, #10
   b4588:	6831      	ldr	r1, [r6, #0]
   b458a:	f7ff fd94 	bl	b40b6 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>

  Serial.print("Altitude: ");
   b458e:	f002 f847 	bl	b6620 <_Z16_fetch_usbserialv>
   b4592:	4919      	ldr	r1, [pc, #100]	; (b45f8 <loop+0x1b4>)
   b4594:	f001 fce2 	bl	b5f5c <_ZN5Print5printEPKc>
  Serial.println(altitude);
   b4598:	f002 f842 	bl	b6620 <_Z16_fetch_usbserialv>
   b459c:	220a      	movs	r2, #10
   b459e:	6829      	ldr	r1, [r5, #0]
   b45a0:	f7ff fd89 	bl	b40b6 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>

  Serial.print("Air Quality: ");
   b45a4:	f002 f83c 	bl	b6620 <_Z16_fetch_usbserialv>
   b45a8:	4917      	ldr	r1, [pc, #92]	; (b4608 <loop+0x1c4>)
   b45aa:	f001 fcd7 	bl	b5f5c <_ZN5Print5printEPKc>
  Serial.println(airQuality);
   b45ae:	f002 f837 	bl	b6620 <_Z16_fetch_usbserialv>
   b45b2:	6821      	ldr	r1, [r4, #0]
   b45b4:	f001 fce5 	bl	b5f82 <_ZN5Print7printlnEPKc>

  Serial.print("Dust concentration: ");
   b45b8:	f002 f832 	bl	b6620 <_Z16_fetch_usbserialv>
   b45bc:	4913      	ldr	r1, [pc, #76]	; (b460c <loop+0x1c8>)
   b45be:	f001 fccd 	bl	b5f5c <_ZN5Print5printEPKc>
  Serial.println(concentration);
   b45c2:	f002 f82d 	bl	b6620 <_Z16_fetch_usbserialv>
   b45c6:	4b12      	ldr	r3, [pc, #72]	; (b4610 <loop+0x1cc>)
   b45c8:	ed93 0b00 	vldr	d0, [r3]
   b45cc:	2102      	movs	r1, #2

   b45ce:	b006      	add	sp, #24
   b45d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  Serial.println(concentration);
   b45d4:	f001 bdc6 	b.w	b6164 <_ZN5Print7printlnEdi>
   b45d8:	2003e698 	.word	0x2003e698
   b45dc:	2003e6a8 	.word	0x2003e6a8
   b45e0:	000b8e1f 	.word	0x000b8e1f
   b45e4:	2003e6a0 	.word	0x2003e6a0
   b45e8:	2003e62c 	.word	0x2003e62c
   b45ec:	2003e69c 	.word	0x2003e69c
   b45f0:	2003e6ac 	.word	0x2003e6ac
   b45f4:	2003e61c 	.word	0x2003e61c
   b45f8:	000b8e2a 	.word	0x000b8e2a
   b45fc:	000b8e35 	.word	0x000b8e35
   b4600:	000b8e43 	.word	0x000b8e43
   b4604:	000b8e4e 	.word	0x000b8e4e
   b4608:	000b8e59 	.word	0x000b8e59
   b460c:	000b8e67 	.word	0x000b8e67
   b4610:	2003e690 	.word	0x2003e690
   b4614:	2003e6b8 	.word	0x2003e6b8

000b4618 <_GLOBAL__sub_I_bme>:
   b4618:	b508      	push	{r3, lr}
        val_(val) {
   b461a:	4b08      	ldr	r3, [pc, #32]	; (b463c <_GLOBAL__sub_I_bme+0x24>)
Adafruit_BME280 bme;
   b461c:	4808      	ldr	r0, [pc, #32]	; (b4640 <_GLOBAL__sub_I_bme+0x28>)
   b461e:	2200      	movs	r2, #0
   b4620:	701a      	strb	r2, [r3, #0]
   b4622:	f000 f855 	bl	b46d0 <_ZN15Adafruit_BME280C1Ev>
AirQualitySensor aqSensor(AQS_PIN);
   b4626:	2111      	movs	r1, #17
   b4628:	4806      	ldr	r0, [pc, #24]	; (b4644 <_GLOBAL__sub_I_bme+0x2c>)
   b462a:	f000 fce5 	bl	b4ff8 <_ZN16AirQualitySensorC1Ei>
   b462e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
String airQuality = "Loading";
   b4632:	4905      	ldr	r1, [pc, #20]	; (b4648 <_GLOBAL__sub_I_bme+0x30>)
   b4634:	4805      	ldr	r0, [pc, #20]	; (b464c <_GLOBAL__sub_I_bme+0x34>)
   b4636:	f001 bed4 	b.w	b63e2 <_ZN6StringC1EPK19__FlashStringHelper>
   b463a:	bf00      	nop
   b463c:	2003e618 	.word	0x2003e618
   b4640:	2003e64c 	.word	0x2003e64c
   b4644:	2003e630 	.word	0x2003e630
   b4648:	000b8e7c 	.word	0x000b8e7c
   b464c:	2003e61c 	.word	0x2003e61c

000b4650 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b4650:	4770      	bx	lr

000b4652 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b4652:	b510      	push	{r4, lr}
  }
   b4654:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b4656:	4604      	mov	r4, r0
  }
   b4658:	f7ff fd21 	bl	b409e <_ZdlPvj>
   b465c:	4620      	mov	r0, r4
   b465e:	bd10      	pop	{r4, pc}

000b4660 <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4660:	b40e      	push	{r1, r2, r3}
   b4662:	b503      	push	{r0, r1, lr}
   b4664:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b4666:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4668:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b466c:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b466e:	f001 fd84 	bl	b617a <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b4672:	b002      	add	sp, #8
   b4674:	f85d eb04 	ldr.w	lr, [sp], #4
   b4678:	b003      	add	sp, #12
   b467a:	4770      	bx	lr

000b467c <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b467c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b467e:	4604      	mov	r4, r0
   b4680:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b4682:	7922      	ldrb	r2, [r4, #4]
   b4684:	68a3      	ldr	r3, [r4, #8]
   b4686:	b132      	cbz	r2, b4696 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b4688:	b9a3      	cbnz	r3, b46b4 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b468a:	490b      	ldr	r1, [pc, #44]	; (b46b8 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b468c:	b002      	add	sp, #8
   b468e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b4692:	f001 bc63 	b.w	b5f5c <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4696:	4a09      	ldr	r2, [pc, #36]	; (b46bc <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b4698:	7b26      	ldrb	r6, [r4, #12]
   b469a:	4d09      	ldr	r5, [pc, #36]	; (b46c0 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b469c:	4909      	ldr	r1, [pc, #36]	; (b46c4 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b469e:	7b64      	ldrb	r4, [r4, #13]
   b46a0:	2e01      	cmp	r6, #1
   b46a2:	bf18      	it	ne
   b46a4:	4629      	movne	r1, r5
   b46a6:	e9cd 1400 	strd	r1, r4, [sp]
   b46aa:	4907      	ldr	r1, [pc, #28]	; (b46c8 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b46ac:	f7ff ffd8 	bl	b4660 <_ZN5Print6printfEPKcz>
  }
   b46b0:	b002      	add	sp, #8
   b46b2:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b46b4:	4a05      	ldr	r2, [pc, #20]	; (b46cc <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b46b6:	e7ef      	b.n	b4698 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b46b8:	000b8e95 	.word	0x000b8e95
   b46bc:	000b8e34 	.word	0x000b8e34
   b46c0:	000b8e91 	.word	0x000b8e91
   b46c4:	000b8e8d 	.word	0x000b8e8d
   b46c8:	000b8eab 	.word	0x000b8eab
   b46cc:	000b8e84 	.word	0x000b8e84

000b46d0 <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   b46d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b46d4:	6103      	str	r3, [r0, #16]
{ }
   b46d6:	4770      	bx	lr

000b46d8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b46d8:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b46da:	4c0b      	ldr	r4, [pc, #44]	; (b4708 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b46dc:	7821      	ldrb	r1, [r4, #0]
   b46de:	f3bf 8f5b 	dmb	ish
   b46e2:	f011 0101 	ands.w	r1, r1, #1
   b46e6:	d10b      	bne.n	b4700 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b46e8:	4620      	mov	r0, r4
   b46ea:	9101      	str	r1, [sp, #4]
   b46ec:	f7ff fcd9 	bl	b40a2 <__cxa_guard_acquire>
   b46f0:	9901      	ldr	r1, [sp, #4]
   b46f2:	b128      	cbz	r0, b4700 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b46f4:	4805      	ldr	r0, [pc, #20]	; (b470c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b46f6:	f001 fd7d 	bl	b61f4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b46fa:	4620      	mov	r0, r4
   b46fc:	f7ff fcd6 	bl	b40ac <__cxa_guard_release>
        return instance;
    }
   b4700:	4802      	ldr	r0, [pc, #8]	; (b470c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b4702:	b002      	add	sp, #8
   b4704:	bd10      	pop	{r4, pc}
   b4706:	bf00      	nop
   b4708:	2003e6bc 	.word	0x2003e6bc
   b470c:	2003e6c0 	.word	0x2003e6c0

000b4710 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>:
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
   b4710:	b508      	push	{r3, lr}
        instance().endTransaction();
   b4712:	f7ff ffe1 	bl	b46d8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    }
   b4716:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        instance().endTransaction();
   b471a:	f001 bd89 	b.w	b6230 <_ZN8SPIClass14endTransactionEv>

000b471e <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>:
    int32_t beginTransaction(const particle::SPISettings& settings) {
   b471e:	b507      	push	{r0, r1, r2, lr}
   b4720:	9001      	str	r0, [sp, #4]
        return instance().beginTransaction(settings);
   b4722:	f7ff ffd9 	bl	b46d8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4726:	9901      	ldr	r1, [sp, #4]
    }
   b4728:	b003      	add	sp, #12
   b472a:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().beginTransaction(settings);
   b472e:	f001 bd99 	b.w	b6264 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b4732 <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   b4732:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   b4736:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b473a:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   b473c:	4605      	mov	r5, r0
   b473e:	460f      	mov	r7, r1
    if (_sck == -1)
   b4740:	d106      	bne.n	b4750 <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b4742:	f7ff ffc9 	bl	b46d8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4746:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   b4748:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b474c:	f001 bdf8 	b.w	b6340 <_ZN8SPIClass8transferEh>
    uint8_t reply = 0;
   b4750:	2400      	movs	r4, #0
    for (int i=7; i>=0; i--) {
   b4752:	2607      	movs	r6, #7
        digitalWrite(_mosi, x & (1<<i));
   b4754:	f04f 0801 	mov.w	r8, #1
        digitalWrite(_sck, LOW);
   b4758:	f995 0013 	ldrsb.w	r0, [r5, #19]
   b475c:	2100      	movs	r1, #0
   b475e:	b280      	uxth	r0, r0
   b4760:	f002 f8f9 	bl	b6956 <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   b4764:	f995 0011 	ldrsb.w	r0, [r5, #17]
   b4768:	fa08 f106 	lsl.w	r1, r8, r6
   b476c:	4039      	ands	r1, r7
   b476e:	b280      	uxth	r0, r0
   b4770:	f002 f8f1 	bl	b6956 <digitalWrite>
        digitalWrite(_sck, HIGH);
   b4774:	f995 0013 	ldrsb.w	r0, [r5, #19]
   b4778:	2101      	movs	r1, #1
   b477a:	b280      	uxth	r0, r0
   b477c:	f002 f8eb 	bl	b6956 <digitalWrite>
        if (digitalRead(_miso))
   b4780:	f995 0012 	ldrsb.w	r0, [r5, #18]
        reply <<= 1;
   b4784:	0064      	lsls	r4, r4, #1
        if (digitalRead(_miso))
   b4786:	b280      	uxth	r0, r0
        reply <<= 1;
   b4788:	b2e4      	uxtb	r4, r4
        if (digitalRead(_miso))
   b478a:	f002 f8fd 	bl	b6988 <digitalRead>
   b478e:	b108      	cbz	r0, b4794 <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   b4790:	f044 0401 	orr.w	r4, r4, #1
    for (int i=7; i>=0; i--) {
   b4794:	3e01      	subs	r6, #1
   b4796:	d2df      	bcs.n	b4758 <_ZN15Adafruit_BME2807spixferEh+0x26>
}
   b4798:	4620      	mov	r0, r4
   b479a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b47a0 <_ZN15Adafruit_BME2806write8Ehh>:
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   b47a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   b47a2:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b47a6:	3301      	adds	r3, #1
void Adafruit_BME280::write8(byte reg, byte value) {
   b47a8:	4604      	mov	r4, r0
   b47aa:	460e      	mov	r6, r1
   b47ac:	4615      	mov	r5, r2
    if (_cs == -1) {
   b47ae:	d113      	bne.n	b47d8 <_ZN15Adafruit_BME2806write8Ehh+0x38>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b47b0:	7901      	ldrb	r1, [r0, #4]
   b47b2:	6800      	ldr	r0, [r0, #0]
   b47b4:	f001 fa6c 	bl	b5c90 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b47b8:	6820      	ldr	r0, [r4, #0]
   b47ba:	6803      	ldr	r3, [r0, #0]
   b47bc:	4631      	mov	r1, r6
   b47be:	689b      	ldr	r3, [r3, #8]
   b47c0:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   b47c2:	6820      	ldr	r0, [r4, #0]
   b47c4:	6803      	ldr	r3, [r0, #0]
   b47c6:	4629      	mov	r1, r5
   b47c8:	689b      	ldr	r3, [r3, #8]
   b47ca:	4798      	blx	r3
        _wire -> endTransmission();
   b47cc:	6820      	ldr	r0, [r4, #0]
        spixfer(value);
        digitalWrite(_cs, HIGH);
    if (_sck == -1)
        SPI.endTransaction(); // release the SPI bus
    }
}
   b47ce:	b004      	add	sp, #16
   b47d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        _wire -> endTransmission();
   b47d4:	f001 ba64 	b.w	b5ca0 <_ZN7TwoWire15endTransmissionEv>
        if (_sck == -1)
   b47d8:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b47dc:	3301      	adds	r3, #1
   b47de:	d10c      	bne.n	b47fa <_ZN15Adafruit_BME2806write8Ehh+0x5a>
      dataMode_{dataMode}
   b47e0:	4b16      	ldr	r3, [pc, #88]	; (b483c <_ZN15Adafruit_BME2806write8Ehh+0x9c>)
   b47e2:	9300      	str	r3, [sp, #0]
   b47e4:	2300      	movs	r3, #0
   b47e6:	f88d 3004 	strb.w	r3, [sp, #4]
   b47ea:	4b15      	ldr	r3, [pc, #84]	; (b4840 <_ZN15Adafruit_BME2806write8Ehh+0xa0>)
   b47ec:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b47ee:	4668      	mov	r0, sp
   b47f0:	2301      	movs	r3, #1
   b47f2:	f8ad 300c 	strh.w	r3, [sp, #12]
   b47f6:	f7ff ff92 	bl	b471e <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b47fa:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b47fe:	2100      	movs	r1, #0
   b4800:	b280      	uxth	r0, r0
   b4802:	f002 f8a8 	bl	b6956 <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   b4806:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   b480a:	4620      	mov	r0, r4
   b480c:	f7ff ff91 	bl	b4732 <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   b4810:	4629      	mov	r1, r5
   b4812:	4620      	mov	r0, r4
   b4814:	f7ff ff8d 	bl	b4732 <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   b4818:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b481c:	2101      	movs	r1, #1
   b481e:	b280      	uxth	r0, r0
   b4820:	f002 f899 	bl	b6956 <digitalWrite>
    if (_sck == -1)
   b4824:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b4828:	3301      	adds	r3, #1
   b482a:	d104      	bne.n	b4836 <_ZN15Adafruit_BME2806write8Ehh+0x96>
}
   b482c:	b004      	add	sp, #16
   b482e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        SPI.endTransaction(); // release the SPI bus
   b4832:	f7ff bf6d 	b.w	b4710 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
}
   b4836:	b004      	add	sp, #16
   b4838:	bd70      	pop	{r4, r5, r6, pc}
   b483a:	bf00      	nop
   b483c:	000b8ed0 	.word	0x000b8ed0
   b4840:	0007a120 	.word	0x0007a120

000b4844 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
		 standby_duration  duration) {
   b4844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.osrs_t   = tempSampling;
   b4846:	00db      	lsls	r3, r3, #3
   b4848:	f002 0207 	and.w	r2, r2, #7
   b484c:	f003 0338 	and.w	r3, r3, #56	; 0x38
   b4850:	4313      	orrs	r3, r2
   b4852:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
		 standby_duration  duration) {
   b4856:	f89d 6018 	ldrb.w	r6, [sp, #24]
    _measReg.osrs_t   = tempSampling;
   b485a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    _humReg.osrs_h    = humSampling;
   b485e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 standby_duration  duration) {
   b4862:	f89d 501c 	ldrb.w	r5, [sp, #28]
   b4866:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _humReg.osrs_h    = humSampling;
   b486a:	f366 1347 	bfi	r3, r6, #5, #3
   b486e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.t_sb   = duration;
   b4872:	00ed      	lsls	r5, r5, #3
   b4874:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   b4878:	f007 0707 	and.w	r7, r7, #7
   b487c:	f005 0538 	and.w	r5, r5, #56	; 0x38
   b4880:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   b4884:	433d      	orrs	r5, r7
		 standby_duration  duration) {
   b4886:	4604      	mov	r4, r0
    _configReg.t_sb   = duration;
   b4888:	431d      	orrs	r5, r3
   b488a:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   b488e:	f006 0207 	and.w	r2, r6, #7
   b4892:	21f2      	movs	r1, #242	; 0xf2
   b4894:	f7ff ff84 	bl	b47a0 <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   b4898:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   b489c:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   b48a0:	f002 0107 	and.w	r1, r2, #7
   b48a4:	009b      	lsls	r3, r3, #2
   b48a6:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   b48aa:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   b48ae:	4620      	mov	r0, r4
   b48b0:	21f5      	movs	r1, #245	; 0xf5
   b48b2:	f7ff ff75 	bl	b47a0 <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   b48b6:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   b48ba:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   b48be:	f002 0107 	and.w	r1, r2, #7
   b48c2:	009b      	lsls	r3, r3, #2
   b48c4:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   b48c8:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   b48cc:	4620      	mov	r0, r4
   b48ce:	21f4      	movs	r1, #244	; 0xf4
}
   b48d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   b48d4:	f7ff bf64 	b.w	b47a0 <_ZN15Adafruit_BME2806write8Ehh>

000b48d8 <_ZN15Adafruit_BME2805read8Eh>:
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   b48d8:	b530      	push	{r4, r5, lr}
    uint8_t value;
    
    if (_cs == -1) {
   b48da:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b48de:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::read8(byte reg) {
   b48e0:	b085      	sub	sp, #20
   b48e2:	4604      	mov	r4, r0
   b48e4:	460d      	mov	r5, r1
    if (_cs == -1) {
   b48e6:	d118      	bne.n	b491a <_ZN15Adafruit_BME2805read8Eh+0x42>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b48e8:	7901      	ldrb	r1, [r0, #4]
   b48ea:	6800      	ldr	r0, [r0, #0]
   b48ec:	f001 f9d0 	bl	b5c90 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b48f0:	6820      	ldr	r0, [r4, #0]
   b48f2:	6803      	ldr	r3, [r0, #0]
   b48f4:	4629      	mov	r1, r5
   b48f6:	689b      	ldr	r3, [r3, #8]
   b48f8:	4798      	blx	r3
        _wire -> endTransmission();
   b48fa:	6820      	ldr	r0, [r4, #0]
   b48fc:	f001 f9d0 	bl	b5ca0 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   b4900:	7921      	ldrb	r1, [r4, #4]
   b4902:	6820      	ldr	r0, [r4, #0]
   b4904:	2201      	movs	r2, #1
   b4906:	f001 f9c0 	bl	b5c8a <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   b490a:	6820      	ldr	r0, [r4, #0]
   b490c:	6803      	ldr	r3, [r0, #0]
   b490e:	695b      	ldr	r3, [r3, #20]
   b4910:	4798      	blx	r3
   b4912:	b2c5      	uxtb	r5, r0
        digitalWrite(_cs, HIGH);
        if (_sck == -1)
            SPI.endTransaction(); // release the SPI bus
    }
    return value;
}
   b4914:	4628      	mov	r0, r5
   b4916:	b005      	add	sp, #20
   b4918:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b491a:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b491e:	3301      	adds	r3, #1
   b4920:	d10c      	bne.n	b493c <_ZN15Adafruit_BME2805read8Eh+0x64>
   b4922:	4b15      	ldr	r3, [pc, #84]	; (b4978 <_ZN15Adafruit_BME2805read8Eh+0xa0>)
   b4924:	9300      	str	r3, [sp, #0]
   b4926:	2300      	movs	r3, #0
   b4928:	f88d 3004 	strb.w	r3, [sp, #4]
   b492c:	4b13      	ldr	r3, [pc, #76]	; (b497c <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   b492e:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b4930:	4668      	mov	r0, sp
   b4932:	2301      	movs	r3, #1
   b4934:	f8ad 300c 	strh.w	r3, [sp, #12]
   b4938:	f7ff fef1 	bl	b471e <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b493c:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4940:	2100      	movs	r1, #0
   b4942:	b280      	uxth	r0, r0
   b4944:	f002 f807 	bl	b6956 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b4948:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b494c:	4620      	mov	r0, r4
   b494e:	f7ff fef0 	bl	b4732 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   b4952:	2100      	movs	r1, #0
   b4954:	4620      	mov	r0, r4
   b4956:	f7ff feec 	bl	b4732 <_ZN15Adafruit_BME2807spixferEh>
   b495a:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   b495c:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4960:	2101      	movs	r1, #1
   b4962:	b280      	uxth	r0, r0
   b4964:	f001 fff7 	bl	b6956 <digitalWrite>
        if (_sck == -1)
   b4968:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b496c:	3301      	adds	r3, #1
   b496e:	d1d1      	bne.n	b4914 <_ZN15Adafruit_BME2805read8Eh+0x3c>
            SPI.endTransaction(); // release the SPI bus
   b4970:	f7ff fece 	bl	b4710 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   b4974:	e7ce      	b.n	b4914 <_ZN15Adafruit_BME2805read8Eh+0x3c>
   b4976:	bf00      	nop
   b4978:	000b8ed0 	.word	0x000b8ed0
   b497c:	0007a120 	.word	0x0007a120

000b4980 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
    @brief return true if chip is busy reading cal data
    @returns true if reading calibration, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::isReadingCalibration(void)
{
   b4980:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   b4982:	21f3      	movs	r1, #243	; 0xf3
   b4984:	f7ff ffa8 	bl	b48d8 <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
   b4988:	f000 0001 	and.w	r0, r0, #1
   b498c:	bd08      	pop	{r3, pc}
	...

000b4990 <_ZN15Adafruit_BME2806read16Eh>:
{
   b4990:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   b4992:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b4996:	3301      	adds	r3, #1
{
   b4998:	b085      	sub	sp, #20
   b499a:	4604      	mov	r4, r0
   b499c:	460d      	mov	r5, r1
    if (_cs == -1) {
   b499e:	d11f      	bne.n	b49e0 <_ZN15Adafruit_BME2806read16Eh+0x50>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b49a0:	7901      	ldrb	r1, [r0, #4]
   b49a2:	6800      	ldr	r0, [r0, #0]
   b49a4:	f001 f974 	bl	b5c90 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b49a8:	6820      	ldr	r0, [r4, #0]
   b49aa:	6803      	ldr	r3, [r0, #0]
   b49ac:	4629      	mov	r1, r5
   b49ae:	689b      	ldr	r3, [r3, #8]
   b49b0:	4798      	blx	r3
        _wire -> endTransmission();
   b49b2:	6820      	ldr	r0, [r4, #0]
   b49b4:	f001 f974 	bl	b5ca0 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   b49b8:	7921      	ldrb	r1, [r4, #4]
   b49ba:	6820      	ldr	r0, [r4, #0]
   b49bc:	2202      	movs	r2, #2
   b49be:	f001 f964 	bl	b5c8a <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   b49c2:	6820      	ldr	r0, [r4, #0]
   b49c4:	6803      	ldr	r3, [r0, #0]
   b49c6:	695b      	ldr	r3, [r3, #20]
   b49c8:	4798      	blx	r3
   b49ca:	4605      	mov	r5, r0
   b49cc:	6820      	ldr	r0, [r4, #0]
   b49ce:	6803      	ldr	r3, [r0, #0]
   b49d0:	695b      	ldr	r3, [r3, #20]
   b49d2:	4798      	blx	r3
   b49d4:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   b49d8:	b285      	uxth	r5, r0
}
   b49da:	4628      	mov	r0, r5
   b49dc:	b005      	add	sp, #20
   b49de:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b49e0:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b49e4:	3301      	adds	r3, #1
   b49e6:	d10c      	bne.n	b4a02 <_ZN15Adafruit_BME2806read16Eh+0x72>
   b49e8:	4b18      	ldr	r3, [pc, #96]	; (b4a4c <_ZN15Adafruit_BME2806read16Eh+0xbc>)
   b49ea:	9300      	str	r3, [sp, #0]
   b49ec:	2300      	movs	r3, #0
   b49ee:	f88d 3004 	strb.w	r3, [sp, #4]
   b49f2:	4b17      	ldr	r3, [pc, #92]	; (b4a50 <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   b49f4:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b49f6:	4668      	mov	r0, sp
   b49f8:	2301      	movs	r3, #1
   b49fa:	f8ad 300c 	strh.w	r3, [sp, #12]
   b49fe:	f7ff fe8e 	bl	b471e <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b4a02:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4a06:	2100      	movs	r1, #0
   b4a08:	b280      	uxth	r0, r0
   b4a0a:	f001 ffa4 	bl	b6956 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b4a0e:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b4a12:	4620      	mov	r0, r4
   b4a14:	f7ff fe8d 	bl	b4732 <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   b4a18:	2100      	movs	r1, #0
   b4a1a:	4620      	mov	r0, r4
   b4a1c:	f7ff fe89 	bl	b4732 <_ZN15Adafruit_BME2807spixferEh>
   b4a20:	2100      	movs	r1, #0
   b4a22:	4605      	mov	r5, r0
   b4a24:	4620      	mov	r0, r4
   b4a26:	f7ff fe84 	bl	b4732 <_ZN15Adafruit_BME2807spixferEh>
   b4a2a:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   b4a2e:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   b4a30:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4a34:	2101      	movs	r1, #1
   b4a36:	b280      	uxth	r0, r0
   b4a38:	f001 ff8d 	bl	b6956 <digitalWrite>
        if (_sck == -1)
   b4a3c:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b4a40:	3301      	adds	r3, #1
   b4a42:	d1ca      	bne.n	b49da <_ZN15Adafruit_BME2806read16Eh+0x4a>
            SPI.endTransaction(); // release the SPI bus
   b4a44:	f7ff fe64 	bl	b4710 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   b4a48:	e7c7      	b.n	b49da <_ZN15Adafruit_BME2806read16Eh+0x4a>
   b4a4a:	bf00      	nop
   b4a4c:	000b8ed0 	.word	0x000b8ed0
   b4a50:	0007a120 	.word	0x0007a120

000b4a54 <_ZN15Adafruit_BME2809read16_LEEh>:
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   b4a54:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   b4a56:	f7ff ff9b 	bl	b4990 <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   b4a5a:	ba40      	rev16	r0, r0
}
   b4a5c:	b280      	uxth	r0, r0
   b4a5e:	bd08      	pop	{r3, pc}

000b4a60 <_ZN15Adafruit_BME28016readCoefficientsEv>:
{
   b4a60:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b4a62:	2188      	movs	r1, #136	; 0x88
{
   b4a64:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b4a66:	f7ff fff5 	bl	b4a54 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   b4a6a:	218a      	movs	r1, #138	; 0x8a
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b4a6c:	82a0      	strh	r0, [r4, #20]
    return (int16_t)read16_LE(reg);
   b4a6e:	4620      	mov	r0, r4
   b4a70:	f7ff fff0 	bl	b4a54 <_ZN15Adafruit_BME2809read16_LEEh>
   b4a74:	218c      	movs	r1, #140	; 0x8c
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   b4a76:	82e0      	strh	r0, [r4, #22]
    return (int16_t)read16_LE(reg);
   b4a78:	4620      	mov	r0, r4
   b4a7a:	f7ff ffeb 	bl	b4a54 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b4a7e:	218e      	movs	r1, #142	; 0x8e
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   b4a80:	8320      	strh	r0, [r4, #24]
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b4a82:	4620      	mov	r0, r4
   b4a84:	f7ff ffe6 	bl	b4a54 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   b4a88:	2190      	movs	r1, #144	; 0x90
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b4a8a:	8360      	strh	r0, [r4, #26]
    return (int16_t)read16_LE(reg);
   b4a8c:	4620      	mov	r0, r4
   b4a8e:	f7ff ffe1 	bl	b4a54 <_ZN15Adafruit_BME2809read16_LEEh>
   b4a92:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   b4a94:	83a0      	strh	r0, [r4, #28]
    return (int16_t)read16_LE(reg);
   b4a96:	4620      	mov	r0, r4
   b4a98:	f7ff ffdc 	bl	b4a54 <_ZN15Adafruit_BME2809read16_LEEh>
   b4a9c:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   b4a9e:	83e0      	strh	r0, [r4, #30]
    return (int16_t)read16_LE(reg);
   b4aa0:	4620      	mov	r0, r4
   b4aa2:	f7ff ffd7 	bl	b4a54 <_ZN15Adafruit_BME2809read16_LEEh>
   b4aa6:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   b4aa8:	8420      	strh	r0, [r4, #32]
    return (int16_t)read16_LE(reg);
   b4aaa:	4620      	mov	r0, r4
   b4aac:	f7ff ffd2 	bl	b4a54 <_ZN15Adafruit_BME2809read16_LEEh>
   b4ab0:	2198      	movs	r1, #152	; 0x98
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   b4ab2:	8460      	strh	r0, [r4, #34]	; 0x22
    return (int16_t)read16_LE(reg);
   b4ab4:	4620      	mov	r0, r4
   b4ab6:	f7ff ffcd 	bl	b4a54 <_ZN15Adafruit_BME2809read16_LEEh>
   b4aba:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   b4abc:	84a0      	strh	r0, [r4, #36]	; 0x24
    return (int16_t)read16_LE(reg);
   b4abe:	4620      	mov	r0, r4
   b4ac0:	f7ff ffc8 	bl	b4a54 <_ZN15Adafruit_BME2809read16_LEEh>
   b4ac4:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   b4ac6:	84e0      	strh	r0, [r4, #38]	; 0x26
    return (int16_t)read16_LE(reg);
   b4ac8:	4620      	mov	r0, r4
   b4aca:	f7ff ffc3 	bl	b4a54 <_ZN15Adafruit_BME2809read16_LEEh>
   b4ace:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   b4ad0:	8520      	strh	r0, [r4, #40]	; 0x28
    return (int16_t)read16_LE(reg);
   b4ad2:	4620      	mov	r0, r4
   b4ad4:	f7ff ffbe 	bl	b4a54 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b4ad8:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   b4ada:	8560      	strh	r0, [r4, #42]	; 0x2a
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b4adc:	4620      	mov	r0, r4
   b4ade:	f7ff fefb 	bl	b48d8 <_ZN15Adafruit_BME2805read8Eh>
    return (int16_t)read16_LE(reg);
   b4ae2:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b4ae4:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    return (int16_t)read16_LE(reg);
   b4ae8:	4620      	mov	r0, r4
   b4aea:	f7ff ffb3 	bl	b4a54 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b4aee:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   b4af0:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b4af2:	4620      	mov	r0, r4
   b4af4:	f7ff fef0 	bl	b48d8 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   b4af8:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b4afa:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   b4afe:	4620      	mov	r0, r4
   b4b00:	f7ff feea 	bl	b48d8 <_ZN15Adafruit_BME2805read8Eh>
   b4b04:	21e5      	movs	r1, #229	; 0xe5
   b4b06:	4605      	mov	r5, r0
   b4b08:	4620      	mov	r0, r4
   b4b0a:	f7ff fee5 	bl	b48d8 <_ZN15Adafruit_BME2805read8Eh>
   b4b0e:	f000 030f 	and.w	r3, r0, #15
   b4b12:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   b4b16:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   b4b18:	21e6      	movs	r1, #230	; 0xe6
   b4b1a:	4620      	mov	r0, r4
   b4b1c:	f7ff fedc 	bl	b48d8 <_ZN15Adafruit_BME2805read8Eh>
   b4b20:	21e5      	movs	r1, #229	; 0xe5
   b4b22:	4605      	mov	r5, r0
   b4b24:	4620      	mov	r0, r4
   b4b26:	f7ff fed7 	bl	b48d8 <_ZN15Adafruit_BME2805read8Eh>
   b4b2a:	f3c0 1307 	ubfx	r3, r0, #4, #8
   b4b2e:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   b4b32:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   b4b34:	21e7      	movs	r1, #231	; 0xe7
   b4b36:	4620      	mov	r0, r4
   b4b38:	f7ff fece 	bl	b48d8 <_ZN15Adafruit_BME2805read8Eh>
   b4b3c:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
}
   b4b40:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4b44 <_ZN15Adafruit_BME2806read24Eh>:
{
   b4b44:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   b4b46:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b4b4a:	3301      	adds	r3, #1
{
   b4b4c:	b085      	sub	sp, #20
   b4b4e:	4604      	mov	r4, r0
   b4b50:	460d      	mov	r5, r1
    if (_cs == -1) {
   b4b52:	d123      	bne.n	b4b9c <_ZN15Adafruit_BME2806read24Eh+0x58>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b4b54:	7901      	ldrb	r1, [r0, #4]
   b4b56:	6800      	ldr	r0, [r0, #0]
   b4b58:	f001 f89a 	bl	b5c90 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b4b5c:	6820      	ldr	r0, [r4, #0]
   b4b5e:	6803      	ldr	r3, [r0, #0]
   b4b60:	4629      	mov	r1, r5
   b4b62:	689b      	ldr	r3, [r3, #8]
   b4b64:	4798      	blx	r3
        _wire -> endTransmission();
   b4b66:	6820      	ldr	r0, [r4, #0]
   b4b68:	f001 f89a 	bl	b5ca0 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
   b4b6c:	7921      	ldrb	r1, [r4, #4]
   b4b6e:	6820      	ldr	r0, [r4, #0]
   b4b70:	2203      	movs	r2, #3
   b4b72:	f001 f88a 	bl	b5c8a <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   b4b76:	6820      	ldr	r0, [r4, #0]
   b4b78:	6803      	ldr	r3, [r0, #0]
   b4b7a:	695b      	ldr	r3, [r3, #20]
   b4b7c:	4798      	blx	r3
        value <<= 8;
   b4b7e:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   b4b80:	6820      	ldr	r0, [r4, #0]
   b4b82:	6803      	ldr	r3, [r0, #0]
   b4b84:	695b      	ldr	r3, [r3, #20]
   b4b86:	4798      	blx	r3
   b4b88:	4328      	orrs	r0, r5
        value <<= 8;
   b4b8a:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   b4b8c:	6820      	ldr	r0, [r4, #0]
   b4b8e:	6803      	ldr	r3, [r0, #0]
   b4b90:	695b      	ldr	r3, [r3, #20]
   b4b92:	4798      	blx	r3
   b4b94:	4305      	orrs	r5, r0
}
   b4b96:	4628      	mov	r0, r5
   b4b98:	b005      	add	sp, #20
   b4b9a:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b4b9c:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b4ba0:	3301      	adds	r3, #1
   b4ba2:	d10c      	bne.n	b4bbe <_ZN15Adafruit_BME2806read24Eh+0x7a>
   b4ba4:	4b1a      	ldr	r3, [pc, #104]	; (b4c10 <_ZN15Adafruit_BME2806read24Eh+0xcc>)
   b4ba6:	9300      	str	r3, [sp, #0]
   b4ba8:	2300      	movs	r3, #0
   b4baa:	f88d 3004 	strb.w	r3, [sp, #4]
   b4bae:	4b19      	ldr	r3, [pc, #100]	; (b4c14 <_ZN15Adafruit_BME2806read24Eh+0xd0>)
   b4bb0:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b4bb2:	4668      	mov	r0, sp
   b4bb4:	2301      	movs	r3, #1
   b4bb6:	f8ad 300c 	strh.w	r3, [sp, #12]
   b4bba:	f7ff fdb0 	bl	b471e <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b4bbe:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4bc2:	2100      	movs	r1, #0
   b4bc4:	b280      	uxth	r0, r0
   b4bc6:	f001 fec6 	bl	b6956 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b4bca:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b4bce:	4620      	mov	r0, r4
   b4bd0:	f7ff fdaf 	bl	b4732 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   b4bd4:	2100      	movs	r1, #0
   b4bd6:	4620      	mov	r0, r4
   b4bd8:	f7ff fdab 	bl	b4732 <_ZN15Adafruit_BME2807spixferEh>
        value |= spixfer(0);
   b4bdc:	2100      	movs	r1, #0
        value <<= 8;
   b4bde:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   b4be0:	4620      	mov	r0, r4
   b4be2:	f7ff fda6 	bl	b4732 <_ZN15Adafruit_BME2807spixferEh>
   b4be6:	4328      	orrs	r0, r5
        value <<= 8;
   b4be8:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   b4bea:	2100      	movs	r1, #0
   b4bec:	4620      	mov	r0, r4
   b4bee:	f7ff fda0 	bl	b4732 <_ZN15Adafruit_BME2807spixferEh>
   b4bf2:	4305      	orrs	r5, r0
        digitalWrite(_cs, HIGH);
   b4bf4:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4bf8:	2101      	movs	r1, #1
   b4bfa:	b280      	uxth	r0, r0
   b4bfc:	f001 feab 	bl	b6956 <digitalWrite>
        if (_sck == -1)
   b4c00:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b4c04:	3301      	adds	r3, #1
   b4c06:	d1c6      	bne.n	b4b96 <_ZN15Adafruit_BME2806read24Eh+0x52>
            SPI.endTransaction(); // release the SPI bus
   b4c08:	f7ff fd82 	bl	b4710 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
    return value;
   b4c0c:	e7c3      	b.n	b4b96 <_ZN15Adafruit_BME2806read24Eh+0x52>
   b4c0e:	bf00      	nop
   b4c10:	000b8ed0 	.word	0x000b8ed0
   b4c14:	0007a120 	.word	0x0007a120

000b4c18 <_ZN15Adafruit_BME28015readTemperatureEv>:
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   b4c18:	b510      	push	{r4, lr}
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   b4c1a:	21fa      	movs	r1, #250	; 0xfa
{
   b4c1c:	4604      	mov	r4, r0
    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   b4c1e:	f7ff ff91 	bl	b4b44 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
   b4c22:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b4c26:	d01f      	beq.n	b4c68 <_ZN15Adafruit_BME28015readTemperatureEv+0x50>
        return NAN;
    adc_T >>= 4;

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4c28:	8aa1      	ldrh	r1, [r4, #20]
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   b4c2a:	ed9f 7a11 	vldr	s14, [pc, #68]	; b4c70 <_ZN15Adafruit_BME28015readTemperatureEv+0x58>
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4c2e:	004b      	lsls	r3, r1, #1
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b4c30:	ebc1 2220 	rsb	r2, r1, r0, asr #8
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4c34:	ebc3 11e0 	rsb	r1, r3, r0, asr #7
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
   b4c38:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4c3c:	4359      	muls	r1, r3
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b4c3e:	fb02 f302 	mul.w	r3, r2, r2
            ((int32_t)_bme280_calib.dig_T3)) >> 14;
   b4c42:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
   b4c46:	131b      	asrs	r3, r3, #12
   b4c48:	4353      	muls	r3, r2
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b4c4a:	139b      	asrs	r3, r3, #14
    t_fine = var1 + var2;
   b4c4c:	eb03 23e1 	add.w	r3, r3, r1, asr #11
   b4c50:	60e3      	str	r3, [r4, #12]
    float T = (t_fine * 5 + 128) >> 8;
   b4c52:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b4c56:	3380      	adds	r3, #128	; 0x80
   b4c58:	121b      	asrs	r3, r3, #8
   b4c5a:	ee07 3a90 	vmov	s15, r3
   b4c5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    return T/100;
   b4c62:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   b4c66:	bd10      	pop	{r4, pc}
        return NAN;
   b4c68:	ed9f 0a02 	vldr	s0, [pc, #8]	; b4c74 <_ZN15Adafruit_BME28015readTemperatureEv+0x5c>
   b4c6c:	e7fb      	b.n	b4c66 <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
   b4c6e:	bf00      	nop
   b4c70:	42c80000 	.word	0x42c80000
   b4c74:	7fc00000 	.word	0x7fc00000

000b4c78 <_ZN15Adafruit_BME28012readHumidityEv>:
/*!
    @brief  Returns the humidity from the sensor
    @returns the humidity value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readHumidity(void) {
   b4c78:	b538      	push	{r3, r4, r5, lr}
   b4c7a:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   b4c7c:	f7ff ffcc 	bl	b4c18 <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
   b4c80:	21fd      	movs	r1, #253	; 0xfd
   b4c82:	4620      	mov	r0, r4
   b4c84:	f7ff fe84 	bl	b4990 <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
   b4c88:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   b4c8c:	d038      	beq.n	b4d00 <_ZN15Adafruit_BME28012readHumidityEv+0x88>
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
   b4c8e:	68e1      	ldr	r1, [r4, #12]

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   b4c90:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
    v_x1_u32r = (t_fine - ((int32_t)76800));
   b4c94:	f5a1 3596 	sub.w	r5, r1, #76800	; 0x12c00
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   b4c98:	f9b4 1032 	ldrsh.w	r1, [r4, #50]	; 0x32
   b4c9c:	0509      	lsls	r1, r1, #20
   b4c9e:	ebc1 3380 	rsb	r3, r1, r0, lsl #14
   b4ca2:	fb05 3312 	mls	r3, r5, r2, r3
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   b4ca6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   b4caa:	13da      	asrs	r2, r3, #15
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4cac:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b4cb0:	f994 1036 	ldrsb.w	r1, [r4, #54]	; 0x36
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4cb4:	436b      	muls	r3, r5
   b4cb6:	12db      	asrs	r3, r3, #11
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b4cb8:	4369      	muls	r1, r5
   b4cba:	1289      	asrs	r1, r1, #10
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4cbc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b4cc0:	434b      	muls	r3, r1
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4cc2:	129b      	asrs	r3, r3, #10
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   b4cc4:	f9b4 102e 	ldrsh.w	r1, [r4, #46]	; 0x2e
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4cc8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   b4ccc:	434b      	muls	r3, r1
   b4cce:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   b4cd2:	139b      	asrs	r3, r3, #14
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   b4cd4:	4353      	muls	r3, r2

    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   b4cd6:	13da      	asrs	r2, r3, #15
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
   b4cd8:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   b4cdc:	4352      	muls	r2, r2
   b4cde:	11d2      	asrs	r2, r2, #7
   b4ce0:	434a      	muls	r2, r1
   b4ce2:	eba3 1322 	sub.w	r3, r3, r2, asr #4

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
   b4ce6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
   b4cea:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   b4cee:	bfa8      	it	ge
   b4cf0:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
    float h = (v_x1_u32r>>12);
   b4cf4:	131b      	asrs	r3, r3, #12
   b4cf6:	ee00 3a10 	vmov	s0, r3
    return  h / 1024.0;
   b4cfa:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
}
   b4cfe:	bd38      	pop	{r3, r4, r5, pc}
        return NAN;
   b4d00:	ed9f 0a01 	vldr	s0, [pc, #4]	; b4d08 <_ZN15Adafruit_BME28012readHumidityEv+0x90>
   b4d04:	e7fb      	b.n	b4cfe <_ZN15Adafruit_BME28012readHumidityEv+0x86>
   b4d06:	bf00      	nop
   b4d08:	7fc00000 	.word	0x7fc00000

000b4d0c <_ZN15Adafruit_BME28012readPressureEv>:
float Adafruit_BME280::readPressure(void) {
   b4d0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b4d10:	4605      	mov	r5, r0
    readTemperature(); // must be done first to get t_fine
   b4d12:	f7ff ff81 	bl	b4c18 <_ZN15Adafruit_BME28015readTemperatureEv>
    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   b4d16:	21f7      	movs	r1, #247	; 0xf7
   b4d18:	4628      	mov	r0, r5
   b4d1a:	f7ff ff13 	bl	b4b44 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   b4d1e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b4d22:	f000 80b6 	beq.w	b4e92 <_ZN15Adafruit_BME28012readPressureEv+0x186>
    var1 = ((int64_t)t_fine) - 128000;
   b4d26:	68e9      	ldr	r1, [r5, #12]
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b4d28:	f9b5 301c 	ldrsh.w	r3, [r5, #28]
    var1 = ((int64_t)t_fine) - 128000;
   b4d2c:	ea4f 7ee1 	mov.w	lr, r1, asr #31
   b4d30:	f5b1 31fa 	subs.w	r1, r1, #128000	; 0x1f400
   b4d34:	f14e 3eff 	adc.w	lr, lr, #4294967295	; 0xffffffff
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b4d38:	17dc      	asrs	r4, r3, #31
   b4d3a:	fb03 f20e 	mul.w	r2, r3, lr
   b4d3e:	fb01 2204 	mla	r2, r1, r4, r2
   b4d42:	fba3 3401 	umull	r3, r4, r3, r1
   b4d46:	4422      	add	r2, r4
   b4d48:	0312      	lsls	r2, r2, #12
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b4d4a:	fba1 7801 	umull	r7, r8, r1, r1
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b4d4e:	031c      	lsls	r4, r3, #12
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b4d50:	fb01 f60e 	mul.w	r6, r1, lr
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b4d54:	ea42 5213 	orr.w	r2, r2, r3, lsr #20
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   b4d58:	f9b5 301e 	ldrsh.w	r3, [r5, #30]
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b4d5c:	eb08 0846 	add.w	r8, r8, r6, lsl #1
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   b4d60:	ea4f 7ce3 	mov.w	ip, r3, asr #31
   b4d64:	fb03 f608 	mul.w	r6, r3, r8
   b4d68:	fb07 660c 	mla	r6, r7, ip, r6
   b4d6c:	fba3 3c07 	umull	r3, ip, r3, r7
   b4d70:	4466      	add	r6, ip
   b4d72:	0a1b      	lsrs	r3, r3, #8
   b4d74:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
   b4d78:	191b      	adds	r3, r3, r4
   b4d7a:	eb42 2226 	adc.w	r2, r2, r6, asr #8
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   b4d7e:	8b6e      	ldrh	r6, [r5, #26]
   b4d80:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
   b4d84:	fba3 3406 	umull	r3, r4, r3, r6
   b4d88:	fb06 4402 	mla	r4, r6, r2, r4
   b4d8c:	17e3      	asrs	r3, r4, #31
   b4d8e:	1062      	asrs	r2, r4, #1
    if (var1 == 0) {
   b4d90:	ea53 0464 	orrs.w	r4, r3, r4, asr #1
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   b4d94:	f04f 0c00 	mov.w	ip, #0
    if (var1 == 0) {
   b4d98:	d07e      	beq.n	b4e98 <_ZN15Adafruit_BME28012readPressureEv+0x18c>
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b4d9a:	f9b5 4024 	ldrsh.w	r4, [r5, #36]	; 0x24
   b4d9e:	fb04 f608 	mul.w	r6, r4, r8
   b4da2:	ea4f 79e4 	mov.w	r9, r4, asr #31
   b4da6:	fb07 6609 	mla	r6, r7, r9, r6
   b4daa:	fba4 4707 	umull	r4, r7, r4, r7
   b4dae:	443e      	add	r6, r7
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   b4db0:	f9b5 7022 	ldrsh.w	r7, [r5, #34]	; 0x22
   b4db4:	ea4f 78e7 	mov.w	r8, r7, asr #31
   b4db8:	fb07 fe0e 	mul.w	lr, r7, lr
   b4dbc:	fb01 ee08 	mla	lr, r1, r8, lr
   b4dc0:	fba7 7101 	umull	r7, r1, r7, r1
   b4dc4:	4471      	add	r1, lr
   b4dc6:	0449      	lsls	r1, r1, #17
   b4dc8:	ea41 31d7 	orr.w	r1, r1, r7, lsr #15
    adc_P >>= 4;
   b4dcc:	1100      	asrs	r0, r0, #4
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   b4dce:	047f      	lsls	r7, r7, #17
   b4dd0:	193f      	adds	r7, r7, r4
    p = 1048576 - adc_P;
   b4dd2:	f5c0 1480 	rsb	r4, r0, #1048576	; 0x100000
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   b4dd6:	eb46 0601 	adc.w	r6, r6, r1
    p = (((p<<31) - var2)*3125) / var1;
   b4dda:	f004 4000 	and.w	r0, r4, #2147483648	; 0x80000000
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   b4dde:	f9b5 1020 	ldrsh.w	r1, [r5, #32]
   b4de2:	eb1c 0707 	adds.w	r7, ip, r7
    p = (((p<<31) - var2)*3125) / var1;
   b4de6:	ea40 0054 	orr.w	r0, r0, r4, lsr #1
   b4dea:	07e4      	lsls	r4, r4, #31
   b4dec:	1be4      	subs	r4, r4, r7
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   b4dee:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
    p = (((p<<31) - var2)*3125) / var1;
   b4df2:	f640 4135 	movw	r1, #3125	; 0xc35
   b4df6:	eb60 0606 	sbc.w	r6, r0, r6
   b4dfa:	fba4 0401 	umull	r0, r4, r4, r1
   b4dfe:	fb01 4106 	mla	r1, r1, r6, r4
   b4e02:	f003 fd0d 	bl	b8820 <__aeabi_ldivmod>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   b4e06:	f9b5 202a 	ldrsh.w	r2, [r5, #42]	; 0x2a
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b4e0a:	f9b5 6028 	ldrsh.w	r6, [r5, #40]	; 0x28
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   b4e0e:	ea4f 3c61 	mov.w	ip, r1, asr #13
   b4e12:	0b43      	lsrs	r3, r0, #13
   b4e14:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
   b4e18:	fb02 f70c 	mul.w	r7, r2, ip
   b4e1c:	17d4      	asrs	r4, r2, #31
   b4e1e:	fb03 7704 	mla	r7, r3, r4, r7
   b4e22:	fba2 2403 	umull	r2, r4, r2, r3
   b4e26:	443c      	add	r4, r7
   b4e28:	fb02 f70c 	mul.w	r7, r2, ip
   b4e2c:	fb03 7704 	mla	r7, r3, r4, r7
   b4e30:	fba2 2303 	umull	r2, r3, r2, r3
   b4e34:	441f      	add	r7, r3
   b4e36:	0e53      	lsrs	r3, r2, #25
   b4e38:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b4e3c:	181b      	adds	r3, r3, r0
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b4e3e:	ea4f 72e6 	mov.w	r2, r6, asr #31
   b4e42:	fb06 f401 	mul.w	r4, r6, r1
    p = (((p<<31) - var2)*3125) / var1;
   b4e46:	4686      	mov	lr, r0
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b4e48:	eb41 6767 	adc.w	r7, r1, r7, asr #25
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b4e4c:	fb02 4100 	mla	r1, r2, r0, r4
   b4e50:	fba6 060e 	umull	r0, r6, r6, lr
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b4e54:	f9b5 4026 	ldrsh.w	r4, [r5, #38]	; 0x26
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b4e58:	4431      	add	r1, r6
   b4e5a:	0cc0      	lsrs	r0, r0, #19
   b4e5c:	ea40 3041 	orr.w	r0, r0, r1, lsl #13
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b4e60:	1818      	adds	r0, r3, r0
   b4e62:	ea4f 75e4 	mov.w	r5, r4, asr #31
   b4e66:	eb47 41e1 	adc.w	r1, r7, r1, asr #19
   b4e6a:	0a00      	lsrs	r0, r0, #8
   b4e6c:	012d      	lsls	r5, r5, #4
   b4e6e:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
   b4e72:	ea45 7514 	orr.w	r5, r5, r4, lsr #28
   b4e76:	0124      	lsls	r4, r4, #4
   b4e78:	1820      	adds	r0, r4, r0
    return (float)p/256;
   b4e7a:	eb45 2121 	adc.w	r1, r5, r1, asr #8
   b4e7e:	f003 fc91 	bl	b87a4 <__aeabi_l2f>
   b4e82:	ed9f 0a07 	vldr	s0, [pc, #28]	; b4ea0 <_ZN15Adafruit_BME28012readPressureEv+0x194>
   b4e86:	ee07 0a90 	vmov	s15, r0
   b4e8a:	ee27 0a80 	vmul.f32	s0, s15, s0
}
   b4e8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return NAN;
   b4e92:	ed9f 0a04 	vldr	s0, [pc, #16]	; b4ea4 <_ZN15Adafruit_BME28012readPressureEv+0x198>
   b4e96:	e7fa      	b.n	b4e8e <_ZN15Adafruit_BME28012readPressureEv+0x182>
        return 0; // avoid exception caused by division by zero
   b4e98:	ed9f 0a03 	vldr	s0, [pc, #12]	; b4ea8 <_ZN15Adafruit_BME28012readPressureEv+0x19c>
   b4e9c:	e7f7      	b.n	b4e8e <_ZN15Adafruit_BME28012readPressureEv+0x182>
   b4e9e:	bf00      	nop
   b4ea0:	3b800000 	.word	0x3b800000
   b4ea4:	7fc00000 	.word	0x7fc00000
	...

000b4eb0 <_ZN15Adafruit_BME28012readAltitudeEf>:
    @param  seaLevel      Sea-level pressure in hPa
    @returns the altitude value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readAltitude(float seaLevel)
{
   b4eb0:	b508      	push	{r3, lr}
   b4eb2:	ed2d 8b02 	vpush	{d8}
   b4eb6:	eeb0 8a40 	vmov.f32	s16, s0

    // Note that using the equation from wikipedia can give bad results
    // at high altitude. See this thread for more information:
    //  http://forums.adafruit.com/viewtopic.php?f=22&t=58064

    float atmospheric = readPressure() / 100.0F;
   b4eba:	f7ff ff27 	bl	b4d0c <_ZN15Adafruit_BME28012readPressureEv>
   b4ebe:	ed9f 7a16 	vldr	s14, [pc, #88]	; b4f18 <_ZN15Adafruit_BME28012readAltitudeEf+0x68>
   b4ec2:	eec0 7a07 	vdiv.f32	s15, s0, s14
   b4ec6:	eec7 7a88 	vdiv.f32	s15, s15, s16
   b4eca:	ee17 0a90 	vmov	r0, s15
   b4ece:	f002 fff9 	bl	b7ec4 <__aeabi_f2d>
   b4ed2:	ed9f 1b0d 	vldr	d1, [pc, #52]	; b4f08 <_ZN15Adafruit_BME28012readAltitudeEf+0x58>
   b4ed6:	ec41 0b10 	vmov	d0, r0, r1
   b4eda:	f001 fe09 	bl	b6af0 <pow>
    return 44330.0 * (1.0 - pow(atmospheric / seaLevel, 0.1903));
   b4ede:	490f      	ldr	r1, [pc, #60]	; (b4f1c <_ZN15Adafruit_BME28012readAltitudeEf+0x6c>)
   b4ee0:	ec53 2b10 	vmov	r2, r3, d0
   b4ee4:	2000      	movs	r0, #0
   b4ee6:	f002 fe8d 	bl	b7c04 <__aeabi_dsub>
   b4eea:	a309      	add	r3, pc, #36	; (adr r3, b4f10 <_ZN15Adafruit_BME28012readAltitudeEf+0x60>)
   b4eec:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4ef0:	f003 f840 	bl	b7f74 <__aeabi_dmul>
   b4ef4:	f003 fb36 	bl	b8564 <__aeabi_d2f>
}
   b4ef8:	ecbd 8b02 	vpop	{d8}
   b4efc:	ee00 0a10 	vmov	s0, r0
   b4f00:	bd08      	pop	{r3, pc}
   b4f02:	bf00      	nop
   b4f04:	f3af 8000 	nop.w
   b4f08:	1a36e2eb 	.word	0x1a36e2eb
   b4f0c:	3fc85bc0 	.word	0x3fc85bc0
   b4f10:	00000000 	.word	0x00000000
   b4f14:	40e5a540 	.word	0x40e5a540
   b4f18:	42c80000 	.word	0x42c80000
   b4f1c:	3ff00000 	.word	0x3ff00000

000b4f20 <_ZN15Adafruit_BME2804initEv>:
{
   b4f20:	b530      	push	{r4, r5, lr}
   b4f22:	4604      	mov	r4, r0
    if (_cs == -1) {
   b4f24:	f990 0010 	ldrsb.w	r0, [r0, #16]
   b4f28:	1c42      	adds	r2, r0, #1
{
   b4f2a:	b085      	sub	sp, #20
    if (_cs == -1) {
   b4f2c:	d119      	bne.n	b4f62 <_ZN15Adafruit_BME2804initEv+0x42>
        _wire -> begin();
   b4f2e:	6820      	ldr	r0, [r4, #0]
   b4f30:	f000 fe7c 	bl	b5c2c <_ZN7TwoWire5beginEv>
    _sensorID = read8(BME280_REGISTER_CHIPID);
   b4f34:	21d0      	movs	r1, #208	; 0xd0
   b4f36:	4620      	mov	r0, r4
   b4f38:	f7ff fcce 	bl	b48d8 <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   b4f3c:	2860      	cmp	r0, #96	; 0x60
    _sensorID = read8(BME280_REGISTER_CHIPID);
   b4f3e:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   b4f40:	d145      	bne.n	b4fce <_ZN15Adafruit_BME2804initEv+0xae>
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   b4f42:	4620      	mov	r0, r4
   b4f44:	22b6      	movs	r2, #182	; 0xb6
   b4f46:	21e0      	movs	r1, #224	; 0xe0
   b4f48:	f7ff fc2a 	bl	b47a0 <_ZN15Adafruit_BME2806write8Ehh>
    delay(300);
   b4f4c:	f44f 7096 	mov.w	r0, #300	; 0x12c
   b4f50:	f000 fb12 	bl	b5578 <delay>
    while (isReadingCalibration())
   b4f54:	4620      	mov	r0, r4
   b4f56:	f7ff fd13 	bl	b4980 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   b4f5a:	4605      	mov	r5, r0
   b4f5c:	b328      	cbz	r0, b4faa <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   b4f5e:	2064      	movs	r0, #100	; 0x64
   b4f60:	e7f6      	b.n	b4f50 <_ZN15Adafruit_BME2804initEv+0x30>
        digitalWrite(_cs, HIGH);
   b4f62:	2101      	movs	r1, #1
   b4f64:	b280      	uxth	r0, r0
   b4f66:	f001 fcf6 	bl	b6956 <digitalWrite>
        pinMode(_cs, OUTPUT);
   b4f6a:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4f6e:	2101      	movs	r1, #1
   b4f70:	b280      	uxth	r0, r0
   b4f72:	f001 fcdf 	bl	b6934 <pinMode>
        if (_sck == -1) {
   b4f76:	f994 0013 	ldrsb.w	r0, [r4, #19]
   b4f7a:	1c43      	adds	r3, r0, #1
   b4f7c:	d104      	bne.n	b4f88 <_ZN15Adafruit_BME2804initEv+0x68>
        instance().begin();
   b4f7e:	f7ff fbab 	bl	b46d8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4f82:	f001 f941 	bl	b6208 <_ZN8SPIClass5beginEv>
    }
   b4f86:	e7d5      	b.n	b4f34 <_ZN15Adafruit_BME2804initEv+0x14>
            pinMode(_sck, OUTPUT);
   b4f88:	2101      	movs	r1, #1
   b4f8a:	b280      	uxth	r0, r0
   b4f8c:	f001 fcd2 	bl	b6934 <pinMode>
            pinMode(_mosi, OUTPUT);
   b4f90:	f994 0011 	ldrsb.w	r0, [r4, #17]
   b4f94:	2101      	movs	r1, #1
   b4f96:	b280      	uxth	r0, r0
   b4f98:	f001 fccc 	bl	b6934 <pinMode>
            pinMode(_miso, INPUT);
   b4f9c:	f994 0012 	ldrsb.w	r0, [r4, #18]
   b4fa0:	2100      	movs	r1, #0
   b4fa2:	b280      	uxth	r0, r0
   b4fa4:	f001 fcc6 	bl	b6934 <pinMode>
   b4fa8:	e7c4      	b.n	b4f34 <_ZN15Adafruit_BME2804initEv+0x14>
    readCoefficients(); // read trimming parameters, see DS 4.2.2
   b4faa:	4620      	mov	r0, r4
   b4fac:	f7ff fd58 	bl	b4a60 <_ZN15Adafruit_BME28016readCoefficientsEv>
    setSampling(); // use defaults
   b4fb0:	2305      	movs	r3, #5
   b4fb2:	9300      	str	r3, [sp, #0]
   b4fb4:	461a      	mov	r2, r3
   b4fb6:	2103      	movs	r1, #3
   b4fb8:	4620      	mov	r0, r4
   b4fba:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b4fbe:	f7ff fc41 	bl	b4844 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
    delay(100);
   b4fc2:	2064      	movs	r0, #100	; 0x64
   b4fc4:	f000 fad8 	bl	b5578 <delay>
    return true;
   b4fc8:	2001      	movs	r0, #1
}
   b4fca:	b005      	add	sp, #20
   b4fcc:	bd30      	pop	{r4, r5, pc}
        return false;
   b4fce:	2000      	movs	r0, #0
   b4fd0:	e7fb      	b.n	b4fca <_ZN15Adafruit_BME2804initEv+0xaa>

000b4fd2 <_ZN15Adafruit_BME2805beginEv>:
    _i2caddr = BME280_ADDRESS;
   b4fd2:	2377      	movs	r3, #119	; 0x77
{
   b4fd4:	b510      	push	{r4, lr}
    _i2caddr = BME280_ADDRESS;
   b4fd6:	7103      	strb	r3, [r0, #4]
{
   b4fd8:	4604      	mov	r4, r0
	_wire = &Wire;
   b4fda:	f001 fd1d 	bl	b6a18 <_Z19__fetch_global_Wirev>
   b4fde:	6020      	str	r0, [r4, #0]
	status = init();
   b4fe0:	4620      	mov	r0, r4
   b4fe2:	f7ff ff9d 	bl	b4f20 <_ZN15Adafruit_BME2804initEv>
 	if(!status){
   b4fe6:	b930      	cbnz	r0, b4ff6 <_ZN15Adafruit_BME2805beginEv+0x24>
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
   b4fe8:	2376      	movs	r3, #118	; 0x76
   b4fea:	7123      	strb	r3, [r4, #4]
 		status = init();
   b4fec:	4620      	mov	r0, r4
}
   b4fee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 		status = init();
   b4ff2:	f7ff bf95 	b.w	b4f20 <_ZN15Adafruit_BME2804initEv>
}
   b4ff6:	bd10      	pop	{r4, pc}

000b4ff8 <_ZN16AirQualitySensorC1Ei>:
const int AirQualitySensor::HIGH_POLLUTION = 1;
const int AirQualitySensor::LOW_POLLUTION  = 2;
const int AirQualitySensor::FRESH_AIR      = 3;

AirQualitySensor::AirQualitySensor(int pin) 
: _pin(pin), _voltageSum(0), _volSumCount(0) {
   b4ff8:	2200      	movs	r2, #0
   b4ffa:	e9c0 2204 	strd	r2, r2, [r0, #16]
   b4ffe:	6001      	str	r1, [r0, #0]
    // do nothing
}
   b5000:	4770      	bx	lr
	...

000b5004 <_ZN16AirQualitySensor21updateStandardVoltageEv>:

int AirQualitySensor::getValue(void) {
    return _currentVoltage;
}

void AirQualitySensor::updateStandardVoltage(void) {
   b5004:	b510      	push	{r4, lr}
   b5006:	4604      	mov	r4, r0
   b5008:	f000 f852 	bl	b50b0 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - _lastStdVolUpdated > 500000) {
   b500c:	69a3      	ldr	r3, [r4, #24]
   b500e:	1ac0      	subs	r0, r0, r3
   b5010:	4b07      	ldr	r3, [pc, #28]	; (b5030 <_ZN16AirQualitySensor21updateStandardVoltageEv+0x2c>)
   b5012:	4298      	cmp	r0, r3
   b5014:	d90a      	bls.n	b502c <_ZN16AirQualitySensor21updateStandardVoltageEv+0x28>
        _standardVoltage = _voltageSum / _volSumCount;
   b5016:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   b501a:	fb93 f3f2 	sdiv	r3, r3, r2
   b501e:	60e3      	str	r3, [r4, #12]
   b5020:	f000 f846 	bl	b50b0 <HAL_Timer_Get_Milli_Seconds>
        _lastStdVolUpdated = millis();

        _voltageSum = 0;
   b5024:	2300      	movs	r3, #0
        _volSumCount = 0;
   b5026:	e9c4 3304 	strd	r3, r3, [r4, #16]
        _lastStdVolUpdated = millis();
   b502a:	61a0      	str	r0, [r4, #24]
    }
}
   b502c:	bd10      	pop	{r4, pc}
   b502e:	bf00      	nop
   b5030:	0007a120 	.word	0x0007a120

000b5034 <_ZN16AirQualitySensor5slopeEv>:
int AirQualitySensor::slope(void) {
   b5034:	b510      	push	{r4, lr}
    _lastVoltage = _currentVoltage;
   b5036:	6883      	ldr	r3, [r0, #8]
   b5038:	6043      	str	r3, [r0, #4]
int AirQualitySensor::slope(void) {
   b503a:	4604      	mov	r4, r0
    _currentVoltage = analogRead(_pin);
   b503c:	8800      	ldrh	r0, [r0, #0]
   b503e:	f001 fcb6 	bl	b69ae <analogRead>
    _voltageSum += _currentVoltage;
   b5042:	6923      	ldr	r3, [r4, #16]
    _currentVoltage = analogRead(_pin);
   b5044:	60a0      	str	r0, [r4, #8]
    _voltageSum += _currentVoltage;
   b5046:	4418      	add	r0, r3
    _volSumCount += 1;
   b5048:	6963      	ldr	r3, [r4, #20]
    _voltageSum += _currentVoltage;
   b504a:	6120      	str	r0, [r4, #16]
    _volSumCount += 1;
   b504c:	3301      	adds	r3, #1
   b504e:	6163      	str	r3, [r4, #20]
    updateStandardVoltage();
   b5050:	4620      	mov	r0, r4
   b5052:	f7ff ffd7 	bl	b5004 <_ZN16AirQualitySensor21updateStandardVoltageEv>
    if (_currentVoltage - _lastVoltage > 400 || _currentVoltage > 700) {
   b5056:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   b505a:	1a51      	subs	r1, r2, r1
   b505c:	f5b1 7fc8 	cmp.w	r1, #400	; 0x190
   b5060:	dc10      	bgt.n	b5084 <_ZN16AirQualitySensor5slopeEv+0x50>
   b5062:	f5b2 7f2f 	cmp.w	r2, #700	; 0x2bc
   b5066:	dc0d      	bgt.n	b5084 <_ZN16AirQualitySensor5slopeEv+0x50>
             || _currentVoltage - _standardVoltage > 150) {
   b5068:	68e3      	ldr	r3, [r4, #12]
   b506a:	1ad3      	subs	r3, r2, r3
   b506c:	2b96      	cmp	r3, #150	; 0x96
   b506e:	dc0b      	bgt.n	b5088 <_ZN16AirQualitySensor5slopeEv+0x54>
    else if ((_currentVoltage - _lastVoltage > 200 && _currentVoltage < 700)
   b5070:	29c8      	cmp	r1, #200	; 0xc8
   b5072:	dd02      	ble.n	b507a <_ZN16AirQualitySensor5slopeEv+0x46>
   b5074:	f5b2 7f2f 	cmp.w	r2, #700	; 0x2bc
   b5078:	d108      	bne.n	b508c <_ZN16AirQualitySensor5slopeEv+0x58>
        return AirQualitySensor::FRESH_AIR;
   b507a:	2b32      	cmp	r3, #50	; 0x32
   b507c:	bfcc      	ite	gt
   b507e:	2002      	movgt	r0, #2
   b5080:	2003      	movle	r0, #3
}
   b5082:	bd10      	pop	{r4, pc}
        return AirQualitySensor::FORCE_SIGNAL;
   b5084:	2000      	movs	r0, #0
   b5086:	e7fc      	b.n	b5082 <_ZN16AirQualitySensor5slopeEv+0x4e>
        return AirQualitySensor::HIGH_POLLUTION;
   b5088:	2001      	movs	r0, #1
   b508a:	e7fa      	b.n	b5082 <_ZN16AirQualitySensor5slopeEv+0x4e>
        return AirQualitySensor::LOW_POLLUTION;
   b508c:	2002      	movs	r0, #2
   b508e:	e7f8      	b.n	b5082 <_ZN16AirQualitySensor5slopeEv+0x4e>

000b5090 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5090:	b508      	push	{r3, lr}
   b5092:	4b02      	ldr	r3, [pc, #8]	; (b509c <os_mutex_recursive_create+0xc>)
   b5094:	681b      	ldr	r3, [r3, #0]
   b5096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5098:	9301      	str	r3, [sp, #4]
   b509a:	bd08      	pop	{r3, pc}
   b509c:	00030248 	.word	0x00030248

000b50a0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b50a0:	b508      	push	{r3, lr}
   b50a2:	4b02      	ldr	r3, [pc, #8]	; (b50ac <HAL_RNG_GetRandomNumber+0xc>)
   b50a4:	681b      	ldr	r3, [r3, #0]
   b50a6:	685b      	ldr	r3, [r3, #4]
   b50a8:	9301      	str	r3, [sp, #4]
   b50aa:	bd08      	pop	{r3, pc}
   b50ac:	00030218 	.word	0x00030218

000b50b0 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b50b0:	b508      	push	{r3, lr}
   b50b2:	4b02      	ldr	r3, [pc, #8]	; (b50bc <HAL_Timer_Get_Milli_Seconds+0xc>)
   b50b4:	681b      	ldr	r3, [r3, #0]
   b50b6:	695b      	ldr	r3, [r3, #20]
   b50b8:	9301      	str	r3, [sp, #4]
   b50ba:	bd08      	pop	{r3, pc}
   b50bc:	00030218 	.word	0x00030218

000b50c0 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b50c0:	b508      	push	{r3, lr}
   b50c2:	4b02      	ldr	r3, [pc, #8]	; (b50cc <HAL_Validate_Pin_Function+0xc>)
   b50c4:	681b      	ldr	r3, [r3, #0]
   b50c6:	685b      	ldr	r3, [r3, #4]
   b50c8:	9301      	str	r3, [sp, #4]
   b50ca:	bd08      	pop	{r3, pc}
   b50cc:	0003022c 	.word	0x0003022c

000b50d0 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b50d0:	b508      	push	{r3, lr}
   b50d2:	4b02      	ldr	r3, [pc, #8]	; (b50dc <HAL_Pin_Mode+0xc>)
   b50d4:	681b      	ldr	r3, [r3, #0]
   b50d6:	689b      	ldr	r3, [r3, #8]
   b50d8:	9301      	str	r3, [sp, #4]
   b50da:	bd08      	pop	{r3, pc}
   b50dc:	0003022c 	.word	0x0003022c

000b50e0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b50e0:	b508      	push	{r3, lr}
   b50e2:	4b02      	ldr	r3, [pc, #8]	; (b50ec <HAL_Get_Pin_Mode+0xc>)
   b50e4:	681b      	ldr	r3, [r3, #0]
   b50e6:	68db      	ldr	r3, [r3, #12]
   b50e8:	9301      	str	r3, [sp, #4]
   b50ea:	bd08      	pop	{r3, pc}
   b50ec:	0003022c 	.word	0x0003022c

000b50f0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b50f0:	b508      	push	{r3, lr}
   b50f2:	4b02      	ldr	r3, [pc, #8]	; (b50fc <HAL_GPIO_Write+0xc>)
   b50f4:	681b      	ldr	r3, [r3, #0]
   b50f6:	691b      	ldr	r3, [r3, #16]
   b50f8:	9301      	str	r3, [sp, #4]
   b50fa:	bd08      	pop	{r3, pc}
   b50fc:	0003022c 	.word	0x0003022c

000b5100 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b5100:	b508      	push	{r3, lr}
   b5102:	4b02      	ldr	r3, [pc, #8]	; (b510c <HAL_GPIO_Read+0xc>)
   b5104:	681b      	ldr	r3, [r3, #0]
   b5106:	695b      	ldr	r3, [r3, #20]
   b5108:	9301      	str	r3, [sp, #4]
   b510a:	bd08      	pop	{r3, pc}
   b510c:	0003022c 	.word	0x0003022c

000b5110 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b5110:	b508      	push	{r3, lr}
   b5112:	4b02      	ldr	r3, [pc, #8]	; (b511c <hal_adc_read+0xc>)
   b5114:	681b      	ldr	r3, [r3, #0]
   b5116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5118:	9301      	str	r3, [sp, #4]
   b511a:	bd08      	pop	{r3, pc}
   b511c:	0003022c 	.word	0x0003022c

000b5120 <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
   b5120:	b508      	push	{r3, lr}
   b5122:	4b02      	ldr	r3, [pc, #8]	; (b512c <HAL_Pulse_In+0xc>)
   b5124:	681b      	ldr	r3, [r3, #0]
   b5126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b5128:	9301      	str	r3, [sp, #4]
   b512a:	bd08      	pop	{r3, pc}
   b512c:	0003022c 	.word	0x0003022c

000b5130 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b5130:	b508      	push	{r3, lr}
   b5132:	4b02      	ldr	r3, [pc, #8]	; (b513c <hal_i2c_begin+0xc>)
   b5134:	681b      	ldr	r3, [r3, #0]
   b5136:	68db      	ldr	r3, [r3, #12]
   b5138:	9301      	str	r3, [sp, #4]
   b513a:	bd08      	pop	{r3, pc}
   b513c:	00030228 	.word	0x00030228

000b5140 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b5140:	b508      	push	{r3, lr}
   b5142:	4b02      	ldr	r3, [pc, #8]	; (b514c <hal_i2c_begin_transmission+0xc>)
   b5144:	681b      	ldr	r3, [r3, #0]
   b5146:	699b      	ldr	r3, [r3, #24]
   b5148:	9301      	str	r3, [sp, #4]
   b514a:	bd08      	pop	{r3, pc}
   b514c:	00030228 	.word	0x00030228

000b5150 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b5150:	b508      	push	{r3, lr}
   b5152:	4b02      	ldr	r3, [pc, #8]	; (b515c <hal_i2c_end_transmission+0xc>)
   b5154:	681b      	ldr	r3, [r3, #0]
   b5156:	69db      	ldr	r3, [r3, #28]
   b5158:	9301      	str	r3, [sp, #4]
   b515a:	bd08      	pop	{r3, pc}
   b515c:	00030228 	.word	0x00030228

000b5160 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b5160:	b508      	push	{r3, lr}
   b5162:	4b02      	ldr	r3, [pc, #8]	; (b516c <hal_i2c_write+0xc>)
   b5164:	681b      	ldr	r3, [r3, #0]
   b5166:	6a1b      	ldr	r3, [r3, #32]
   b5168:	9301      	str	r3, [sp, #4]
   b516a:	bd08      	pop	{r3, pc}
   b516c:	00030228 	.word	0x00030228

000b5170 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5170:	b508      	push	{r3, lr}
   b5172:	4b02      	ldr	r3, [pc, #8]	; (b517c <hal_i2c_available+0xc>)
   b5174:	681b      	ldr	r3, [r3, #0]
   b5176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5178:	9301      	str	r3, [sp, #4]
   b517a:	bd08      	pop	{r3, pc}
   b517c:	00030228 	.word	0x00030228

000b5180 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5180:	b508      	push	{r3, lr}
   b5182:	4b02      	ldr	r3, [pc, #8]	; (b518c <hal_i2c_read+0xc>)
   b5184:	681b      	ldr	r3, [r3, #0]
   b5186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5188:	9301      	str	r3, [sp, #4]
   b518a:	bd08      	pop	{r3, pc}
   b518c:	00030228 	.word	0x00030228

000b5190 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5190:	b508      	push	{r3, lr}
   b5192:	4b02      	ldr	r3, [pc, #8]	; (b519c <hal_i2c_peek+0xc>)
   b5194:	681b      	ldr	r3, [r3, #0]
   b5196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5198:	9301      	str	r3, [sp, #4]
   b519a:	bd08      	pop	{r3, pc}
   b519c:	00030228 	.word	0x00030228

000b51a0 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b51a0:	b508      	push	{r3, lr}
   b51a2:	4b02      	ldr	r3, [pc, #8]	; (b51ac <hal_i2c_flush+0xc>)
   b51a4:	681b      	ldr	r3, [r3, #0]
   b51a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b51a8:	9301      	str	r3, [sp, #4]
   b51aa:	bd08      	pop	{r3, pc}
   b51ac:	00030228 	.word	0x00030228

000b51b0 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b51b0:	b508      	push	{r3, lr}
   b51b2:	4b02      	ldr	r3, [pc, #8]	; (b51bc <hal_i2c_is_enabled+0xc>)
   b51b4:	681b      	ldr	r3, [r3, #0]
   b51b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b51b8:	9301      	str	r3, [sp, #4]
   b51ba:	bd08      	pop	{r3, pc}
   b51bc:	00030228 	.word	0x00030228

000b51c0 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b51c0:	b508      	push	{r3, lr}
   b51c2:	4b02      	ldr	r3, [pc, #8]	; (b51cc <hal_i2c_init+0xc>)
   b51c4:	681b      	ldr	r3, [r3, #0]
   b51c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b51c8:	9301      	str	r3, [sp, #4]
   b51ca:	bd08      	pop	{r3, pc}
   b51cc:	00030228 	.word	0x00030228

000b51d0 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b51d0:	b508      	push	{r3, lr}
   b51d2:	4b02      	ldr	r3, [pc, #8]	; (b51dc <hal_i2c_request_ex+0xc>)
   b51d4:	681b      	ldr	r3, [r3, #0]
   b51d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b51d8:	9301      	str	r3, [sp, #4]
   b51da:	bd08      	pop	{r3, pc}
   b51dc:	00030228 	.word	0x00030228

000b51e0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b51e0:	b508      	push	{r3, lr}
   b51e2:	4b02      	ldr	r3, [pc, #8]	; (b51ec <inet_inet_ntop+0xc>)
   b51e4:	681b      	ldr	r3, [r3, #0]
   b51e6:	695b      	ldr	r3, [r3, #20]
   b51e8:	9301      	str	r3, [sp, #4]
   b51ea:	bd08      	pop	{r3, pc}
   b51ec:	00030264 	.word	0x00030264

000b51f0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b51f0:	b508      	push	{r3, lr}
   b51f2:	4b02      	ldr	r3, [pc, #8]	; (b51fc <netdb_freeaddrinfo+0xc>)
   b51f4:	681b      	ldr	r3, [r3, #0]
   b51f6:	689b      	ldr	r3, [r3, #8]
   b51f8:	9301      	str	r3, [sp, #4]
   b51fa:	bd08      	pop	{r3, pc}
   b51fc:	00030268 	.word	0x00030268

000b5200 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5200:	b508      	push	{r3, lr}
   b5202:	4b02      	ldr	r3, [pc, #8]	; (b520c <netdb_getaddrinfo+0xc>)
   b5204:	681b      	ldr	r3, [r3, #0]
   b5206:	68db      	ldr	r3, [r3, #12]
   b5208:	9301      	str	r3, [sp, #4]
   b520a:	bd08      	pop	{r3, pc}
   b520c:	00030268 	.word	0x00030268

000b5210 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b5210:	b508      	push	{r3, lr}
   b5212:	4b02      	ldr	r3, [pc, #8]	; (b521c <hal_spi_begin+0xc>)
   b5214:	681b      	ldr	r3, [r3, #0]
   b5216:	681b      	ldr	r3, [r3, #0]
   b5218:	9301      	str	r3, [sp, #4]
   b521a:	bd08      	pop	{r3, pc}
   b521c:	00030230 	.word	0x00030230

000b5220 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b5220:	b508      	push	{r3, lr}
   b5222:	4b02      	ldr	r3, [pc, #8]	; (b522c <hal_spi_transfer+0xc>)
   b5224:	681b      	ldr	r3, [r3, #0]
   b5226:	695b      	ldr	r3, [r3, #20]
   b5228:	9301      	str	r3, [sp, #4]
   b522a:	bd08      	pop	{r3, pc}
   b522c:	00030230 	.word	0x00030230

000b5230 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b5230:	b508      	push	{r3, lr}
   b5232:	4b02      	ldr	r3, [pc, #8]	; (b523c <hal_spi_init+0xc>)
   b5234:	681b      	ldr	r3, [r3, #0]
   b5236:	69db      	ldr	r3, [r3, #28]
   b5238:	9301      	str	r3, [sp, #4]
   b523a:	bd08      	pop	{r3, pc}
   b523c:	00030230 	.word	0x00030230

000b5240 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b5240:	b508      	push	{r3, lr}
   b5242:	4b02      	ldr	r3, [pc, #8]	; (b524c <hal_spi_is_enabled+0xc>)
   b5244:	681b      	ldr	r3, [r3, #0]
   b5246:	6a1b      	ldr	r3, [r3, #32]
   b5248:	9301      	str	r3, [sp, #4]
   b524a:	bd08      	pop	{r3, pc}
   b524c:	00030230 	.word	0x00030230

000b5250 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b5250:	b508      	push	{r3, lr}
   b5252:	4b02      	ldr	r3, [pc, #8]	; (b525c <hal_spi_info+0xc>)
   b5254:	681b      	ldr	r3, [r3, #0]
   b5256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5258:	9301      	str	r3, [sp, #4]
   b525a:	bd08      	pop	{r3, pc}
   b525c:	00030230 	.word	0x00030230

000b5260 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b5260:	b508      	push	{r3, lr}
   b5262:	4b02      	ldr	r3, [pc, #8]	; (b526c <hal_spi_set_settings+0xc>)
   b5264:	681b      	ldr	r3, [r3, #0]
   b5266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5268:	9301      	str	r3, [sp, #4]
   b526a:	bd08      	pop	{r3, pc}
   b526c:	00030230 	.word	0x00030230

000b5270 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b5270:	b508      	push	{r3, lr}
   b5272:	4b02      	ldr	r3, [pc, #8]	; (b527c <hal_spi_acquire+0xc>)
   b5274:	681b      	ldr	r3, [r3, #0]
   b5276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5278:	9301      	str	r3, [sp, #4]
   b527a:	bd08      	pop	{r3, pc}
   b527c:	00030230 	.word	0x00030230

000b5280 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b5280:	b508      	push	{r3, lr}
   b5282:	4b02      	ldr	r3, [pc, #8]	; (b528c <hal_spi_release+0xc>)
   b5284:	681b      	ldr	r3, [r3, #0]
   b5286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5288:	9301      	str	r3, [sp, #4]
   b528a:	bd08      	pop	{r3, pc}
   b528c:	00030230 	.word	0x00030230

000b5290 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b5290:	b508      	push	{r3, lr}
   b5292:	4b02      	ldr	r3, [pc, #8]	; (b529c <hal_usart_write+0xc>)
   b5294:	681b      	ldr	r3, [r3, #0]
   b5296:	68db      	ldr	r3, [r3, #12]
   b5298:	9301      	str	r3, [sp, #4]
   b529a:	bd08      	pop	{r3, pc}
   b529c:	0003023c 	.word	0x0003023c

000b52a0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b52a0:	b508      	push	{r3, lr}
   b52a2:	4b02      	ldr	r3, [pc, #8]	; (b52ac <hal_usart_available+0xc>)
   b52a4:	681b      	ldr	r3, [r3, #0]
   b52a6:	691b      	ldr	r3, [r3, #16]
   b52a8:	9301      	str	r3, [sp, #4]
   b52aa:	bd08      	pop	{r3, pc}
   b52ac:	0003023c 	.word	0x0003023c

000b52b0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b52b0:	b508      	push	{r3, lr}
   b52b2:	4b02      	ldr	r3, [pc, #8]	; (b52bc <hal_usart_read+0xc>)
   b52b4:	681b      	ldr	r3, [r3, #0]
   b52b6:	695b      	ldr	r3, [r3, #20]
   b52b8:	9301      	str	r3, [sp, #4]
   b52ba:	bd08      	pop	{r3, pc}
   b52bc:	0003023c 	.word	0x0003023c

000b52c0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b52c0:	b508      	push	{r3, lr}
   b52c2:	4b02      	ldr	r3, [pc, #8]	; (b52cc <hal_usart_peek+0xc>)
   b52c4:	681b      	ldr	r3, [r3, #0]
   b52c6:	699b      	ldr	r3, [r3, #24]
   b52c8:	9301      	str	r3, [sp, #4]
   b52ca:	bd08      	pop	{r3, pc}
   b52cc:	0003023c 	.word	0x0003023c

000b52d0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b52d0:	b508      	push	{r3, lr}
   b52d2:	4b02      	ldr	r3, [pc, #8]	; (b52dc <hal_usart_flush+0xc>)
   b52d4:	681b      	ldr	r3, [r3, #0]
   b52d6:	69db      	ldr	r3, [r3, #28]
   b52d8:	9301      	str	r3, [sp, #4]
   b52da:	bd08      	pop	{r3, pc}
   b52dc:	0003023c 	.word	0x0003023c

000b52e0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b52e0:	b508      	push	{r3, lr}
   b52e2:	4b02      	ldr	r3, [pc, #8]	; (b52ec <hal_usart_is_enabled+0xc>)
   b52e4:	681b      	ldr	r3, [r3, #0]
   b52e6:	6a1b      	ldr	r3, [r3, #32]
   b52e8:	9301      	str	r3, [sp, #4]
   b52ea:	bd08      	pop	{r3, pc}
   b52ec:	0003023c 	.word	0x0003023c

000b52f0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b52f0:	b508      	push	{r3, lr}
   b52f2:	4b02      	ldr	r3, [pc, #8]	; (b52fc <hal_usart_available_data_for_write+0xc>)
   b52f4:	681b      	ldr	r3, [r3, #0]
   b52f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b52f8:	9301      	str	r3, [sp, #4]
   b52fa:	bd08      	pop	{r3, pc}
   b52fc:	0003023c 	.word	0x0003023c

000b5300 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5300:	b508      	push	{r3, lr}
   b5302:	4b02      	ldr	r3, [pc, #8]	; (b530c <hal_usart_init_ex+0xc>)
   b5304:	681b      	ldr	r3, [r3, #0]
   b5306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5308:	9301      	str	r3, [sp, #4]
   b530a:	bd08      	pop	{r3, pc}
   b530c:	0003023c 	.word	0x0003023c

000b5310 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b5310:	b508      	push	{r3, lr}
   b5312:	4b02      	ldr	r3, [pc, #8]	; (b531c <HAL_USB_USART_Init+0xc>)
   b5314:	681b      	ldr	r3, [r3, #0]
   b5316:	681b      	ldr	r3, [r3, #0]
   b5318:	9301      	str	r3, [sp, #4]
   b531a:	bd08      	pop	{r3, pc}
   b531c:	0003024c 	.word	0x0003024c

000b5320 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b5320:	b508      	push	{r3, lr}
   b5322:	4b02      	ldr	r3, [pc, #8]	; (b532c <HAL_USB_USART_Begin+0xc>)
   b5324:	681b      	ldr	r3, [r3, #0]
   b5326:	685b      	ldr	r3, [r3, #4]
   b5328:	9301      	str	r3, [sp, #4]
   b532a:	bd08      	pop	{r3, pc}
   b532c:	0003024c 	.word	0x0003024c

000b5330 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b5330:	b508      	push	{r3, lr}
   b5332:	4b02      	ldr	r3, [pc, #8]	; (b533c <HAL_USB_USART_Available_Data+0xc>)
   b5334:	681b      	ldr	r3, [r3, #0]
   b5336:	691b      	ldr	r3, [r3, #16]
   b5338:	9301      	str	r3, [sp, #4]
   b533a:	bd08      	pop	{r3, pc}
   b533c:	0003024c 	.word	0x0003024c

000b5340 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b5340:	b508      	push	{r3, lr}
   b5342:	4b02      	ldr	r3, [pc, #8]	; (b534c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b5344:	681b      	ldr	r3, [r3, #0]
   b5346:	695b      	ldr	r3, [r3, #20]
   b5348:	9301      	str	r3, [sp, #4]
   b534a:	bd08      	pop	{r3, pc}
   b534c:	0003024c 	.word	0x0003024c

000b5350 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5350:	b508      	push	{r3, lr}
   b5352:	4b02      	ldr	r3, [pc, #8]	; (b535c <HAL_USB_USART_Receive_Data+0xc>)
   b5354:	681b      	ldr	r3, [r3, #0]
   b5356:	699b      	ldr	r3, [r3, #24]
   b5358:	9301      	str	r3, [sp, #4]
   b535a:	bd08      	pop	{r3, pc}
   b535c:	0003024c 	.word	0x0003024c

000b5360 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5360:	b508      	push	{r3, lr}
   b5362:	4b02      	ldr	r3, [pc, #8]	; (b536c <HAL_USB_USART_Send_Data+0xc>)
   b5364:	681b      	ldr	r3, [r3, #0]
   b5366:	69db      	ldr	r3, [r3, #28]
   b5368:	9301      	str	r3, [sp, #4]
   b536a:	bd08      	pop	{r3, pc}
   b536c:	0003024c 	.word	0x0003024c

000b5370 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b5370:	b508      	push	{r3, lr}
   b5372:	4b02      	ldr	r3, [pc, #8]	; (b537c <HAL_USB_USART_Flush_Data+0xc>)
   b5374:	681b      	ldr	r3, [r3, #0]
   b5376:	6a1b      	ldr	r3, [r3, #32]
   b5378:	9301      	str	r3, [sp, #4]
   b537a:	bd08      	pop	{r3, pc}
   b537c:	0003024c 	.word	0x0003024c

000b5380 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b5380:	b508      	push	{r3, lr}
   b5382:	4b02      	ldr	r3, [pc, #8]	; (b538c <set_system_mode+0xc>)
   b5384:	681b      	ldr	r3, [r3, #0]
   b5386:	685b      	ldr	r3, [r3, #4]
   b5388:	9301      	str	r3, [sp, #4]
   b538a:	bd08      	pop	{r3, pc}
   b538c:	00030220 	.word	0x00030220

000b5390 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b5390:	b508      	push	{r3, lr}
   b5392:	4b02      	ldr	r3, [pc, #8]	; (b539c <system_delay_ms+0xc>)
   b5394:	681b      	ldr	r3, [r3, #0]
   b5396:	695b      	ldr	r3, [r3, #20]
   b5398:	9301      	str	r3, [sp, #4]
   b539a:	bd08      	pop	{r3, pc}
   b539c:	00030220 	.word	0x00030220

000b53a0 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b53a0:	b508      	push	{r3, lr}
   b53a2:	4b02      	ldr	r3, [pc, #8]	; (b53ac <application_thread_current+0xc>)
   b53a4:	681b      	ldr	r3, [r3, #0]
   b53a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b53a8:	9301      	str	r3, [sp, #4]
   b53aa:	bd08      	pop	{r3, pc}
   b53ac:	00030220 	.word	0x00030220

000b53b0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b53b0:	b508      	push	{r3, lr}
   b53b2:	4b02      	ldr	r3, [pc, #8]	; (b53bc <application_thread_invoke+0xc>)
   b53b4:	681b      	ldr	r3, [r3, #0]
   b53b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b53b8:	9301      	str	r3, [sp, #4]
   b53ba:	bd08      	pop	{r3, pc}
   b53bc:	00030220 	.word	0x00030220

000b53c0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b53c0:	b508      	push	{r3, lr}
   b53c2:	4b03      	ldr	r3, [pc, #12]	; (b53d0 <system_ctrl_set_app_request_handler+0x10>)
   b53c4:	681b      	ldr	r3, [r3, #0]
   b53c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b53ca:	9301      	str	r3, [sp, #4]
   b53cc:	bd08      	pop	{r3, pc}
   b53ce:	0000      	.short	0x0000
   b53d0:	00030220 	.word	0x00030220

000b53d4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b53d4:	b508      	push	{r3, lr}
   b53d6:	4b03      	ldr	r3, [pc, #12]	; (b53e4 <system_ctrl_set_result+0x10>)
   b53d8:	681b      	ldr	r3, [r3, #0]
   b53da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b53de:	9301      	str	r3, [sp, #4]
   b53e0:	bd08      	pop	{r3, pc}
   b53e2:	0000      	.short	0x0000
   b53e4:	00030220 	.word	0x00030220

000b53e8 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   b53e8:	b508      	push	{r3, lr}
   b53ea:	4b02      	ldr	r3, [pc, #8]	; (b53f4 <spark_variable+0xc>)
   b53ec:	681b      	ldr	r3, [r3, #0]
   b53ee:	681b      	ldr	r3, [r3, #0]
   b53f0:	9301      	str	r3, [sp, #4]
   b53f2:	bd08      	pop	{r3, pc}
   b53f4:	00030244 	.word	0x00030244

000b53f8 <spark_cloud_flag_connected>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b53f8:	b508      	push	{r3, lr}
   b53fa:	4b02      	ldr	r3, [pc, #8]	; (b5404 <spark_cloud_flag_connected+0xc>)
   b53fc:	681b      	ldr	r3, [r3, #0]
   b53fe:	695b      	ldr	r3, [r3, #20]
   b5400:	9301      	str	r3, [sp, #4]
   b5402:	bd08      	pop	{r3, pc}
   b5404:	00030244 	.word	0x00030244

000b5408 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b5408:	b508      	push	{r3, lr}
   b540a:	4b02      	ldr	r3, [pc, #8]	; (b5414 <spark_send_event+0xc>)
   b540c:	681b      	ldr	r3, [r3, #0]
   b540e:	6a1b      	ldr	r3, [r3, #32]
   b5410:	9301      	str	r3, [sp, #4]
   b5412:	bd08      	pop	{r3, pc}
   b5414:	00030244 	.word	0x00030244

000b5418 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b5418:	b508      	push	{r3, lr}
   b541a:	4b02      	ldr	r3, [pc, #8]	; (b5424 <spark_set_random_seed_from_cloud_handler+0xc>)
   b541c:	681b      	ldr	r3, [r3, #0]
   b541e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5420:	9301      	str	r3, [sp, #4]
   b5422:	bd08      	pop	{r3, pc}
   b5424:	00030244 	.word	0x00030244

000b5428 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b5428:	b508      	push	{r3, lr}
   b542a:	4b02      	ldr	r3, [pc, #8]	; (b5434 <network_connect+0xc>)
   b542c:	681b      	ldr	r3, [r3, #0]
   b542e:	685b      	ldr	r3, [r3, #4]
   b5430:	9301      	str	r3, [sp, #4]
   b5432:	bd08      	pop	{r3, pc}
   b5434:	00030240 	.word	0x00030240

000b5438 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b5438:	b508      	push	{r3, lr}
   b543a:	4b02      	ldr	r3, [pc, #8]	; (b5444 <network_connecting+0xc>)
   b543c:	681b      	ldr	r3, [r3, #0]
   b543e:	689b      	ldr	r3, [r3, #8]
   b5440:	9301      	str	r3, [sp, #4]
   b5442:	bd08      	pop	{r3, pc}
   b5444:	00030240 	.word	0x00030240

000b5448 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b5448:	b508      	push	{r3, lr}
   b544a:	4b02      	ldr	r3, [pc, #8]	; (b5454 <network_disconnect+0xc>)
   b544c:	681b      	ldr	r3, [r3, #0]
   b544e:	68db      	ldr	r3, [r3, #12]
   b5450:	9301      	str	r3, [sp, #4]
   b5452:	bd08      	pop	{r3, pc}
   b5454:	00030240 	.word	0x00030240

000b5458 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b5458:	b508      	push	{r3, lr}
   b545a:	4b02      	ldr	r3, [pc, #8]	; (b5464 <network_ready+0xc>)
   b545c:	681b      	ldr	r3, [r3, #0]
   b545e:	691b      	ldr	r3, [r3, #16]
   b5460:	9301      	str	r3, [sp, #4]
   b5462:	bd08      	pop	{r3, pc}
   b5464:	00030240 	.word	0x00030240

000b5468 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b5468:	b508      	push	{r3, lr}
   b546a:	4b02      	ldr	r3, [pc, #8]	; (b5474 <network_on+0xc>)
   b546c:	681b      	ldr	r3, [r3, #0]
   b546e:	695b      	ldr	r3, [r3, #20]
   b5470:	9301      	str	r3, [sp, #4]
   b5472:	bd08      	pop	{r3, pc}
   b5474:	00030240 	.word	0x00030240

000b5478 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b5478:	b508      	push	{r3, lr}
   b547a:	4b02      	ldr	r3, [pc, #8]	; (b5484 <network_off+0xc>)
   b547c:	681b      	ldr	r3, [r3, #0]
   b547e:	699b      	ldr	r3, [r3, #24]
   b5480:	9301      	str	r3, [sp, #4]
   b5482:	bd08      	pop	{r3, pc}
   b5484:	00030240 	.word	0x00030240

000b5488 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b5488:	b508      	push	{r3, lr}
   b548a:	4b02      	ldr	r3, [pc, #8]	; (b5494 <network_listen+0xc>)
   b548c:	681b      	ldr	r3, [r3, #0]
   b548e:	69db      	ldr	r3, [r3, #28]
   b5490:	9301      	str	r3, [sp, #4]
   b5492:	bd08      	pop	{r3, pc}
   b5494:	00030240 	.word	0x00030240

000b5498 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b5498:	b508      	push	{r3, lr}
   b549a:	4b02      	ldr	r3, [pc, #8]	; (b54a4 <network_listening+0xc>)
   b549c:	681b      	ldr	r3, [r3, #0]
   b549e:	6a1b      	ldr	r3, [r3, #32]
   b54a0:	9301      	str	r3, [sp, #4]
   b54a2:	bd08      	pop	{r3, pc}
   b54a4:	00030240 	.word	0x00030240

000b54a8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b54a8:	b508      	push	{r3, lr}
   b54aa:	4b02      	ldr	r3, [pc, #8]	; (b54b4 <network_set_listen_timeout+0xc>)
   b54ac:	681b      	ldr	r3, [r3, #0]
   b54ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b54b0:	9301      	str	r3, [sp, #4]
   b54b2:	bd08      	pop	{r3, pc}
   b54b4:	00030240 	.word	0x00030240

000b54b8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b54b8:	b508      	push	{r3, lr}
   b54ba:	4b02      	ldr	r3, [pc, #8]	; (b54c4 <network_get_listen_timeout+0xc>)
   b54bc:	681b      	ldr	r3, [r3, #0]
   b54be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b54c0:	9301      	str	r3, [sp, #4]
   b54c2:	bd08      	pop	{r3, pc}
   b54c4:	00030240 	.word	0x00030240

000b54c8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b54c8:	b508      	push	{r3, lr}
   b54ca:	4b02      	ldr	r3, [pc, #8]	; (b54d4 <network_is_on+0xc>)
   b54cc:	681b      	ldr	r3, [r3, #0]
   b54ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b54d0:	9301      	str	r3, [sp, #4]
   b54d2:	bd08      	pop	{r3, pc}
   b54d4:	00030240 	.word	0x00030240

000b54d8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b54d8:	b508      	push	{r3, lr}
   b54da:	4b02      	ldr	r3, [pc, #8]	; (b54e4 <network_is_off+0xc>)
   b54dc:	681b      	ldr	r3, [r3, #0]
   b54de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b54e0:	9301      	str	r3, [sp, #4]
   b54e2:	bd08      	pop	{r3, pc}
   b54e4:	00030240 	.word	0x00030240

000b54e8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b54e8:	b508      	push	{r3, lr}
   b54ea:	4b02      	ldr	r3, [pc, #8]	; (b54f4 <malloc+0xc>)
   b54ec:	681b      	ldr	r3, [r3, #0]
   b54ee:	681b      	ldr	r3, [r3, #0]
   b54f0:	9301      	str	r3, [sp, #4]
   b54f2:	bd08      	pop	{r3, pc}
   b54f4:	0003021c 	.word	0x0003021c

000b54f8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b54f8:	b508      	push	{r3, lr}
   b54fa:	4b02      	ldr	r3, [pc, #8]	; (b5504 <free+0xc>)
   b54fc:	681b      	ldr	r3, [r3, #0]
   b54fe:	685b      	ldr	r3, [r3, #4]
   b5500:	9301      	str	r3, [sp, #4]
   b5502:	bd08      	pop	{r3, pc}
   b5504:	0003021c 	.word	0x0003021c

000b5508 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b5508:	b508      	push	{r3, lr}
   b550a:	4b02      	ldr	r3, [pc, #8]	; (b5514 <realloc+0xc>)
   b550c:	681b      	ldr	r3, [r3, #0]
   b550e:	689b      	ldr	r3, [r3, #8]
   b5510:	9301      	str	r3, [sp, #4]
   b5512:	bd08      	pop	{r3, pc}
   b5514:	0003021c 	.word	0x0003021c

000b5518 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b5518:	b508      	push	{r3, lr}
   b551a:	4b02      	ldr	r3, [pc, #8]	; (b5524 <vsnprintf+0xc>)
   b551c:	681b      	ldr	r3, [r3, #0]
   b551e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5520:	9301      	str	r3, [sp, #4]
   b5522:	bd08      	pop	{r3, pc}
   b5524:	0003021c 	.word	0x0003021c

000b5528 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b5528:	b508      	push	{r3, lr}
   b552a:	4b02      	ldr	r3, [pc, #8]	; (b5534 <abort+0xc>)
   b552c:	681b      	ldr	r3, [r3, #0]
   b552e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5530:	9301      	str	r3, [sp, #4]
   b5532:	bd08      	pop	{r3, pc}
   b5534:	0003021c 	.word	0x0003021c

000b5538 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b5538:	b508      	push	{r3, lr}
   b553a:	4b02      	ldr	r3, [pc, #8]	; (b5544 <_malloc_r+0xc>)
   b553c:	681b      	ldr	r3, [r3, #0]
   b553e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5540:	9301      	str	r3, [sp, #4]
   b5542:	bd08      	pop	{r3, pc}
   b5544:	0003021c 	.word	0x0003021c

000b5548 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b5548:	b508      	push	{r3, lr}
   b554a:	4b02      	ldr	r3, [pc, #8]	; (b5554 <__errno+0xc>)
   b554c:	681b      	ldr	r3, [r3, #0]
   b554e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5550:	9301      	str	r3, [sp, #4]
   b5552:	bd08      	pop	{r3, pc}
   b5554:	0003021c 	.word	0x0003021c

000b5558 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b5558:	b508      	push	{r3, lr}
   b555a:	4b02      	ldr	r3, [pc, #8]	; (b5564 <__assert_func+0xc>)
   b555c:	681b      	ldr	r3, [r3, #0]
   b555e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5560:	9301      	str	r3, [sp, #4]
   b5562:	bd08      	pop	{r3, pc}
   b5564:	0003021c 	.word	0x0003021c

000b5568 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b5568:	b508      	push	{r3, lr}
   b556a:	4b02      	ldr	r3, [pc, #8]	; (b5574 <newlib_impure_ptr_callback+0xc>)
   b556c:	681b      	ldr	r3, [r3, #0]
   b556e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5570:	9301      	str	r3, [sp, #4]
   b5572:	bd08      	pop	{r3, pc}
   b5574:	0003021c 	.word	0x0003021c

000b5578 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b5578:	2100      	movs	r1, #0
   b557a:	f7ff bf09 	b.w	b5390 <system_delay_ms>

000b557e <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b557e:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b5580:	6883      	ldr	r3, [r0, #8]
   b5582:	4604      	mov	r4, r0
   b5584:	b90b      	cbnz	r3, b558a <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b5586:	f001 faad 	bl	b6ae4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b558a:	68c3      	ldr	r3, [r0, #12]
   b558c:	4798      	blx	r3
      if (_M_manager)
   b558e:	68a3      	ldr	r3, [r4, #8]
   b5590:	b11b      	cbz	r3, b559a <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5592:	2203      	movs	r2, #3
   b5594:	4621      	mov	r1, r4
   b5596:	4620      	mov	r0, r4
   b5598:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b559a:	4620      	mov	r0, r4
   b559c:	2110      	movs	r1, #16
}
   b559e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b55a2:	f7fe bd7c 	b.w	b409e <_ZdlPvj>

000b55a6 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b55a6:	b510      	push	{r4, lr}
      if (_M_manager)
   b55a8:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b55aa:	4604      	mov	r4, r0
      if (_M_manager)
   b55ac:	b113      	cbz	r3, b55b4 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b55ae:	2203      	movs	r2, #3
   b55b0:	4601      	mov	r1, r0
   b55b2:	4798      	blx	r3
    }
   b55b4:	4620      	mov	r0, r4
   b55b6:	bd10      	pop	{r4, pc}

000b55b8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b55b8:	b513      	push	{r0, r1, r4, lr}
   b55ba:	460b      	mov	r3, r1
   b55bc:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b55be:	e9d0 0100 	ldrd	r0, r1, [r0]
   b55c2:	466c      	mov	r4, sp
   b55c4:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b55c8:	e893 0003 	ldmia.w	r3, {r0, r1}
   b55cc:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b55d0:	e894 0003 	ldmia.w	r4, {r0, r1}
   b55d4:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b55d8:	b002      	add	sp, #8
   b55da:	bd10      	pop	{r4, pc}

000b55dc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b55dc:	4802      	ldr	r0, [pc, #8]	; (b55e8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b55de:	2300      	movs	r3, #0
   b55e0:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b55e2:	f7ff bd55 	b.w	b5090 <os_mutex_recursive_create>
   b55e6:	bf00      	nop
   b55e8:	2003e6c8 	.word	0x2003e6c8

000b55ec <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b55ec:	4770      	bx	lr

000b55ee <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b55ee:	2000      	movs	r0, #0
   b55f0:	4770      	bx	lr

000b55f2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b55f2:	b510      	push	{r4, lr}
   b55f4:	2110      	movs	r1, #16
   b55f6:	4604      	mov	r4, r0
   b55f8:	f7fe fd51 	bl	b409e <_ZdlPvj>
   b55fc:	4620      	mov	r0, r4
   b55fe:	bd10      	pop	{r4, pc}

000b5600 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b5600:	b508      	push	{r3, lr}
      { delete this; }
   b5602:	f7ff fff6 	bl	b55f2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b5606:	bd08      	pop	{r3, pc}

000b5608 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b5608:	b530      	push	{r4, r5, lr}
        type_(type) {
   b560a:	2200      	movs	r2, #0
   b560c:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b5610:	6002      	str	r2, [r0, #0]
   b5612:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5614:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b5616:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5618:	680c      	ldr	r4, [r1, #0]
   b561a:	8085      	strh	r5, [r0, #4]
   b561c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b561e:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b5620:	bd30      	pop	{r4, r5, pc}

000b5622 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b5622:	b510      	push	{r4, lr}
   b5624:	4604      	mov	r4, r0
    free((void*)msg_);
   b5626:	6800      	ldr	r0, [r0, #0]
   b5628:	f7ff ff66 	bl	b54f8 <free>
}
   b562c:	4620      	mov	r0, r4
   b562e:	bd10      	pop	{r4, pc}

000b5630 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b5630:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b5632:	68c4      	ldr	r4, [r0, #12]
   b5634:	b1f4      	cbz	r4, b5674 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b5636:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b5638:	2b02      	cmp	r3, #2
   b563a:	d103      	bne.n	b5644 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b563c:	f104 000c 	add.w	r0, r4, #12
   b5640:	f7ff ffef 	bl	b5622 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b5644:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b5646:	b135      	cbz	r5, b5656 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b5648:	4628      	mov	r0, r5
   b564a:	f7ff ffac 	bl	b55a6 <_ZNSt14_Function_baseD1Ev>
   b564e:	2110      	movs	r1, #16
   b5650:	4628      	mov	r0, r5
   b5652:	f7fe fd24 	bl	b409e <_ZdlPvj>
   b5656:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b5658:	b135      	cbz	r5, b5668 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b565a:	4628      	mov	r0, r5
   b565c:	f7ff ffa3 	bl	b55a6 <_ZNSt14_Function_baseD1Ev>
   b5660:	2110      	movs	r1, #16
   b5662:	4628      	mov	r0, r5
   b5664:	f7fe fd1b 	bl	b409e <_ZdlPvj>
   b5668:	4620      	mov	r0, r4
   b566a:	2114      	movs	r1, #20
   b566c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b5670:	f7fe bd15 	b.w	b409e <_ZdlPvj>
   b5674:	bd38      	pop	{r3, r4, r5, pc}

000b5676 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b5676:	680b      	ldr	r3, [r1, #0]
   b5678:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b567a:	684b      	ldr	r3, [r1, #4]
   b567c:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b567e:	b113      	cbz	r3, b5686 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b5680:	685a      	ldr	r2, [r3, #4]
   b5682:	3201      	adds	r2, #1
   b5684:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b5686:	4770      	bx	lr

000b5688 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b5688:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b568a:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b568c:	4668      	mov	r0, sp
   b568e:	460d      	mov	r5, r1
   b5690:	f7ff fff1 	bl	b5676 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5694:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b5696:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5698:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b569a:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b569c:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b569e:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b56a0:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b56a2:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b56a4:	f7fe fe34 	bl	b4310 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b56a8:	b135      	cbz	r5, b56b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b56aa:	1d28      	adds	r0, r5, #4
   b56ac:	f7fe fe30 	bl	b4310 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b56b0:	2108      	movs	r1, #8
   b56b2:	4628      	mov	r0, r5
   b56b4:	f7fe fcf3 	bl	b409e <_ZdlPvj>
        return p;
    }
   b56b8:	4620      	mov	r0, r4
   b56ba:	b003      	add	sp, #12
   b56bc:	bd30      	pop	{r4, r5, pc}

000b56be <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b56be:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b56c0:	b510      	push	{r4, lr}
      if (_M_empty())
   b56c2:	b90a      	cbnz	r2, b56c8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b56c4:	f001 fa0e 	bl	b6ae4 <_ZSt25__throw_bad_function_callv>
    }
   b56c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b56cc:	68c3      	ldr	r3, [r0, #12]
   b56ce:	4718      	bx	r3

000b56d0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b56d0:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b56d2:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b56d4:	f100 0110 	add.w	r1, r0, #16
   b56d8:	f7ff fff1 	bl	b56be <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b56dc:	bd08      	pop	{r3, pc}

000b56de <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b56de:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b56e0:	b510      	push	{r4, lr}
      if (_M_empty())
   b56e2:	b90a      	cbnz	r2, b56e8 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b56e4:	f001 f9fe 	bl	b6ae4 <_ZSt25__throw_bad_function_callv>
    }
   b56e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b56ec:	68c3      	ldr	r3, [r0, #12]
   b56ee:	4718      	bx	r3

000b56f0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b56f0:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b56f2:	6800      	ldr	r0, [r0, #0]
   b56f4:	f100 0110 	add.w	r1, r0, #16
   b56f8:	f7ff fff1 	bl	b56de <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b56fc:	bd08      	pop	{r3, pc}
	...

000b5700 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b5700:	b538      	push	{r3, r4, r5, lr}
   b5702:	2300      	movs	r3, #0
   b5704:	4604      	mov	r4, r0
   b5706:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b5708:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b570a:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b570c:	f7fe fcc3 	bl	b4096 <_Znwj>
   b5710:	b128      	cbz	r0, b571e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b5712:	2301      	movs	r3, #1
   b5714:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b5718:	4b02      	ldr	r3, [pc, #8]	; (b5724 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b571a:	6003      	str	r3, [r0, #0]
   b571c:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b571e:	6020      	str	r0, [r4, #0]
	}
   b5720:	4620      	mov	r0, r4
   b5722:	bd38      	pop	{r3, r4, r5, pc}
   b5724:	000b8ef4 	.word	0x000b8ef4

000b5728 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b5728:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b572a:	2300      	movs	r3, #0
   b572c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b572e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b5730:	4604      	mov	r4, r0
   b5732:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b5734:	b12b      	cbz	r3, b5742 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b5736:	2202      	movs	r2, #2
   b5738:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b573a:	68eb      	ldr	r3, [r5, #12]
   b573c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b573e:	68ab      	ldr	r3, [r5, #8]
   b5740:	60a3      	str	r3, [r4, #8]
    }
   b5742:	4620      	mov	r0, r4
   b5744:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5748 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b5748:	b5f0      	push	{r4, r5, r6, r7, lr}
   b574a:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b574c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b574e:	4668      	mov	r0, sp
   b5750:	f7ff ff5a 	bl	b5608 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b5754:	f04f 0302 	mov.w	r3, #2
   b5758:	e8d4 2f4f 	ldrexb	r2, [r4]
   b575c:	2a00      	cmp	r2, #0
   b575e:	d103      	bne.n	b5768 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b5760:	e8c4 3f41 	strexb	r1, r3, [r4]
   b5764:	2900      	cmp	r1, #0
   b5766:	d1f7      	bne.n	b5758 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b5768:	d125      	bne.n	b57b6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b576a:	f104 050c 	add.w	r5, r4, #12
   b576e:	4669      	mov	r1, sp
   b5770:	4628      	mov	r0, r5
   b5772:	f7ff ff49 	bl	b5608 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b5776:	f3bf 8f5b 	dmb	ish
   b577a:	2301      	movs	r3, #1
   b577c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b577e:	2000      	movs	r0, #0
   b5780:	f104 0308 	add.w	r3, r4, #8
   b5784:	f3bf 8f5b 	dmb	ish
   b5788:	e853 6f00 	ldrex	r6, [r3]
   b578c:	e843 0200 	strex	r2, r0, [r3]
   b5790:	2a00      	cmp	r2, #0
   b5792:	d1f9      	bne.n	b5788 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b5794:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b5798:	b16e      	cbz	r6, b57b6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b579a:	f7ff fe01 	bl	b53a0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b579e:	b178      	cbz	r0, b57c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b57a0:	4629      	mov	r1, r5
   b57a2:	4630      	mov	r0, r6
   b57a4:	f7ff ff8b 	bl	b56be <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b57a8:	4630      	mov	r0, r6
   b57aa:	f7ff fefc 	bl	b55a6 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b57ae:	2110      	movs	r1, #16
   b57b0:	4630      	mov	r0, r6
   b57b2:	f7fe fc74 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   b57b6:	4668      	mov	r0, sp
   b57b8:	f7ff ff33 	bl	b5622 <_ZN8particle5ErrorD1Ev>
    }
   b57bc:	b009      	add	sp, #36	; 0x24
   b57be:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b57c0:	4631      	mov	r1, r6
   b57c2:	a802      	add	r0, sp, #8
   b57c4:	f7ff ffb0 	bl	b5728 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b57c8:	68e0      	ldr	r0, [r4, #12]
   b57ca:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b57ce:	b108      	cbz	r0, b57d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b57d0:	f003 fa2a 	bl	b8c28 <strdup>
        type_(type) {
   b57d4:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b57d6:	2010      	movs	r0, #16
   b57d8:	f8ad 501c 	strh.w	r5, [sp, #28]
   b57dc:	f7fe fc5b 	bl	b4096 <_Znwj>
   b57e0:	4605      	mov	r5, r0
   b57e2:	b1e8      	cbz	r0, b5820 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b57e4:	2700      	movs	r7, #0
   b57e6:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b57e8:	2018      	movs	r0, #24
   b57ea:	f7fe fc54 	bl	b4096 <_Znwj>
   b57ee:	4604      	mov	r4, r0
   b57f0:	b188      	cbz	r0, b5816 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b57f2:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b57f4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b57f6:	a802      	add	r0, sp, #8
   b57f8:	f7ff fede 	bl	b55b8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b57fc:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b57fe:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5800:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5802:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5804:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b5806:	a906      	add	r1, sp, #24
   b5808:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b580a:	60e3      	str	r3, [r4, #12]
   b580c:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b5810:	9205      	str	r2, [sp, #20]
   b5812:	f7ff fef9 	bl	b5608 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b5816:	4b08      	ldr	r3, [pc, #32]	; (b5838 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b5818:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b581a:	4b08      	ldr	r3, [pc, #32]	; (b583c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b581c:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b581e:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b5820:	a806      	add	r0, sp, #24
   b5822:	f7ff fefe 	bl	b5622 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b5826:	a802      	add	r0, sp, #8
   b5828:	f7ff febd 	bl	b55a6 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b582c:	2200      	movs	r2, #0
   b582e:	4629      	mov	r1, r5
   b5830:	4803      	ldr	r0, [pc, #12]	; (b5840 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b5832:	f7ff fdbd 	bl	b53b0 <application_thread_invoke>
   b5836:	e7b7      	b.n	b57a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b5838:	000b56d1 	.word	0x000b56d1
   b583c:	000b5955 	.word	0x000b5955
   b5840:	000b557f 	.word	0x000b557f

000b5844 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b5844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5848:	b08b      	sub	sp, #44	; 0x2c
   b584a:	4605      	mov	r5, r0
   b584c:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b5850:	460f      	mov	r7, r1
   b5852:	4690      	mov	r8, r2
   b5854:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5856:	f7ff fdcf 	bl	b53f8 <spark_cloud_flag_connected>
   b585a:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b585c:	4683      	mov	fp, r0
   b585e:	bb38      	cbnz	r0, b58b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b5860:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b5864:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b5866:	a905      	add	r1, sp, #20
   b5868:	4630      	mov	r0, r6
   b586a:	f8ad 3018 	strh.w	r3, [sp, #24]
   b586e:	f7ff fecb 	bl	b5608 <_ZN8particle5ErrorC1EOS0_>
   b5872:	2014      	movs	r0, #20
   b5874:	f7fe fc0f 	bl	b4096 <_Znwj>
   b5878:	4604      	mov	r4, r0
   b587a:	b148      	cbz	r0, b5890 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b587c:	2302      	movs	r3, #2
   b587e:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b5880:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b5882:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b5886:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b5888:	4631      	mov	r1, r6
   b588a:	300c      	adds	r0, #12
   b588c:	f7ff febc 	bl	b5608 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b5890:	4628      	mov	r0, r5
	: __shared_count(__p)
   b5892:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b5894:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b5898:	f7ff ff32 	bl	b5700 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b589c:	4630      	mov	r0, r6
   b589e:	f7ff fec0 	bl	b5622 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b58a2:	a805      	add	r0, sp, #20
   b58a4:	f7ff febd 	bl	b5622 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b58a8:	4628      	mov	r0, r5
   b58aa:	b00b      	add	sp, #44	; 0x2c
   b58ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b58b0:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b58b2:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b58b4:	2014      	movs	r0, #20
   b58b6:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b58ba:	9307      	str	r3, [sp, #28]
   b58bc:	f7fe fbeb 	bl	b4096 <_Znwj>
   b58c0:	4601      	mov	r1, r0
   b58c2:	b118      	cbz	r0, b58cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b58c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b58c8:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b58ca:	7044      	strb	r4, [r0, #1]
   b58cc:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b58ce:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b58d0:	f7ff ff16 	bl	b5700 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b58d4:	4b1e      	ldr	r3, [pc, #120]	; (b5950 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b58d6:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b58d8:	2008      	movs	r0, #8
   b58da:	f7fe fbdc 	bl	b4096 <_Znwj>
   b58de:	4604      	mov	r4, r0
   b58e0:	b110      	cbz	r0, b58e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b58e2:	a903      	add	r1, sp, #12
   b58e4:	f7ff fec7 	bl	b5676 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b58e8:	9600      	str	r6, [sp, #0]
   b58ea:	fa5f f38a 	uxtb.w	r3, sl
   b58ee:	464a      	mov	r2, r9
   b58f0:	4641      	mov	r1, r8
   b58f2:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b58f4:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b58f6:	f7ff fd87 	bl	b5408 <spark_send_event>
   b58fa:	b9b8      	cbnz	r0, b592c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b58fc:	9b03      	ldr	r3, [sp, #12]
   b58fe:	785b      	ldrb	r3, [r3, #1]
   b5900:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b5904:	b993      	cbnz	r3, b592c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b5906:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b590a:	a905      	add	r1, sp, #20
   b590c:	a803      	add	r0, sp, #12
   b590e:	9205      	str	r2, [sp, #20]
   b5910:	f8ad 3018 	strh.w	r3, [sp, #24]
   b5914:	f7ff ff18 	bl	b5748 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b5918:	a805      	add	r0, sp, #20
   b591a:	f7ff fe82 	bl	b5622 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b591e:	a805      	add	r0, sp, #20
   b5920:	9909      	ldr	r1, [sp, #36]	; 0x24
   b5922:	f7ff feb1 	bl	b5688 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b5926:	a806      	add	r0, sp, #24
   b5928:	f7fe fcf2 	bl	b4310 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b592c:	a903      	add	r1, sp, #12
   b592e:	a805      	add	r0, sp, #20
   b5930:	f7ff fea1 	bl	b5676 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5934:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b5936:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5938:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b593a:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b593c:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b593e:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b5940:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b5942:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b5944:	f7fe fce4 	bl	b4310 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5948:	a804      	add	r0, sp, #16
   b594a:	f7fe fce1 	bl	b4310 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b594e:	e7ab      	b.n	b58a8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b5950:	000b59d1 	.word	0x000b59d1

000b5954 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b5954:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b5956:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5958:	4605      	mov	r5, r0
	switch (__op)
   b595a:	d103      	bne.n	b5964 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b595c:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b595e:	6003      	str	r3, [r0, #0]
      }
   b5960:	2000      	movs	r0, #0
   b5962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b5964:	2a02      	cmp	r2, #2
   b5966:	d010      	beq.n	b598a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b5968:	2a03      	cmp	r2, #3
   b596a:	d1f9      	bne.n	b5960 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b596c:	6804      	ldr	r4, [r0, #0]
   b596e:	2c00      	cmp	r4, #0
   b5970:	d0f6      	beq.n	b5960 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b5972:	f104 0010 	add.w	r0, r4, #16
   b5976:	f7ff fe54 	bl	b5622 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b597a:	4620      	mov	r0, r4
   b597c:	f7ff fe13 	bl	b55a6 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b5980:	2118      	movs	r1, #24
   b5982:	4620      	mov	r0, r4
   b5984:	f7fe fb8b 	bl	b409e <_ZdlPvj>
   b5988:	e7ea      	b.n	b5960 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b598a:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b598c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b598e:	f7fe fb82 	bl	b4096 <_Znwj>
   b5992:	4604      	mov	r4, r0
   b5994:	b150      	cbz	r0, b59ac <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b5996:	4631      	mov	r1, r6
   b5998:	f7ff fec6 	bl	b5728 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b599c:	6930      	ldr	r0, [r6, #16]
   b599e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b59a2:	b108      	cbz	r0, b59a8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b59a4:	f003 f940 	bl	b8c28 <strdup>
        type_(type) {
   b59a8:	6120      	str	r0, [r4, #16]
   b59aa:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b59ac:	602c      	str	r4, [r5, #0]
	}
   b59ae:	e7d7      	b.n	b5960 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b59b0 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b59b0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b59b2:	2300      	movs	r3, #0
   b59b4:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b59b6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b59b8:	4604      	mov	r4, r0
   b59ba:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b59bc:	b12b      	cbz	r3, b59ca <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b59be:	2202      	movs	r2, #2
   b59c0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b59c2:	68eb      	ldr	r3, [r5, #12]
   b59c4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b59c6:	68ab      	ldr	r3, [r5, #8]
   b59c8:	60a3      	str	r3, [r4, #8]
    }
   b59ca:	4620      	mov	r0, r4
   b59cc:	bd38      	pop	{r3, r4, r5, pc}
	...

000b59d0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b59d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b59d2:	b089      	sub	sp, #36	; 0x24
   b59d4:	4604      	mov	r4, r0
   b59d6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b59d8:	a801      	add	r0, sp, #4
   b59da:	4611      	mov	r1, r2
   b59dc:	f7ff fe54 	bl	b5688 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b59e0:	b1a4      	cbz	r4, b5a0c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b59e2:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b59e4:	b11d      	cbz	r5, b59ee <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b59e6:	4628      	mov	r0, r5
   b59e8:	f003 f91e 	bl	b8c28 <strdup>
   b59ec:	4605      	mov	r5, r0
   b59ee:	a801      	add	r0, sp, #4
   b59f0:	a903      	add	r1, sp, #12
        type_(type) {
   b59f2:	9503      	str	r5, [sp, #12]
   b59f4:	f8ad 4010 	strh.w	r4, [sp, #16]
   b59f8:	f7ff fea6 	bl	b5748 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b59fc:	a803      	add	r0, sp, #12
   b59fe:	f7ff fe10 	bl	b5622 <_ZN8particle5ErrorD1Ev>
   b5a02:	a802      	add	r0, sp, #8
   b5a04:	f7fe fc84 	bl	b4310 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5a08:	b009      	add	sp, #36	; 0x24
   b5a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b5a0c:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b5a0e:	2301      	movs	r3, #1
   b5a10:	e8d5 2f4f 	ldrexb	r2, [r5]
   b5a14:	2a00      	cmp	r2, #0
   b5a16:	d103      	bne.n	b5a20 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b5a18:	e8c5 3f41 	strexb	r1, r3, [r5]
   b5a1c:	2900      	cmp	r1, #0
   b5a1e:	d1f7      	bne.n	b5a10 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b5a20:	d1ef      	bne.n	b5a02 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b5a22:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b5a24:	f3bf 8f5b 	dmb	ish
   b5a28:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b5a2a:	1d2b      	adds	r3, r5, #4
   b5a2c:	f3bf 8f5b 	dmb	ish
   b5a30:	e853 6f00 	ldrex	r6, [r3]
   b5a34:	e843 4200 	strex	r2, r4, [r3]
   b5a38:	2a00      	cmp	r2, #0
   b5a3a:	d1f9      	bne.n	b5a30 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b5a3c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b5a40:	2e00      	cmp	r6, #0
   b5a42:	d0de      	beq.n	b5a02 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b5a44:	4620      	mov	r0, r4
   b5a46:	f7ff fcab 	bl	b53a0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b5a4a:	4607      	mov	r7, r0
   b5a4c:	b160      	cbz	r0, b5a68 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b5a4e:	f105 010c 	add.w	r1, r5, #12
   b5a52:	4630      	mov	r0, r6
   b5a54:	f7ff fe43 	bl	b56de <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b5a58:	4630      	mov	r0, r6
   b5a5a:	f7ff fda4 	bl	b55a6 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b5a5e:	2110      	movs	r1, #16
   b5a60:	4630      	mov	r0, r6
   b5a62:	f7fe fb1c 	bl	b409e <_ZdlPvj>
   b5a66:	e7cc      	b.n	b5a02 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b5a68:	4631      	mov	r1, r6
   b5a6a:	a803      	add	r0, sp, #12
   b5a6c:	f7ff ffa0 	bl	b59b0 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b5a70:	7b2b      	ldrb	r3, [r5, #12]
   b5a72:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b5a76:	2010      	movs	r0, #16
   b5a78:	f7fe fb0d 	bl	b4096 <_Znwj>
   b5a7c:	4605      	mov	r5, r0
   b5a7e:	b1d0      	cbz	r0, b5ab6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b5a80:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5a82:	2014      	movs	r0, #20
   b5a84:	f7fe fb07 	bl	b4096 <_Znwj>
   b5a88:	4604      	mov	r4, r0
   b5a8a:	b178      	cbz	r0, b5aac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b5a8c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b5a8e:	4601      	mov	r1, r0
   b5a90:	a803      	add	r0, sp, #12
   b5a92:	f7ff fd91 	bl	b55b8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5a96:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5a98:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5a9a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5a9c:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b5a9e:	9205      	str	r2, [sp, #20]
   b5aa0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b5aa2:	60e3      	str	r3, [r4, #12]
   b5aa4:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b5aa8:	9206      	str	r2, [sp, #24]
   b5aaa:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b5aac:	4b06      	ldr	r3, [pc, #24]	; (b5ac8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b5aae:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b5ab0:	4b06      	ldr	r3, [pc, #24]	; (b5acc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5ab2:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b5ab4:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b5ab6:	a803      	add	r0, sp, #12
   b5ab8:	f7ff fd75 	bl	b55a6 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b5abc:	2200      	movs	r2, #0
   b5abe:	4629      	mov	r1, r5
   b5ac0:	4803      	ldr	r0, [pc, #12]	; (b5ad0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b5ac2:	f7ff fc75 	bl	b53b0 <application_thread_invoke>
   b5ac6:	e7c7      	b.n	b5a58 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b5ac8:	000b56f1 	.word	0x000b56f1
   b5acc:	000b5ad5 	.word	0x000b5ad5
   b5ad0:	000b557f 	.word	0x000b557f

000b5ad4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b5ad4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b5ad6:	b570      	push	{r4, r5, r6, lr}
   b5ad8:	4604      	mov	r4, r0
	switch (__op)
   b5ada:	d103      	bne.n	b5ae4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b5adc:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b5ade:	6003      	str	r3, [r0, #0]
      }
   b5ae0:	2000      	movs	r0, #0
   b5ae2:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b5ae4:	2a02      	cmp	r2, #2
   b5ae6:	d00c      	beq.n	b5b02 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b5ae8:	2a03      	cmp	r2, #3
   b5aea:	d1f9      	bne.n	b5ae0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b5aec:	6804      	ldr	r4, [r0, #0]
   b5aee:	2c00      	cmp	r4, #0
   b5af0:	d0f6      	beq.n	b5ae0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b5af2:	4620      	mov	r0, r4
   b5af4:	f7ff fd57 	bl	b55a6 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b5af8:	2114      	movs	r1, #20
   b5afa:	4620      	mov	r0, r4
   b5afc:	f7fe facf 	bl	b409e <_ZdlPvj>
   b5b00:	e7ee      	b.n	b5ae0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b5b02:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b5b04:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b5b06:	f7fe fac6 	bl	b4096 <_Znwj>
   b5b0a:	4605      	mov	r5, r0
   b5b0c:	b120      	cbz	r0, b5b18 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b5b0e:	4631      	mov	r1, r6
   b5b10:	f7ff ff4e 	bl	b59b0 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b5b14:	7c33      	ldrb	r3, [r6, #16]
   b5b16:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b5b18:	6025      	str	r5, [r4, #0]
	}
   b5b1a:	e7e1      	b.n	b5ae0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b5b1c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5b1c:	2200      	movs	r2, #0
   b5b1e:	6840      	ldr	r0, [r0, #4]
   b5b20:	4611      	mov	r1, r2
   b5b22:	f7ff bcb9 	b.w	b5498 <network_listening>

000b5b26 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5b26:	2200      	movs	r2, #0
   b5b28:	6840      	ldr	r0, [r0, #4]
   b5b2a:	4611      	mov	r1, r2
   b5b2c:	f7ff bcc4 	b.w	b54b8 <network_get_listen_timeout>

000b5b30 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5b30:	6840      	ldr	r0, [r0, #4]
   b5b32:	2200      	movs	r2, #0
   b5b34:	f7ff bcb8 	b.w	b54a8 <network_set_listen_timeout>

000b5b38 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5b38:	6840      	ldr	r0, [r0, #4]
   b5b3a:	2200      	movs	r2, #0
   b5b3c:	f081 0101 	eor.w	r1, r1, #1
   b5b40:	f7ff bca2 	b.w	b5488 <network_listen>

000b5b44 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5b44:	2300      	movs	r3, #0
   b5b46:	6840      	ldr	r0, [r0, #4]
   b5b48:	461a      	mov	r2, r3
   b5b4a:	4619      	mov	r1, r3
   b5b4c:	f7ff bc94 	b.w	b5478 <network_off>

000b5b50 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5b50:	2300      	movs	r3, #0
   b5b52:	6840      	ldr	r0, [r0, #4]
   b5b54:	461a      	mov	r2, r3
   b5b56:	4619      	mov	r1, r3
   b5b58:	f7ff bc86 	b.w	b5468 <network_on>

000b5b5c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b5b5c:	2200      	movs	r2, #0
   b5b5e:	6840      	ldr	r0, [r0, #4]
   b5b60:	4611      	mov	r1, r2
   b5b62:	f7ff bc79 	b.w	b5458 <network_ready>

000b5b66 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5b66:	2200      	movs	r2, #0
   b5b68:	6840      	ldr	r0, [r0, #4]
   b5b6a:	4611      	mov	r1, r2
   b5b6c:	f7ff bc64 	b.w	b5438 <network_connecting>

000b5b70 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5b70:	6840      	ldr	r0, [r0, #4]
   b5b72:	2200      	movs	r2, #0
   b5b74:	2102      	movs	r1, #2
   b5b76:	f7ff bc67 	b.w	b5448 <network_disconnect>

000b5b7a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5b7a:	2300      	movs	r3, #0
   b5b7c:	6840      	ldr	r0, [r0, #4]
   b5b7e:	461a      	mov	r2, r3
   b5b80:	f7ff bc52 	b.w	b5428 <network_connect>

000b5b84 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5b84:	4b02      	ldr	r3, [pc, #8]	; (b5b90 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b5b86:	2203      	movs	r2, #3
   b5b88:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b5b8a:	4a02      	ldr	r2, [pc, #8]	; (b5b94 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b5b8c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b5b8e:	4770      	bx	lr
   b5b90:	2003e6cc 	.word	0x2003e6cc
   b5b94:	000b8f10 	.word	0x000b8f10

000b5b98 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b5b98:	4770      	bx	lr

000b5b9a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b5b9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5b9c:	4606      	mov	r6, r0
   b5b9e:	4615      	mov	r5, r2
   b5ba0:	460c      	mov	r4, r1
   b5ba2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b5ba4:	42bc      	cmp	r4, r7
   b5ba6:	d006      	beq.n	b5bb6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b5ba8:	6833      	ldr	r3, [r6, #0]
   b5baa:	f814 1b01 	ldrb.w	r1, [r4], #1
   b5bae:	689b      	ldr	r3, [r3, #8]
   b5bb0:	4630      	mov	r0, r6
   b5bb2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b5bb4:	e7f6      	b.n	b5ba4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b5bb6:	4628      	mov	r0, r5
   b5bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5bba <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b5bba:	7c00      	ldrb	r0, [r0, #16]
   b5bbc:	2200      	movs	r2, #0
   b5bbe:	f7ff bacf 	b.w	b5160 <hal_i2c_write>

000b5bc2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b5bc2:	7c00      	ldrb	r0, [r0, #16]
   b5bc4:	2100      	movs	r1, #0
   b5bc6:	f7ff bad3 	b.w	b5170 <hal_i2c_available>

000b5bca <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b5bca:	7c00      	ldrb	r0, [r0, #16]
   b5bcc:	2100      	movs	r1, #0
   b5bce:	f7ff bad7 	b.w	b5180 <hal_i2c_read>

000b5bd2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b5bd2:	7c00      	ldrb	r0, [r0, #16]
   b5bd4:	2100      	movs	r1, #0
   b5bd6:	f7ff badb 	b.w	b5190 <hal_i2c_peek>

000b5bda <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b5bda:	7c00      	ldrb	r0, [r0, #16]
   b5bdc:	2100      	movs	r1, #0
   b5bde:	f7ff badf 	b.w	b51a0 <hal_i2c_flush>

000b5be2 <_ZN7TwoWireD0Ev>:
   b5be2:	b510      	push	{r4, lr}
   b5be4:	2114      	movs	r1, #20
   b5be6:	4604      	mov	r4, r0
   b5be8:	f7fe fa59 	bl	b409e <_ZdlPvj>
   b5bec:	4620      	mov	r0, r4
   b5bee:	bd10      	pop	{r4, pc}

000b5bf0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5bf0:	b538      	push	{r3, r4, r5, lr}
   b5bf2:	4604      	mov	r4, r0
   b5bf4:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b5bf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5bfa:	2200      	movs	r2, #0
   b5bfc:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5c00:	4b09      	ldr	r3, [pc, #36]	; (b5c28 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b5c02:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5c04:	4608      	mov	r0, r1
   b5c06:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b5c08:	4629      	mov	r1, r5
   b5c0a:	f7ff fad9 	bl	b51c0 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b5c0e:	30bf      	adds	r0, #191	; 0xbf
   b5c10:	d108      	bne.n	b5c24 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b5c12:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b5c14:	07db      	lsls	r3, r3, #31
   b5c16:	d505      	bpl.n	b5c24 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b5c18:	6868      	ldr	r0, [r5, #4]
   b5c1a:	f7ff fc6d 	bl	b54f8 <free>
    free(conf.tx_buffer);
   b5c1e:	68e8      	ldr	r0, [r5, #12]
   b5c20:	f7ff fc6a 	bl	b54f8 <free>
}
   b5c24:	4620      	mov	r0, r4
   b5c26:	bd38      	pop	{r3, r4, r5, pc}
   b5c28:	000b8f4c 	.word	0x000b8f4c

000b5c2c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b5c2c:	2300      	movs	r3, #0
   b5c2e:	7c00      	ldrb	r0, [r0, #16]
   b5c30:	461a      	mov	r2, r3
   b5c32:	4619      	mov	r1, r3
   b5c34:	f7ff ba7c 	b.w	b5130 <hal_i2c_begin>

000b5c38 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b5c38:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b5c3a:	2200      	movs	r2, #0
   b5c3c:	2314      	movs	r3, #20
   b5c3e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b5c42:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b5c46:	780b      	ldrb	r3, [r1, #0]
   b5c48:	f88d 3008 	strb.w	r3, [sp, #8]
   b5c4c:	684b      	ldr	r3, [r1, #4]
   b5c4e:	9303      	str	r3, [sp, #12]
   b5c50:	68cb      	ldr	r3, [r1, #12]
   b5c52:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b5c54:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b5c56:	7a0b      	ldrb	r3, [r1, #8]
   b5c58:	9305      	str	r3, [sp, #20]
   b5c5a:	a901      	add	r1, sp, #4
   b5c5c:	f7ff fab8 	bl	b51d0 <hal_i2c_request_ex>
}
   b5c60:	b007      	add	sp, #28
   b5c62:	f85d fb04 	ldr.w	pc, [sp], #4

000b5c66 <_ZN7TwoWire11requestFromEhjh>:
{
   b5c66:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b5c68:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b5c6a:	f88d 1000 	strb.w	r1, [sp]
   b5c6e:	f04f 0164 	mov.w	r1, #100	; 0x64
   b5c72:	9103      	str	r1, [sp, #12]
   b5c74:	bf18      	it	ne
   b5c76:	2301      	movne	r3, #1
   b5c78:	4669      	mov	r1, sp
    size_ = size;
   b5c7a:	9201      	str	r2, [sp, #4]
   b5c7c:	f88d 3008 	strb.w	r3, [sp, #8]
   b5c80:	f7ff ffda 	bl	b5c38 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b5c84:	b005      	add	sp, #20
   b5c86:	f85d fb04 	ldr.w	pc, [sp], #4

000b5c8a <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b5c8a:	2301      	movs	r3, #1
   b5c8c:	f7ff bfeb 	b.w	b5c66 <_ZN7TwoWire11requestFromEhjh>

000b5c90 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b5c90:	7c00      	ldrb	r0, [r0, #16]
   b5c92:	2200      	movs	r2, #0
   b5c94:	f7ff ba54 	b.w	b5140 <hal_i2c_begin_transmission>

000b5c98 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b5c98:	7c00      	ldrb	r0, [r0, #16]
   b5c9a:	2200      	movs	r2, #0
   b5c9c:	f7ff ba58 	b.w	b5150 <hal_i2c_end_transmission>

000b5ca0 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b5ca0:	2101      	movs	r1, #1
   b5ca2:	f7ff bff9 	b.w	b5c98 <_ZN7TwoWire15endTransmissionEh>

000b5ca6 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b5ca6:	4770      	bx	lr

000b5ca8 <_ZN9IPAddressD0Ev>:
   b5ca8:	b510      	push	{r4, lr}
   b5caa:	2118      	movs	r1, #24
   b5cac:	4604      	mov	r4, r0
   b5cae:	f7fe f9f6 	bl	b409e <_ZdlPvj>
   b5cb2:	4620      	mov	r0, r4
   b5cb4:	bd10      	pop	{r4, pc}

000b5cb6 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b5cb6:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b5cb8:	7d03      	ldrb	r3, [r0, #20]
   b5cba:	2b06      	cmp	r3, #6
{
   b5cbc:	b08d      	sub	sp, #52	; 0x34
   b5cbe:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5cc0:	f100 0704 	add.w	r7, r0, #4
   b5cc4:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b5cc8:	d012      	beq.n	b5cf0 <_ZNK9IPAddress7printToER5Print+0x3a>
   b5cca:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5cce:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b5cd2:	220a      	movs	r2, #10
   b5cd4:	4630      	mov	r0, r6
   b5cd6:	f000 f95e 	bl	b5f96 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b5cda:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b5cdc:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b5cde:	d019      	beq.n	b5d14 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b5ce0:	2c00      	cmp	r4, #0
   b5ce2:	d0f4      	beq.n	b5cce <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b5ce4:	212e      	movs	r1, #46	; 0x2e
   b5ce6:	4630      	mov	r0, r6
   b5ce8:	f000 f93c 	bl	b5f64 <_ZN5Print5printEc>
   b5cec:	4404      	add	r4, r0
   b5cee:	e7ee      	b.n	b5cce <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5cf0:	232f      	movs	r3, #47	; 0x2f
   b5cf2:	466a      	mov	r2, sp
   b5cf4:	4639      	mov	r1, r7
   b5cf6:	200a      	movs	r0, #10
		buf[0] = 0;
   b5cf8:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5cfc:	f7ff fa70 	bl	b51e0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b5d00:	4668      	mov	r0, sp
   b5d02:	f002 ffae 	bl	b8c62 <strlen>
   b5d06:	6833      	ldr	r3, [r6, #0]
   b5d08:	4602      	mov	r2, r0
   b5d0a:	68db      	ldr	r3, [r3, #12]
   b5d0c:	4669      	mov	r1, sp
   b5d0e:	4630      	mov	r0, r6
   b5d10:	4798      	blx	r3
   b5d12:	4604      	mov	r4, r0
    }
    return n;
}
   b5d14:	4620      	mov	r0, r4
   b5d16:	b00d      	add	sp, #52	; 0x34
   b5d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b5d1c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b5d1c:	b510      	push	{r4, lr}
   b5d1e:	4b05      	ldr	r3, [pc, #20]	; (b5d34 <_ZN9IPAddressC1Ev+0x18>)
   b5d20:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b5d22:	2211      	movs	r2, #17
   b5d24:	f840 3b04 	str.w	r3, [r0], #4
   b5d28:	2100      	movs	r1, #0
   b5d2a:	f002 ff47 	bl	b8bbc <memset>
}
   b5d2e:	4620      	mov	r0, r4
   b5d30:	bd10      	pop	{r4, pc}
   b5d32:	bf00      	nop
   b5d34:	000b8f74 	.word	0x000b8f74

000b5d38 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b5d38:	4603      	mov	r3, r0
   b5d3a:	4a07      	ldr	r2, [pc, #28]	; (b5d58 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b5d3c:	b510      	push	{r4, lr}
   b5d3e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b5d42:	f101 0210 	add.w	r2, r1, #16
   b5d46:	f851 4b04 	ldr.w	r4, [r1], #4
   b5d4a:	f843 4b04 	str.w	r4, [r3], #4
   b5d4e:	4291      	cmp	r1, r2
   b5d50:	d1f9      	bne.n	b5d46 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b5d52:	780a      	ldrb	r2, [r1, #0]
   b5d54:	701a      	strb	r2, [r3, #0]
}
   b5d56:	bd10      	pop	{r4, pc}
   b5d58:	000b8f74 	.word	0x000b8f74

000b5d5c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b5d5c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b5d5e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b5d62:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b5d66:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b5d6a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b5d6e:	2304      	movs	r3, #4
   b5d70:	6041      	str	r1, [r0, #4]
   b5d72:	7503      	strb	r3, [r0, #20]
}
   b5d74:	bd10      	pop	{r4, pc}
	...

000b5d78 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5d78:	b507      	push	{r0, r1, r2, lr}
   b5d7a:	4b06      	ldr	r3, [pc, #24]	; (b5d94 <_ZN9IPAddressC1EPKh+0x1c>)
   b5d7c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b5d7e:	78cb      	ldrb	r3, [r1, #3]
   b5d80:	9300      	str	r3, [sp, #0]
   b5d82:	788b      	ldrb	r3, [r1, #2]
   b5d84:	784a      	ldrb	r2, [r1, #1]
   b5d86:	7809      	ldrb	r1, [r1, #0]
   b5d88:	f7ff ffe8 	bl	b5d5c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b5d8c:	b003      	add	sp, #12
   b5d8e:	f85d fb04 	ldr.w	pc, [sp], #4
   b5d92:	bf00      	nop
   b5d94:	000b8f74 	.word	0x000b8f74

000b5d98 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b5d98:	4b01      	ldr	r3, [pc, #4]	; (b5da0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b5d9a:	4a02      	ldr	r2, [pc, #8]	; (b5da4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b5d9c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b5d9e:	4770      	bx	lr
   b5da0:	2003e6d4 	.word	0x2003e6d4
   b5da4:	000b8f80 	.word	0x000b8f80

000b5da8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b5da8:	2300      	movs	r3, #0
   b5daa:	6840      	ldr	r0, [r0, #4]
   b5dac:	461a      	mov	r2, r3
   b5dae:	f7ff bb3b 	b.w	b5428 <network_connect>

000b5db2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b5db2:	6840      	ldr	r0, [r0, #4]
   b5db4:	2200      	movs	r2, #0
   b5db6:	2102      	movs	r1, #2
   b5db8:	f7ff bb46 	b.w	b5448 <network_disconnect>

000b5dbc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b5dbc:	2200      	movs	r2, #0
   b5dbe:	6840      	ldr	r0, [r0, #4]
   b5dc0:	4611      	mov	r1, r2
   b5dc2:	f7ff bb39 	b.w	b5438 <network_connecting>

000b5dc6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b5dc6:	2200      	movs	r2, #0
   b5dc8:	6840      	ldr	r0, [r0, #4]
   b5dca:	4611      	mov	r1, r2
   b5dcc:	f7ff bb44 	b.w	b5458 <network_ready>

000b5dd0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b5dd0:	2300      	movs	r3, #0
   b5dd2:	6840      	ldr	r0, [r0, #4]
   b5dd4:	461a      	mov	r2, r3
   b5dd6:	4619      	mov	r1, r3
   b5dd8:	f7ff bb46 	b.w	b5468 <network_on>

000b5ddc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b5ddc:	2300      	movs	r3, #0
   b5dde:	6840      	ldr	r0, [r0, #4]
   b5de0:	461a      	mov	r2, r3
   b5de2:	4619      	mov	r1, r3
   b5de4:	f7ff bb48 	b.w	b5478 <network_off>

000b5de8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b5de8:	6840      	ldr	r0, [r0, #4]
   b5dea:	2100      	movs	r1, #0
   b5dec:	f7ff bb6c 	b.w	b54c8 <network_is_on>

000b5df0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b5df0:	6840      	ldr	r0, [r0, #4]
   b5df2:	2100      	movs	r1, #0
   b5df4:	f7ff bb70 	b.w	b54d8 <network_is_off>

000b5df8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5df8:	6840      	ldr	r0, [r0, #4]
   b5dfa:	2200      	movs	r2, #0
   b5dfc:	f081 0101 	eor.w	r1, r1, #1
   b5e00:	f7ff bb42 	b.w	b5488 <network_listen>

000b5e04 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b5e04:	6840      	ldr	r0, [r0, #4]
   b5e06:	2200      	movs	r2, #0
   b5e08:	f7ff bb4e 	b.w	b54a8 <network_set_listen_timeout>

000b5e0c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b5e0c:	2200      	movs	r2, #0
   b5e0e:	6840      	ldr	r0, [r0, #4]
   b5e10:	4611      	mov	r1, r2
   b5e12:	f7ff bb51 	b.w	b54b8 <network_get_listen_timeout>

000b5e16 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b5e16:	2200      	movs	r2, #0
   b5e18:	6840      	ldr	r0, [r0, #4]
   b5e1a:	4611      	mov	r1, r2
   b5e1c:	f7ff bb3c 	b.w	b5498 <network_listening>

000b5e20 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b5e20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5e24:	b095      	sub	sp, #84	; 0x54
   b5e26:	4614      	mov	r4, r2
   b5e28:	460d      	mov	r5, r1
   b5e2a:	4607      	mov	r7, r0
    IPAddress addr;
   b5e2c:	f7ff ff76 	bl	b5d1c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b5e30:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b5e32:	221c      	movs	r2, #28
   b5e34:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b5e36:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5e38:	f002 fec0 	bl	b8bbc <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b5e3c:	2340      	movs	r3, #64	; 0x40
   b5e3e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b5e40:	4620      	mov	r0, r4
   b5e42:	466b      	mov	r3, sp
   b5e44:	aa0c      	add	r2, sp, #48	; 0x30
   b5e46:	2100      	movs	r1, #0
   b5e48:	f7ff f9da 	bl	b5200 <netdb_getaddrinfo>
    if (!r) {
   b5e4c:	4604      	mov	r4, r0
   b5e4e:	2800      	cmp	r0, #0
   b5e50:	d14b      	bne.n	b5eea <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5e52:	4602      	mov	r2, r0
   b5e54:	2101      	movs	r1, #1
   b5e56:	6868      	ldr	r0, [r5, #4]
   b5e58:	f7ff fafe 	bl	b5458 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5e5c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5e5e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5e60:	4622      	mov	r2, r4
   b5e62:	6868      	ldr	r0, [r5, #4]
   b5e64:	f7ff faf8 	bl	b5458 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5e68:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5e6a:	4681      	mov	r9, r0
        bool ok = false;
   b5e6c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5e6e:	2e00      	cmp	r6, #0
   b5e70:	d03b      	beq.n	b5eea <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b5e72:	2900      	cmp	r1, #0
   b5e74:	d139      	bne.n	b5eea <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b5e76:	6873      	ldr	r3, [r6, #4]
   b5e78:	2b02      	cmp	r3, #2
   b5e7a:	d003      	beq.n	b5e84 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b5e7c:	2b0a      	cmp	r3, #10
   b5e7e:	d011      	beq.n	b5ea4 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5e80:	69f6      	ldr	r6, [r6, #28]
   b5e82:	e7f4      	b.n	b5e6e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b5e84:	f1b8 0f00 	cmp.w	r8, #0
   b5e88:	d0fa      	beq.n	b5e80 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b5e8a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b5e8c:	a806      	add	r0, sp, #24
   b5e8e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5e90:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b5e92:	f7ff ff71 	bl	b5d78 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5e96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5e98:	1d3c      	adds	r4, r7, #4
   b5e9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5e9c:	682b      	ldr	r3, [r5, #0]
   b5e9e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5ea0:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b5ea2:	e7ed      	b.n	b5e80 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b5ea4:	f1b9 0f00 	cmp.w	r9, #0
   b5ea8:	d0ea      	beq.n	b5e80 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b5eaa:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b5eac:	2210      	movs	r2, #16
   b5eae:	a801      	add	r0, sp, #4
   b5eb0:	f002 fe84 	bl	b8bbc <memset>
                    a.v = 6;
   b5eb4:	2306      	movs	r3, #6
   b5eb6:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5eba:	ad01      	add	r5, sp, #4
   b5ebc:	f104 0308 	add.w	r3, r4, #8
   b5ec0:	3418      	adds	r4, #24
   b5ec2:	6818      	ldr	r0, [r3, #0]
   b5ec4:	6859      	ldr	r1, [r3, #4]
   b5ec6:	462a      	mov	r2, r5
   b5ec8:	c203      	stmia	r2!, {r0, r1}
   b5eca:	3308      	adds	r3, #8
   b5ecc:	42a3      	cmp	r3, r4
   b5ece:	4615      	mov	r5, r2
   b5ed0:	d1f7      	bne.n	b5ec2 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b5ed2:	a901      	add	r1, sp, #4
   b5ed4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b5ed6:	ad07      	add	r5, sp, #28
   b5ed8:	f7ff ff2e 	bl	b5d38 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5edc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5ede:	1d3c      	adds	r4, r7, #4
   b5ee0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5ee2:	682b      	ldr	r3, [r5, #0]
   b5ee4:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5ee6:	4649      	mov	r1, r9
   b5ee8:	e7ca      	b.n	b5e80 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b5eea:	9800      	ldr	r0, [sp, #0]
   b5eec:	f7ff f980 	bl	b51f0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b5ef0:	4638      	mov	r0, r7
   b5ef2:	b015      	add	sp, #84	; 0x54
   b5ef4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5ef8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b5ef8:	4b02      	ldr	r3, [pc, #8]	; (b5f04 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b5efa:	4a03      	ldr	r2, [pc, #12]	; (b5f08 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b5efc:	601a      	str	r2, [r3, #0]
   b5efe:	2200      	movs	r2, #0
   b5f00:	605a      	str	r2, [r3, #4]

} // spark
   b5f02:	4770      	bx	lr
   b5f04:	2003e6d8 	.word	0x2003e6d8
   b5f08:	000b8f8c 	.word	0x000b8f8c

000b5f0c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b5f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5f0e:	4606      	mov	r6, r0
   b5f10:	460d      	mov	r5, r1
  size_t n = 0;
   b5f12:	188f      	adds	r7, r1, r2
   b5f14:	2400      	movs	r4, #0
  while (size--) {
   b5f16:	42bd      	cmp	r5, r7
   b5f18:	d00c      	beq.n	b5f34 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b5f1a:	6833      	ldr	r3, [r6, #0]
   b5f1c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5f20:	689b      	ldr	r3, [r3, #8]
   b5f22:	4630      	mov	r0, r6
   b5f24:	4798      	blx	r3
     if (chunk>=0)
   b5f26:	1e03      	subs	r3, r0, #0
   b5f28:	db01      	blt.n	b5f2e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b5f2a:	441c      	add	r4, r3
  while (size--) {
   b5f2c:	e7f3      	b.n	b5f16 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b5f2e:	2c00      	cmp	r4, #0
   b5f30:	bf08      	it	eq
   b5f32:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b5f34:	4620      	mov	r0, r4
   b5f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5f38 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b5f38:	b513      	push	{r0, r1, r4, lr}
   b5f3a:	4604      	mov	r4, r0
    }
   b5f3c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b5f3e:	b159      	cbz	r1, b5f58 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5f40:	9101      	str	r1, [sp, #4]
   b5f42:	f002 fe8e 	bl	b8c62 <strlen>
   b5f46:	6823      	ldr	r3, [r4, #0]
   b5f48:	9901      	ldr	r1, [sp, #4]
   b5f4a:	68db      	ldr	r3, [r3, #12]
   b5f4c:	4602      	mov	r2, r0
   b5f4e:	4620      	mov	r0, r4
    }
   b5f50:	b002      	add	sp, #8
   b5f52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b5f56:	4718      	bx	r3
    }
   b5f58:	b002      	add	sp, #8
   b5f5a:	bd10      	pop	{r4, pc}

000b5f5c <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b5f5c:	b508      	push	{r3, lr}
  return write(str);
   b5f5e:	f7ff ffeb 	bl	b5f38 <_ZN5Print5writeEPKc>
}
   b5f62:	bd08      	pop	{r3, pc}

000b5f64 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b5f64:	6803      	ldr	r3, [r0, #0]
   b5f66:	689b      	ldr	r3, [r3, #8]
   b5f68:	4718      	bx	r3

000b5f6a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b5f6a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b5f6c:	210d      	movs	r1, #13
{
   b5f6e:	4605      	mov	r5, r0
  size_t n = print('\r');
   b5f70:	f7ff fff8 	bl	b5f64 <_ZN5Print5printEc>
  n += print('\n');
   b5f74:	210a      	movs	r1, #10
  size_t n = print('\r');
   b5f76:	4604      	mov	r4, r0
  n += print('\n');
   b5f78:	4628      	mov	r0, r5
   b5f7a:	f7ff fff3 	bl	b5f64 <_ZN5Print5printEc>
  return n;
}
   b5f7e:	4420      	add	r0, r4
   b5f80:	bd38      	pop	{r3, r4, r5, pc}

000b5f82 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b5f82:	b538      	push	{r3, r4, r5, lr}
   b5f84:	4605      	mov	r5, r0
  return write(str);
   b5f86:	f7ff ffd7 	bl	b5f38 <_ZN5Print5writeEPKc>
   b5f8a:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b5f8c:	4628      	mov	r0, r5
   b5f8e:	f7ff ffec 	bl	b5f6a <_ZN5Print7printlnEv>
  return n;
}
   b5f92:	4420      	add	r0, r4
   b5f94:	bd38      	pop	{r3, r4, r5, pc}

000b5f96 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b5f96:	b530      	push	{r4, r5, lr}
   b5f98:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b5f9a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5f9c:	2a01      	cmp	r2, #1
  *str = '\0';
   b5f9e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b5fa2:	bf98      	it	ls
   b5fa4:	220a      	movls	r2, #10
   b5fa6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b5fa8:	460d      	mov	r5, r1
   b5faa:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b5fae:	fb01 5312 	mls	r3, r1, r2, r5
   b5fb2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5fb6:	2b09      	cmp	r3, #9
   b5fb8:	bf94      	ite	ls
   b5fba:	3330      	addls	r3, #48	; 0x30
   b5fbc:	3337      	addhi	r3, #55	; 0x37
   b5fbe:	b2db      	uxtb	r3, r3
  } while(n);
   b5fc0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5fc2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b5fc6:	d9ef      	bls.n	b5fa8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b5fc8:	4621      	mov	r1, r4
   b5fca:	f7ff ffb5 	bl	b5f38 <_ZN5Print5writeEPKc>
}
   b5fce:	b00b      	add	sp, #44	; 0x2c
   b5fd0:	bd30      	pop	{r4, r5, pc}
	...

000b5fd4 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   b5fd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5fd8:	ec55 4b10 	vmov	r4, r5, d0
   b5fdc:	4606      	mov	r6, r0
   b5fde:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   b5fe0:	ee10 2a10 	vmov	r2, s0
   b5fe4:	ee10 0a10 	vmov	r0, s0
   b5fe8:	462b      	mov	r3, r5
   b5fea:	4629      	mov	r1, r5
   b5fec:	f002 fa5c 	bl	b84a8 <__aeabi_dcmpun>
   b5ff0:	b140      	cbz	r0, b6004 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   b5ff2:	4953      	ldr	r1, [pc, #332]	; (b6140 <_ZN5Print10printFloatEdh+0x16c>)
   b5ff4:	4630      	mov	r0, r6
   b5ff6:	f7ff ff9f 	bl	b5f38 <_ZN5Print5writeEPKc>
   b5ffa:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   b5ffc:	4650      	mov	r0, sl
   b5ffe:	b003      	add	sp, #12
   b6000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   b6004:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   b6008:	4b4e      	ldr	r3, [pc, #312]	; (b6144 <_ZN5Print10printFloatEdh+0x170>)
   b600a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b600e:	4620      	mov	r0, r4
   b6010:	4649      	mov	r1, r9
   b6012:	f002 fa49 	bl	b84a8 <__aeabi_dcmpun>
   b6016:	b948      	cbnz	r0, b602c <_ZN5Print10printFloatEdh+0x58>
   b6018:	4b4a      	ldr	r3, [pc, #296]	; (b6144 <_ZN5Print10printFloatEdh+0x170>)
   b601a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b601e:	4620      	mov	r0, r4
   b6020:	4649      	mov	r1, r9
   b6022:	f002 fa23 	bl	b846c <__aeabi_dcmple>
   b6026:	b908      	cbnz	r0, b602c <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   b6028:	4947      	ldr	r1, [pc, #284]	; (b6148 <_ZN5Print10printFloatEdh+0x174>)
   b602a:	e7e3      	b.n	b5ff4 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   b602c:	4b47      	ldr	r3, [pc, #284]	; (b614c <_ZN5Print10printFloatEdh+0x178>)
   b602e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b6032:	4620      	mov	r0, r4
   b6034:	4629      	mov	r1, r5
   b6036:	f002 fa2d 	bl	b8494 <__aeabi_dcmpgt>
   b603a:	b108      	cbz	r0, b6040 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   b603c:	4944      	ldr	r1, [pc, #272]	; (b6150 <_ZN5Print10printFloatEdh+0x17c>)
   b603e:	e7d9      	b.n	b5ff4 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   b6040:	4b44      	ldr	r3, [pc, #272]	; (b6154 <_ZN5Print10printFloatEdh+0x180>)
   b6042:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b6046:	4620      	mov	r0, r4
   b6048:	4629      	mov	r1, r5
   b604a:	f002 fa05 	bl	b8458 <__aeabi_dcmplt>
   b604e:	2800      	cmp	r0, #0
   b6050:	d1f4      	bne.n	b603c <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   b6052:	2200      	movs	r2, #0
   b6054:	2300      	movs	r3, #0
   b6056:	4620      	mov	r0, r4
   b6058:	4629      	mov	r1, r5
   b605a:	f002 f9fd 	bl	b8458 <__aeabi_dcmplt>
   b605e:	b1d0      	cbz	r0, b6096 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   b6060:	212d      	movs	r1, #45	; 0x2d
   b6062:	4630      	mov	r0, r6
   b6064:	f7ff ff7e 	bl	b5f64 <_ZN5Print5printEc>
     number = -number;
   b6068:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   b606c:	4682      	mov	sl, r0
     number = -number;
   b606e:	461d      	mov	r5, r3
  double rounding = 0.5;
   b6070:	4939      	ldr	r1, [pc, #228]	; (b6158 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   b6072:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b6160 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   b6076:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   b607a:	2000      	movs	r0, #0
    rounding /= 10.0;
   b607c:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   b6080:	fa5f f38b 	uxtb.w	r3, fp
   b6084:	429f      	cmp	r7, r3
   b6086:	d908      	bls.n	b609a <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   b6088:	4642      	mov	r2, r8
   b608a:	464b      	mov	r3, r9
   b608c:	f002 f89c 	bl	b81c8 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   b6090:	f10b 0b01 	add.w	fp, fp, #1
   b6094:	e7f4      	b.n	b6080 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   b6096:	4682      	mov	sl, r0
   b6098:	e7ea      	b.n	b6070 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   b609a:	4622      	mov	r2, r4
   b609c:	462b      	mov	r3, r5
   b609e:	f001 fdb3 	bl	b7c08 <__adddf3>
   b60a2:	460d      	mov	r5, r1
   b60a4:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   b60a6:	f002 fa3d 	bl	b8524 <__aeabi_d2uiz>
   b60aa:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   b60ac:	f001 fee8 	bl	b7e80 <__aeabi_ui2d>
   b60b0:	4602      	mov	r2, r0
   b60b2:	460b      	mov	r3, r1
   b60b4:	4620      	mov	r0, r4
   b60b6:	4629      	mov	r1, r5
   b60b8:	f001 fda4 	bl	b7c04 <__aeabi_dsub>
        return printNumber(val, base) + t;
   b60bc:	220a      	movs	r2, #10
   b60be:	4604      	mov	r4, r0
   b60c0:	460d      	mov	r5, r1
   b60c2:	4630      	mov	r0, r6
   b60c4:	4641      	mov	r1, r8
   b60c6:	f7ff ff66 	bl	b5f96 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   b60ca:	4482      	add	sl, r0
  if (digits > 0) {
   b60cc:	2f00      	cmp	r7, #0
   b60ce:	d095      	beq.n	b5ffc <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   b60d0:	4922      	ldr	r1, [pc, #136]	; (b615c <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   b60d2:	f8df 908c 	ldr.w	r9, [pc, #140]	; b6160 <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   b60d6:	4630      	mov	r0, r6
   b60d8:	f7ff ff2e 	bl	b5f38 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   b60dc:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   b60e0:	4482      	add	sl, r0
  while (digits-- > 0)
   b60e2:	2f00      	cmp	r7, #0
   b60e4:	d08a      	beq.n	b5ffc <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   b60e6:	4642      	mov	r2, r8
   b60e8:	464b      	mov	r3, r9
   b60ea:	4620      	mov	r0, r4
   b60ec:	4629      	mov	r1, r5
   b60ee:	f001 ff41 	bl	b7f74 <__aeabi_dmul>
   b60f2:	4604      	mov	r4, r0
   b60f4:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   b60f6:	f002 f9ed 	bl	b84d4 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   b60fa:	f1b0 0b00 	subs.w	fp, r0, #0
   b60fe:	da1c      	bge.n	b613a <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   b6100:	212d      	movs	r1, #45	; 0x2d
   b6102:	4630      	mov	r0, r6
   b6104:	f7ff ff2e 	bl	b5f64 <_ZN5Print5printEc>
            val = -n;
   b6108:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   b610c:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   b610e:	220a      	movs	r2, #10
   b6110:	4630      	mov	r0, r6
   b6112:	9301      	str	r3, [sp, #4]
   b6114:	f7ff ff3f 	bl	b5f96 <_ZN5Print11printNumberEmh>
   b6118:	9b01      	ldr	r3, [sp, #4]
   b611a:	4418      	add	r0, r3
    n += print(toPrint);
   b611c:	4482      	add	sl, r0
    remainder -= toPrint;
   b611e:	4658      	mov	r0, fp
   b6120:	f001 febe 	bl	b7ea0 <__aeabi_i2d>
   b6124:	4602      	mov	r2, r0
   b6126:	460b      	mov	r3, r1
   b6128:	4620      	mov	r0, r4
   b612a:	4629      	mov	r1, r5
   b612c:	f001 fd6a 	bl	b7c04 <__aeabi_dsub>
   b6130:	3f01      	subs	r7, #1
   b6132:	4604      	mov	r4, r0
   b6134:	460d      	mov	r5, r1
   b6136:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   b6138:	e7d3      	b.n	b60e2 <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   b613a:	4659      	mov	r1, fp
        size_t t = 0;
   b613c:	2300      	movs	r3, #0
   b613e:	e7e6      	b.n	b610e <_ZN5Print10printFloatEdh+0x13a>
   b6140:	000b8fc0 	.word	0x000b8fc0
   b6144:	7fefffff 	.word	0x7fefffff
   b6148:	000b8fc4 	.word	0x000b8fc4
   b614c:	41efffff 	.word	0x41efffff
   b6150:	000b8fc8 	.word	0x000b8fc8
   b6154:	c1efffff 	.word	0xc1efffff
   b6158:	3fe00000 	.word	0x3fe00000
   b615c:	000b8fcc 	.word	0x000b8fcc
   b6160:	40240000 	.word	0x40240000

000b6164 <_ZN5Print7printlnEdi>:
{
   b6164:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   b6166:	b2c9      	uxtb	r1, r1
{
   b6168:	4605      	mov	r5, r0
  return printFloat(n, digits);
   b616a:	f7ff ff33 	bl	b5fd4 <_ZN5Print10printFloatEdh>
   b616e:	4604      	mov	r4, r0
  n += println();
   b6170:	4628      	mov	r0, r5
   b6172:	f7ff fefa 	bl	b5f6a <_ZN5Print7printlnEv>
}
   b6176:	4420      	add	r0, r4
   b6178:	bd38      	pop	{r3, r4, r5, pc}

000b617a <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b617a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b617e:	b086      	sub	sp, #24
   b6180:	af00      	add	r7, sp, #0
   b6182:	4605      	mov	r5, r0
   b6184:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b6186:	1d38      	adds	r0, r7, #4
   b6188:	2114      	movs	r1, #20
{
   b618a:	4614      	mov	r4, r2
    va_copy(args2, args);
   b618c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b618e:	f7ff f9c3 	bl	b5518 <vsnprintf>

    if (n<bufsize)
   b6192:	2813      	cmp	r0, #19
   b6194:	d80e      	bhi.n	b61b4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b6196:	1d39      	adds	r1, r7, #4
   b6198:	4628      	mov	r0, r5
   b619a:	f7ff fecd 	bl	b5f38 <_ZN5Print5writeEPKc>
   b619e:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b61a0:	b11e      	cbz	r6, b61aa <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b61a2:	4628      	mov	r0, r5
   b61a4:	f7ff fee1 	bl	b5f6a <_ZN5Print7printlnEv>
   b61a8:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b61aa:	4620      	mov	r0, r4
   b61ac:	3718      	adds	r7, #24
   b61ae:	46bd      	mov	sp, r7
   b61b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b61b4:	f100 0308 	add.w	r3, r0, #8
   b61b8:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b61bc:	46e8      	mov	r8, sp
        char bigger[n+1];
   b61be:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b61c2:	4622      	mov	r2, r4
   b61c4:	1c41      	adds	r1, r0, #1
   b61c6:	683b      	ldr	r3, [r7, #0]
   b61c8:	4668      	mov	r0, sp
   b61ca:	f7ff f9a5 	bl	b5518 <vsnprintf>
  return write(str);
   b61ce:	4669      	mov	r1, sp
   b61d0:	4628      	mov	r0, r5
   b61d2:	f7ff feb1 	bl	b5f38 <_ZN5Print5writeEPKc>
   b61d6:	4604      	mov	r4, r0
   b61d8:	46c5      	mov	sp, r8
   b61da:	e7e1      	b.n	b61a0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b61dc <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b61dc:	4b01      	ldr	r3, [pc, #4]	; (b61e4 <_GLOBAL__sub_I_RGB+0x8>)
   b61de:	2200      	movs	r2, #0
   b61e0:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b61e2:	4770      	bx	lr
   b61e4:	2003e6e0 	.word	0x2003e6e0

000b61e8 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b61e8:	2100      	movs	r1, #0
   b61ea:	f7ff b849 	b.w	b5280 <hal_spi_release>

000b61ee <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b61ee:	2100      	movs	r1, #0
   b61f0:	f7ff b83e 	b.w	b5270 <hal_spi_acquire>

000b61f4 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b61f4:	b510      	push	{r4, lr}
   b61f6:	4604      	mov	r4, r0
   b61f8:	4608      	mov	r0, r1
{
    _spi = spi;
   b61fa:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b61fc:	f7ff f818 	bl	b5230 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b6200:	2300      	movs	r3, #0
   b6202:	6063      	str	r3, [r4, #4]
}
   b6204:	4620      	mov	r0, r4
   b6206:	bd10      	pop	{r4, pc}

000b6208 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b6208:	b513      	push	{r0, r1, r4, lr}
   b620a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b620c:	7800      	ldrb	r0, [r0, #0]
   b620e:	f7ff ffee 	bl	b61ee <_ZN8SPIClass4lockEv.isra.0>
   b6212:	b958      	cbnz	r0, b622c <_ZN8SPIClass5beginEv+0x24>
   b6214:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b6216:	9001      	str	r0, [sp, #4]
   b6218:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b621c:	f7fe fff8 	bl	b5210 <hal_spi_begin>
        unlock();
   b6220:	9801      	ldr	r0, [sp, #4]
    }
}
   b6222:	b002      	add	sp, #8
   b6224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6228:	f7ff bfde 	b.w	b61e8 <_ZN8SPIClass6unlockEv.isra.0>
   b622c:	b002      	add	sp, #8
   b622e:	bd10      	pop	{r4, pc}

000b6230 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b6230:	7800      	ldrb	r0, [r0, #0]
   b6232:	f7ff bfd9 	b.w	b61e8 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b6238 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b6238:	0840      	lsrs	r0, r0, #1
{
   b623a:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b623c:	6018      	str	r0, [r3, #0]
   b623e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b6240:	6818      	ldr	r0, [r3, #0]
   b6242:	4288      	cmp	r0, r1
   b6244:	b2e5      	uxtb	r5, r4
   b6246:	d906      	bls.n	b6256 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b6248:	3401      	adds	r4, #1
   b624a:	2c08      	cmp	r4, #8
   b624c:	d002      	beq.n	b6254 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b624e:	0840      	lsrs	r0, r0, #1
   b6250:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b6252:	e7f5      	b.n	b6240 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b6254:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b6256:	4b02      	ldr	r3, [pc, #8]	; (b6260 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b6258:	5d5b      	ldrb	r3, [r3, r5]
   b625a:	7013      	strb	r3, [r2, #0]
}
   b625c:	bd30      	pop	{r4, r5, pc}
   b625e:	bf00      	nop
   b6260:	000b8fce 	.word	0x000b8fce

000b6264 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b6264:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6268:	4606      	mov	r6, r0
   b626a:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b626c:	7800      	ldrb	r0, [r0, #0]
{
   b626e:	460c      	mov	r4, r1
    CHECK(lock());
   b6270:	f7ff ffbd 	bl	b61ee <_ZN8SPIClass4lockEv.isra.0>
   b6274:	2800      	cmp	r0, #0
   b6276:	db1b      	blt.n	b62b0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b6278:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b627a:	2214      	movs	r2, #20
   b627c:	2100      	movs	r1, #0
   b627e:	a809      	add	r0, sp, #36	; 0x24
   b6280:	f002 fc9c 	bl	b8bbc <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b6284:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b6286:	2200      	movs	r2, #0
   b6288:	a909      	add	r1, sp, #36	; 0x24
   b628a:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b628c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b6290:	f7fe ffde 	bl	b5250 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b6294:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b6298:	b113      	cbz	r3, b62a0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b629a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b629e:	b155      	cbz	r5, b62b6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b62a0:	2700      	movs	r7, #0
   b62a2:	46b9      	mov	r9, r7
   b62a4:	46b8      	mov	r8, r7
   b62a6:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b62a8:	7923      	ldrb	r3, [r4, #4]
   b62aa:	b15d      	cbz	r5, b62c4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b62ac:	b1c3      	cbz	r3, b62e0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b62ae:	2000      	movs	r0, #0
}
   b62b0:	b00f      	add	sp, #60	; 0x3c
   b62b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b62b6:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b62ba:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b62be:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b62c2:	e7f1      	b.n	b62a8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b62c4:	2b00      	cmp	r3, #0
   b62c6:	d135      	bne.n	b6334 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b62c8:	68a3      	ldr	r3, [r4, #8]
   b62ca:	4543      	cmp	r3, r8
   b62cc:	d108      	bne.n	b62e0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b62ce:	f88d 9020 	strb.w	r9, [sp, #32]
   b62d2:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b62d6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b62da:	89a3      	ldrh	r3, [r4, #12]
   b62dc:	429a      	cmp	r2, r3
   b62de:	d0e6      	beq.n	b62ae <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b62e0:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b62e2:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b62e4:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b62e8:	980a      	ldr	r0, [sp, #40]	; 0x28
   b62ea:	ab04      	add	r3, sp, #16
   b62ec:	f10d 020f 	add.w	r2, sp, #15
   b62f0:	f7ff ffa2 	bl	b6238 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b62f4:	7921      	ldrb	r1, [r4, #4]
   b62f6:	b985      	cbnz	r5, b631a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b62f8:	b989      	cbnz	r1, b631e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b62fa:	68a3      	ldr	r3, [r4, #8]
   b62fc:	4543      	cmp	r3, r8
   b62fe:	d30e      	bcc.n	b631e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b6300:	f88d 9020 	strb.w	r9, [sp, #32]
   b6304:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b6308:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b630c:	89a3      	ldrh	r3, [r4, #12]
   b630e:	429a      	cmp	r2, r3
   b6310:	d105      	bne.n	b631e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b6312:	9b04      	ldr	r3, [sp, #16]
   b6314:	4543      	cmp	r3, r8
   b6316:	d102      	bne.n	b631e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b6318:	e7c9      	b.n	b62ae <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b631a:	2900      	cmp	r1, #0
   b631c:	d1f9      	bne.n	b6312 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b631e:	2300      	movs	r3, #0
   b6320:	9301      	str	r3, [sp, #4]
   b6322:	7b63      	ldrb	r3, [r4, #13]
   b6324:	9300      	str	r3, [sp, #0]
   b6326:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b632a:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b632c:	7830      	ldrb	r0, [r6, #0]
   b632e:	f7fe ff97 	bl	b5260 <hal_spi_set_settings>
   b6332:	e7bc      	b.n	b62ae <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b6334:	e9cd 5500 	strd	r5, r5, [sp]
   b6338:	462b      	mov	r3, r5
   b633a:	462a      	mov	r2, r5
   b633c:	2101      	movs	r1, #1
   b633e:	e7f5      	b.n	b632c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b6340 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b6340:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b6342:	7800      	ldrb	r0, [r0, #0]
   b6344:	f7fe ff6c 	bl	b5220 <hal_spi_transfer>
}
   b6348:	b2c0      	uxtb	r0, r0
   b634a:	bd08      	pop	{r3, pc}

000b634c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b634c:	b510      	push	{r4, lr}
   b634e:	4604      	mov	r4, r0
{
	free(buffer);
   b6350:	6800      	ldr	r0, [r0, #0]
   b6352:	f7ff f8d1 	bl	b54f8 <free>
}
   b6356:	4620      	mov	r0, r4
   b6358:	bd10      	pop	{r4, pc}

000b635a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b635a:	b510      	push	{r4, lr}
   b635c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b635e:	6800      	ldr	r0, [r0, #0]
   b6360:	b108      	cbz	r0, b6366 <_ZN6String10invalidateEv+0xc>
   b6362:	f7ff f8c9 	bl	b54f8 <free>
	buffer = NULL;
   b6366:	2300      	movs	r3, #0
	capacity = len = 0;
   b6368:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b636c:	6023      	str	r3, [r4, #0]
}
   b636e:	bd10      	pop	{r4, pc}

000b6370 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b6370:	b538      	push	{r3, r4, r5, lr}
   b6372:	4604      	mov	r4, r0
   b6374:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b6376:	6800      	ldr	r0, [r0, #0]
   b6378:	3101      	adds	r1, #1
   b637a:	f7ff f8c5 	bl	b5508 <realloc>
	if (newbuffer) {
   b637e:	b110      	cbz	r0, b6386 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b6380:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b6384:	2001      	movs	r0, #1
	}
	return 0;
}
   b6386:	bd38      	pop	{r3, r4, r5, pc}

000b6388 <_ZN6String7reserveEj>:
{
   b6388:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b638a:	6803      	ldr	r3, [r0, #0]
{
   b638c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b638e:	b123      	cbz	r3, b639a <_ZN6String7reserveEj+0x12>
   b6390:	6843      	ldr	r3, [r0, #4]
   b6392:	428b      	cmp	r3, r1
   b6394:	d301      	bcc.n	b639a <_ZN6String7reserveEj+0x12>
   b6396:	2001      	movs	r0, #1
}
   b6398:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b639a:	4620      	mov	r0, r4
   b639c:	f7ff ffe8 	bl	b6370 <_ZN6String12changeBufferEj>
   b63a0:	2800      	cmp	r0, #0
   b63a2:	d0f9      	beq.n	b6398 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b63a4:	68a3      	ldr	r3, [r4, #8]
   b63a6:	2b00      	cmp	r3, #0
   b63a8:	d1f5      	bne.n	b6396 <_ZN6String7reserveEj+0xe>
   b63aa:	6822      	ldr	r2, [r4, #0]
   b63ac:	7013      	strb	r3, [r2, #0]
   b63ae:	e7f2      	b.n	b6396 <_ZN6String7reserveEj+0xe>

000b63b0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b63b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b63b2:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b63b4:	4611      	mov	r1, r2
   b63b6:	9201      	str	r2, [sp, #4]
{
   b63b8:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b63ba:	f7ff ffe5 	bl	b6388 <_ZN6String7reserveEj>
   b63be:	9a01      	ldr	r2, [sp, #4]
   b63c0:	b928      	cbnz	r0, b63ce <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b63c2:	4620      	mov	r0, r4
   b63c4:	f7ff ffc9 	bl	b635a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b63c8:	4620      	mov	r0, r4
   b63ca:	b003      	add	sp, #12
   b63cc:	bd30      	pop	{r4, r5, pc}
	len = length;
   b63ce:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b63d0:	4629      	mov	r1, r5
   b63d2:	6820      	ldr	r0, [r4, #0]
   b63d4:	f002 fbe4 	bl	b8ba0 <memcpy>
	buffer[len] = 0;
   b63d8:	6822      	ldr	r2, [r4, #0]
   b63da:	68a3      	ldr	r3, [r4, #8]
   b63dc:	2100      	movs	r1, #0
   b63de:	54d1      	strb	r1, [r2, r3]
	return *this;
   b63e0:	e7f2      	b.n	b63c8 <_ZN6String4copyEPKcj+0x18>

000b63e2 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b63e2:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b63e4:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b63e6:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b63ea:	4604      	mov	r4, r0
	len = 0;
   b63ec:	6083      	str	r3, [r0, #8]
	flags = 0;
   b63ee:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b63f0:	b141      	cbz	r1, b6404 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b63f2:	4608      	mov	r0, r1
   b63f4:	9101      	str	r1, [sp, #4]
   b63f6:	f002 fc34 	bl	b8c62 <strlen>
   b63fa:	9901      	ldr	r1, [sp, #4]
   b63fc:	4602      	mov	r2, r0
   b63fe:	4620      	mov	r0, r4
   b6400:	f7ff ffd6 	bl	b63b0 <_ZN6String4copyEPKcj>
}
   b6404:	4620      	mov	r0, r4
   b6406:	b002      	add	sp, #8
   b6408:	bd10      	pop	{r4, pc}

000b640a <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b640a:	4288      	cmp	r0, r1
{
   b640c:	b510      	push	{r4, lr}
   b640e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b6410:	d005      	beq.n	b641e <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b6412:	680b      	ldr	r3, [r1, #0]
   b6414:	b12b      	cbz	r3, b6422 <_ZN6StringaSERKS_+0x18>
   b6416:	688a      	ldr	r2, [r1, #8]
   b6418:	4619      	mov	r1, r3
   b641a:	f7ff ffc9 	bl	b63b0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b641e:	4620      	mov	r0, r4
   b6420:	bd10      	pop	{r4, pc}
	else invalidate();
   b6422:	f7ff ff9a 	bl	b635a <_ZN6String10invalidateEv>
   b6426:	e7fa      	b.n	b641e <_ZN6StringaSERKS_+0x14>

000b6428 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b6428:	b510      	push	{r4, lr}
	buffer = NULL;
   b642a:	2300      	movs	r3, #0
String::String(const String &value)
   b642c:	4604      	mov	r4, r0
	capacity = 0;
   b642e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b6432:	6083      	str	r3, [r0, #8]
	flags = 0;
   b6434:	7303      	strb	r3, [r0, #12]
	*this = value;
   b6436:	f7ff ffe8 	bl	b640a <_ZN6StringaSERKS_>
}
   b643a:	4620      	mov	r0, r4
   b643c:	bd10      	pop	{r4, pc}

000b643e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b643e:	b513      	push	{r0, r1, r4, lr}
   b6440:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b6442:	b159      	cbz	r1, b645c <_ZN6StringaSEPKc+0x1e>
   b6444:	4608      	mov	r0, r1
   b6446:	9101      	str	r1, [sp, #4]
   b6448:	f002 fc0b 	bl	b8c62 <strlen>
   b644c:	9901      	ldr	r1, [sp, #4]
   b644e:	4602      	mov	r2, r0
   b6450:	4620      	mov	r0, r4
   b6452:	f7ff ffad 	bl	b63b0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b6456:	4620      	mov	r0, r4
   b6458:	b002      	add	sp, #8
   b645a:	bd10      	pop	{r4, pc}
	else invalidate();
   b645c:	f7ff ff7d 	bl	b635a <_ZN6String10invalidateEv>
   b6460:	e7f9      	b.n	b6456 <_ZN6StringaSEPKc+0x18>

000b6462 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b6462:	b510      	push	{r4, lr}
   b6464:	4604      	mov	r4, r0
   b6466:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b6468:	2300      	movs	r3, #0
	capacity = 0;
   b646a:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b646e:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b6470:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b6472:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b6474:	a901      	add	r1, sp, #4
   b6476:	f000 f96d 	bl	b6754 <itoa>
	*this = buf;
   b647a:	a901      	add	r1, sp, #4
   b647c:	4620      	mov	r0, r4
   b647e:	f7ff ffde 	bl	b643e <_ZN6StringaSEPKc>
}
   b6482:	4620      	mov	r0, r4
   b6484:	b00a      	add	sp, #40	; 0x28
   b6486:	bd10      	pop	{r4, pc}

000b6488 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b6488:	4b05      	ldr	r3, [pc, #20]	; (b64a0 <_GLOBAL__sub_I_System+0x18>)
   b648a:	2202      	movs	r2, #2
   b648c:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b648e:	4b05      	ldr	r3, [pc, #20]	; (b64a4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b6490:	4a05      	ldr	r2, [pc, #20]	; (b64a8 <_GLOBAL__sub_I_System+0x20>)
   b6492:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b6494:	2000      	movs	r0, #0
   b6496:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b649a:	f7fe bf71 	b.w	b5380 <set_system_mode>
   b649e:	bf00      	nop
   b64a0:	2003e6fc 	.word	0x2003e6fc
   b64a4:	2003e6f0 	.word	0x2003e6f0
   b64a8:	ffff0000 	.word	0xffff0000

000b64ac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b64ac:	4b02      	ldr	r3, [pc, #8]	; (b64b8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b64ae:	681a      	ldr	r2, [r3, #0]
   b64b0:	4b02      	ldr	r3, [pc, #8]	; (b64bc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b64b2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b64b4:	4770      	bx	lr
   b64b6:	bf00      	nop
   b64b8:	2003e5a4 	.word	0x2003e5a4
   b64bc:	2003e700 	.word	0x2003e700

000b64c0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b64c0:	4770      	bx	lr

000b64c2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b64c2:	7441      	strb	r1, [r0, #17]
}
   b64c4:	4770      	bx	lr

000b64c6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b64c6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b64c8:	7c00      	ldrb	r0, [r0, #16]
   b64ca:	f7fe ff11 	bl	b52f0 <hal_usart_available_data_for_write>
}
   b64ce:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b64d2:	bd08      	pop	{r3, pc}

000b64d4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b64d4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b64d6:	7c00      	ldrb	r0, [r0, #16]
   b64d8:	f7fe fee2 	bl	b52a0 <hal_usart_available>
}
   b64dc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b64e0:	bd08      	pop	{r3, pc}

000b64e2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b64e2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b64e4:	7c00      	ldrb	r0, [r0, #16]
   b64e6:	f7fe feeb 	bl	b52c0 <hal_usart_peek>
}
   b64ea:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b64ee:	bd08      	pop	{r3, pc}

000b64f0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b64f0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b64f2:	7c00      	ldrb	r0, [r0, #16]
   b64f4:	f7fe fedc 	bl	b52b0 <hal_usart_read>
}
   b64f8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b64fc:	bd08      	pop	{r3, pc}

000b64fe <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b64fe:	7c00      	ldrb	r0, [r0, #16]
   b6500:	f7fe bee6 	b.w	b52d0 <hal_usart_flush>

000b6504 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b6504:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6506:	7c45      	ldrb	r5, [r0, #17]
{
   b6508:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b650a:	b12d      	cbz	r5, b6518 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b650c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b650e:	b003      	add	sp, #12
   b6510:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b6514:	f7fe bebc 	b.w	b5290 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6518:	7c00      	ldrb	r0, [r0, #16]
   b651a:	9101      	str	r1, [sp, #4]
   b651c:	f7fe fee8 	bl	b52f0 <hal_usart_available_data_for_write>
   b6520:	2800      	cmp	r0, #0
   b6522:	9901      	ldr	r1, [sp, #4]
   b6524:	dcf2      	bgt.n	b650c <_ZN11USARTSerial5writeEh+0x8>
}
   b6526:	4628      	mov	r0, r5
   b6528:	b003      	add	sp, #12
   b652a:	bd30      	pop	{r4, r5, pc}

000b652c <_ZN11USARTSerialD0Ev>:
   b652c:	b510      	push	{r4, lr}
   b652e:	2114      	movs	r1, #20
   b6530:	4604      	mov	r4, r0
   b6532:	f7fd fdb4 	bl	b409e <_ZdlPvj>
   b6536:	4620      	mov	r0, r4
   b6538:	bd10      	pop	{r4, pc}
	...

000b653c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b653c:	b510      	push	{r4, lr}
   b653e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6542:	4604      	mov	r4, r0
   b6544:	4608      	mov	r0, r1
   b6546:	4611      	mov	r1, r2
   b6548:	2200      	movs	r2, #0
   b654a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b654e:	4b04      	ldr	r3, [pc, #16]	; (b6560 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b6550:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6552:	2301      	movs	r3, #1
  _serial = serial;
   b6554:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6556:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b6558:	f7fe fed2 	bl	b5300 <hal_usart_init_ex>
}
   b655c:	4620      	mov	r0, r4
   b655e:	bd10      	pop	{r4, pc}
   b6560:	000b8ffc 	.word	0x000b8ffc

000b6564 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6564:	7441      	strb	r1, [r0, #17]
}
   b6566:	4770      	bx	lr

000b6568 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6568:	4770      	bx	lr

000b656a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b656a:	4770      	bx	lr

000b656c <_ZN9USBSerial4readEv>:
{
   b656c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b656e:	2100      	movs	r1, #0
   b6570:	7c00      	ldrb	r0, [r0, #16]
   b6572:	f7fe feed 	bl	b5350 <HAL_USB_USART_Receive_Data>
}
   b6576:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b657a:	bd08      	pop	{r3, pc}

000b657c <_ZN9USBSerial4peekEv>:
{
   b657c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b657e:	2101      	movs	r1, #1
   b6580:	7c00      	ldrb	r0, [r0, #16]
   b6582:	f7fe fee5 	bl	b5350 <HAL_USB_USART_Receive_Data>
}
   b6586:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b658a:	bd08      	pop	{r3, pc}

000b658c <_ZN9USBSerial17availableForWriteEv>:
{
   b658c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b658e:	7c00      	ldrb	r0, [r0, #16]
   b6590:	f7fe fed6 	bl	b5340 <HAL_USB_USART_Available_Data_For_Write>
}
   b6594:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6598:	bd08      	pop	{r3, pc}

000b659a <_ZN9USBSerial9availableEv>:
{
   b659a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b659c:	7c00      	ldrb	r0, [r0, #16]
   b659e:	f7fe fec7 	bl	b5330 <HAL_USB_USART_Available_Data>
}
   b65a2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b65a6:	bd08      	pop	{r3, pc}

000b65a8 <_ZN9USBSerial5writeEh>:
{
   b65a8:	b513      	push	{r0, r1, r4, lr}
   b65aa:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b65ac:	7c00      	ldrb	r0, [r0, #16]
{
   b65ae:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b65b0:	f7fe fec6 	bl	b5340 <HAL_USB_USART_Available_Data_For_Write>
   b65b4:	2800      	cmp	r0, #0
   b65b6:	9901      	ldr	r1, [sp, #4]
   b65b8:	dc01      	bgt.n	b65be <_ZN9USBSerial5writeEh+0x16>
   b65ba:	7c60      	ldrb	r0, [r4, #17]
   b65bc:	b120      	cbz	r0, b65c8 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b65be:	7c20      	ldrb	r0, [r4, #16]
   b65c0:	f7fe fece 	bl	b5360 <HAL_USB_USART_Send_Data>
   b65c4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b65c8:	b002      	add	sp, #8
   b65ca:	bd10      	pop	{r4, pc}

000b65cc <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b65cc:	7c00      	ldrb	r0, [r0, #16]
   b65ce:	f7fe becf 	b.w	b5370 <HAL_USB_USART_Flush_Data>

000b65d2 <_ZN9USBSerialD0Ev>:
   b65d2:	b510      	push	{r4, lr}
   b65d4:	2114      	movs	r1, #20
   b65d6:	4604      	mov	r4, r0
   b65d8:	f7fd fd61 	bl	b409e <_ZdlPvj>
   b65dc:	4620      	mov	r0, r4
   b65de:	bd10      	pop	{r4, pc}

000b65e0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b65e0:	b510      	push	{r4, lr}
   b65e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b65e6:	4604      	mov	r4, r0
   b65e8:	4608      	mov	r0, r1
   b65ea:	2100      	movs	r1, #0
   b65ec:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b65f0:	4b04      	ldr	r3, [pc, #16]	; (b6604 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b65f2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b65f4:	2301      	movs	r3, #1
  _serial = serial;
   b65f6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b65f8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b65fa:	4611      	mov	r1, r2
   b65fc:	f7fe fe88 	bl	b5310 <HAL_USB_USART_Init>
}
   b6600:	4620      	mov	r0, r4
   b6602:	bd10      	pop	{r4, pc}
   b6604:	000b902c 	.word	0x000b902c

000b6608 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b6608:	7c00      	ldrb	r0, [r0, #16]
   b660a:	2200      	movs	r2, #0
   b660c:	f7fe be88 	b.w	b5320 <HAL_USB_USART_Begin>

000b6610 <_Z19acquireSerialBufferv>:
{
   b6610:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b6612:	2214      	movs	r2, #20
{
   b6614:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b6616:	2100      	movs	r1, #0
   b6618:	f002 fad0 	bl	b8bbc <memset>
}
   b661c:	4620      	mov	r0, r4
   b661e:	bd10      	pop	{r4, pc}

000b6620 <_Z16_fetch_usbserialv>:
{
   b6620:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6622:	4c0f      	ldr	r4, [pc, #60]	; (b6660 <_Z16_fetch_usbserialv+0x40>)
{
   b6624:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b6626:	a803      	add	r0, sp, #12
   b6628:	f7ff fff2 	bl	b6610 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b662c:	7821      	ldrb	r1, [r4, #0]
   b662e:	f3bf 8f5b 	dmb	ish
   b6632:	f011 0101 	ands.w	r1, r1, #1
   b6636:	d10f      	bne.n	b6658 <_Z16_fetch_usbserialv+0x38>
   b6638:	4620      	mov	r0, r4
   b663a:	9101      	str	r1, [sp, #4]
   b663c:	f7fd fd31 	bl	b40a2 <__cxa_guard_acquire>
   b6640:	9901      	ldr	r1, [sp, #4]
   b6642:	b148      	cbz	r0, b6658 <_Z16_fetch_usbserialv+0x38>
   b6644:	aa03      	add	r2, sp, #12
   b6646:	4807      	ldr	r0, [pc, #28]	; (b6664 <_Z16_fetch_usbserialv+0x44>)
   b6648:	f7ff ffca 	bl	b65e0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b664c:	4620      	mov	r0, r4
   b664e:	f7fd fd2d 	bl	b40ac <__cxa_guard_release>
   b6652:	4805      	ldr	r0, [pc, #20]	; (b6668 <_Z16_fetch_usbserialv+0x48>)
   b6654:	f002 fa9e 	bl	b8b94 <atexit>
	return _usbserial;
}
   b6658:	4802      	ldr	r0, [pc, #8]	; (b6664 <_Z16_fetch_usbserialv+0x44>)
   b665a:	b008      	add	sp, #32
   b665c:	bd10      	pop	{r4, pc}
   b665e:	bf00      	nop
   b6660:	2003e704 	.word	0x2003e704
   b6664:	2003e708 	.word	0x2003e708
   b6668:	000b6569 	.word	0x000b6569

000b666c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b666c:	2200      	movs	r2, #0
   b666e:	6840      	ldr	r0, [r0, #4]
   b6670:	4611      	mov	r1, r2
   b6672:	f7fe bef1 	b.w	b5458 <network_ready>

000b6676 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6676:	2200      	movs	r2, #0
   b6678:	6840      	ldr	r0, [r0, #4]
   b667a:	4611      	mov	r1, r2
   b667c:	f7fe bf0c 	b.w	b5498 <network_listening>

000b6680 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6680:	2200      	movs	r2, #0
   b6682:	6840      	ldr	r0, [r0, #4]
   b6684:	4611      	mov	r1, r2
   b6686:	f7fe bf17 	b.w	b54b8 <network_get_listen_timeout>

000b668a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b668a:	6840      	ldr	r0, [r0, #4]
   b668c:	2200      	movs	r2, #0
   b668e:	f7fe bf0b 	b.w	b54a8 <network_set_listen_timeout>

000b6692 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6692:	6840      	ldr	r0, [r0, #4]
   b6694:	2200      	movs	r2, #0
   b6696:	f081 0101 	eor.w	r1, r1, #1
   b669a:	f7fe bef5 	b.w	b5488 <network_listen>

000b669e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b669e:	2300      	movs	r3, #0
   b66a0:	6840      	ldr	r0, [r0, #4]
   b66a2:	461a      	mov	r2, r3
   b66a4:	4619      	mov	r1, r3
   b66a6:	f7fe bee7 	b.w	b5478 <network_off>

000b66aa <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b66aa:	2300      	movs	r3, #0
   b66ac:	6840      	ldr	r0, [r0, #4]
   b66ae:	461a      	mov	r2, r3
   b66b0:	4619      	mov	r1, r3
   b66b2:	f7fe bed9 	b.w	b5468 <network_on>

000b66b6 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b66b6:	2200      	movs	r2, #0
   b66b8:	6840      	ldr	r0, [r0, #4]
   b66ba:	4611      	mov	r1, r2
   b66bc:	f7fe bebc 	b.w	b5438 <network_connecting>

000b66c0 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b66c0:	6840      	ldr	r0, [r0, #4]
   b66c2:	2200      	movs	r2, #0
   b66c4:	2102      	movs	r1, #2
   b66c6:	f7fe bebf 	b.w	b5448 <network_disconnect>

000b66ca <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b66ca:	2300      	movs	r3, #0
   b66cc:	6840      	ldr	r0, [r0, #4]
   b66ce:	461a      	mov	r2, r3
   b66d0:	f7fe beaa 	b.w	b5428 <network_connect>

000b66d4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b66d4:	4b02      	ldr	r3, [pc, #8]	; (b66e0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b66d6:	2204      	movs	r2, #4
   b66d8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b66da:	4a02      	ldr	r2, [pc, #8]	; (b66e4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b66dc:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b66de:	4770      	bx	lr
   b66e0:	2003e71c 	.word	0x2003e71c
   b66e4:	000b905c 	.word	0x000b905c

000b66e8 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b66e8:	b510      	push	{r4, lr}
   b66ea:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b66ec:	f002 fab9 	bl	b8c62 <strlen>
   b66f0:	3801      	subs	r0, #1
   b66f2:	1823      	adds	r3, r4, r0
   b66f4:	4620      	mov	r0, r4
	while(i<j){
   b66f6:	4283      	cmp	r3, r0
   b66f8:	d906      	bls.n	b6708 <_Z11str_reversePc+0x20>
		c = *i;
   b66fa:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b66fc:	7819      	ldrb	r1, [r3, #0]
   b66fe:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b6702:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b6706:	e7f6      	b.n	b66f6 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b6708:	bd10      	pop	{r4, pc}

000b670a <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b670a:	b570      	push	{r4, r5, r6, lr}
   b670c:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b670e:	1e91      	subs	r1, r2, #2
   b6710:	2922      	cmp	r1, #34	; 0x22
   b6712:	d81d      	bhi.n	b6750 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b6714:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b6716:	b930      	cbnz	r0, b6726 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b6718:	4423      	add	r3, r4
            *ptr++ = '0';
   b671a:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b671c:	429d      	cmp	r5, r3
   b671e:	d210      	bcs.n	b6742 <ultoa+0x38>
            *ptr++ = '0';
   b6720:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b6724:	e7fa      	b.n	b671c <ultoa+0x12>
            result.quot = a/radix;
   b6726:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b672a:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b672e:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b6730:	2809      	cmp	r0, #9
                *ptr += '0';
   b6732:	bf94      	ite	ls
   b6734:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b6736:	3157      	addhi	r1, #87	; 0x57
   b6738:	b2c9      	uxtb	r1, r1
   b673a:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b673e:	4630      	mov	r0, r6
	while(a){
   b6740:	e7e9      	b.n	b6716 <ultoa+0xc>

	*ptr = '\0';
   b6742:	2300      	movs	r3, #0
	str_reverse(buffer);
   b6744:	4620      	mov	r0, r4
	*ptr = '\0';
   b6746:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b6748:	f7ff ffce 	bl	b66e8 <_Z11str_reversePc>
	return buffer;
   b674c:	4620      	mov	r0, r4
}
   b674e:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b6750:	2000      	movs	r0, #0
   b6752:	e7fc      	b.n	b674e <ultoa+0x44>

000b6754 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b6754:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b6756:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b6758:	460c      	mov	r4, r1
   b675a:	4615      	mov	r5, r2
	if(a<0){
   b675c:	da0e      	bge.n	b677c <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b675e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b6762:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b6766:	bf14      	ite	ne
   b6768:	4258      	negne	r0, r3
   b676a:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b676c:	2301      	movs	r3, #1
		*buffer = '-';
   b676e:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b6770:	462a      	mov	r2, r5
   b6772:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b6774:	f7ff ffc9 	bl	b670a <ultoa>
	}
	return buffer;
}
   b6778:	4620      	mov	r0, r4
   b677a:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b677c:	2301      	movs	r3, #1
   b677e:	e7f9      	b.n	b6774 <itoa+0x20>

000b6780 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b6780:	4b01      	ldr	r3, [pc, #4]	; (b6788 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b6782:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b6784:	4770      	bx	lr
   b6786:	bf00      	nop
   b6788:	2003e5ac 	.word	0x2003e5ac

000b678c <serialEventRun>:
{
   b678c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b678e:	4b0b      	ldr	r3, [pc, #44]	; (b67bc <serialEventRun+0x30>)
   b6790:	b143      	cbz	r3, b67a4 <serialEventRun+0x18>
   b6792:	f7ff ff45 	bl	b6620 <_Z16_fetch_usbserialv>
   b6796:	6803      	ldr	r3, [r0, #0]
   b6798:	691b      	ldr	r3, [r3, #16]
   b679a:	4798      	blx	r3
   b679c:	2800      	cmp	r0, #0
   b679e:	dd01      	ble.n	b67a4 <serialEventRun+0x18>
        serialEvent();
   b67a0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b67a4:	4b06      	ldr	r3, [pc, #24]	; (b67c0 <serialEventRun+0x34>)
   b67a6:	b143      	cbz	r3, b67ba <serialEventRun+0x2e>
   b67a8:	f000 f976 	bl	b6a98 <_Z22__fetch_global_Serial1v>
   b67ac:	6803      	ldr	r3, [r0, #0]
   b67ae:	691b      	ldr	r3, [r3, #16]
   b67b0:	4798      	blx	r3
   b67b2:	2800      	cmp	r0, #0
   b67b4:	dd01      	ble.n	b67ba <serialEventRun+0x2e>
        serialEvent1();
   b67b6:	f3af 8000 	nop.w
}
   b67ba:	bd08      	pop	{r3, pc}
	...

000b67c4 <_post_loop>:
{
   b67c4:	b508      	push	{r3, lr}
	serialEventRun();
   b67c6:	f7ff ffe1 	bl	b678c <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b67ca:	f7fe fc71 	bl	b50b0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b67ce:	4b01      	ldr	r3, [pc, #4]	; (b67d4 <_post_loop+0x10>)
   b67d0:	6018      	str	r0, [r3, #0]
}
   b67d2:	bd08      	pop	{r3, pc}
   b67d4:	2003e72c 	.word	0x2003e72c

000b67d8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b67d8:	4805      	ldr	r0, [pc, #20]	; (b67f0 <_Z33system_initialize_user_backup_ramv+0x18>)
   b67da:	4a06      	ldr	r2, [pc, #24]	; (b67f4 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b67dc:	4906      	ldr	r1, [pc, #24]	; (b67f8 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b67de:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b67e0:	1a12      	subs	r2, r2, r0
   b67e2:	f002 f9dd 	bl	b8ba0 <memcpy>
    __backup_sram_signature = signature;
   b67e6:	4b05      	ldr	r3, [pc, #20]	; (b67fc <_Z33system_initialize_user_backup_ramv+0x24>)
   b67e8:	4a05      	ldr	r2, [pc, #20]	; (b6800 <_Z33system_initialize_user_backup_ramv+0x28>)
   b67ea:	601a      	str	r2, [r3, #0]
}
   b67ec:	bd08      	pop	{r3, pc}
   b67ee:	bf00      	nop
   b67f0:	2003f400 	.word	0x2003f400
   b67f4:	2003f404 	.word	0x2003f404
   b67f8:	000b916c 	.word	0x000b916c
   b67fc:	2003f400 	.word	0x2003f400
   b6800:	9a271c1e 	.word	0x9a271c1e

000b6804 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b6804:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6806:	2300      	movs	r3, #0
   b6808:	9300      	str	r3, [sp, #0]
   b680a:	461a      	mov	r2, r3
   b680c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6810:	f7fe fde0 	bl	b53d4 <system_ctrl_set_result>
}
   b6814:	b003      	add	sp, #12
   b6816:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b681c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b681c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b681e:	8843      	ldrh	r3, [r0, #2]
   b6820:	2b0a      	cmp	r3, #10
   b6822:	d008      	beq.n	b6836 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b6824:	2b50      	cmp	r3, #80	; 0x50
   b6826:	d10b      	bne.n	b6840 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b6828:	4b09      	ldr	r3, [pc, #36]	; (b6850 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b682a:	681b      	ldr	r3, [r3, #0]
   b682c:	b14b      	cbz	r3, b6842 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b682e:	b003      	add	sp, #12
   b6830:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b6834:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b6836:	f7ff ffe5 	bl	b6804 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b683a:	b003      	add	sp, #12
   b683c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6840:	2300      	movs	r3, #0
   b6842:	9300      	str	r3, [sp, #0]
   b6844:	461a      	mov	r2, r3
   b6846:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b684a:	f7fe fdc3 	bl	b53d4 <system_ctrl_set_result>
}
   b684e:	e7f4      	b.n	b683a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b6850:	2003e728 	.word	0x2003e728

000b6854 <module_user_init_hook>:
{
   b6854:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b6856:	4812      	ldr	r0, [pc, #72]	; (b68a0 <module_user_init_hook+0x4c>)
   b6858:	2100      	movs	r1, #0
   b685a:	f7fe fe85 	bl	b5568 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b685e:	4b11      	ldr	r3, [pc, #68]	; (b68a4 <module_user_init_hook+0x50>)
   b6860:	681a      	ldr	r2, [r3, #0]
   b6862:	4b11      	ldr	r3, [pc, #68]	; (b68a8 <module_user_init_hook+0x54>)
   b6864:	429a      	cmp	r2, r3
   b6866:	4b11      	ldr	r3, [pc, #68]	; (b68ac <module_user_init_hook+0x58>)
   b6868:	bf0c      	ite	eq
   b686a:	2201      	moveq	r2, #1
   b686c:	2200      	movne	r2, #0
   b686e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b6870:	d001      	beq.n	b6876 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b6872:	f7ff ffb1 	bl	b67d8 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b6876:	f7fe fc13 	bl	b50a0 <HAL_RNG_GetRandomNumber>
   b687a:	4604      	mov	r4, r0
    srand(seed);
   b687c:	f002 f9a6 	bl	b8bcc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b6880:	4b0b      	ldr	r3, [pc, #44]	; (b68b0 <module_user_init_hook+0x5c>)
   b6882:	b113      	cbz	r3, b688a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b6884:	4620      	mov	r0, r4
   b6886:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b688a:	2100      	movs	r1, #0
   b688c:	4808      	ldr	r0, [pc, #32]	; (b68b0 <module_user_init_hook+0x5c>)
   b688e:	f7fe fdc3 	bl	b5418 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b6892:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b6896:	4807      	ldr	r0, [pc, #28]	; (b68b4 <module_user_init_hook+0x60>)
   b6898:	2100      	movs	r1, #0
   b689a:	f7fe bd91 	b.w	b53c0 <system_ctrl_set_app_request_handler>
   b689e:	bf00      	nop
   b68a0:	000b6781 	.word	0x000b6781
   b68a4:	2003f400 	.word	0x2003f400
   b68a8:	9a271c1e 	.word	0x9a271c1e
   b68ac:	2003e724 	.word	0x2003e724
   b68b0:	00000000 	.word	0x00000000
   b68b4:	000b681d 	.word	0x000b681d

000b68b8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b68b8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b68ba:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b68bc:	d902      	bls.n	b68c4 <pinAvailable+0xc>
    return false;
   b68be:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b68c0:	b002      	add	sp, #8
   b68c2:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b68c4:	f1a0 030b 	sub.w	r3, r0, #11
   b68c8:	2b02      	cmp	r3, #2
   b68ca:	d81a      	bhi.n	b6902 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b68cc:	4c17      	ldr	r4, [pc, #92]	; (b692c <pinAvailable+0x74>)
   b68ce:	7821      	ldrb	r1, [r4, #0]
   b68d0:	f3bf 8f5b 	dmb	ish
   b68d4:	f011 0101 	ands.w	r1, r1, #1
   b68d8:	d10b      	bne.n	b68f2 <pinAvailable+0x3a>
   b68da:	4620      	mov	r0, r4
   b68dc:	9101      	str	r1, [sp, #4]
   b68de:	f7fd fbe0 	bl	b40a2 <__cxa_guard_acquire>
   b68e2:	9901      	ldr	r1, [sp, #4]
   b68e4:	b128      	cbz	r0, b68f2 <pinAvailable+0x3a>
   b68e6:	4812      	ldr	r0, [pc, #72]	; (b6930 <pinAvailable+0x78>)
   b68e8:	f7ff fc84 	bl	b61f4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b68ec:	4620      	mov	r0, r4
   b68ee:	f7fd fbdd 	bl	b40ac <__cxa_guard_release>
   b68f2:	4b0f      	ldr	r3, [pc, #60]	; (b6930 <pinAvailable+0x78>)
   b68f4:	7818      	ldrb	r0, [r3, #0]
   b68f6:	f7fe fca3 	bl	b5240 <hal_spi_is_enabled>
   b68fa:	2800      	cmp	r0, #0
   b68fc:	d1df      	bne.n	b68be <pinAvailable+0x6>
  return true; // 'pin' is available
   b68fe:	2001      	movs	r0, #1
   b6900:	e7de      	b.n	b68c0 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b6902:	2801      	cmp	r0, #1
   b6904:	d809      	bhi.n	b691a <pinAvailable+0x62>
   b6906:	f000 f887 	bl	b6a18 <_Z19__fetch_global_Wirev>
   b690a:	2100      	movs	r1, #0
   b690c:	7c00      	ldrb	r0, [r0, #16]
   b690e:	f7fe fc4f 	bl	b51b0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b6912:	f080 0001 	eor.w	r0, r0, #1
   b6916:	b2c0      	uxtb	r0, r0
   b6918:	e7d2      	b.n	b68c0 <pinAvailable+0x8>
   b691a:	3809      	subs	r0, #9
   b691c:	2801      	cmp	r0, #1
   b691e:	d8ee      	bhi.n	b68fe <pinAvailable+0x46>
   b6920:	f000 f8ba 	bl	b6a98 <_Z22__fetch_global_Serial1v>
   b6924:	7c00      	ldrb	r0, [r0, #16]
   b6926:	f7fe fcdb 	bl	b52e0 <hal_usart_is_enabled>
   b692a:	e7f2      	b.n	b6912 <pinAvailable+0x5a>
   b692c:	2003e6bc 	.word	0x2003e6bc
   b6930:	2003e6c0 	.word	0x2003e6c0

000b6934 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6934:	2823      	cmp	r0, #35	; 0x23
{
   b6936:	b538      	push	{r3, r4, r5, lr}
   b6938:	4604      	mov	r4, r0
   b693a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b693c:	d80a      	bhi.n	b6954 <pinMode+0x20>
   b693e:	29ff      	cmp	r1, #255	; 0xff
   b6940:	d008      	beq.n	b6954 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b6942:	f7ff ffb9 	bl	b68b8 <pinAvailable>
   b6946:	b128      	cbz	r0, b6954 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b6948:	4629      	mov	r1, r5
   b694a:	4620      	mov	r0, r4
}
   b694c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b6950:	f7fe bbbe 	b.w	b50d0 <HAL_Pin_Mode>
}
   b6954:	bd38      	pop	{r3, r4, r5, pc}

000b6956 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b6956:	b538      	push	{r3, r4, r5, lr}
   b6958:	4604      	mov	r4, r0
   b695a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b695c:	f7fe fbc0 	bl	b50e0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b6960:	28ff      	cmp	r0, #255	; 0xff
   b6962:	d010      	beq.n	b6986 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b6964:	2806      	cmp	r0, #6
   b6966:	d804      	bhi.n	b6972 <digitalWrite+0x1c>
   b6968:	234d      	movs	r3, #77	; 0x4d
   b696a:	fa23 f000 	lsr.w	r0, r3, r0
   b696e:	07c3      	lsls	r3, r0, #31
   b6970:	d409      	bmi.n	b6986 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b6972:	4620      	mov	r0, r4
   b6974:	f7ff ffa0 	bl	b68b8 <pinAvailable>
   b6978:	b128      	cbz	r0, b6986 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b697a:	4629      	mov	r1, r5
   b697c:	4620      	mov	r0, r4
}
   b697e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b6982:	f7fe bbb5 	b.w	b50f0 <HAL_GPIO_Write>
}
   b6986:	bd38      	pop	{r3, r4, r5, pc}

000b6988 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b6988:	b510      	push	{r4, lr}
   b698a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b698c:	f7fe fba8 	bl	b50e0 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b6990:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b6992:	b2db      	uxtb	r3, r3
   b6994:	2b01      	cmp	r3, #1
   b6996:	d908      	bls.n	b69aa <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b6998:	4620      	mov	r0, r4
   b699a:	f7ff ff8d 	bl	b68b8 <pinAvailable>
   b699e:	b120      	cbz	r0, b69aa <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b69a0:	4620      	mov	r0, r4
}
   b69a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b69a6:	f7fe bbab 	b.w	b5100 <HAL_GPIO_Read>
}
   b69aa:	2000      	movs	r0, #0
   b69ac:	bd10      	pop	{r4, pc}

000b69ae <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b69ae:	280d      	cmp	r0, #13
{
   b69b0:	b510      	push	{r4, lr}
   b69b2:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b69b4:	bf9c      	itt	ls
   b69b6:	340e      	addls	r4, #14
   b69b8:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b69ba:	4620      	mov	r0, r4
   b69bc:	f7ff ff7c 	bl	b68b8 <pinAvailable>
   b69c0:	b150      	cbz	r0, b69d8 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b69c2:	2103      	movs	r1, #3
   b69c4:	4620      	mov	r0, r4
   b69c6:	f7fe fb7b 	bl	b50c0 <HAL_Validate_Pin_Function>
   b69ca:	2803      	cmp	r0, #3
   b69cc:	d104      	bne.n	b69d8 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b69ce:	4620      	mov	r0, r4
}
   b69d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b69d4:	f7fe bb9c 	b.w	b5110 <hal_adc_read>
}
   b69d8:	2000      	movs	r0, #0
   b69da:	bd10      	pop	{r4, pc}

000b69dc <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
   b69dc:	f7fe bba0 	b.w	b5120 <HAL_Pulse_In>

000b69e0 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b69e0:	4770      	bx	lr
	...

000b69e4 <_Z17acquireWireBufferv>:
{
   b69e4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b69e6:	4b0a      	ldr	r3, [pc, #40]	; (b6a10 <_Z17acquireWireBufferv+0x2c>)
   b69e8:	6003      	str	r3, [r0, #0]
   b69ea:	2301      	movs	r3, #1
{
   b69ec:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b69ee:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b69f0:	4908      	ldr	r1, [pc, #32]	; (b6a14 <_Z17acquireWireBufferv+0x30>)
   b69f2:	2020      	movs	r0, #32
   b69f4:	f000 f874 	bl	b6ae0 <_ZnajRKSt9nothrow_t>
	};
   b69f8:	2520      	movs	r5, #32
   b69fa:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b69fc:	4905      	ldr	r1, [pc, #20]	; (b6a14 <_Z17acquireWireBufferv+0x30>)
	};
   b69fe:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6a00:	4628      	mov	r0, r5
   b6a02:	f000 f86d 	bl	b6ae0 <_ZnajRKSt9nothrow_t>
	};
   b6a06:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b6a0a:	4620      	mov	r0, r4
   b6a0c:	bd38      	pop	{r3, r4, r5, pc}
   b6a0e:	bf00      	nop
   b6a10:	00010018 	.word	0x00010018
   b6a14:	000b9090 	.word	0x000b9090

000b6a18 <_Z19__fetch_global_Wirev>:
{
   b6a18:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6a1a:	4d0e      	ldr	r5, [pc, #56]	; (b6a54 <_Z19__fetch_global_Wirev+0x3c>)
   b6a1c:	7829      	ldrb	r1, [r5, #0]
   b6a1e:	f3bf 8f5b 	dmb	ish
   b6a22:	f011 0401 	ands.w	r4, r1, #1
{
   b6a26:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6a28:	d111      	bne.n	b6a4e <_Z19__fetch_global_Wirev+0x36>
   b6a2a:	4628      	mov	r0, r5
   b6a2c:	f7fd fb39 	bl	b40a2 <__cxa_guard_acquire>
   b6a30:	b168      	cbz	r0, b6a4e <_Z19__fetch_global_Wirev+0x36>
   b6a32:	4668      	mov	r0, sp
   b6a34:	f7ff ffd6 	bl	b69e4 <_Z17acquireWireBufferv>
   b6a38:	466a      	mov	r2, sp
   b6a3a:	4621      	mov	r1, r4
   b6a3c:	4806      	ldr	r0, [pc, #24]	; (b6a58 <_Z19__fetch_global_Wirev+0x40>)
   b6a3e:	f7ff f8d7 	bl	b5bf0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b6a42:	4628      	mov	r0, r5
   b6a44:	f7fd fb32 	bl	b40ac <__cxa_guard_release>
   b6a48:	4804      	ldr	r0, [pc, #16]	; (b6a5c <_Z19__fetch_global_Wirev+0x44>)
   b6a4a:	f002 f8a3 	bl	b8b94 <atexit>
	return wire;
}
   b6a4e:	4802      	ldr	r0, [pc, #8]	; (b6a58 <_Z19__fetch_global_Wirev+0x40>)
   b6a50:	b007      	add	sp, #28
   b6a52:	bd30      	pop	{r4, r5, pc}
   b6a54:	2003e730 	.word	0x2003e730
   b6a58:	2003e734 	.word	0x2003e734
   b6a5c:	000b69e1 	.word	0x000b69e1

000b6a60 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6a60:	4770      	bx	lr
	...

000b6a64 <_Z20acquireSerial1Bufferv>:
{
   b6a64:	b538      	push	{r3, r4, r5, lr}
   b6a66:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b6a68:	2514      	movs	r5, #20
   b6a6a:	462a      	mov	r2, r5
   b6a6c:	2100      	movs	r1, #0
   b6a6e:	f002 f8a5 	bl	b8bbc <memset>
   b6a72:	8025      	strh	r5, [r4, #0]
   b6a74:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6a76:	4907      	ldr	r1, [pc, #28]	; (b6a94 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b6a78:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6a7a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b6a7c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6a7e:	f000 f82f 	bl	b6ae0 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6a82:	4904      	ldr	r1, [pc, #16]	; (b6a94 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b6a84:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6a86:	4628      	mov	r0, r5
   b6a88:	f000 f82a 	bl	b6ae0 <_ZnajRKSt9nothrow_t>
    };
   b6a8c:	60e0      	str	r0, [r4, #12]
}
   b6a8e:	4620      	mov	r0, r4
   b6a90:	bd38      	pop	{r3, r4, r5, pc}
   b6a92:	bf00      	nop
   b6a94:	000b9090 	.word	0x000b9090

000b6a98 <_Z22__fetch_global_Serial1v>:
{
   b6a98:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6a9a:	4d0e      	ldr	r5, [pc, #56]	; (b6ad4 <_Z22__fetch_global_Serial1v+0x3c>)
   b6a9c:	7829      	ldrb	r1, [r5, #0]
   b6a9e:	f3bf 8f5b 	dmb	ish
   b6aa2:	f011 0401 	ands.w	r4, r1, #1
{
   b6aa6:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6aa8:	d111      	bne.n	b6ace <_Z22__fetch_global_Serial1v+0x36>
   b6aaa:	4628      	mov	r0, r5
   b6aac:	f7fd faf9 	bl	b40a2 <__cxa_guard_acquire>
   b6ab0:	b168      	cbz	r0, b6ace <_Z22__fetch_global_Serial1v+0x36>
   b6ab2:	a801      	add	r0, sp, #4
   b6ab4:	f7ff ffd6 	bl	b6a64 <_Z20acquireSerial1Bufferv>
   b6ab8:	aa01      	add	r2, sp, #4
   b6aba:	4621      	mov	r1, r4
   b6abc:	4806      	ldr	r0, [pc, #24]	; (b6ad8 <_Z22__fetch_global_Serial1v+0x40>)
   b6abe:	f7ff fd3d 	bl	b653c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b6ac2:	4628      	mov	r0, r5
   b6ac4:	f7fd faf2 	bl	b40ac <__cxa_guard_release>
   b6ac8:	4804      	ldr	r0, [pc, #16]	; (b6adc <_Z22__fetch_global_Serial1v+0x44>)
   b6aca:	f002 f863 	bl	b8b94 <atexit>
    return serial1;
}
   b6ace:	4802      	ldr	r0, [pc, #8]	; (b6ad8 <_Z22__fetch_global_Serial1v+0x40>)
   b6ad0:	b007      	add	sp, #28
   b6ad2:	bd30      	pop	{r4, r5, pc}
   b6ad4:	2003e748 	.word	0x2003e748
   b6ad8:	2003e74c 	.word	0x2003e74c
   b6adc:	000b6a61 	.word	0x000b6a61

000b6ae0 <_ZnajRKSt9nothrow_t>:
   b6ae0:	f7fd badb 	b.w	b409a <_Znaj>

000b6ae4 <_ZSt25__throw_bad_function_callv>:
   b6ae4:	b508      	push	{r3, lr}
   b6ae6:	f7fe fd1f 	bl	b5528 <abort>
   b6aea:	0000      	movs	r0, r0
   b6aec:	0000      	movs	r0, r0
	...

000b6af0 <pow>:
   b6af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6af2:	ed2d 8b02 	vpush	{d8}
   b6af6:	ec57 6b10 	vmov	r6, r7, d0
   b6afa:	ec55 4b11 	vmov	r4, r5, d1
   b6afe:	f000 f8cb 	bl	b6c98 <__ieee754_pow>
   b6b02:	4b63      	ldr	r3, [pc, #396]	; (b6c90 <pow+0x1a0>)
   b6b04:	eeb0 8a40 	vmov.f32	s16, s0
   b6b08:	eef0 8a60 	vmov.f32	s17, s1
   b6b0c:	f993 3000 	ldrsb.w	r3, [r3]
   b6b10:	3301      	adds	r3, #1
   b6b12:	d02a      	beq.n	b6b6a <pow+0x7a>
   b6b14:	4622      	mov	r2, r4
   b6b16:	462b      	mov	r3, r5
   b6b18:	4620      	mov	r0, r4
   b6b1a:	4629      	mov	r1, r5
   b6b1c:	f001 fcc4 	bl	b84a8 <__aeabi_dcmpun>
   b6b20:	bb18      	cbnz	r0, b6b6a <pow+0x7a>
   b6b22:	4632      	mov	r2, r6
   b6b24:	463b      	mov	r3, r7
   b6b26:	4630      	mov	r0, r6
   b6b28:	4639      	mov	r1, r7
   b6b2a:	f001 fcbd 	bl	b84a8 <__aeabi_dcmpun>
   b6b2e:	2800      	cmp	r0, #0
   b6b30:	d144      	bne.n	b6bbc <pow+0xcc>
   b6b32:	2200      	movs	r2, #0
   b6b34:	2300      	movs	r3, #0
   b6b36:	4630      	mov	r0, r6
   b6b38:	4639      	mov	r1, r7
   b6b3a:	f001 fc83 	bl	b8444 <__aeabi_dcmpeq>
   b6b3e:	b1d8      	cbz	r0, b6b78 <pow+0x88>
   b6b40:	2200      	movs	r2, #0
   b6b42:	2300      	movs	r3, #0
   b6b44:	4620      	mov	r0, r4
   b6b46:	4629      	mov	r1, r5
   b6b48:	f001 fc7c 	bl	b8444 <__aeabi_dcmpeq>
   b6b4c:	2800      	cmp	r0, #0
   b6b4e:	d13d      	bne.n	b6bcc <pow+0xdc>
   b6b50:	ec45 4b10 	vmov	d0, r4, r5
   b6b54:	f000 ff10 	bl	b7978 <finite>
   b6b58:	b138      	cbz	r0, b6b6a <pow+0x7a>
   b6b5a:	4620      	mov	r0, r4
   b6b5c:	4629      	mov	r1, r5
   b6b5e:	2200      	movs	r2, #0
   b6b60:	2300      	movs	r3, #0
   b6b62:	f001 fc79 	bl	b8458 <__aeabi_dcmplt>
   b6b66:	2800      	cmp	r0, #0
   b6b68:	d15c      	bne.n	b6c24 <pow+0x134>
   b6b6a:	eeb0 0a48 	vmov.f32	s0, s16
   b6b6e:	eef0 0a68 	vmov.f32	s1, s17
   b6b72:	ecbd 8b02 	vpop	{d8}
   b6b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b6b78:	eeb0 0a48 	vmov.f32	s0, s16
   b6b7c:	eef0 0a68 	vmov.f32	s1, s17
   b6b80:	f000 fefa 	bl	b7978 <finite>
   b6b84:	b358      	cbz	r0, b6bde <pow+0xee>
   b6b86:	ec51 0b18 	vmov	r0, r1, d8
   b6b8a:	2200      	movs	r2, #0
   b6b8c:	2300      	movs	r3, #0
   b6b8e:	f001 fc59 	bl	b8444 <__aeabi_dcmpeq>
   b6b92:	2800      	cmp	r0, #0
   b6b94:	d0e9      	beq.n	b6b6a <pow+0x7a>
   b6b96:	ec47 6b10 	vmov	d0, r6, r7
   b6b9a:	f000 feed 	bl	b7978 <finite>
   b6b9e:	2800      	cmp	r0, #0
   b6ba0:	d0e3      	beq.n	b6b6a <pow+0x7a>
   b6ba2:	ec45 4b10 	vmov	d0, r4, r5
   b6ba6:	f000 fee7 	bl	b7978 <finite>
   b6baa:	2800      	cmp	r0, #0
   b6bac:	d0dd      	beq.n	b6b6a <pow+0x7a>
   b6bae:	f7fe fccb 	bl	b5548 <__errno>
   b6bb2:	2322      	movs	r3, #34	; 0x22
   b6bb4:	ed9f 8b2e 	vldr	d8, [pc, #184]	; b6c70 <pow+0x180>
   b6bb8:	6003      	str	r3, [r0, #0]
   b6bba:	e7d6      	b.n	b6b6a <pow+0x7a>
   b6bbc:	4620      	mov	r0, r4
   b6bbe:	4629      	mov	r1, r5
   b6bc0:	2200      	movs	r2, #0
   b6bc2:	2300      	movs	r3, #0
   b6bc4:	f001 fc3e 	bl	b8444 <__aeabi_dcmpeq>
   b6bc8:	2800      	cmp	r0, #0
   b6bca:	d0ce      	beq.n	b6b6a <pow+0x7a>
   b6bcc:	ed9f 8b2a 	vldr	d8, [pc, #168]	; b6c78 <pow+0x188>
   b6bd0:	eeb0 0a48 	vmov.f32	s0, s16
   b6bd4:	eef0 0a68 	vmov.f32	s1, s17
   b6bd8:	ecbd 8b02 	vpop	{d8}
   b6bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b6bde:	ec47 6b10 	vmov	d0, r6, r7
   b6be2:	f000 fec9 	bl	b7978 <finite>
   b6be6:	2800      	cmp	r0, #0
   b6be8:	d0cd      	beq.n	b6b86 <pow+0x96>
   b6bea:	ec45 4b10 	vmov	d0, r4, r5
   b6bee:	f000 fec3 	bl	b7978 <finite>
   b6bf2:	2800      	cmp	r0, #0
   b6bf4:	d0c7      	beq.n	b6b86 <pow+0x96>
   b6bf6:	ec53 2b18 	vmov	r2, r3, d8
   b6bfa:	ee18 0a10 	vmov	r0, s16
   b6bfe:	4619      	mov	r1, r3
   b6c00:	f001 fc52 	bl	b84a8 <__aeabi_dcmpun>
   b6c04:	bb20      	cbnz	r0, b6c50 <pow+0x160>
   b6c06:	f7fe fc9f 	bl	b5548 <__errno>
   b6c0a:	4603      	mov	r3, r0
   b6c0c:	2222      	movs	r2, #34	; 0x22
   b6c0e:	601a      	str	r2, [r3, #0]
   b6c10:	4630      	mov	r0, r6
   b6c12:	4639      	mov	r1, r7
   b6c14:	2200      	movs	r2, #0
   b6c16:	2300      	movs	r3, #0
   b6c18:	f001 fc1e 	bl	b8458 <__aeabi_dcmplt>
   b6c1c:	b948      	cbnz	r0, b6c32 <pow+0x142>
   b6c1e:	ed9f 8b18 	vldr	d8, [pc, #96]	; b6c80 <pow+0x190>
   b6c22:	e7a2      	b.n	b6b6a <pow+0x7a>
   b6c24:	f7fe fc90 	bl	b5548 <__errno>
   b6c28:	2321      	movs	r3, #33	; 0x21
   b6c2a:	ed9f 8b17 	vldr	d8, [pc, #92]	; b6c88 <pow+0x198>
   b6c2e:	6003      	str	r3, [r0, #0]
   b6c30:	e79b      	b.n	b6b6a <pow+0x7a>
   b6c32:	ec45 4b10 	vmov	d0, r4, r5
   b6c36:	f000 feb3 	bl	b79a0 <rint>
   b6c3a:	4622      	mov	r2, r4
   b6c3c:	ec51 0b10 	vmov	r0, r1, d0
   b6c40:	462b      	mov	r3, r5
   b6c42:	f001 fbff 	bl	b8444 <__aeabi_dcmpeq>
   b6c46:	2800      	cmp	r0, #0
   b6c48:	d1e9      	bne.n	b6c1e <pow+0x12e>
   b6c4a:	ed9f 8b0f 	vldr	d8, [pc, #60]	; b6c88 <pow+0x198>
   b6c4e:	e78c      	b.n	b6b6a <pow+0x7a>
   b6c50:	f7fe fc7a 	bl	b5548 <__errno>
   b6c54:	2200      	movs	r2, #0
   b6c56:	2300      	movs	r3, #0
   b6c58:	2121      	movs	r1, #33	; 0x21
   b6c5a:	6001      	str	r1, [r0, #0]
   b6c5c:	4610      	mov	r0, r2
   b6c5e:	4619      	mov	r1, r3
   b6c60:	f001 fab2 	bl	b81c8 <__aeabi_ddiv>
   b6c64:	ec41 0b18 	vmov	d8, r0, r1
   b6c68:	e77f      	b.n	b6b6a <pow+0x7a>
   b6c6a:	bf00      	nop
   b6c6c:	f3af 8000 	nop.w
	...
   b6c7c:	3ff00000 	.word	0x3ff00000
   b6c80:	00000000 	.word	0x00000000
   b6c84:	7ff00000 	.word	0x7ff00000
   b6c88:	00000000 	.word	0x00000000
   b6c8c:	fff00000 	.word	0xfff00000
   b6c90:	2003e5a8 	.word	0x2003e5a8
   b6c94:	00000000 	.word	0x00000000

000b6c98 <__ieee754_pow>:
   b6c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6c9c:	ec57 6b11 	vmov	r6, r7, d1
   b6ca0:	ed2d 8b0c 	vpush	{d8-d13}
   b6ca4:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   b6ca8:	ea5a 0206 	orrs.w	r2, sl, r6
   b6cac:	b087      	sub	sp, #28
   b6cae:	d03d      	beq.n	b6d2c <__ieee754_pow+0x94>
   b6cb0:	ec55 4b10 	vmov	r4, r5, d0
   b6cb4:	4972      	ldr	r1, [pc, #456]	; (b6e80 <__ieee754_pow+0x1e8>)
   b6cb6:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
   b6cba:	4588      	cmp	r8, r1
   b6cbc:	ee10 2a10 	vmov	r2, s0
   b6cc0:	46a9      	mov	r9, r5
   b6cc2:	dc2c      	bgt.n	b6d1e <__ieee754_pow+0x86>
   b6cc4:	ee11 3a10 	vmov	r3, s2
   b6cc8:	46bb      	mov	fp, r7
   b6cca:	d036      	beq.n	b6d3a <__ieee754_pow+0xa2>
   b6ccc:	458a      	cmp	sl, r1
   b6cce:	dc26      	bgt.n	b6d1e <__ieee754_pow+0x86>
   b6cd0:	496b      	ldr	r1, [pc, #428]	; (b6e80 <__ieee754_pow+0x1e8>)
   b6cd2:	458a      	cmp	sl, r1
   b6cd4:	d021      	beq.n	b6d1a <__ieee754_pow+0x82>
   b6cd6:	f1b9 0f00 	cmp.w	r9, #0
   b6cda:	db39      	blt.n	b6d50 <__ieee754_pow+0xb8>
   b6cdc:	2100      	movs	r1, #0
   b6cde:	9100      	str	r1, [sp, #0]
   b6ce0:	2b00      	cmp	r3, #0
   b6ce2:	d151      	bne.n	b6d88 <__ieee754_pow+0xf0>
   b6ce4:	4b66      	ldr	r3, [pc, #408]	; (b6e80 <__ieee754_pow+0x1e8>)
   b6ce6:	459a      	cmp	sl, r3
   b6ce8:	f000 80a2 	beq.w	b6e30 <__ieee754_pow+0x198>
   b6cec:	4b65      	ldr	r3, [pc, #404]	; (b6e84 <__ieee754_pow+0x1ec>)
   b6cee:	459a      	cmp	sl, r3
   b6cf0:	f000 80b0 	beq.w	b6e54 <__ieee754_pow+0x1bc>
   b6cf4:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
   b6cf8:	f000 84c0 	beq.w	b767c <__ieee754_pow+0x9e4>
   b6cfc:	4b62      	ldr	r3, [pc, #392]	; (b6e88 <__ieee754_pow+0x1f0>)
   b6cfe:	459b      	cmp	fp, r3
   b6d00:	d142      	bne.n	b6d88 <__ieee754_pow+0xf0>
   b6d02:	f1b9 0f00 	cmp.w	r9, #0
   b6d06:	db3f      	blt.n	b6d88 <__ieee754_pow+0xf0>
   b6d08:	ec45 4b10 	vmov	d0, r4, r5
   b6d0c:	b007      	add	sp, #28
   b6d0e:	ecbd 8b0c 	vpop	{d8-d13}
   b6d12:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6d16:	f000 bd59 	b.w	b77cc <__ieee754_sqrt>
   b6d1a:	2b00      	cmp	r3, #0
   b6d1c:	d0db      	beq.n	b6cd6 <__ieee754_pow+0x3e>
   b6d1e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   b6d22:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   b6d26:	ea58 0302 	orrs.w	r3, r8, r2
   b6d2a:	d109      	bne.n	b6d40 <__ieee754_pow+0xa8>
   b6d2c:	ed9f 0b50 	vldr	d0, [pc, #320]	; b6e70 <__ieee754_pow+0x1d8>
   b6d30:	b007      	add	sp, #28
   b6d32:	ecbd 8b0c 	vpop	{d8-d13}
   b6d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6d3a:	b90c      	cbnz	r4, b6d40 <__ieee754_pow+0xa8>
   b6d3c:	45c2      	cmp	sl, r8
   b6d3e:	ddc7      	ble.n	b6cd0 <__ieee754_pow+0x38>
   b6d40:	4852      	ldr	r0, [pc, #328]	; (b6e8c <__ieee754_pow+0x1f4>)
   b6d42:	b007      	add	sp, #28
   b6d44:	ecbd 8b0c 	vpop	{d8-d13}
   b6d48:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6d4c:	f000 be20 	b.w	b7990 <nan>
   b6d50:	494f      	ldr	r1, [pc, #316]	; (b6e90 <__ieee754_pow+0x1f8>)
   b6d52:	458a      	cmp	sl, r1
   b6d54:	f300 8085 	bgt.w	b6e62 <__ieee754_pow+0x1ca>
   b6d58:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
   b6d5c:	458a      	cmp	sl, r1
   b6d5e:	dd0f      	ble.n	b6d80 <__ieee754_pow+0xe8>
   b6d60:	ea4f 512a 	mov.w	r1, sl, asr #20
   b6d64:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   b6d68:	2914      	cmp	r1, #20
   b6d6a:	f340 849b 	ble.w	b76a4 <__ieee754_pow+0xa0c>
   b6d6e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
   b6d72:	fa23 f001 	lsr.w	r0, r3, r1
   b6d76:	fa00 f101 	lsl.w	r1, r0, r1
   b6d7a:	4299      	cmp	r1, r3
   b6d7c:	f000 84ed 	beq.w	b775a <__ieee754_pow+0xac2>
   b6d80:	2100      	movs	r1, #0
   b6d82:	9100      	str	r1, [sp, #0]
   b6d84:	2b00      	cmp	r3, #0
   b6d86:	d0b1      	beq.n	b6cec <__ieee754_pow+0x54>
   b6d88:	ec45 4b10 	vmov	d0, r4, r5
   b6d8c:	9202      	str	r2, [sp, #8]
   b6d8e:	f000 fde9 	bl	b7964 <fabs>
   b6d92:	9a02      	ldr	r2, [sp, #8]
   b6d94:	bb5a      	cbnz	r2, b6dee <__ieee754_pow+0x156>
   b6d96:	f1b8 0f00 	cmp.w	r8, #0
   b6d9a:	d004      	beq.n	b6da6 <__ieee754_pow+0x10e>
   b6d9c:	4b39      	ldr	r3, [pc, #228]	; (b6e84 <__ieee754_pow+0x1ec>)
   b6d9e:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
   b6da2:	429a      	cmp	r2, r3
   b6da4:	d123      	bne.n	b6dee <__ieee754_pow+0x156>
   b6da6:	f1bb 0f00 	cmp.w	fp, #0
   b6daa:	da07      	bge.n	b6dbc <__ieee754_pow+0x124>
   b6dac:	ec53 2b10 	vmov	r2, r3, d0
   b6db0:	4934      	ldr	r1, [pc, #208]	; (b6e84 <__ieee754_pow+0x1ec>)
   b6db2:	2000      	movs	r0, #0
   b6db4:	f001 fa08 	bl	b81c8 <__aeabi_ddiv>
   b6db8:	ec41 0b10 	vmov	d0, r0, r1
   b6dbc:	f1b9 0f00 	cmp.w	r9, #0
   b6dc0:	dab6      	bge.n	b6d30 <__ieee754_pow+0x98>
   b6dc2:	9b00      	ldr	r3, [sp, #0]
   b6dc4:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   b6dc8:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   b6dcc:	ea58 0303 	orrs.w	r3, r8, r3
   b6dd0:	f040 848d 	bne.w	b76ee <__ieee754_pow+0xa56>
   b6dd4:	ec53 2b10 	vmov	r2, r3, d0
   b6dd8:	4610      	mov	r0, r2
   b6dda:	4619      	mov	r1, r3
   b6ddc:	f000 ff12 	bl	b7c04 <__aeabi_dsub>
   b6de0:	4602      	mov	r2, r0
   b6de2:	460b      	mov	r3, r1
   b6de4:	f001 f9f0 	bl	b81c8 <__aeabi_ddiv>
   b6de8:	ec41 0b10 	vmov	d0, r0, r1
   b6dec:	e7a0      	b.n	b6d30 <__ieee754_pow+0x98>
   b6dee:	9a00      	ldr	r2, [sp, #0]
   b6df0:	ea4f 73d9 	mov.w	r3, r9, lsr #31
   b6df4:	3b01      	subs	r3, #1
   b6df6:	9304      	str	r3, [sp, #16]
   b6df8:	4313      	orrs	r3, r2
   b6dfa:	d035      	beq.n	b6e68 <__ieee754_pow+0x1d0>
   b6dfc:	4b25      	ldr	r3, [pc, #148]	; (b6e94 <__ieee754_pow+0x1fc>)
   b6dfe:	459a      	cmp	sl, r3
   b6e00:	dd4c      	ble.n	b6e9c <__ieee754_pow+0x204>
   b6e02:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   b6e06:	459a      	cmp	sl, r3
   b6e08:	4b23      	ldr	r3, [pc, #140]	; (b6e98 <__ieee754_pow+0x200>)
   b6e0a:	f340 83db 	ble.w	b75c4 <__ieee754_pow+0x92c>
   b6e0e:	4598      	cmp	r8, r3
   b6e10:	f340 8360 	ble.w	b74d4 <__ieee754_pow+0x83c>
   b6e14:	f1bb 0f00 	cmp.w	fp, #0
   b6e18:	f340 8360 	ble.w	b74dc <__ieee754_pow+0x844>
   b6e1c:	a316      	add	r3, pc, #88	; (adr r3, b6e78 <__ieee754_pow+0x1e0>)
   b6e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6e22:	4610      	mov	r0, r2
   b6e24:	4619      	mov	r1, r3
   b6e26:	f001 f8a5 	bl	b7f74 <__aeabi_dmul>
   b6e2a:	ec41 0b10 	vmov	d0, r0, r1
   b6e2e:	e77f      	b.n	b6d30 <__ieee754_pow+0x98>
   b6e30:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
   b6e34:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   b6e38:	4313      	orrs	r3, r2
   b6e3a:	f43f af77 	beq.w	b6d2c <__ieee754_pow+0x94>
   b6e3e:	4b16      	ldr	r3, [pc, #88]	; (b6e98 <__ieee754_pow+0x200>)
   b6e40:	4598      	cmp	r8, r3
   b6e42:	f340 837a 	ble.w	b753a <__ieee754_pow+0x8a2>
   b6e46:	f1bb 0f00 	cmp.w	fp, #0
   b6e4a:	f2c0 8347 	blt.w	b74dc <__ieee754_pow+0x844>
   b6e4e:	ec47 6b10 	vmov	d0, r6, r7
   b6e52:	e76d      	b.n	b6d30 <__ieee754_pow+0x98>
   b6e54:	f1bb 0f00 	cmp.w	fp, #0
   b6e58:	f2c0 841a 	blt.w	b7690 <__ieee754_pow+0x9f8>
   b6e5c:	ec45 4b10 	vmov	d0, r4, r5
   b6e60:	e766      	b.n	b6d30 <__ieee754_pow+0x98>
   b6e62:	2102      	movs	r1, #2
   b6e64:	9100      	str	r1, [sp, #0]
   b6e66:	e73b      	b.n	b6ce0 <__ieee754_pow+0x48>
   b6e68:	4622      	mov	r2, r4
   b6e6a:	462b      	mov	r3, r5
   b6e6c:	e7b4      	b.n	b6dd8 <__ieee754_pow+0x140>
   b6e6e:	bf00      	nop
   b6e70:	00000000 	.word	0x00000000
   b6e74:	3ff00000 	.word	0x3ff00000
   b6e78:	8800759c 	.word	0x8800759c
   b6e7c:	7e37e43c 	.word	0x7e37e43c
   b6e80:	7ff00000 	.word	0x7ff00000
   b6e84:	3ff00000 	.word	0x3ff00000
   b6e88:	3fe00000 	.word	0x3fe00000
   b6e8c:	000b9094 	.word	0x000b9094
   b6e90:	433fffff 	.word	0x433fffff
   b6e94:	41e00000 	.word	0x41e00000
   b6e98:	3fefffff 	.word	0x3fefffff
   b6e9c:	4be4      	ldr	r3, [pc, #912]	; (b7230 <__ieee754_pow+0x598>)
   b6e9e:	ea09 0303 	and.w	r3, r9, r3
   b6ea2:	2200      	movs	r2, #0
   b6ea4:	b953      	cbnz	r3, b6ebc <__ieee754_pow+0x224>
   b6ea6:	ec51 0b10 	vmov	r0, r1, d0
   b6eaa:	4be2      	ldr	r3, [pc, #904]	; (b7234 <__ieee754_pow+0x59c>)
   b6eac:	f001 f862 	bl	b7f74 <__aeabi_dmul>
   b6eb0:	ec41 0b10 	vmov	d0, r0, r1
   b6eb4:	ee10 8a90 	vmov	r8, s1
   b6eb8:	f06f 0234 	mvn.w	r2, #52	; 0x34
   b6ebc:	ea4f 5328 	mov.w	r3, r8, asr #20
   b6ec0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   b6ec4:	189a      	adds	r2, r3, r2
   b6ec6:	4bdc      	ldr	r3, [pc, #880]	; (b7238 <__ieee754_pow+0x5a0>)
   b6ec8:	9205      	str	r2, [sp, #20]
   b6eca:	f3c8 0813 	ubfx	r8, r8, #0, #20
   b6ece:	f048 547f 	orr.w	r4, r8, #1069547520	; 0x3fc00000
   b6ed2:	4598      	cmp	r8, r3
   b6ed4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   b6ed8:	dd07      	ble.n	b6eea <__ieee754_pow+0x252>
   b6eda:	4bd8      	ldr	r3, [pc, #864]	; (b723c <__ieee754_pow+0x5a4>)
   b6edc:	4598      	cmp	r8, r3
   b6ede:	f340 8414 	ble.w	b770a <__ieee754_pow+0xa72>
   b6ee2:	3201      	adds	r2, #1
   b6ee4:	9205      	str	r2, [sp, #20]
   b6ee6:	f5a4 1480 	sub.w	r4, r4, #1048576	; 0x100000
   b6eea:	ed9f 6bb9 	vldr	d6, [pc, #740]	; b71d0 <__ieee754_pow+0x538>
   b6eee:	ed9f 7bba 	vldr	d7, [pc, #744]	; b71d8 <__ieee754_pow+0x540>
   b6ef2:	ec53 2b16 	vmov	r2, r3, d6
   b6ef6:	eeb0 ca47 	vmov.f32	s24, s14
   b6efa:	eef0 ca67 	vmov.f32	s25, s15
   b6efe:	2500      	movs	r5, #0
   b6f00:	eeb0 da47 	vmov.f32	s26, s14
   b6f04:	eef0 da67 	vmov.f32	s27, s15
   b6f08:	ec5b ab10 	vmov	sl, fp, d0
   b6f0c:	46a3      	mov	fp, r4
   b6f0e:	4650      	mov	r0, sl
   b6f10:	4659      	mov	r1, fp
   b6f12:	ec43 2b1a 	vmov	d10, r2, r3
   b6f16:	f000 fe75 	bl	b7c04 <__aeabi_dsub>
   b6f1a:	ec53 2b1a 	vmov	r2, r3, d10
   b6f1e:	4680      	mov	r8, r0
   b6f20:	4689      	mov	r9, r1
   b6f22:	4650      	mov	r0, sl
   b6f24:	4659      	mov	r1, fp
   b6f26:	f000 fe6f 	bl	b7c08 <__adddf3>
   b6f2a:	4602      	mov	r2, r0
   b6f2c:	460b      	mov	r3, r1
   b6f2e:	2000      	movs	r0, #0
   b6f30:	49c3      	ldr	r1, [pc, #780]	; (b7240 <__ieee754_pow+0x5a8>)
   b6f32:	f001 f949 	bl	b81c8 <__aeabi_ddiv>
   b6f36:	ec41 0b1b 	vmov	d11, r0, r1
   b6f3a:	4640      	mov	r0, r8
   b6f3c:	ec53 2b1b 	vmov	r2, r3, d11
   b6f40:	4649      	mov	r1, r9
   b6f42:	f001 f817 	bl	b7f74 <__aeabi_dmul>
   b6f46:	ec41 0b18 	vmov	d8, r0, r1
   b6f4a:	460a      	mov	r2, r1
   b6f4c:	4601      	mov	r1, r0
   b6f4e:	e9cd 1202 	strd	r1, r2, [sp, #8]
   b6f52:	2100      	movs	r1, #0
   b6f54:	9102      	str	r1, [sp, #8]
   b6f56:	1064      	asrs	r4, r4, #1
   b6f58:	ec4b ab19 	vmov	d9, sl, fp
   b6f5c:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
   b6f60:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   b6f64:	f504 2300 	add.w	r3, r4, #524288	; 0x80000
   b6f68:	2000      	movs	r0, #0
   b6f6a:	1959      	adds	r1, r3, r5
   b6f6c:	4604      	mov	r4, r0
   b6f6e:	460d      	mov	r5, r1
   b6f70:	4602      	mov	r2, r0
   b6f72:	460b      	mov	r3, r1
   b6f74:	4650      	mov	r0, sl
   b6f76:	4659      	mov	r1, fp
   b6f78:	f000 fffc 	bl	b7f74 <__aeabi_dmul>
   b6f7c:	4602      	mov	r2, r0
   b6f7e:	460b      	mov	r3, r1
   b6f80:	4640      	mov	r0, r8
   b6f82:	4649      	mov	r1, r9
   b6f84:	f000 fe3e 	bl	b7c04 <__aeabi_dsub>
   b6f88:	ec53 2b1a 	vmov	r2, r3, d10
   b6f8c:	4680      	mov	r8, r0
   b6f8e:	4689      	mov	r9, r1
   b6f90:	4620      	mov	r0, r4
   b6f92:	4629      	mov	r1, r5
   b6f94:	f000 fe36 	bl	b7c04 <__aeabi_dsub>
   b6f98:	4602      	mov	r2, r0
   b6f9a:	460b      	mov	r3, r1
   b6f9c:	ec51 0b19 	vmov	r0, r1, d9
   b6fa0:	f000 fe30 	bl	b7c04 <__aeabi_dsub>
   b6fa4:	4652      	mov	r2, sl
   b6fa6:	465b      	mov	r3, fp
   b6fa8:	f000 ffe4 	bl	b7f74 <__aeabi_dmul>
   b6fac:	4602      	mov	r2, r0
   b6fae:	460b      	mov	r3, r1
   b6fb0:	4640      	mov	r0, r8
   b6fb2:	4649      	mov	r1, r9
   b6fb4:	f000 fe26 	bl	b7c04 <__aeabi_dsub>
   b6fb8:	ec53 2b1b 	vmov	r2, r3, d11
   b6fbc:	f000 ffda 	bl	b7f74 <__aeabi_dmul>
   b6fc0:	ec53 2b18 	vmov	r2, r3, d8
   b6fc4:	ec41 0b19 	vmov	d9, r0, r1
   b6fc8:	ec51 0b18 	vmov	r0, r1, d8
   b6fcc:	f000 ffd2 	bl	b7f74 <__aeabi_dmul>
   b6fd0:	a383      	add	r3, pc, #524	; (adr r3, b71e0 <__ieee754_pow+0x548>)
   b6fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6fd6:	4604      	mov	r4, r0
   b6fd8:	460d      	mov	r5, r1
   b6fda:	f000 ffcb 	bl	b7f74 <__aeabi_dmul>
   b6fde:	a382      	add	r3, pc, #520	; (adr r3, b71e8 <__ieee754_pow+0x550>)
   b6fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6fe4:	f000 fe10 	bl	b7c08 <__adddf3>
   b6fe8:	4622      	mov	r2, r4
   b6fea:	462b      	mov	r3, r5
   b6fec:	f000 ffc2 	bl	b7f74 <__aeabi_dmul>
   b6ff0:	a37f      	add	r3, pc, #508	; (adr r3, b71f0 <__ieee754_pow+0x558>)
   b6ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6ff6:	f000 fe07 	bl	b7c08 <__adddf3>
   b6ffa:	4622      	mov	r2, r4
   b6ffc:	462b      	mov	r3, r5
   b6ffe:	f000 ffb9 	bl	b7f74 <__aeabi_dmul>
   b7002:	a37d      	add	r3, pc, #500	; (adr r3, b71f8 <__ieee754_pow+0x560>)
   b7004:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7008:	f000 fdfe 	bl	b7c08 <__adddf3>
   b700c:	4622      	mov	r2, r4
   b700e:	462b      	mov	r3, r5
   b7010:	f000 ffb0 	bl	b7f74 <__aeabi_dmul>
   b7014:	a37a      	add	r3, pc, #488	; (adr r3, b7200 <__ieee754_pow+0x568>)
   b7016:	e9d3 2300 	ldrd	r2, r3, [r3]
   b701a:	f000 fdf5 	bl	b7c08 <__adddf3>
   b701e:	4622      	mov	r2, r4
   b7020:	462b      	mov	r3, r5
   b7022:	f000 ffa7 	bl	b7f74 <__aeabi_dmul>
   b7026:	a378      	add	r3, pc, #480	; (adr r3, b7208 <__ieee754_pow+0x570>)
   b7028:	e9d3 2300 	ldrd	r2, r3, [r3]
   b702c:	f000 fdec 	bl	b7c08 <__adddf3>
   b7030:	4622      	mov	r2, r4
   b7032:	4680      	mov	r8, r0
   b7034:	4689      	mov	r9, r1
   b7036:	462b      	mov	r3, r5
   b7038:	4620      	mov	r0, r4
   b703a:	4629      	mov	r1, r5
   b703c:	f000 ff9a 	bl	b7f74 <__aeabi_dmul>
   b7040:	4602      	mov	r2, r0
   b7042:	460b      	mov	r3, r1
   b7044:	4640      	mov	r0, r8
   b7046:	4649      	mov	r1, r9
   b7048:	f000 ff94 	bl	b7f74 <__aeabi_dmul>
   b704c:	4652      	mov	r2, sl
   b704e:	4604      	mov	r4, r0
   b7050:	460d      	mov	r5, r1
   b7052:	465b      	mov	r3, fp
   b7054:	ec51 0b18 	vmov	r0, r1, d8
   b7058:	f000 fdd6 	bl	b7c08 <__adddf3>
   b705c:	ec53 2b19 	vmov	r2, r3, d9
   b7060:	f000 ff88 	bl	b7f74 <__aeabi_dmul>
   b7064:	4622      	mov	r2, r4
   b7066:	462b      	mov	r3, r5
   b7068:	f000 fdce 	bl	b7c08 <__adddf3>
   b706c:	4652      	mov	r2, sl
   b706e:	4680      	mov	r8, r0
   b7070:	4689      	mov	r9, r1
   b7072:	465b      	mov	r3, fp
   b7074:	4650      	mov	r0, sl
   b7076:	4659      	mov	r1, fp
   b7078:	f000 ff7c 	bl	b7f74 <__aeabi_dmul>
   b707c:	4602      	mov	r2, r0
   b707e:	460b      	mov	r3, r1
   b7080:	ec43 2b1a 	vmov	d10, r2, r3
   b7084:	4b6f      	ldr	r3, [pc, #444]	; (b7244 <__ieee754_pow+0x5ac>)
   b7086:	2200      	movs	r2, #0
   b7088:	f000 fdbe 	bl	b7c08 <__adddf3>
   b708c:	4642      	mov	r2, r8
   b708e:	464b      	mov	r3, r9
   b7090:	f000 fdba 	bl	b7c08 <__adddf3>
   b7094:	2400      	movs	r4, #0
   b7096:	460d      	mov	r5, r1
   b7098:	4622      	mov	r2, r4
   b709a:	462b      	mov	r3, r5
   b709c:	4650      	mov	r0, sl
   b709e:	4659      	mov	r1, fp
   b70a0:	f000 ff68 	bl	b7f74 <__aeabi_dmul>
   b70a4:	4b67      	ldr	r3, [pc, #412]	; (b7244 <__ieee754_pow+0x5ac>)
   b70a6:	4682      	mov	sl, r0
   b70a8:	468b      	mov	fp, r1
   b70aa:	2200      	movs	r2, #0
   b70ac:	4620      	mov	r0, r4
   b70ae:	4629      	mov	r1, r5
   b70b0:	f000 fda8 	bl	b7c04 <__aeabi_dsub>
   b70b4:	ec53 2b1a 	vmov	r2, r3, d10
   b70b8:	f000 fda4 	bl	b7c04 <__aeabi_dsub>
   b70bc:	4602      	mov	r2, r0
   b70be:	460b      	mov	r3, r1
   b70c0:	4640      	mov	r0, r8
   b70c2:	4649      	mov	r1, r9
   b70c4:	f000 fd9e 	bl	b7c04 <__aeabi_dsub>
   b70c8:	ec53 2b18 	vmov	r2, r3, d8
   b70cc:	f000 ff52 	bl	b7f74 <__aeabi_dmul>
   b70d0:	4622      	mov	r2, r4
   b70d2:	462b      	mov	r3, r5
   b70d4:	4604      	mov	r4, r0
   b70d6:	460d      	mov	r5, r1
   b70d8:	ec51 0b19 	vmov	r0, r1, d9
   b70dc:	f000 ff4a 	bl	b7f74 <__aeabi_dmul>
   b70e0:	4602      	mov	r2, r0
   b70e2:	460b      	mov	r3, r1
   b70e4:	4620      	mov	r0, r4
   b70e6:	4629      	mov	r1, r5
   b70e8:	f000 fd8e 	bl	b7c08 <__adddf3>
   b70ec:	4680      	mov	r8, r0
   b70ee:	4689      	mov	r9, r1
   b70f0:	4642      	mov	r2, r8
   b70f2:	464b      	mov	r3, r9
   b70f4:	4650      	mov	r0, sl
   b70f6:	4659      	mov	r1, fp
   b70f8:	f000 fd86 	bl	b7c08 <__adddf3>
   b70fc:	a344      	add	r3, pc, #272	; (adr r3, b7210 <__ieee754_pow+0x578>)
   b70fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7102:	2000      	movs	r0, #0
   b7104:	4604      	mov	r4, r0
   b7106:	460d      	mov	r5, r1
   b7108:	f000 ff34 	bl	b7f74 <__aeabi_dmul>
   b710c:	4652      	mov	r2, sl
   b710e:	ec41 0b19 	vmov	d9, r0, r1
   b7112:	465b      	mov	r3, fp
   b7114:	4620      	mov	r0, r4
   b7116:	4629      	mov	r1, r5
   b7118:	f000 fd74 	bl	b7c04 <__aeabi_dsub>
   b711c:	4602      	mov	r2, r0
   b711e:	460b      	mov	r3, r1
   b7120:	4640      	mov	r0, r8
   b7122:	4649      	mov	r1, r9
   b7124:	f000 fd6e 	bl	b7c04 <__aeabi_dsub>
   b7128:	a33b      	add	r3, pc, #236	; (adr r3, b7218 <__ieee754_pow+0x580>)
   b712a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b712e:	f000 ff21 	bl	b7f74 <__aeabi_dmul>
   b7132:	4602      	mov	r2, r0
   b7134:	460b      	mov	r3, r1
   b7136:	4620      	mov	r0, r4
   b7138:	4629      	mov	r1, r5
   b713a:	4614      	mov	r4, r2
   b713c:	461d      	mov	r5, r3
   b713e:	a338      	add	r3, pc, #224	; (adr r3, b7220 <__ieee754_pow+0x588>)
   b7140:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7144:	f000 ff16 	bl	b7f74 <__aeabi_dmul>
   b7148:	4602      	mov	r2, r0
   b714a:	460b      	mov	r3, r1
   b714c:	4620      	mov	r0, r4
   b714e:	4629      	mov	r1, r5
   b7150:	f000 fd5a 	bl	b7c08 <__adddf3>
   b7154:	ec53 2b1d 	vmov	r2, r3, d13
   b7158:	f000 fd56 	bl	b7c08 <__adddf3>
   b715c:	4680      	mov	r8, r0
   b715e:	9805      	ldr	r0, [sp, #20]
   b7160:	4689      	mov	r9, r1
   b7162:	f000 fe9d 	bl	b7ea0 <__aeabi_i2d>
   b7166:	4642      	mov	r2, r8
   b7168:	4682      	mov	sl, r0
   b716a:	468b      	mov	fp, r1
   b716c:	464b      	mov	r3, r9
   b716e:	ec51 0b19 	vmov	r0, r1, d9
   b7172:	f000 fd49 	bl	b7c08 <__adddf3>
   b7176:	ec53 2b1c 	vmov	r2, r3, d12
   b717a:	f000 fd45 	bl	b7c08 <__adddf3>
   b717e:	4652      	mov	r2, sl
   b7180:	465b      	mov	r3, fp
   b7182:	f000 fd41 	bl	b7c08 <__adddf3>
   b7186:	4652      	mov	r2, sl
   b7188:	465b      	mov	r3, fp
   b718a:	2000      	movs	r0, #0
   b718c:	4604      	mov	r4, r0
   b718e:	460d      	mov	r5, r1
   b7190:	f000 fd38 	bl	b7c04 <__aeabi_dsub>
   b7194:	ec53 2b1c 	vmov	r2, r3, d12
   b7198:	f000 fd34 	bl	b7c04 <__aeabi_dsub>
   b719c:	ec53 2b19 	vmov	r2, r3, d9
   b71a0:	f000 fd30 	bl	b7c04 <__aeabi_dsub>
   b71a4:	4602      	mov	r2, r0
   b71a6:	460b      	mov	r3, r1
   b71a8:	4640      	mov	r0, r8
   b71aa:	4649      	mov	r1, r9
   b71ac:	f000 fd2a 	bl	b7c04 <__aeabi_dsub>
   b71b0:	9b00      	ldr	r3, [sp, #0]
   b71b2:	9a04      	ldr	r2, [sp, #16]
   b71b4:	3b01      	subs	r3, #1
   b71b6:	4313      	orrs	r3, r2
   b71b8:	4682      	mov	sl, r0
   b71ba:	468b      	mov	fp, r1
   b71bc:	f040 81b6 	bne.w	b752c <__ieee754_pow+0x894>
   b71c0:	ed9f 7b19 	vldr	d7, [pc, #100]	; b7228 <__ieee754_pow+0x590>
   b71c4:	eeb0 8a47 	vmov.f32	s16, s14
   b71c8:	eef0 8a67 	vmov.f32	s17, s15
   b71cc:	e03c      	b.n	b7248 <__ieee754_pow+0x5b0>
   b71ce:	bf00      	nop
   b71d0:	00000000 	.word	0x00000000
   b71d4:	3ff00000 	.word	0x3ff00000
	...
   b71e0:	4a454eef 	.word	0x4a454eef
   b71e4:	3fca7e28 	.word	0x3fca7e28
   b71e8:	93c9db65 	.word	0x93c9db65
   b71ec:	3fcd864a 	.word	0x3fcd864a
   b71f0:	a91d4101 	.word	0xa91d4101
   b71f4:	3fd17460 	.word	0x3fd17460
   b71f8:	518f264d 	.word	0x518f264d
   b71fc:	3fd55555 	.word	0x3fd55555
   b7200:	db6fabff 	.word	0xdb6fabff
   b7204:	3fdb6db6 	.word	0x3fdb6db6
   b7208:	33333303 	.word	0x33333303
   b720c:	3fe33333 	.word	0x3fe33333
   b7210:	e0000000 	.word	0xe0000000
   b7214:	3feec709 	.word	0x3feec709
   b7218:	dc3a03fd 	.word	0xdc3a03fd
   b721c:	3feec709 	.word	0x3feec709
   b7220:	145b01f5 	.word	0x145b01f5
   b7224:	be3e2fe0 	.word	0xbe3e2fe0
   b7228:	00000000 	.word	0x00000000
   b722c:	bff00000 	.word	0xbff00000
   b7230:	7ff00000 	.word	0x7ff00000
   b7234:	43400000 	.word	0x43400000
   b7238:	0003988e 	.word	0x0003988e
   b723c:	000bb679 	.word	0x000bb679
   b7240:	3ff00000 	.word	0x3ff00000
   b7244:	40080000 	.word	0x40080000
   b7248:	2300      	movs	r3, #0
   b724a:	e9cd 6700 	strd	r6, r7, [sp]
   b724e:	9300      	str	r3, [sp, #0]
   b7250:	e9dd 8900 	ldrd	r8, r9, [sp]
   b7254:	4630      	mov	r0, r6
   b7256:	4642      	mov	r2, r8
   b7258:	464b      	mov	r3, r9
   b725a:	4639      	mov	r1, r7
   b725c:	f000 fcd2 	bl	b7c04 <__aeabi_dsub>
   b7260:	4622      	mov	r2, r4
   b7262:	462b      	mov	r3, r5
   b7264:	f000 fe86 	bl	b7f74 <__aeabi_dmul>
   b7268:	4632      	mov	r2, r6
   b726a:	463b      	mov	r3, r7
   b726c:	4606      	mov	r6, r0
   b726e:	460f      	mov	r7, r1
   b7270:	4650      	mov	r0, sl
   b7272:	4659      	mov	r1, fp
   b7274:	f000 fe7e 	bl	b7f74 <__aeabi_dmul>
   b7278:	4602      	mov	r2, r0
   b727a:	460b      	mov	r3, r1
   b727c:	4630      	mov	r0, r6
   b727e:	4639      	mov	r1, r7
   b7280:	f000 fcc2 	bl	b7c08 <__adddf3>
   b7284:	4642      	mov	r2, r8
   b7286:	464b      	mov	r3, r9
   b7288:	4606      	mov	r6, r0
   b728a:	460f      	mov	r7, r1
   b728c:	4620      	mov	r0, r4
   b728e:	4629      	mov	r1, r5
   b7290:	f000 fe70 	bl	b7f74 <__aeabi_dmul>
   b7294:	4604      	mov	r4, r0
   b7296:	460d      	mov	r5, r1
   b7298:	462b      	mov	r3, r5
   b729a:	4630      	mov	r0, r6
   b729c:	4639      	mov	r1, r7
   b729e:	4622      	mov	r2, r4
   b72a0:	f000 fcb2 	bl	b7c08 <__adddf3>
   b72a4:	4bc2      	ldr	r3, [pc, #776]	; (b75b0 <__ieee754_pow+0x918>)
   b72a6:	4299      	cmp	r1, r3
   b72a8:	4680      	mov	r8, r0
   b72aa:	4689      	mov	r9, r1
   b72ac:	468a      	mov	sl, r1
   b72ae:	f340 8118 	ble.w	b74e2 <__ieee754_pow+0x84a>
   b72b2:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   b72b6:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   b72ba:	4303      	orrs	r3, r0
   b72bc:	f040 8207 	bne.w	b76ce <__ieee754_pow+0xa36>
   b72c0:	a3a3      	add	r3, pc, #652	; (adr r3, b7550 <__ieee754_pow+0x8b8>)
   b72c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b72c6:	4630      	mov	r0, r6
   b72c8:	4639      	mov	r1, r7
   b72ca:	f000 fc9d 	bl	b7c08 <__adddf3>
   b72ce:	4602      	mov	r2, r0
   b72d0:	460b      	mov	r3, r1
   b72d2:	4640      	mov	r0, r8
   b72d4:	4649      	mov	r1, r9
   b72d6:	4690      	mov	r8, r2
   b72d8:	4699      	mov	r9, r3
   b72da:	4622      	mov	r2, r4
   b72dc:	462b      	mov	r3, r5
   b72de:	f000 fc91 	bl	b7c04 <__aeabi_dsub>
   b72e2:	4602      	mov	r2, r0
   b72e4:	460b      	mov	r3, r1
   b72e6:	4640      	mov	r0, r8
   b72e8:	4649      	mov	r1, r9
   b72ea:	f001 f8d3 	bl	b8494 <__aeabi_dcmpgt>
   b72ee:	2800      	cmp	r0, #0
   b72f0:	f040 81ed 	bne.w	b76ce <__ieee754_pow+0xa36>
   b72f4:	f3ca 530a 	ubfx	r3, sl, #20, #11
   b72f8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   b72fc:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   b7300:	fa42 f303 	asr.w	r3, r2, r3
   b7304:	4453      	add	r3, sl
   b7306:	49ab      	ldr	r1, [pc, #684]	; (b75b4 <__ieee754_pow+0x91c>)
   b7308:	f3c3 520a 	ubfx	r2, r3, #20, #11
   b730c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   b7310:	fa41 fc02 	asr.w	ip, r1, r2
   b7314:	f3c3 0113 	ubfx	r1, r3, #0, #20
   b7318:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b731c:	f1c2 0214 	rsb	r2, r2, #20
   b7320:	fa41 f202 	asr.w	r2, r1, r2
   b7324:	2000      	movs	r0, #0
   b7326:	ea23 010c 	bic.w	r1, r3, ip
   b732a:	f1ba 0f00 	cmp.w	sl, #0
   b732e:	9200      	str	r2, [sp, #0]
   b7330:	460b      	mov	r3, r1
   b7332:	4602      	mov	r2, r0
   b7334:	da02      	bge.n	b733c <__ieee754_pow+0x6a4>
   b7336:	9900      	ldr	r1, [sp, #0]
   b7338:	4249      	negs	r1, r1
   b733a:	9100      	str	r1, [sp, #0]
   b733c:	4620      	mov	r0, r4
   b733e:	4629      	mov	r1, r5
   b7340:	f000 fc60 	bl	b7c04 <__aeabi_dsub>
   b7344:	9b00      	ldr	r3, [sp, #0]
   b7346:	051b      	lsls	r3, r3, #20
   b7348:	9302      	str	r3, [sp, #8]
   b734a:	4602      	mov	r2, r0
   b734c:	460b      	mov	r3, r1
   b734e:	4604      	mov	r4, r0
   b7350:	460d      	mov	r5, r1
   b7352:	4630      	mov	r0, r6
   b7354:	4639      	mov	r1, r7
   b7356:	f000 fc57 	bl	b7c08 <__adddf3>
   b735a:	4689      	mov	r9, r1
   b735c:	f04f 0800 	mov.w	r8, #0
   b7360:	a37d      	add	r3, pc, #500	; (adr r3, b7558 <__ieee754_pow+0x8c0>)
   b7362:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7366:	4640      	mov	r0, r8
   b7368:	4649      	mov	r1, r9
   b736a:	f000 fe03 	bl	b7f74 <__aeabi_dmul>
   b736e:	4622      	mov	r2, r4
   b7370:	462b      	mov	r3, r5
   b7372:	4682      	mov	sl, r0
   b7374:	468b      	mov	fp, r1
   b7376:	4640      	mov	r0, r8
   b7378:	4649      	mov	r1, r9
   b737a:	f000 fc43 	bl	b7c04 <__aeabi_dsub>
   b737e:	4602      	mov	r2, r0
   b7380:	460b      	mov	r3, r1
   b7382:	4630      	mov	r0, r6
   b7384:	4639      	mov	r1, r7
   b7386:	f000 fc3d 	bl	b7c04 <__aeabi_dsub>
   b738a:	a375      	add	r3, pc, #468	; (adr r3, b7560 <__ieee754_pow+0x8c8>)
   b738c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7390:	f000 fdf0 	bl	b7f74 <__aeabi_dmul>
   b7394:	a374      	add	r3, pc, #464	; (adr r3, b7568 <__ieee754_pow+0x8d0>)
   b7396:	e9d3 2300 	ldrd	r2, r3, [r3]
   b739a:	4604      	mov	r4, r0
   b739c:	460d      	mov	r5, r1
   b739e:	4640      	mov	r0, r8
   b73a0:	4649      	mov	r1, r9
   b73a2:	f000 fde7 	bl	b7f74 <__aeabi_dmul>
   b73a6:	4602      	mov	r2, r0
   b73a8:	460b      	mov	r3, r1
   b73aa:	4620      	mov	r0, r4
   b73ac:	4629      	mov	r1, r5
   b73ae:	f000 fc2b 	bl	b7c08 <__adddf3>
   b73b2:	4606      	mov	r6, r0
   b73b4:	460f      	mov	r7, r1
   b73b6:	4632      	mov	r2, r6
   b73b8:	463b      	mov	r3, r7
   b73ba:	4650      	mov	r0, sl
   b73bc:	4659      	mov	r1, fp
   b73be:	f000 fc23 	bl	b7c08 <__adddf3>
   b73c2:	4652      	mov	r2, sl
   b73c4:	465b      	mov	r3, fp
   b73c6:	4604      	mov	r4, r0
   b73c8:	460d      	mov	r5, r1
   b73ca:	f000 fc1b 	bl	b7c04 <__aeabi_dsub>
   b73ce:	4602      	mov	r2, r0
   b73d0:	460b      	mov	r3, r1
   b73d2:	4630      	mov	r0, r6
   b73d4:	4639      	mov	r1, r7
   b73d6:	f000 fc15 	bl	b7c04 <__aeabi_dsub>
   b73da:	4622      	mov	r2, r4
   b73dc:	4680      	mov	r8, r0
   b73de:	4689      	mov	r9, r1
   b73e0:	462b      	mov	r3, r5
   b73e2:	4620      	mov	r0, r4
   b73e4:	4629      	mov	r1, r5
   b73e6:	f000 fdc5 	bl	b7f74 <__aeabi_dmul>
   b73ea:	a361      	add	r3, pc, #388	; (adr r3, b7570 <__ieee754_pow+0x8d8>)
   b73ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   b73f0:	4606      	mov	r6, r0
   b73f2:	460f      	mov	r7, r1
   b73f4:	f000 fdbe 	bl	b7f74 <__aeabi_dmul>
   b73f8:	a35f      	add	r3, pc, #380	; (adr r3, b7578 <__ieee754_pow+0x8e0>)
   b73fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   b73fe:	f000 fc01 	bl	b7c04 <__aeabi_dsub>
   b7402:	4632      	mov	r2, r6
   b7404:	463b      	mov	r3, r7
   b7406:	f000 fdb5 	bl	b7f74 <__aeabi_dmul>
   b740a:	a35d      	add	r3, pc, #372	; (adr r3, b7580 <__ieee754_pow+0x8e8>)
   b740c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7410:	f000 fbfa 	bl	b7c08 <__adddf3>
   b7414:	4632      	mov	r2, r6
   b7416:	463b      	mov	r3, r7
   b7418:	f000 fdac 	bl	b7f74 <__aeabi_dmul>
   b741c:	a35a      	add	r3, pc, #360	; (adr r3, b7588 <__ieee754_pow+0x8f0>)
   b741e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7422:	f000 fbef 	bl	b7c04 <__aeabi_dsub>
   b7426:	4632      	mov	r2, r6
   b7428:	463b      	mov	r3, r7
   b742a:	f000 fda3 	bl	b7f74 <__aeabi_dmul>
   b742e:	a358      	add	r3, pc, #352	; (adr r3, b7590 <__ieee754_pow+0x8f8>)
   b7430:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7434:	f000 fbe8 	bl	b7c08 <__adddf3>
   b7438:	4632      	mov	r2, r6
   b743a:	463b      	mov	r3, r7
   b743c:	f000 fd9a 	bl	b7f74 <__aeabi_dmul>
   b7440:	4602      	mov	r2, r0
   b7442:	460b      	mov	r3, r1
   b7444:	4620      	mov	r0, r4
   b7446:	4629      	mov	r1, r5
   b7448:	f000 fbdc 	bl	b7c04 <__aeabi_dsub>
   b744c:	4606      	mov	r6, r0
   b744e:	460f      	mov	r7, r1
   b7450:	4632      	mov	r2, r6
   b7452:	463b      	mov	r3, r7
   b7454:	4620      	mov	r0, r4
   b7456:	4629      	mov	r1, r5
   b7458:	f000 fd8c 	bl	b7f74 <__aeabi_dmul>
   b745c:	4602      	mov	r2, r0
   b745e:	460b      	mov	r3, r1
   b7460:	4630      	mov	r0, r6
   b7462:	4639      	mov	r1, r7
   b7464:	4616      	mov	r6, r2
   b7466:	461f      	mov	r7, r3
   b7468:	2200      	movs	r2, #0
   b746a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b746e:	f000 fbc9 	bl	b7c04 <__aeabi_dsub>
   b7472:	4602      	mov	r2, r0
   b7474:	460b      	mov	r3, r1
   b7476:	4630      	mov	r0, r6
   b7478:	4639      	mov	r1, r7
   b747a:	f000 fea5 	bl	b81c8 <__aeabi_ddiv>
   b747e:	4642      	mov	r2, r8
   b7480:	4606      	mov	r6, r0
   b7482:	460f      	mov	r7, r1
   b7484:	464b      	mov	r3, r9
   b7486:	4620      	mov	r0, r4
   b7488:	4629      	mov	r1, r5
   b748a:	f000 fd73 	bl	b7f74 <__aeabi_dmul>
   b748e:	4642      	mov	r2, r8
   b7490:	464b      	mov	r3, r9
   b7492:	f000 fbb9 	bl	b7c08 <__adddf3>
   b7496:	4602      	mov	r2, r0
   b7498:	460b      	mov	r3, r1
   b749a:	4630      	mov	r0, r6
   b749c:	4639      	mov	r1, r7
   b749e:	f000 fbb1 	bl	b7c04 <__aeabi_dsub>
   b74a2:	4622      	mov	r2, r4
   b74a4:	462b      	mov	r3, r5
   b74a6:	f000 fbad 	bl	b7c04 <__aeabi_dsub>
   b74aa:	4602      	mov	r2, r0
   b74ac:	460b      	mov	r3, r1
   b74ae:	2000      	movs	r0, #0
   b74b0:	4941      	ldr	r1, [pc, #260]	; (b75b8 <__ieee754_pow+0x920>)
   b74b2:	f000 fba7 	bl	b7c04 <__aeabi_dsub>
   b74b6:	9a02      	ldr	r2, [sp, #8]
   b74b8:	460b      	mov	r3, r1
   b74ba:	4413      	add	r3, r2
   b74bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   b74c0:	f2c0 8143 	blt.w	b774a <__ieee754_pow+0xab2>
   b74c4:	4619      	mov	r1, r3
   b74c6:	ec53 2b18 	vmov	r2, r3, d8
   b74ca:	f000 fd53 	bl	b7f74 <__aeabi_dmul>
   b74ce:	ec41 0b10 	vmov	d0, r0, r1
   b74d2:	e42d      	b.n	b6d30 <__ieee754_pow+0x98>
   b74d4:	f1bb 0f00 	cmp.w	fp, #0
   b74d8:	f6ff aca0 	blt.w	b6e1c <__ieee754_pow+0x184>
   b74dc:	ed9f 0b2e 	vldr	d0, [pc, #184]	; b7598 <__ieee754_pow+0x900>
   b74e0:	e426      	b.n	b6d30 <__ieee754_pow+0x98>
   b74e2:	f8df c0dc 	ldr.w	ip, [pc, #220]	; b75c0 <__ieee754_pow+0x928>
   b74e6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   b74ea:	4563      	cmp	r3, ip
   b74ec:	f340 80e7 	ble.w	b76be <__ieee754_pow+0xa26>
   b74f0:	4b32      	ldr	r3, [pc, #200]	; (b75bc <__ieee754_pow+0x924>)
   b74f2:	440b      	add	r3, r1
   b74f4:	4303      	orrs	r3, r0
   b74f6:	d10a      	bne.n	b750e <__ieee754_pow+0x876>
   b74f8:	4622      	mov	r2, r4
   b74fa:	462b      	mov	r3, r5
   b74fc:	f000 fb82 	bl	b7c04 <__aeabi_dsub>
   b7500:	4632      	mov	r2, r6
   b7502:	463b      	mov	r3, r7
   b7504:	f000 ffbc 	bl	b8480 <__aeabi_dcmpge>
   b7508:	2800      	cmp	r0, #0
   b750a:	f43f aef3 	beq.w	b72f4 <__ieee754_pow+0x65c>
   b750e:	a324      	add	r3, pc, #144	; (adr r3, b75a0 <__ieee754_pow+0x908>)
   b7510:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7514:	ec51 0b18 	vmov	r0, r1, d8
   b7518:	f000 fd2c 	bl	b7f74 <__aeabi_dmul>
   b751c:	a320      	add	r3, pc, #128	; (adr r3, b75a0 <__ieee754_pow+0x908>)
   b751e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7522:	f000 fd27 	bl	b7f74 <__aeabi_dmul>
   b7526:	ec41 0b10 	vmov	d0, r0, r1
   b752a:	e401      	b.n	b6d30 <__ieee754_pow+0x98>
   b752c:	ed9f 7b1e 	vldr	d7, [pc, #120]	; b75a8 <__ieee754_pow+0x910>
   b7530:	eeb0 8a47 	vmov.f32	s16, s14
   b7534:	eef0 8a67 	vmov.f32	s17, s15
   b7538:	e686      	b.n	b7248 <__ieee754_pow+0x5b0>
   b753a:	f1bb 0f00 	cmp.w	fp, #0
   b753e:	dacd      	bge.n	b74dc <__ieee754_pow+0x844>
   b7540:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   b7544:	ee00 6a10 	vmov	s0, r6
   b7548:	ee00 3a90 	vmov	s1, r3
   b754c:	f7ff bbf0 	b.w	b6d30 <__ieee754_pow+0x98>
   b7550:	652b82fe 	.word	0x652b82fe
   b7554:	3c971547 	.word	0x3c971547
   b7558:	00000000 	.word	0x00000000
   b755c:	3fe62e43 	.word	0x3fe62e43
   b7560:	fefa39ef 	.word	0xfefa39ef
   b7564:	3fe62e42 	.word	0x3fe62e42
   b7568:	0ca86c39 	.word	0x0ca86c39
   b756c:	be205c61 	.word	0xbe205c61
   b7570:	72bea4d0 	.word	0x72bea4d0
   b7574:	3e663769 	.word	0x3e663769
   b7578:	c5d26bf1 	.word	0xc5d26bf1
   b757c:	3ebbbd41 	.word	0x3ebbbd41
   b7580:	af25de2c 	.word	0xaf25de2c
   b7584:	3f11566a 	.word	0x3f11566a
   b7588:	16bebd93 	.word	0x16bebd93
   b758c:	3f66c16c 	.word	0x3f66c16c
   b7590:	5555553e 	.word	0x5555553e
   b7594:	3fc55555 	.word	0x3fc55555
	...
   b75a0:	c2f8f359 	.word	0xc2f8f359
   b75a4:	01a56e1f 	.word	0x01a56e1f
   b75a8:	00000000 	.word	0x00000000
   b75ac:	3ff00000 	.word	0x3ff00000
   b75b0:	408fffff 	.word	0x408fffff
   b75b4:	000fffff 	.word	0x000fffff
   b75b8:	3ff00000 	.word	0x3ff00000
   b75bc:	3f6f3400 	.word	0x3f6f3400
   b75c0:	4090cbff 	.word	0x4090cbff
   b75c4:	4598      	cmp	r8, r3
   b75c6:	db85      	blt.n	b74d4 <__ieee754_pow+0x83c>
   b75c8:	4b7d      	ldr	r3, [pc, #500]	; (b77c0 <__ieee754_pow+0xb28>)
   b75ca:	4598      	cmp	r8, r3
   b75cc:	f73f ac22 	bgt.w	b6e14 <__ieee754_pow+0x17c>
   b75d0:	ec51 0b10 	vmov	r0, r1, d0
   b75d4:	4b7a      	ldr	r3, [pc, #488]	; (b77c0 <__ieee754_pow+0xb28>)
   b75d6:	2200      	movs	r2, #0
   b75d8:	f000 fb14 	bl	b7c04 <__aeabi_dsub>
   b75dc:	a368      	add	r3, pc, #416	; (adr r3, b7780 <__ieee754_pow+0xae8>)
   b75de:	e9d3 2300 	ldrd	r2, r3, [r3]
   b75e2:	4604      	mov	r4, r0
   b75e4:	460d      	mov	r5, r1
   b75e6:	f000 fcc5 	bl	b7f74 <__aeabi_dmul>
   b75ea:	a367      	add	r3, pc, #412	; (adr r3, b7788 <__ieee754_pow+0xaf0>)
   b75ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   b75f0:	4682      	mov	sl, r0
   b75f2:	468b      	mov	fp, r1
   b75f4:	4620      	mov	r0, r4
   b75f6:	4629      	mov	r1, r5
   b75f8:	f000 fcbc 	bl	b7f74 <__aeabi_dmul>
   b75fc:	4b71      	ldr	r3, [pc, #452]	; (b77c4 <__ieee754_pow+0xb2c>)
   b75fe:	ec41 0b18 	vmov	d8, r0, r1
   b7602:	2200      	movs	r2, #0
   b7604:	4620      	mov	r0, r4
   b7606:	4629      	mov	r1, r5
   b7608:	f000 fcb4 	bl	b7f74 <__aeabi_dmul>
   b760c:	4602      	mov	r2, r0
   b760e:	460b      	mov	r3, r1
   b7610:	a15f      	add	r1, pc, #380	; (adr r1, b7790 <__ieee754_pow+0xaf8>)
   b7612:	e9d1 0100 	ldrd	r0, r1, [r1]
   b7616:	f000 faf5 	bl	b7c04 <__aeabi_dsub>
   b761a:	4622      	mov	r2, r4
   b761c:	462b      	mov	r3, r5
   b761e:	f000 fca9 	bl	b7f74 <__aeabi_dmul>
   b7622:	4602      	mov	r2, r0
   b7624:	460b      	mov	r3, r1
   b7626:	2000      	movs	r0, #0
   b7628:	4967      	ldr	r1, [pc, #412]	; (b77c8 <__ieee754_pow+0xb30>)
   b762a:	f000 faeb 	bl	b7c04 <__aeabi_dsub>
   b762e:	4622      	mov	r2, r4
   b7630:	4680      	mov	r8, r0
   b7632:	4689      	mov	r9, r1
   b7634:	462b      	mov	r3, r5
   b7636:	4620      	mov	r0, r4
   b7638:	4629      	mov	r1, r5
   b763a:	f000 fc9b 	bl	b7f74 <__aeabi_dmul>
   b763e:	4602      	mov	r2, r0
   b7640:	460b      	mov	r3, r1
   b7642:	4640      	mov	r0, r8
   b7644:	4649      	mov	r1, r9
   b7646:	f000 fc95 	bl	b7f74 <__aeabi_dmul>
   b764a:	a353      	add	r3, pc, #332	; (adr r3, b7798 <__ieee754_pow+0xb00>)
   b764c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7650:	f000 fc90 	bl	b7f74 <__aeabi_dmul>
   b7654:	4602      	mov	r2, r0
   b7656:	460b      	mov	r3, r1
   b7658:	ec51 0b18 	vmov	r0, r1, d8
   b765c:	f000 fad2 	bl	b7c04 <__aeabi_dsub>
   b7660:	4680      	mov	r8, r0
   b7662:	4689      	mov	r9, r1
   b7664:	4642      	mov	r2, r8
   b7666:	464b      	mov	r3, r9
   b7668:	4650      	mov	r0, sl
   b766a:	4659      	mov	r1, fp
   b766c:	f000 facc 	bl	b7c08 <__adddf3>
   b7670:	2000      	movs	r0, #0
   b7672:	4652      	mov	r2, sl
   b7674:	465b      	mov	r3, fp
   b7676:	4604      	mov	r4, r0
   b7678:	460d      	mov	r5, r1
   b767a:	e591      	b.n	b71a0 <__ieee754_pow+0x508>
   b767c:	4622      	mov	r2, r4
   b767e:	462b      	mov	r3, r5
   b7680:	4620      	mov	r0, r4
   b7682:	4629      	mov	r1, r5
   b7684:	f000 fc76 	bl	b7f74 <__aeabi_dmul>
   b7688:	ec41 0b10 	vmov	d0, r0, r1
   b768c:	f7ff bb50 	b.w	b6d30 <__ieee754_pow+0x98>
   b7690:	494b      	ldr	r1, [pc, #300]	; (b77c0 <__ieee754_pow+0xb28>)
   b7692:	2000      	movs	r0, #0
   b7694:	4622      	mov	r2, r4
   b7696:	462b      	mov	r3, r5
   b7698:	f000 fd96 	bl	b81c8 <__aeabi_ddiv>
   b769c:	ec41 0b10 	vmov	d0, r0, r1
   b76a0:	f7ff bb46 	b.w	b6d30 <__ieee754_pow+0x98>
   b76a4:	2b00      	cmp	r3, #0
   b76a6:	d144      	bne.n	b7732 <__ieee754_pow+0xa9a>
   b76a8:	f1c1 0114 	rsb	r1, r1, #20
   b76ac:	fa4a f001 	asr.w	r0, sl, r1
   b76b0:	fa00 f101 	lsl.w	r1, r0, r1
   b76b4:	4551      	cmp	r1, sl
   b76b6:	d05a      	beq.n	b776e <__ieee754_pow+0xad6>
   b76b8:	9300      	str	r3, [sp, #0]
   b76ba:	f7ff bb17 	b.w	b6cec <__ieee754_pow+0x54>
   b76be:	4a42      	ldr	r2, [pc, #264]	; (b77c8 <__ieee754_pow+0xb30>)
   b76c0:	4293      	cmp	r3, r2
   b76c2:	dc5b      	bgt.n	b777c <__ieee754_pow+0xae4>
   b76c4:	e9dd 1200 	ldrd	r1, r2, [sp]
   b76c8:	9102      	str	r1, [sp, #8]
   b76ca:	9100      	str	r1, [sp, #0]
   b76cc:	e646      	b.n	b735c <__ieee754_pow+0x6c4>
   b76ce:	a334      	add	r3, pc, #208	; (adr r3, b77a0 <__ieee754_pow+0xb08>)
   b76d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b76d4:	ec51 0b18 	vmov	r0, r1, d8
   b76d8:	f000 fc4c 	bl	b7f74 <__aeabi_dmul>
   b76dc:	a330      	add	r3, pc, #192	; (adr r3, b77a0 <__ieee754_pow+0xb08>)
   b76de:	e9d3 2300 	ldrd	r2, r3, [r3]
   b76e2:	f000 fc47 	bl	b7f74 <__aeabi_dmul>
   b76e6:	ec41 0b10 	vmov	d0, r0, r1
   b76ea:	f7ff bb21 	b.w	b6d30 <__ieee754_pow+0x98>
   b76ee:	9b00      	ldr	r3, [sp, #0]
   b76f0:	2b01      	cmp	r3, #1
   b76f2:	f47f ab1d 	bne.w	b6d30 <__ieee754_pow+0x98>
   b76f6:	ee10 1a90 	vmov	r1, s1
   b76fa:	ee10 2a10 	vmov	r2, s0
   b76fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b7702:	ec43 2b10 	vmov	d0, r2, r3
   b7706:	f7ff bb13 	b.w	b6d30 <__ieee754_pow+0x98>
   b770a:	ed9f 7b27 	vldr	d7, [pc, #156]	; b77a8 <__ieee754_pow+0xb10>
   b770e:	eeb0 ca47 	vmov.f32	s24, s14
   b7712:	eef0 ca67 	vmov.f32	s25, s15
   b7716:	ed9f 7b26 	vldr	d7, [pc, #152]	; b77b0 <__ieee754_pow+0xb18>
   b771a:	eeb0 da47 	vmov.f32	s26, s14
   b771e:	eef0 da67 	vmov.f32	s27, s15
   b7722:	ed9f 7b25 	vldr	d7, [pc, #148]	; b77b8 <__ieee754_pow+0xb20>
   b7726:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   b772a:	ec53 2b17 	vmov	r2, r3, d7
   b772e:	f7ff bbeb 	b.w	b6f08 <__ieee754_pow+0x270>
   b7732:	ec45 4b10 	vmov	d0, r4, r5
   b7736:	9200      	str	r2, [sp, #0]
   b7738:	f000 f914 	bl	b7964 <fabs>
   b773c:	9a00      	ldr	r2, [sp, #0]
   b773e:	2a00      	cmp	r2, #0
   b7740:	f47f ab92 	bne.w	b6e68 <__ieee754_pow+0x1d0>
   b7744:	9200      	str	r2, [sp, #0]
   b7746:	f7ff bb26 	b.w	b6d96 <__ieee754_pow+0xfe>
   b774a:	ec41 0b10 	vmov	d0, r0, r1
   b774e:	9800      	ldr	r0, [sp, #0]
   b7750:	f000 f9c2 	bl	b7ad8 <scalbn>
   b7754:	ec51 0b10 	vmov	r0, r1, d0
   b7758:	e6b5      	b.n	b74c6 <__ieee754_pow+0x82e>
   b775a:	f000 0001 	and.w	r0, r0, #1
   b775e:	f1c0 0102 	rsb	r1, r0, #2
   b7762:	9100      	str	r1, [sp, #0]
   b7764:	2b00      	cmp	r3, #0
   b7766:	f43f aac1 	beq.w	b6cec <__ieee754_pow+0x54>
   b776a:	f7ff bb0d 	b.w	b6d88 <__ieee754_pow+0xf0>
   b776e:	f000 0001 	and.w	r0, r0, #1
   b7772:	f1c0 0302 	rsb	r3, r0, #2
   b7776:	9300      	str	r3, [sp, #0]
   b7778:	f7ff bab8 	b.w	b6cec <__ieee754_pow+0x54>
   b777c:	151b      	asrs	r3, r3, #20
   b777e:	e5bb      	b.n	b72f8 <__ieee754_pow+0x660>
   b7780:	60000000 	.word	0x60000000
   b7784:	3ff71547 	.word	0x3ff71547
   b7788:	f85ddf44 	.word	0xf85ddf44
   b778c:	3e54ae0b 	.word	0x3e54ae0b
   b7790:	55555555 	.word	0x55555555
   b7794:	3fd55555 	.word	0x3fd55555
   b7798:	652b82fe 	.word	0x652b82fe
   b779c:	3ff71547 	.word	0x3ff71547
   b77a0:	8800759c 	.word	0x8800759c
   b77a4:	7e37e43c 	.word	0x7e37e43c
   b77a8:	40000000 	.word	0x40000000
   b77ac:	3fe2b803 	.word	0x3fe2b803
   b77b0:	43cfd006 	.word	0x43cfd006
   b77b4:	3e4cfdeb 	.word	0x3e4cfdeb
   b77b8:	00000000 	.word	0x00000000
   b77bc:	3ff80000 	.word	0x3ff80000
   b77c0:	3ff00000 	.word	0x3ff00000
   b77c4:	3fd00000 	.word	0x3fd00000
   b77c8:	3fe00000 	.word	0x3fe00000

000b77cc <__ieee754_sqrt>:
   b77cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b77d0:	4a63      	ldr	r2, [pc, #396]	; (b7960 <__ieee754_sqrt+0x194>)
   b77d2:	ec55 4b10 	vmov	r4, r5, d0
   b77d6:	43aa      	bics	r2, r5
   b77d8:	f000 809f 	beq.w	b791a <__ieee754_sqrt+0x14e>
   b77dc:	2d00      	cmp	r5, #0
   b77de:	ee10 ca10 	vmov	ip, s0
   b77e2:	462b      	mov	r3, r5
   b77e4:	dd54      	ble.n	b7890 <__ieee754_sqrt+0xc4>
   b77e6:	1529      	asrs	r1, r5, #20
   b77e8:	d063      	beq.n	b78b2 <__ieee754_sqrt+0xe6>
   b77ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
   b77ee:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   b77f2:	07c9      	lsls	r1, r1, #31
   b77f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b77f8:	d404      	bmi.n	b7804 <__ieee754_sqrt+0x38>
   b77fa:	005b      	lsls	r3, r3, #1
   b77fc:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   b7800:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b7804:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   b7808:	2600      	movs	r6, #0
   b780a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   b780e:	107f      	asrs	r7, r7, #1
   b7810:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b7814:	f04f 0e16 	mov.w	lr, #22
   b7818:	4634      	mov	r4, r6
   b781a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   b781e:	18a1      	adds	r1, r4, r2
   b7820:	4299      	cmp	r1, r3
   b7822:	dc02      	bgt.n	b782a <__ieee754_sqrt+0x5e>
   b7824:	1a5b      	subs	r3, r3, r1
   b7826:	188c      	adds	r4, r1, r2
   b7828:	4416      	add	r6, r2
   b782a:	005b      	lsls	r3, r3, #1
   b782c:	f1be 0e01 	subs.w	lr, lr, #1
   b7830:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   b7834:	ea4f 0252 	mov.w	r2, r2, lsr #1
   b7838:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b783c:	d1ef      	bne.n	b781e <__ieee754_sqrt+0x52>
   b783e:	4675      	mov	r5, lr
   b7840:	2020      	movs	r0, #32
   b7842:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   b7846:	e00a      	b.n	b785e <__ieee754_sqrt+0x92>
   b7848:	d044      	beq.n	b78d4 <__ieee754_sqrt+0x108>
   b784a:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   b784e:	3801      	subs	r0, #1
   b7850:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   b7854:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b7858:	ea4f 0252 	mov.w	r2, r2, lsr #1
   b785c:	d043      	beq.n	b78e6 <__ieee754_sqrt+0x11a>
   b785e:	42a3      	cmp	r3, r4
   b7860:	eb02 010e 	add.w	r1, r2, lr
   b7864:	ddf0      	ble.n	b7848 <__ieee754_sqrt+0x7c>
   b7866:	2900      	cmp	r1, #0
   b7868:	eb01 0e02 	add.w	lr, r1, r2
   b786c:	db0a      	blt.n	b7884 <__ieee754_sqrt+0xb8>
   b786e:	46a0      	mov	r8, r4
   b7870:	1b1b      	subs	r3, r3, r4
   b7872:	4561      	cmp	r1, ip
   b7874:	bf88      	it	hi
   b7876:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   b787a:	ebac 0c01 	sub.w	ip, ip, r1
   b787e:	4415      	add	r5, r2
   b7880:	4644      	mov	r4, r8
   b7882:	e7e2      	b.n	b784a <__ieee754_sqrt+0x7e>
   b7884:	f1be 0f00 	cmp.w	lr, #0
   b7888:	dbf1      	blt.n	b786e <__ieee754_sqrt+0xa2>
   b788a:	f104 0801 	add.w	r8, r4, #1
   b788e:	e7ef      	b.n	b7870 <__ieee754_sqrt+0xa4>
   b7890:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   b7894:	4322      	orrs	r2, r4
   b7896:	d038      	beq.n	b790a <__ieee754_sqrt+0x13e>
   b7898:	2d00      	cmp	r5, #0
   b789a:	d14e      	bne.n	b793a <__ieee754_sqrt+0x16e>
   b789c:	4629      	mov	r1, r5
   b789e:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   b78a2:	3915      	subs	r1, #21
   b78a4:	4613      	mov	r3, r2
   b78a6:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   b78aa:	2a00      	cmp	r2, #0
   b78ac:	d0f7      	beq.n	b789e <__ieee754_sqrt+0xd2>
   b78ae:	02d6      	lsls	r6, r2, #11
   b78b0:	d450      	bmi.n	b7954 <__ieee754_sqrt+0x188>
   b78b2:	2000      	movs	r0, #0
   b78b4:	005b      	lsls	r3, r3, #1
   b78b6:	02dd      	lsls	r5, r3, #11
   b78b8:	4604      	mov	r4, r0
   b78ba:	f100 0001 	add.w	r0, r0, #1
   b78be:	d5f9      	bpl.n	b78b4 <__ieee754_sqrt+0xe8>
   b78c0:	461a      	mov	r2, r3
   b78c2:	4663      	mov	r3, ip
   b78c4:	fa0c fc00 	lsl.w	ip, ip, r0
   b78c8:	f1c0 0020 	rsb	r0, r0, #32
   b78cc:	40c3      	lsrs	r3, r0
   b78ce:	1b09      	subs	r1, r1, r4
   b78d0:	4313      	orrs	r3, r2
   b78d2:	e78a      	b.n	b77ea <__ieee754_sqrt+0x1e>
   b78d4:	4561      	cmp	r1, ip
   b78d6:	d8b8      	bhi.n	b784a <__ieee754_sqrt+0x7e>
   b78d8:	2900      	cmp	r1, #0
   b78da:	eb01 0e02 	add.w	lr, r1, r2
   b78de:	dbd1      	blt.n	b7884 <__ieee754_sqrt+0xb8>
   b78e0:	4698      	mov	r8, r3
   b78e2:	2300      	movs	r3, #0
   b78e4:	e7c9      	b.n	b787a <__ieee754_sqrt+0xae>
   b78e6:	ea53 030c 	orrs.w	r3, r3, ip
   b78ea:	d110      	bne.n	b790e <__ieee754_sqrt+0x142>
   b78ec:	0868      	lsrs	r0, r5, #1
   b78ee:	1071      	asrs	r1, r6, #1
   b78f0:	07f3      	lsls	r3, r6, #31
   b78f2:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   b78f6:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   b78fa:	bf48      	it	mi
   b78fc:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   b7900:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   b7904:	4602      	mov	r2, r0
   b7906:	ec43 2b10 	vmov	d0, r2, r3
   b790a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b790e:	1c6a      	adds	r2, r5, #1
   b7910:	bf16      	itet	ne
   b7912:	1c68      	addne	r0, r5, #1
   b7914:	3601      	addeq	r6, #1
   b7916:	0840      	lsrne	r0, r0, #1
   b7918:	e7e9      	b.n	b78ee <__ieee754_sqrt+0x122>
   b791a:	ee10 2a10 	vmov	r2, s0
   b791e:	ee10 0a10 	vmov	r0, s0
   b7922:	462b      	mov	r3, r5
   b7924:	4629      	mov	r1, r5
   b7926:	f000 fb25 	bl	b7f74 <__aeabi_dmul>
   b792a:	4622      	mov	r2, r4
   b792c:	462b      	mov	r3, r5
   b792e:	f000 f96b 	bl	b7c08 <__adddf3>
   b7932:	ec41 0b10 	vmov	d0, r0, r1
   b7936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b793a:	ee10 2a10 	vmov	r2, s0
   b793e:	4620      	mov	r0, r4
   b7940:	4629      	mov	r1, r5
   b7942:	f000 f95f 	bl	b7c04 <__aeabi_dsub>
   b7946:	4602      	mov	r2, r0
   b7948:	460b      	mov	r3, r1
   b794a:	f000 fc3d 	bl	b81c8 <__aeabi_ddiv>
   b794e:	ec41 0b10 	vmov	d0, r0, r1
   b7952:	e7da      	b.n	b790a <__ieee754_sqrt+0x13e>
   b7954:	4663      	mov	r3, ip
   b7956:	2020      	movs	r0, #32
   b7958:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b795c:	e7b6      	b.n	b78cc <__ieee754_sqrt+0x100>
   b795e:	bf00      	nop
   b7960:	7ff00000 	.word	0x7ff00000

000b7964 <fabs>:
   b7964:	ec51 0b10 	vmov	r0, r1, d0
   b7968:	ee10 2a10 	vmov	r2, s0
   b796c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   b7970:	ec43 2b10 	vmov	d0, r2, r3
   b7974:	4770      	bx	lr
   b7976:	bf00      	nop

000b7978 <finite>:
   b7978:	b082      	sub	sp, #8
   b797a:	ed8d 0b00 	vstr	d0, [sp]
   b797e:	9801      	ldr	r0, [sp, #4]
   b7980:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   b7984:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   b7988:	0fc0      	lsrs	r0, r0, #31
   b798a:	b002      	add	sp, #8
   b798c:	4770      	bx	lr
   b798e:	bf00      	nop

000b7990 <nan>:
   b7990:	ed9f 0b01 	vldr	d0, [pc, #4]	; b7998 <nan+0x8>
   b7994:	4770      	bx	lr
   b7996:	bf00      	nop
   b7998:	00000000 	.word	0x00000000
   b799c:	7ff80000 	.word	0x7ff80000

000b79a0 <rint>:
   b79a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b79a2:	ec53 2b10 	vmov	r2, r3, d0
   b79a6:	f3c3 5c0a 	ubfx	ip, r3, #20, #11
   b79aa:	f2ac 31ff 	subw	r1, ip, #1023	; 0x3ff
   b79ae:	2913      	cmp	r1, #19
   b79b0:	ee10 0a10 	vmov	r0, s0
   b79b4:	b083      	sub	sp, #12
   b79b6:	461c      	mov	r4, r3
   b79b8:	ea4f 7ed3 	mov.w	lr, r3, lsr #31
   b79bc:	dc3a      	bgt.n	b7a34 <rint+0x94>
   b79be:	2900      	cmp	r1, #0
   b79c0:	db30      	blt.n	b7a24 <rint+0x84>
   b79c2:	4d42      	ldr	r5, [pc, #264]	; (b7acc <rint+0x12c>)
   b79c4:	fa45 fc01 	asr.w	ip, r5, r1
   b79c8:	ea03 050c 	and.w	r5, r3, ip
   b79cc:	4315      	orrs	r5, r2
   b79ce:	d02d      	beq.n	b7a2c <rint+0x8c>
   b79d0:	ea03 035c 	and.w	r3, r3, ip, lsr #1
   b79d4:	4318      	orrs	r0, r3
   b79d6:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   b79da:	d00c      	beq.n	b79f6 <rint+0x56>
   b79dc:	ea24 0c0c 	bic.w	ip, r4, ip
   b79e0:	f44f 2480 	mov.w	r4, #262144	; 0x40000
   b79e4:	2913      	cmp	r1, #19
   b79e6:	fa44 f101 	asr.w	r1, r4, r1
   b79ea:	bf0c      	ite	eq
   b79ec:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
   b79f0:	2000      	movne	r0, #0
   b79f2:	ea4c 0401 	orr.w	r4, ip, r1
   b79f6:	4936      	ldr	r1, [pc, #216]	; (b7ad0 <rint+0x130>)
   b79f8:	eb01 0ece 	add.w	lr, r1, lr, lsl #3
   b79fc:	4623      	mov	r3, r4
   b79fe:	e9de 4500 	ldrd	r4, r5, [lr]
   b7a02:	4602      	mov	r2, r0
   b7a04:	4629      	mov	r1, r5
   b7a06:	4620      	mov	r0, r4
   b7a08:	f000 f8fe 	bl	b7c08 <__adddf3>
   b7a0c:	e9cd 0100 	strd	r0, r1, [sp]
   b7a10:	e9dd 0100 	ldrd	r0, r1, [sp]
   b7a14:	4622      	mov	r2, r4
   b7a16:	462b      	mov	r3, r5
   b7a18:	f000 f8f4 	bl	b7c04 <__aeabi_dsub>
   b7a1c:	ec41 0b10 	vmov	d0, r0, r1
   b7a20:	b003      	add	sp, #12
   b7a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b7a24:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   b7a28:	4311      	orrs	r1, r2
   b7a2a:	d124      	bne.n	b7a76 <rint+0xd6>
   b7a2c:	ec43 2b10 	vmov	d0, r2, r3
   b7a30:	b003      	add	sp, #12
   b7a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b7a34:	2933      	cmp	r1, #51	; 0x33
   b7a36:	dd08      	ble.n	b7a4a <rint+0xaa>
   b7a38:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   b7a3c:	d1f6      	bne.n	b7a2c <rint+0x8c>
   b7a3e:	4619      	mov	r1, r3
   b7a40:	f000 f8e2 	bl	b7c08 <__adddf3>
   b7a44:	ec41 0b10 	vmov	d0, r0, r1
   b7a48:	e7f2      	b.n	b7a30 <rint+0x90>
   b7a4a:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
   b7a4e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b7a52:	fa21 f10c 	lsr.w	r1, r1, ip
   b7a56:	420a      	tst	r2, r1
   b7a58:	d0e8      	beq.n	b7a2c <rint+0x8c>
   b7a5a:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
   b7a5e:	ea4f 0351 	mov.w	r3, r1, lsr #1
   b7a62:	d0c8      	beq.n	b79f6 <rint+0x56>
   b7a64:	ea20 0303 	bic.w	r3, r0, r3
   b7a68:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   b7a6c:	fa40 fc0c 	asr.w	ip, r0, ip
   b7a70:	ea43 000c 	orr.w	r0, r3, ip
   b7a74:	e7bf      	b.n	b79f6 <rint+0x56>
   b7a76:	f3c3 0313 	ubfx	r3, r3, #0, #20
   b7a7a:	4318      	orrs	r0, r3
   b7a7c:	4a14      	ldr	r2, [pc, #80]	; (b7ad0 <rint+0x130>)
   b7a7e:	4243      	negs	r3, r0
   b7a80:	4303      	orrs	r3, r0
   b7a82:	eb02 0ece 	add.w	lr, r2, lr, lsl #3
   b7a86:	0b1b      	lsrs	r3, r3, #12
   b7a88:	0c62      	lsrs	r2, r4, #17
   b7a8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
   b7a8e:	0452      	lsls	r2, r2, #17
   b7a90:	ea43 0702 	orr.w	r7, r3, r2
   b7a94:	463b      	mov	r3, r7
   b7a96:	e9de 6700 	ldrd	r6, r7, [lr]
   b7a9a:	ee10 2a10 	vmov	r2, s0
   b7a9e:	4630      	mov	r0, r6
   b7aa0:	4639      	mov	r1, r7
   b7aa2:	f000 f8b1 	bl	b7c08 <__adddf3>
   b7aa6:	e9cd 0100 	strd	r0, r1, [sp]
   b7aaa:	4632      	mov	r2, r6
   b7aac:	463b      	mov	r3, r7
   b7aae:	e9dd 0100 	ldrd	r0, r1, [sp]
   b7ab2:	f000 f8a7 	bl	b7c04 <__aeabi_dsub>
   b7ab6:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
   b7aba:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b7abe:	4602      	mov	r2, r0
   b7ac0:	ea41 0304 	orr.w	r3, r1, r4
   b7ac4:	ec43 2b10 	vmov	d0, r2, r3
   b7ac8:	b003      	add	sp, #12
   b7aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b7acc:	000fffff 	.word	0x000fffff
   b7ad0:	000b9098 	.word	0x000b9098
   b7ad4:	00000000 	.word	0x00000000

000b7ad8 <scalbn>:
   b7ad8:	b538      	push	{r3, r4, r5, lr}
   b7ada:	ec53 2b10 	vmov	r2, r3, d0
   b7ade:	f3c3 510a 	ubfx	r1, r3, #20, #11
   b7ae2:	4604      	mov	r4, r0
   b7ae4:	469c      	mov	ip, r3
   b7ae6:	bb89      	cbnz	r1, b7b4c <scalbn+0x74>
   b7ae8:	ee10 1a10 	vmov	r1, s0
   b7aec:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
   b7af0:	ea5c 0101 	orrs.w	r1, ip, r1
   b7af4:	d029      	beq.n	b7b4a <scalbn+0x72>
   b7af6:	4619      	mov	r1, r3
   b7af8:	2200      	movs	r2, #0
   b7afa:	4b3d      	ldr	r3, [pc, #244]	; (b7bf0 <scalbn+0x118>)
   b7afc:	4d3d      	ldr	r5, [pc, #244]	; (b7bf4 <scalbn+0x11c>)
   b7afe:	ee10 0a10 	vmov	r0, s0
   b7b02:	f000 fa37 	bl	b7f74 <__aeabi_dmul>
   b7b06:	42ac      	cmp	r4, r5
   b7b08:	4602      	mov	r2, r0
   b7b0a:	460b      	mov	r3, r1
   b7b0c:	db16      	blt.n	b7b3c <scalbn+0x64>
   b7b0e:	468c      	mov	ip, r1
   b7b10:	f3c1 510a 	ubfx	r1, r1, #20, #11
   b7b14:	3936      	subs	r1, #54	; 0x36
   b7b16:	4421      	add	r1, r4
   b7b18:	f240 70fe 	movw	r0, #2046	; 0x7fe
   b7b1c:	4281      	cmp	r1, r0
   b7b1e:	dc21      	bgt.n	b7b64 <scalbn+0x8c>
   b7b20:	2900      	cmp	r1, #0
   b7b22:	dc47      	bgt.n	b7bb4 <scalbn+0xdc>
   b7b24:	f111 0f35 	cmn.w	r1, #53	; 0x35
   b7b28:	da34      	bge.n	b7b94 <scalbn+0xbc>
   b7b2a:	f24c 3150 	movw	r1, #50000	; 0xc350
   b7b2e:	428c      	cmp	r4, r1
   b7b30:	dc18      	bgt.n	b7b64 <scalbn+0x8c>
   b7b32:	2b00      	cmp	r3, #0
   b7b34:	a126      	add	r1, pc, #152	; (adr r1, b7bd0 <scalbn+0xf8>)
   b7b36:	e9d1 0100 	ldrd	r0, r1, [r1]
   b7b3a:	db44      	blt.n	b7bc6 <scalbn+0xee>
   b7b3c:	a324      	add	r3, pc, #144	; (adr r3, b7bd0 <scalbn+0xf8>)
   b7b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7b42:	f000 fa17 	bl	b7f74 <__aeabi_dmul>
   b7b46:	ec41 0b10 	vmov	d0, r0, r1
   b7b4a:	bd38      	pop	{r3, r4, r5, pc}
   b7b4c:	f240 70ff 	movw	r0, #2047	; 0x7ff
   b7b50:	4281      	cmp	r1, r0
   b7b52:	d1e0      	bne.n	b7b16 <scalbn+0x3e>
   b7b54:	ee10 0a10 	vmov	r0, s0
   b7b58:	4619      	mov	r1, r3
   b7b5a:	f000 f855 	bl	b7c08 <__adddf3>
   b7b5e:	ec41 0b10 	vmov	d0, r0, r1
   b7b62:	bd38      	pop	{r3, r4, r5, pc}
   b7b64:	2b00      	cmp	r3, #0
   b7b66:	a11c      	add	r1, pc, #112	; (adr r1, b7bd8 <scalbn+0x100>)
   b7b68:	e9d1 0100 	ldrd	r0, r1, [r1]
   b7b6c:	db07      	blt.n	b7b7e <scalbn+0xa6>
   b7b6e:	a31a      	add	r3, pc, #104	; (adr r3, b7bd8 <scalbn+0x100>)
   b7b70:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7b74:	f000 f9fe 	bl	b7f74 <__aeabi_dmul>
   b7b78:	ec41 0b10 	vmov	d0, r0, r1
   b7b7c:	bd38      	pop	{r3, r4, r5, pc}
   b7b7e:	a118      	add	r1, pc, #96	; (adr r1, b7be0 <scalbn+0x108>)
   b7b80:	e9d1 0100 	ldrd	r0, r1, [r1]
   b7b84:	a314      	add	r3, pc, #80	; (adr r3, b7bd8 <scalbn+0x100>)
   b7b86:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7b8a:	f000 f9f3 	bl	b7f74 <__aeabi_dmul>
   b7b8e:	ec41 0b10 	vmov	d0, r0, r1
   b7b92:	e7f3      	b.n	b7b7c <scalbn+0xa4>
   b7b94:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   b7b98:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   b7b9c:	3136      	adds	r1, #54	; 0x36
   b7b9e:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   b7ba2:	4610      	mov	r0, r2
   b7ba4:	4619      	mov	r1, r3
   b7ba6:	2200      	movs	r2, #0
   b7ba8:	4b13      	ldr	r3, [pc, #76]	; (b7bf8 <scalbn+0x120>)
   b7baa:	f000 f9e3 	bl	b7f74 <__aeabi_dmul>
   b7bae:	ec41 0b10 	vmov	d0, r0, r1
   b7bb2:	bd38      	pop	{r3, r4, r5, pc}
   b7bb4:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   b7bb8:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   b7bbc:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   b7bc0:	ec43 2b10 	vmov	d0, r2, r3
   b7bc4:	bd38      	pop	{r3, r4, r5, pc}
   b7bc6:	a108      	add	r1, pc, #32	; (adr r1, b7be8 <scalbn+0x110>)
   b7bc8:	e9d1 0100 	ldrd	r0, r1, [r1]
   b7bcc:	e7b6      	b.n	b7b3c <scalbn+0x64>
   b7bce:	bf00      	nop
   b7bd0:	c2f8f359 	.word	0xc2f8f359
   b7bd4:	01a56e1f 	.word	0x01a56e1f
   b7bd8:	8800759c 	.word	0x8800759c
   b7bdc:	7e37e43c 	.word	0x7e37e43c
   b7be0:	8800759c 	.word	0x8800759c
   b7be4:	fe37e43c 	.word	0xfe37e43c
   b7be8:	c2f8f359 	.word	0xc2f8f359
   b7bec:	81a56e1f 	.word	0x81a56e1f
   b7bf0:	43500000 	.word	0x43500000
   b7bf4:	ffff3cb0 	.word	0xffff3cb0
   b7bf8:	3c900000 	.word	0x3c900000

000b7bfc <__aeabi_drsub>:
   b7bfc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b7c00:	e002      	b.n	b7c08 <__adddf3>
   b7c02:	bf00      	nop

000b7c04 <__aeabi_dsub>:
   b7c04:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b7c08 <__adddf3>:
   b7c08:	b530      	push	{r4, r5, lr}
   b7c0a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b7c0e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b7c12:	ea94 0f05 	teq	r4, r5
   b7c16:	bf08      	it	eq
   b7c18:	ea90 0f02 	teqeq	r0, r2
   b7c1c:	bf1f      	itttt	ne
   b7c1e:	ea54 0c00 	orrsne.w	ip, r4, r0
   b7c22:	ea55 0c02 	orrsne.w	ip, r5, r2
   b7c26:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b7c2a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b7c2e:	f000 80e2 	beq.w	b7df6 <__adddf3+0x1ee>
   b7c32:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b7c36:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b7c3a:	bfb8      	it	lt
   b7c3c:	426d      	neglt	r5, r5
   b7c3e:	dd0c      	ble.n	b7c5a <__adddf3+0x52>
   b7c40:	442c      	add	r4, r5
   b7c42:	ea80 0202 	eor.w	r2, r0, r2
   b7c46:	ea81 0303 	eor.w	r3, r1, r3
   b7c4a:	ea82 0000 	eor.w	r0, r2, r0
   b7c4e:	ea83 0101 	eor.w	r1, r3, r1
   b7c52:	ea80 0202 	eor.w	r2, r0, r2
   b7c56:	ea81 0303 	eor.w	r3, r1, r3
   b7c5a:	2d36      	cmp	r5, #54	; 0x36
   b7c5c:	bf88      	it	hi
   b7c5e:	bd30      	pophi	{r4, r5, pc}
   b7c60:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b7c64:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b7c68:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b7c6c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b7c70:	d002      	beq.n	b7c78 <__adddf3+0x70>
   b7c72:	4240      	negs	r0, r0
   b7c74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7c78:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b7c7c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b7c80:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b7c84:	d002      	beq.n	b7c8c <__adddf3+0x84>
   b7c86:	4252      	negs	r2, r2
   b7c88:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b7c8c:	ea94 0f05 	teq	r4, r5
   b7c90:	f000 80a7 	beq.w	b7de2 <__adddf3+0x1da>
   b7c94:	f1a4 0401 	sub.w	r4, r4, #1
   b7c98:	f1d5 0e20 	rsbs	lr, r5, #32
   b7c9c:	db0d      	blt.n	b7cba <__adddf3+0xb2>
   b7c9e:	fa02 fc0e 	lsl.w	ip, r2, lr
   b7ca2:	fa22 f205 	lsr.w	r2, r2, r5
   b7ca6:	1880      	adds	r0, r0, r2
   b7ca8:	f141 0100 	adc.w	r1, r1, #0
   b7cac:	fa03 f20e 	lsl.w	r2, r3, lr
   b7cb0:	1880      	adds	r0, r0, r2
   b7cb2:	fa43 f305 	asr.w	r3, r3, r5
   b7cb6:	4159      	adcs	r1, r3
   b7cb8:	e00e      	b.n	b7cd8 <__adddf3+0xd0>
   b7cba:	f1a5 0520 	sub.w	r5, r5, #32
   b7cbe:	f10e 0e20 	add.w	lr, lr, #32
   b7cc2:	2a01      	cmp	r2, #1
   b7cc4:	fa03 fc0e 	lsl.w	ip, r3, lr
   b7cc8:	bf28      	it	cs
   b7cca:	f04c 0c02 	orrcs.w	ip, ip, #2
   b7cce:	fa43 f305 	asr.w	r3, r3, r5
   b7cd2:	18c0      	adds	r0, r0, r3
   b7cd4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b7cd8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7cdc:	d507      	bpl.n	b7cee <__adddf3+0xe6>
   b7cde:	f04f 0e00 	mov.w	lr, #0
   b7ce2:	f1dc 0c00 	rsbs	ip, ip, #0
   b7ce6:	eb7e 0000 	sbcs.w	r0, lr, r0
   b7cea:	eb6e 0101 	sbc.w	r1, lr, r1
   b7cee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b7cf2:	d31b      	bcc.n	b7d2c <__adddf3+0x124>
   b7cf4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b7cf8:	d30c      	bcc.n	b7d14 <__adddf3+0x10c>
   b7cfa:	0849      	lsrs	r1, r1, #1
   b7cfc:	ea5f 0030 	movs.w	r0, r0, rrx
   b7d00:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b7d04:	f104 0401 	add.w	r4, r4, #1
   b7d08:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b7d0c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b7d10:	f080 809a 	bcs.w	b7e48 <__adddf3+0x240>
   b7d14:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b7d18:	bf08      	it	eq
   b7d1a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b7d1e:	f150 0000 	adcs.w	r0, r0, #0
   b7d22:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b7d26:	ea41 0105 	orr.w	r1, r1, r5
   b7d2a:	bd30      	pop	{r4, r5, pc}
   b7d2c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b7d30:	4140      	adcs	r0, r0
   b7d32:	eb41 0101 	adc.w	r1, r1, r1
   b7d36:	3c01      	subs	r4, #1
   b7d38:	bf28      	it	cs
   b7d3a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b7d3e:	d2e9      	bcs.n	b7d14 <__adddf3+0x10c>
   b7d40:	f091 0f00 	teq	r1, #0
   b7d44:	bf04      	itt	eq
   b7d46:	4601      	moveq	r1, r0
   b7d48:	2000      	moveq	r0, #0
   b7d4a:	fab1 f381 	clz	r3, r1
   b7d4e:	bf08      	it	eq
   b7d50:	3320      	addeq	r3, #32
   b7d52:	f1a3 030b 	sub.w	r3, r3, #11
   b7d56:	f1b3 0220 	subs.w	r2, r3, #32
   b7d5a:	da0c      	bge.n	b7d76 <__adddf3+0x16e>
   b7d5c:	320c      	adds	r2, #12
   b7d5e:	dd08      	ble.n	b7d72 <__adddf3+0x16a>
   b7d60:	f102 0c14 	add.w	ip, r2, #20
   b7d64:	f1c2 020c 	rsb	r2, r2, #12
   b7d68:	fa01 f00c 	lsl.w	r0, r1, ip
   b7d6c:	fa21 f102 	lsr.w	r1, r1, r2
   b7d70:	e00c      	b.n	b7d8c <__adddf3+0x184>
   b7d72:	f102 0214 	add.w	r2, r2, #20
   b7d76:	bfd8      	it	le
   b7d78:	f1c2 0c20 	rsble	ip, r2, #32
   b7d7c:	fa01 f102 	lsl.w	r1, r1, r2
   b7d80:	fa20 fc0c 	lsr.w	ip, r0, ip
   b7d84:	bfdc      	itt	le
   b7d86:	ea41 010c 	orrle.w	r1, r1, ip
   b7d8a:	4090      	lslle	r0, r2
   b7d8c:	1ae4      	subs	r4, r4, r3
   b7d8e:	bfa2      	ittt	ge
   b7d90:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b7d94:	4329      	orrge	r1, r5
   b7d96:	bd30      	popge	{r4, r5, pc}
   b7d98:	ea6f 0404 	mvn.w	r4, r4
   b7d9c:	3c1f      	subs	r4, #31
   b7d9e:	da1c      	bge.n	b7dda <__adddf3+0x1d2>
   b7da0:	340c      	adds	r4, #12
   b7da2:	dc0e      	bgt.n	b7dc2 <__adddf3+0x1ba>
   b7da4:	f104 0414 	add.w	r4, r4, #20
   b7da8:	f1c4 0220 	rsb	r2, r4, #32
   b7dac:	fa20 f004 	lsr.w	r0, r0, r4
   b7db0:	fa01 f302 	lsl.w	r3, r1, r2
   b7db4:	ea40 0003 	orr.w	r0, r0, r3
   b7db8:	fa21 f304 	lsr.w	r3, r1, r4
   b7dbc:	ea45 0103 	orr.w	r1, r5, r3
   b7dc0:	bd30      	pop	{r4, r5, pc}
   b7dc2:	f1c4 040c 	rsb	r4, r4, #12
   b7dc6:	f1c4 0220 	rsb	r2, r4, #32
   b7dca:	fa20 f002 	lsr.w	r0, r0, r2
   b7dce:	fa01 f304 	lsl.w	r3, r1, r4
   b7dd2:	ea40 0003 	orr.w	r0, r0, r3
   b7dd6:	4629      	mov	r1, r5
   b7dd8:	bd30      	pop	{r4, r5, pc}
   b7dda:	fa21 f004 	lsr.w	r0, r1, r4
   b7dde:	4629      	mov	r1, r5
   b7de0:	bd30      	pop	{r4, r5, pc}
   b7de2:	f094 0f00 	teq	r4, #0
   b7de6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b7dea:	bf06      	itte	eq
   b7dec:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b7df0:	3401      	addeq	r4, #1
   b7df2:	3d01      	subne	r5, #1
   b7df4:	e74e      	b.n	b7c94 <__adddf3+0x8c>
   b7df6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b7dfa:	bf18      	it	ne
   b7dfc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b7e00:	d029      	beq.n	b7e56 <__adddf3+0x24e>
   b7e02:	ea94 0f05 	teq	r4, r5
   b7e06:	bf08      	it	eq
   b7e08:	ea90 0f02 	teqeq	r0, r2
   b7e0c:	d005      	beq.n	b7e1a <__adddf3+0x212>
   b7e0e:	ea54 0c00 	orrs.w	ip, r4, r0
   b7e12:	bf04      	itt	eq
   b7e14:	4619      	moveq	r1, r3
   b7e16:	4610      	moveq	r0, r2
   b7e18:	bd30      	pop	{r4, r5, pc}
   b7e1a:	ea91 0f03 	teq	r1, r3
   b7e1e:	bf1e      	ittt	ne
   b7e20:	2100      	movne	r1, #0
   b7e22:	2000      	movne	r0, #0
   b7e24:	bd30      	popne	{r4, r5, pc}
   b7e26:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b7e2a:	d105      	bne.n	b7e38 <__adddf3+0x230>
   b7e2c:	0040      	lsls	r0, r0, #1
   b7e2e:	4149      	adcs	r1, r1
   b7e30:	bf28      	it	cs
   b7e32:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b7e36:	bd30      	pop	{r4, r5, pc}
   b7e38:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b7e3c:	bf3c      	itt	cc
   b7e3e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b7e42:	bd30      	popcc	{r4, r5, pc}
   b7e44:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7e48:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b7e4c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b7e50:	f04f 0000 	mov.w	r0, #0
   b7e54:	bd30      	pop	{r4, r5, pc}
   b7e56:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b7e5a:	bf1a      	itte	ne
   b7e5c:	4619      	movne	r1, r3
   b7e5e:	4610      	movne	r0, r2
   b7e60:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b7e64:	bf1c      	itt	ne
   b7e66:	460b      	movne	r3, r1
   b7e68:	4602      	movne	r2, r0
   b7e6a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b7e6e:	bf06      	itte	eq
   b7e70:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b7e74:	ea91 0f03 	teqeq	r1, r3
   b7e78:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b7e7c:	bd30      	pop	{r4, r5, pc}
   b7e7e:	bf00      	nop

000b7e80 <__aeabi_ui2d>:
   b7e80:	f090 0f00 	teq	r0, #0
   b7e84:	bf04      	itt	eq
   b7e86:	2100      	moveq	r1, #0
   b7e88:	4770      	bxeq	lr
   b7e8a:	b530      	push	{r4, r5, lr}
   b7e8c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7e90:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7e94:	f04f 0500 	mov.w	r5, #0
   b7e98:	f04f 0100 	mov.w	r1, #0
   b7e9c:	e750      	b.n	b7d40 <__adddf3+0x138>
   b7e9e:	bf00      	nop

000b7ea0 <__aeabi_i2d>:
   b7ea0:	f090 0f00 	teq	r0, #0
   b7ea4:	bf04      	itt	eq
   b7ea6:	2100      	moveq	r1, #0
   b7ea8:	4770      	bxeq	lr
   b7eaa:	b530      	push	{r4, r5, lr}
   b7eac:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7eb0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7eb4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b7eb8:	bf48      	it	mi
   b7eba:	4240      	negmi	r0, r0
   b7ebc:	f04f 0100 	mov.w	r1, #0
   b7ec0:	e73e      	b.n	b7d40 <__adddf3+0x138>
   b7ec2:	bf00      	nop

000b7ec4 <__aeabi_f2d>:
   b7ec4:	0042      	lsls	r2, r0, #1
   b7ec6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b7eca:	ea4f 0131 	mov.w	r1, r1, rrx
   b7ece:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b7ed2:	bf1f      	itttt	ne
   b7ed4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b7ed8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b7edc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b7ee0:	4770      	bxne	lr
   b7ee2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b7ee6:	bf08      	it	eq
   b7ee8:	4770      	bxeq	lr
   b7eea:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b7eee:	bf04      	itt	eq
   b7ef0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b7ef4:	4770      	bxeq	lr
   b7ef6:	b530      	push	{r4, r5, lr}
   b7ef8:	f44f 7460 	mov.w	r4, #896	; 0x380
   b7efc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7f00:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b7f04:	e71c      	b.n	b7d40 <__adddf3+0x138>
   b7f06:	bf00      	nop

000b7f08 <__aeabi_ul2d>:
   b7f08:	ea50 0201 	orrs.w	r2, r0, r1
   b7f0c:	bf08      	it	eq
   b7f0e:	4770      	bxeq	lr
   b7f10:	b530      	push	{r4, r5, lr}
   b7f12:	f04f 0500 	mov.w	r5, #0
   b7f16:	e00a      	b.n	b7f2e <__aeabi_l2d+0x16>

000b7f18 <__aeabi_l2d>:
   b7f18:	ea50 0201 	orrs.w	r2, r0, r1
   b7f1c:	bf08      	it	eq
   b7f1e:	4770      	bxeq	lr
   b7f20:	b530      	push	{r4, r5, lr}
   b7f22:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b7f26:	d502      	bpl.n	b7f2e <__aeabi_l2d+0x16>
   b7f28:	4240      	negs	r0, r0
   b7f2a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7f2e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7f32:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7f36:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b7f3a:	f43f aed8 	beq.w	b7cee <__adddf3+0xe6>
   b7f3e:	f04f 0203 	mov.w	r2, #3
   b7f42:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b7f46:	bf18      	it	ne
   b7f48:	3203      	addne	r2, #3
   b7f4a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b7f4e:	bf18      	it	ne
   b7f50:	3203      	addne	r2, #3
   b7f52:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b7f56:	f1c2 0320 	rsb	r3, r2, #32
   b7f5a:	fa00 fc03 	lsl.w	ip, r0, r3
   b7f5e:	fa20 f002 	lsr.w	r0, r0, r2
   b7f62:	fa01 fe03 	lsl.w	lr, r1, r3
   b7f66:	ea40 000e 	orr.w	r0, r0, lr
   b7f6a:	fa21 f102 	lsr.w	r1, r1, r2
   b7f6e:	4414      	add	r4, r2
   b7f70:	e6bd      	b.n	b7cee <__adddf3+0xe6>
   b7f72:	bf00      	nop

000b7f74 <__aeabi_dmul>:
   b7f74:	b570      	push	{r4, r5, r6, lr}
   b7f76:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b7f7a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b7f7e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b7f82:	bf1d      	ittte	ne
   b7f84:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b7f88:	ea94 0f0c 	teqne	r4, ip
   b7f8c:	ea95 0f0c 	teqne	r5, ip
   b7f90:	f000 f8de 	bleq	b8150 <__aeabi_dmul+0x1dc>
   b7f94:	442c      	add	r4, r5
   b7f96:	ea81 0603 	eor.w	r6, r1, r3
   b7f9a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b7f9e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b7fa2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b7fa6:	bf18      	it	ne
   b7fa8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b7fac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7fb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b7fb4:	d038      	beq.n	b8028 <__aeabi_dmul+0xb4>
   b7fb6:	fba0 ce02 	umull	ip, lr, r0, r2
   b7fba:	f04f 0500 	mov.w	r5, #0
   b7fbe:	fbe1 e502 	umlal	lr, r5, r1, r2
   b7fc2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b7fc6:	fbe0 e503 	umlal	lr, r5, r0, r3
   b7fca:	f04f 0600 	mov.w	r6, #0
   b7fce:	fbe1 5603 	umlal	r5, r6, r1, r3
   b7fd2:	f09c 0f00 	teq	ip, #0
   b7fd6:	bf18      	it	ne
   b7fd8:	f04e 0e01 	orrne.w	lr, lr, #1
   b7fdc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b7fe0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b7fe4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b7fe8:	d204      	bcs.n	b7ff4 <__aeabi_dmul+0x80>
   b7fea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b7fee:	416d      	adcs	r5, r5
   b7ff0:	eb46 0606 	adc.w	r6, r6, r6
   b7ff4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b7ff8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b7ffc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b8000:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b8004:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b8008:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b800c:	bf88      	it	hi
   b800e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b8012:	d81e      	bhi.n	b8052 <__aeabi_dmul+0xde>
   b8014:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b8018:	bf08      	it	eq
   b801a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b801e:	f150 0000 	adcs.w	r0, r0, #0
   b8022:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b8026:	bd70      	pop	{r4, r5, r6, pc}
   b8028:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b802c:	ea46 0101 	orr.w	r1, r6, r1
   b8030:	ea40 0002 	orr.w	r0, r0, r2
   b8034:	ea81 0103 	eor.w	r1, r1, r3
   b8038:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b803c:	bfc2      	ittt	gt
   b803e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b8042:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b8046:	bd70      	popgt	{r4, r5, r6, pc}
   b8048:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b804c:	f04f 0e00 	mov.w	lr, #0
   b8050:	3c01      	subs	r4, #1
   b8052:	f300 80ab 	bgt.w	b81ac <__aeabi_dmul+0x238>
   b8056:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b805a:	bfde      	ittt	le
   b805c:	2000      	movle	r0, #0
   b805e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b8062:	bd70      	pople	{r4, r5, r6, pc}
   b8064:	f1c4 0400 	rsb	r4, r4, #0
   b8068:	3c20      	subs	r4, #32
   b806a:	da35      	bge.n	b80d8 <__aeabi_dmul+0x164>
   b806c:	340c      	adds	r4, #12
   b806e:	dc1b      	bgt.n	b80a8 <__aeabi_dmul+0x134>
   b8070:	f104 0414 	add.w	r4, r4, #20
   b8074:	f1c4 0520 	rsb	r5, r4, #32
   b8078:	fa00 f305 	lsl.w	r3, r0, r5
   b807c:	fa20 f004 	lsr.w	r0, r0, r4
   b8080:	fa01 f205 	lsl.w	r2, r1, r5
   b8084:	ea40 0002 	orr.w	r0, r0, r2
   b8088:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b808c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b8090:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b8094:	fa21 f604 	lsr.w	r6, r1, r4
   b8098:	eb42 0106 	adc.w	r1, r2, r6
   b809c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b80a0:	bf08      	it	eq
   b80a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b80a6:	bd70      	pop	{r4, r5, r6, pc}
   b80a8:	f1c4 040c 	rsb	r4, r4, #12
   b80ac:	f1c4 0520 	rsb	r5, r4, #32
   b80b0:	fa00 f304 	lsl.w	r3, r0, r4
   b80b4:	fa20 f005 	lsr.w	r0, r0, r5
   b80b8:	fa01 f204 	lsl.w	r2, r1, r4
   b80bc:	ea40 0002 	orr.w	r0, r0, r2
   b80c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b80c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b80c8:	f141 0100 	adc.w	r1, r1, #0
   b80cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b80d0:	bf08      	it	eq
   b80d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b80d6:	bd70      	pop	{r4, r5, r6, pc}
   b80d8:	f1c4 0520 	rsb	r5, r4, #32
   b80dc:	fa00 f205 	lsl.w	r2, r0, r5
   b80e0:	ea4e 0e02 	orr.w	lr, lr, r2
   b80e4:	fa20 f304 	lsr.w	r3, r0, r4
   b80e8:	fa01 f205 	lsl.w	r2, r1, r5
   b80ec:	ea43 0302 	orr.w	r3, r3, r2
   b80f0:	fa21 f004 	lsr.w	r0, r1, r4
   b80f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b80f8:	fa21 f204 	lsr.w	r2, r1, r4
   b80fc:	ea20 0002 	bic.w	r0, r0, r2
   b8100:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b8104:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b8108:	bf08      	it	eq
   b810a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b810e:	bd70      	pop	{r4, r5, r6, pc}
   b8110:	f094 0f00 	teq	r4, #0
   b8114:	d10f      	bne.n	b8136 <__aeabi_dmul+0x1c2>
   b8116:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b811a:	0040      	lsls	r0, r0, #1
   b811c:	eb41 0101 	adc.w	r1, r1, r1
   b8120:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b8124:	bf08      	it	eq
   b8126:	3c01      	subeq	r4, #1
   b8128:	d0f7      	beq.n	b811a <__aeabi_dmul+0x1a6>
   b812a:	ea41 0106 	orr.w	r1, r1, r6
   b812e:	f095 0f00 	teq	r5, #0
   b8132:	bf18      	it	ne
   b8134:	4770      	bxne	lr
   b8136:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b813a:	0052      	lsls	r2, r2, #1
   b813c:	eb43 0303 	adc.w	r3, r3, r3
   b8140:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b8144:	bf08      	it	eq
   b8146:	3d01      	subeq	r5, #1
   b8148:	d0f7      	beq.n	b813a <__aeabi_dmul+0x1c6>
   b814a:	ea43 0306 	orr.w	r3, r3, r6
   b814e:	4770      	bx	lr
   b8150:	ea94 0f0c 	teq	r4, ip
   b8154:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b8158:	bf18      	it	ne
   b815a:	ea95 0f0c 	teqne	r5, ip
   b815e:	d00c      	beq.n	b817a <__aeabi_dmul+0x206>
   b8160:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b8164:	bf18      	it	ne
   b8166:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b816a:	d1d1      	bne.n	b8110 <__aeabi_dmul+0x19c>
   b816c:	ea81 0103 	eor.w	r1, r1, r3
   b8170:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b8174:	f04f 0000 	mov.w	r0, #0
   b8178:	bd70      	pop	{r4, r5, r6, pc}
   b817a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b817e:	bf06      	itte	eq
   b8180:	4610      	moveq	r0, r2
   b8182:	4619      	moveq	r1, r3
   b8184:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b8188:	d019      	beq.n	b81be <__aeabi_dmul+0x24a>
   b818a:	ea94 0f0c 	teq	r4, ip
   b818e:	d102      	bne.n	b8196 <__aeabi_dmul+0x222>
   b8190:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b8194:	d113      	bne.n	b81be <__aeabi_dmul+0x24a>
   b8196:	ea95 0f0c 	teq	r5, ip
   b819a:	d105      	bne.n	b81a8 <__aeabi_dmul+0x234>
   b819c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b81a0:	bf1c      	itt	ne
   b81a2:	4610      	movne	r0, r2
   b81a4:	4619      	movne	r1, r3
   b81a6:	d10a      	bne.n	b81be <__aeabi_dmul+0x24a>
   b81a8:	ea81 0103 	eor.w	r1, r1, r3
   b81ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b81b0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b81b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b81b8:	f04f 0000 	mov.w	r0, #0
   b81bc:	bd70      	pop	{r4, r5, r6, pc}
   b81be:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b81c2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b81c6:	bd70      	pop	{r4, r5, r6, pc}

000b81c8 <__aeabi_ddiv>:
   b81c8:	b570      	push	{r4, r5, r6, lr}
   b81ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b81ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b81d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b81d6:	bf1d      	ittte	ne
   b81d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b81dc:	ea94 0f0c 	teqne	r4, ip
   b81e0:	ea95 0f0c 	teqne	r5, ip
   b81e4:	f000 f8a7 	bleq	b8336 <__aeabi_ddiv+0x16e>
   b81e8:	eba4 0405 	sub.w	r4, r4, r5
   b81ec:	ea81 0e03 	eor.w	lr, r1, r3
   b81f0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b81f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b81f8:	f000 8088 	beq.w	b830c <__aeabi_ddiv+0x144>
   b81fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b8200:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b8204:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b8208:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b820c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b8210:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b8214:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b8218:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b821c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b8220:	429d      	cmp	r5, r3
   b8222:	bf08      	it	eq
   b8224:	4296      	cmpeq	r6, r2
   b8226:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b822a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b822e:	d202      	bcs.n	b8236 <__aeabi_ddiv+0x6e>
   b8230:	085b      	lsrs	r3, r3, #1
   b8232:	ea4f 0232 	mov.w	r2, r2, rrx
   b8236:	1ab6      	subs	r6, r6, r2
   b8238:	eb65 0503 	sbc.w	r5, r5, r3
   b823c:	085b      	lsrs	r3, r3, #1
   b823e:	ea4f 0232 	mov.w	r2, r2, rrx
   b8242:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b8246:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b824a:	ebb6 0e02 	subs.w	lr, r6, r2
   b824e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b8252:	bf22      	ittt	cs
   b8254:	1ab6      	subcs	r6, r6, r2
   b8256:	4675      	movcs	r5, lr
   b8258:	ea40 000c 	orrcs.w	r0, r0, ip
   b825c:	085b      	lsrs	r3, r3, #1
   b825e:	ea4f 0232 	mov.w	r2, r2, rrx
   b8262:	ebb6 0e02 	subs.w	lr, r6, r2
   b8266:	eb75 0e03 	sbcs.w	lr, r5, r3
   b826a:	bf22      	ittt	cs
   b826c:	1ab6      	subcs	r6, r6, r2
   b826e:	4675      	movcs	r5, lr
   b8270:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b8274:	085b      	lsrs	r3, r3, #1
   b8276:	ea4f 0232 	mov.w	r2, r2, rrx
   b827a:	ebb6 0e02 	subs.w	lr, r6, r2
   b827e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b8282:	bf22      	ittt	cs
   b8284:	1ab6      	subcs	r6, r6, r2
   b8286:	4675      	movcs	r5, lr
   b8288:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b828c:	085b      	lsrs	r3, r3, #1
   b828e:	ea4f 0232 	mov.w	r2, r2, rrx
   b8292:	ebb6 0e02 	subs.w	lr, r6, r2
   b8296:	eb75 0e03 	sbcs.w	lr, r5, r3
   b829a:	bf22      	ittt	cs
   b829c:	1ab6      	subcs	r6, r6, r2
   b829e:	4675      	movcs	r5, lr
   b82a0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b82a4:	ea55 0e06 	orrs.w	lr, r5, r6
   b82a8:	d018      	beq.n	b82dc <__aeabi_ddiv+0x114>
   b82aa:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b82ae:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b82b2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b82b6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b82ba:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b82be:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b82c2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b82c6:	d1c0      	bne.n	b824a <__aeabi_ddiv+0x82>
   b82c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b82cc:	d10b      	bne.n	b82e6 <__aeabi_ddiv+0x11e>
   b82ce:	ea41 0100 	orr.w	r1, r1, r0
   b82d2:	f04f 0000 	mov.w	r0, #0
   b82d6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b82da:	e7b6      	b.n	b824a <__aeabi_ddiv+0x82>
   b82dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b82e0:	bf04      	itt	eq
   b82e2:	4301      	orreq	r1, r0
   b82e4:	2000      	moveq	r0, #0
   b82e6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b82ea:	bf88      	it	hi
   b82ec:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b82f0:	f63f aeaf 	bhi.w	b8052 <__aeabi_dmul+0xde>
   b82f4:	ebb5 0c03 	subs.w	ip, r5, r3
   b82f8:	bf04      	itt	eq
   b82fa:	ebb6 0c02 	subseq.w	ip, r6, r2
   b82fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b8302:	f150 0000 	adcs.w	r0, r0, #0
   b8306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b830a:	bd70      	pop	{r4, r5, r6, pc}
   b830c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b8310:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b8314:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b8318:	bfc2      	ittt	gt
   b831a:	ebd4 050c 	rsbsgt	r5, r4, ip
   b831e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b8322:	bd70      	popgt	{r4, r5, r6, pc}
   b8324:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b8328:	f04f 0e00 	mov.w	lr, #0
   b832c:	3c01      	subs	r4, #1
   b832e:	e690      	b.n	b8052 <__aeabi_dmul+0xde>
   b8330:	ea45 0e06 	orr.w	lr, r5, r6
   b8334:	e68d      	b.n	b8052 <__aeabi_dmul+0xde>
   b8336:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b833a:	ea94 0f0c 	teq	r4, ip
   b833e:	bf08      	it	eq
   b8340:	ea95 0f0c 	teqeq	r5, ip
   b8344:	f43f af3b 	beq.w	b81be <__aeabi_dmul+0x24a>
   b8348:	ea94 0f0c 	teq	r4, ip
   b834c:	d10a      	bne.n	b8364 <__aeabi_ddiv+0x19c>
   b834e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b8352:	f47f af34 	bne.w	b81be <__aeabi_dmul+0x24a>
   b8356:	ea95 0f0c 	teq	r5, ip
   b835a:	f47f af25 	bne.w	b81a8 <__aeabi_dmul+0x234>
   b835e:	4610      	mov	r0, r2
   b8360:	4619      	mov	r1, r3
   b8362:	e72c      	b.n	b81be <__aeabi_dmul+0x24a>
   b8364:	ea95 0f0c 	teq	r5, ip
   b8368:	d106      	bne.n	b8378 <__aeabi_ddiv+0x1b0>
   b836a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b836e:	f43f aefd 	beq.w	b816c <__aeabi_dmul+0x1f8>
   b8372:	4610      	mov	r0, r2
   b8374:	4619      	mov	r1, r3
   b8376:	e722      	b.n	b81be <__aeabi_dmul+0x24a>
   b8378:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b837c:	bf18      	it	ne
   b837e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b8382:	f47f aec5 	bne.w	b8110 <__aeabi_dmul+0x19c>
   b8386:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b838a:	f47f af0d 	bne.w	b81a8 <__aeabi_dmul+0x234>
   b838e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b8392:	f47f aeeb 	bne.w	b816c <__aeabi_dmul+0x1f8>
   b8396:	e712      	b.n	b81be <__aeabi_dmul+0x24a>

000b8398 <__gedf2>:
   b8398:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b839c:	e006      	b.n	b83ac <__cmpdf2+0x4>
   b839e:	bf00      	nop

000b83a0 <__ledf2>:
   b83a0:	f04f 0c01 	mov.w	ip, #1
   b83a4:	e002      	b.n	b83ac <__cmpdf2+0x4>
   b83a6:	bf00      	nop

000b83a8 <__cmpdf2>:
   b83a8:	f04f 0c01 	mov.w	ip, #1
   b83ac:	f84d cd04 	str.w	ip, [sp, #-4]!
   b83b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b83b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b83b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b83bc:	bf18      	it	ne
   b83be:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b83c2:	d01b      	beq.n	b83fc <__cmpdf2+0x54>
   b83c4:	b001      	add	sp, #4
   b83c6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b83ca:	bf0c      	ite	eq
   b83cc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b83d0:	ea91 0f03 	teqne	r1, r3
   b83d4:	bf02      	ittt	eq
   b83d6:	ea90 0f02 	teqeq	r0, r2
   b83da:	2000      	moveq	r0, #0
   b83dc:	4770      	bxeq	lr
   b83de:	f110 0f00 	cmn.w	r0, #0
   b83e2:	ea91 0f03 	teq	r1, r3
   b83e6:	bf58      	it	pl
   b83e8:	4299      	cmppl	r1, r3
   b83ea:	bf08      	it	eq
   b83ec:	4290      	cmpeq	r0, r2
   b83ee:	bf2c      	ite	cs
   b83f0:	17d8      	asrcs	r0, r3, #31
   b83f2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b83f6:	f040 0001 	orr.w	r0, r0, #1
   b83fa:	4770      	bx	lr
   b83fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b8400:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b8404:	d102      	bne.n	b840c <__cmpdf2+0x64>
   b8406:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b840a:	d107      	bne.n	b841c <__cmpdf2+0x74>
   b840c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b8410:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b8414:	d1d6      	bne.n	b83c4 <__cmpdf2+0x1c>
   b8416:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b841a:	d0d3      	beq.n	b83c4 <__cmpdf2+0x1c>
   b841c:	f85d 0b04 	ldr.w	r0, [sp], #4
   b8420:	4770      	bx	lr
   b8422:	bf00      	nop

000b8424 <__aeabi_cdrcmple>:
   b8424:	4684      	mov	ip, r0
   b8426:	4610      	mov	r0, r2
   b8428:	4662      	mov	r2, ip
   b842a:	468c      	mov	ip, r1
   b842c:	4619      	mov	r1, r3
   b842e:	4663      	mov	r3, ip
   b8430:	e000      	b.n	b8434 <__aeabi_cdcmpeq>
   b8432:	bf00      	nop

000b8434 <__aeabi_cdcmpeq>:
   b8434:	b501      	push	{r0, lr}
   b8436:	f7ff ffb7 	bl	b83a8 <__cmpdf2>
   b843a:	2800      	cmp	r0, #0
   b843c:	bf48      	it	mi
   b843e:	f110 0f00 	cmnmi.w	r0, #0
   b8442:	bd01      	pop	{r0, pc}

000b8444 <__aeabi_dcmpeq>:
   b8444:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8448:	f7ff fff4 	bl	b8434 <__aeabi_cdcmpeq>
   b844c:	bf0c      	ite	eq
   b844e:	2001      	moveq	r0, #1
   b8450:	2000      	movne	r0, #0
   b8452:	f85d fb08 	ldr.w	pc, [sp], #8
   b8456:	bf00      	nop

000b8458 <__aeabi_dcmplt>:
   b8458:	f84d ed08 	str.w	lr, [sp, #-8]!
   b845c:	f7ff ffea 	bl	b8434 <__aeabi_cdcmpeq>
   b8460:	bf34      	ite	cc
   b8462:	2001      	movcc	r0, #1
   b8464:	2000      	movcs	r0, #0
   b8466:	f85d fb08 	ldr.w	pc, [sp], #8
   b846a:	bf00      	nop

000b846c <__aeabi_dcmple>:
   b846c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8470:	f7ff ffe0 	bl	b8434 <__aeabi_cdcmpeq>
   b8474:	bf94      	ite	ls
   b8476:	2001      	movls	r0, #1
   b8478:	2000      	movhi	r0, #0
   b847a:	f85d fb08 	ldr.w	pc, [sp], #8
   b847e:	bf00      	nop

000b8480 <__aeabi_dcmpge>:
   b8480:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8484:	f7ff ffce 	bl	b8424 <__aeabi_cdrcmple>
   b8488:	bf94      	ite	ls
   b848a:	2001      	movls	r0, #1
   b848c:	2000      	movhi	r0, #0
   b848e:	f85d fb08 	ldr.w	pc, [sp], #8
   b8492:	bf00      	nop

000b8494 <__aeabi_dcmpgt>:
   b8494:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8498:	f7ff ffc4 	bl	b8424 <__aeabi_cdrcmple>
   b849c:	bf34      	ite	cc
   b849e:	2001      	movcc	r0, #1
   b84a0:	2000      	movcs	r0, #0
   b84a2:	f85d fb08 	ldr.w	pc, [sp], #8
   b84a6:	bf00      	nop

000b84a8 <__aeabi_dcmpun>:
   b84a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b84ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b84b0:	d102      	bne.n	b84b8 <__aeabi_dcmpun+0x10>
   b84b2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b84b6:	d10a      	bne.n	b84ce <__aeabi_dcmpun+0x26>
   b84b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b84bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b84c0:	d102      	bne.n	b84c8 <__aeabi_dcmpun+0x20>
   b84c2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b84c6:	d102      	bne.n	b84ce <__aeabi_dcmpun+0x26>
   b84c8:	f04f 0000 	mov.w	r0, #0
   b84cc:	4770      	bx	lr
   b84ce:	f04f 0001 	mov.w	r0, #1
   b84d2:	4770      	bx	lr

000b84d4 <__aeabi_d2iz>:
   b84d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b84d8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b84dc:	d215      	bcs.n	b850a <__aeabi_d2iz+0x36>
   b84de:	d511      	bpl.n	b8504 <__aeabi_d2iz+0x30>
   b84e0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b84e4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b84e8:	d912      	bls.n	b8510 <__aeabi_d2iz+0x3c>
   b84ea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b84ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b84f2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b84f6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b84fa:	fa23 f002 	lsr.w	r0, r3, r2
   b84fe:	bf18      	it	ne
   b8500:	4240      	negne	r0, r0
   b8502:	4770      	bx	lr
   b8504:	f04f 0000 	mov.w	r0, #0
   b8508:	4770      	bx	lr
   b850a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b850e:	d105      	bne.n	b851c <__aeabi_d2iz+0x48>
   b8510:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b8514:	bf08      	it	eq
   b8516:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b851a:	4770      	bx	lr
   b851c:	f04f 0000 	mov.w	r0, #0
   b8520:	4770      	bx	lr
   b8522:	bf00      	nop

000b8524 <__aeabi_d2uiz>:
   b8524:	004a      	lsls	r2, r1, #1
   b8526:	d211      	bcs.n	b854c <__aeabi_d2uiz+0x28>
   b8528:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b852c:	d211      	bcs.n	b8552 <__aeabi_d2uiz+0x2e>
   b852e:	d50d      	bpl.n	b854c <__aeabi_d2uiz+0x28>
   b8530:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b8534:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b8538:	d40e      	bmi.n	b8558 <__aeabi_d2uiz+0x34>
   b853a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b853e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b8542:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b8546:	fa23 f002 	lsr.w	r0, r3, r2
   b854a:	4770      	bx	lr
   b854c:	f04f 0000 	mov.w	r0, #0
   b8550:	4770      	bx	lr
   b8552:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b8556:	d102      	bne.n	b855e <__aeabi_d2uiz+0x3a>
   b8558:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b855c:	4770      	bx	lr
   b855e:	f04f 0000 	mov.w	r0, #0
   b8562:	4770      	bx	lr

000b8564 <__aeabi_d2f>:
   b8564:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b8568:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b856c:	bf24      	itt	cs
   b856e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b8572:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b8576:	d90d      	bls.n	b8594 <__aeabi_d2f+0x30>
   b8578:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b857c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b8580:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b8584:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b8588:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b858c:	bf08      	it	eq
   b858e:	f020 0001 	biceq.w	r0, r0, #1
   b8592:	4770      	bx	lr
   b8594:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b8598:	d121      	bne.n	b85de <__aeabi_d2f+0x7a>
   b859a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b859e:	bfbc      	itt	lt
   b85a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b85a4:	4770      	bxlt	lr
   b85a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b85aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b85ae:	f1c2 0218 	rsb	r2, r2, #24
   b85b2:	f1c2 0c20 	rsb	ip, r2, #32
   b85b6:	fa10 f30c 	lsls.w	r3, r0, ip
   b85ba:	fa20 f002 	lsr.w	r0, r0, r2
   b85be:	bf18      	it	ne
   b85c0:	f040 0001 	orrne.w	r0, r0, #1
   b85c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b85c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b85cc:	fa03 fc0c 	lsl.w	ip, r3, ip
   b85d0:	ea40 000c 	orr.w	r0, r0, ip
   b85d4:	fa23 f302 	lsr.w	r3, r3, r2
   b85d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b85dc:	e7cc      	b.n	b8578 <__aeabi_d2f+0x14>
   b85de:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b85e2:	d107      	bne.n	b85f4 <__aeabi_d2f+0x90>
   b85e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b85e8:	bf1e      	ittt	ne
   b85ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b85ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b85f2:	4770      	bxne	lr
   b85f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b85f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b85fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b8600:	4770      	bx	lr
   b8602:	bf00      	nop

000b8604 <__aeabi_frsub>:
   b8604:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   b8608:	e002      	b.n	b8610 <__addsf3>
   b860a:	bf00      	nop

000b860c <__aeabi_fsub>:
   b860c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000b8610 <__addsf3>:
   b8610:	0042      	lsls	r2, r0, #1
   b8612:	bf1f      	itttt	ne
   b8614:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   b8618:	ea92 0f03 	teqne	r2, r3
   b861c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   b8620:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   b8624:	d06a      	beq.n	b86fc <__addsf3+0xec>
   b8626:	ea4f 6212 	mov.w	r2, r2, lsr #24
   b862a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   b862e:	bfc1      	itttt	gt
   b8630:	18d2      	addgt	r2, r2, r3
   b8632:	4041      	eorgt	r1, r0
   b8634:	4048      	eorgt	r0, r1
   b8636:	4041      	eorgt	r1, r0
   b8638:	bfb8      	it	lt
   b863a:	425b      	neglt	r3, r3
   b863c:	2b19      	cmp	r3, #25
   b863e:	bf88      	it	hi
   b8640:	4770      	bxhi	lr
   b8642:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   b8646:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b864a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   b864e:	bf18      	it	ne
   b8650:	4240      	negne	r0, r0
   b8652:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b8656:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   b865a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   b865e:	bf18      	it	ne
   b8660:	4249      	negne	r1, r1
   b8662:	ea92 0f03 	teq	r2, r3
   b8666:	d03f      	beq.n	b86e8 <__addsf3+0xd8>
   b8668:	f1a2 0201 	sub.w	r2, r2, #1
   b866c:	fa41 fc03 	asr.w	ip, r1, r3
   b8670:	eb10 000c 	adds.w	r0, r0, ip
   b8674:	f1c3 0320 	rsb	r3, r3, #32
   b8678:	fa01 f103 	lsl.w	r1, r1, r3
   b867c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   b8680:	d502      	bpl.n	b8688 <__addsf3+0x78>
   b8682:	4249      	negs	r1, r1
   b8684:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   b8688:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b868c:	d313      	bcc.n	b86b6 <__addsf3+0xa6>
   b868e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   b8692:	d306      	bcc.n	b86a2 <__addsf3+0x92>
   b8694:	0840      	lsrs	r0, r0, #1
   b8696:	ea4f 0131 	mov.w	r1, r1, rrx
   b869a:	f102 0201 	add.w	r2, r2, #1
   b869e:	2afe      	cmp	r2, #254	; 0xfe
   b86a0:	d251      	bcs.n	b8746 <__addsf3+0x136>
   b86a2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   b86a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   b86aa:	bf08      	it	eq
   b86ac:	f020 0001 	biceq.w	r0, r0, #1
   b86b0:	ea40 0003 	orr.w	r0, r0, r3
   b86b4:	4770      	bx	lr
   b86b6:	0049      	lsls	r1, r1, #1
   b86b8:	eb40 0000 	adc.w	r0, r0, r0
   b86bc:	3a01      	subs	r2, #1
   b86be:	bf28      	it	cs
   b86c0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
   b86c4:	d2ed      	bcs.n	b86a2 <__addsf3+0x92>
   b86c6:	fab0 fc80 	clz	ip, r0
   b86ca:	f1ac 0c08 	sub.w	ip, ip, #8
   b86ce:	ebb2 020c 	subs.w	r2, r2, ip
   b86d2:	fa00 f00c 	lsl.w	r0, r0, ip
   b86d6:	bfaa      	itet	ge
   b86d8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   b86dc:	4252      	neglt	r2, r2
   b86de:	4318      	orrge	r0, r3
   b86e0:	bfbc      	itt	lt
   b86e2:	40d0      	lsrlt	r0, r2
   b86e4:	4318      	orrlt	r0, r3
   b86e6:	4770      	bx	lr
   b86e8:	f092 0f00 	teq	r2, #0
   b86ec:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   b86f0:	bf06      	itte	eq
   b86f2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   b86f6:	3201      	addeq	r2, #1
   b86f8:	3b01      	subne	r3, #1
   b86fa:	e7b5      	b.n	b8668 <__addsf3+0x58>
   b86fc:	ea4f 0341 	mov.w	r3, r1, lsl #1
   b8700:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   b8704:	bf18      	it	ne
   b8706:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   b870a:	d021      	beq.n	b8750 <__addsf3+0x140>
   b870c:	ea92 0f03 	teq	r2, r3
   b8710:	d004      	beq.n	b871c <__addsf3+0x10c>
   b8712:	f092 0f00 	teq	r2, #0
   b8716:	bf08      	it	eq
   b8718:	4608      	moveq	r0, r1
   b871a:	4770      	bx	lr
   b871c:	ea90 0f01 	teq	r0, r1
   b8720:	bf1c      	itt	ne
   b8722:	2000      	movne	r0, #0
   b8724:	4770      	bxne	lr
   b8726:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   b872a:	d104      	bne.n	b8736 <__addsf3+0x126>
   b872c:	0040      	lsls	r0, r0, #1
   b872e:	bf28      	it	cs
   b8730:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   b8734:	4770      	bx	lr
   b8736:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   b873a:	bf3c      	itt	cc
   b873c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   b8740:	4770      	bxcc	lr
   b8742:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   b8746:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   b874a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b874e:	4770      	bx	lr
   b8750:	ea7f 6222 	mvns.w	r2, r2, asr #24
   b8754:	bf16      	itet	ne
   b8756:	4608      	movne	r0, r1
   b8758:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   b875c:	4601      	movne	r1, r0
   b875e:	0242      	lsls	r2, r0, #9
   b8760:	bf06      	itte	eq
   b8762:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   b8766:	ea90 0f01 	teqeq	r0, r1
   b876a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   b876e:	4770      	bx	lr

000b8770 <__aeabi_ui2f>:
   b8770:	f04f 0300 	mov.w	r3, #0
   b8774:	e004      	b.n	b8780 <__aeabi_i2f+0x8>
   b8776:	bf00      	nop

000b8778 <__aeabi_i2f>:
   b8778:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   b877c:	bf48      	it	mi
   b877e:	4240      	negmi	r0, r0
   b8780:	ea5f 0c00 	movs.w	ip, r0
   b8784:	bf08      	it	eq
   b8786:	4770      	bxeq	lr
   b8788:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   b878c:	4601      	mov	r1, r0
   b878e:	f04f 0000 	mov.w	r0, #0
   b8792:	e01c      	b.n	b87ce <__aeabi_l2f+0x2a>

000b8794 <__aeabi_ul2f>:
   b8794:	ea50 0201 	orrs.w	r2, r0, r1
   b8798:	bf08      	it	eq
   b879a:	4770      	bxeq	lr
   b879c:	f04f 0300 	mov.w	r3, #0
   b87a0:	e00a      	b.n	b87b8 <__aeabi_l2f+0x14>
   b87a2:	bf00      	nop

000b87a4 <__aeabi_l2f>:
   b87a4:	ea50 0201 	orrs.w	r2, r0, r1
   b87a8:	bf08      	it	eq
   b87aa:	4770      	bxeq	lr
   b87ac:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   b87b0:	d502      	bpl.n	b87b8 <__aeabi_l2f+0x14>
   b87b2:	4240      	negs	r0, r0
   b87b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b87b8:	ea5f 0c01 	movs.w	ip, r1
   b87bc:	bf02      	ittt	eq
   b87be:	4684      	moveq	ip, r0
   b87c0:	4601      	moveq	r1, r0
   b87c2:	2000      	moveq	r0, #0
   b87c4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   b87c8:	bf08      	it	eq
   b87ca:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   b87ce:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   b87d2:	fabc f28c 	clz	r2, ip
   b87d6:	3a08      	subs	r2, #8
   b87d8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   b87dc:	db10      	blt.n	b8800 <__aeabi_l2f+0x5c>
   b87de:	fa01 fc02 	lsl.w	ip, r1, r2
   b87e2:	4463      	add	r3, ip
   b87e4:	fa00 fc02 	lsl.w	ip, r0, r2
   b87e8:	f1c2 0220 	rsb	r2, r2, #32
   b87ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b87f0:	fa20 f202 	lsr.w	r2, r0, r2
   b87f4:	eb43 0002 	adc.w	r0, r3, r2
   b87f8:	bf08      	it	eq
   b87fa:	f020 0001 	biceq.w	r0, r0, #1
   b87fe:	4770      	bx	lr
   b8800:	f102 0220 	add.w	r2, r2, #32
   b8804:	fa01 fc02 	lsl.w	ip, r1, r2
   b8808:	f1c2 0220 	rsb	r2, r2, #32
   b880c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   b8810:	fa21 f202 	lsr.w	r2, r1, r2
   b8814:	eb43 0002 	adc.w	r0, r3, r2
   b8818:	bf08      	it	eq
   b881a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   b881e:	4770      	bx	lr

000b8820 <__aeabi_ldivmod>:
   b8820:	b97b      	cbnz	r3, b8842 <__aeabi_ldivmod+0x22>
   b8822:	b972      	cbnz	r2, b8842 <__aeabi_ldivmod+0x22>
   b8824:	2900      	cmp	r1, #0
   b8826:	bfbe      	ittt	lt
   b8828:	2000      	movlt	r0, #0
   b882a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   b882e:	e006      	blt.n	b883e <__aeabi_ldivmod+0x1e>
   b8830:	bf08      	it	eq
   b8832:	2800      	cmpeq	r0, #0
   b8834:	bf1c      	itt	ne
   b8836:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   b883a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   b883e:	f000 b9a7 	b.w	b8b90 <__aeabi_idiv0>
   b8842:	f1ad 0c08 	sub.w	ip, sp, #8
   b8846:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   b884a:	2900      	cmp	r1, #0
   b884c:	db09      	blt.n	b8862 <__aeabi_ldivmod+0x42>
   b884e:	2b00      	cmp	r3, #0
   b8850:	db1a      	blt.n	b8888 <__aeabi_ldivmod+0x68>
   b8852:	f000 f835 	bl	b88c0 <__udivmoddi4>
   b8856:	f8dd e004 	ldr.w	lr, [sp, #4]
   b885a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b885e:	b004      	add	sp, #16
   b8860:	4770      	bx	lr
   b8862:	4240      	negs	r0, r0
   b8864:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b8868:	2b00      	cmp	r3, #0
   b886a:	db1b      	blt.n	b88a4 <__aeabi_ldivmod+0x84>
   b886c:	f000 f828 	bl	b88c0 <__udivmoddi4>
   b8870:	f8dd e004 	ldr.w	lr, [sp, #4]
   b8874:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b8878:	b004      	add	sp, #16
   b887a:	4240      	negs	r0, r0
   b887c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b8880:	4252      	negs	r2, r2
   b8882:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b8886:	4770      	bx	lr
   b8888:	4252      	negs	r2, r2
   b888a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b888e:	f000 f817 	bl	b88c0 <__udivmoddi4>
   b8892:	f8dd e004 	ldr.w	lr, [sp, #4]
   b8896:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b889a:	b004      	add	sp, #16
   b889c:	4240      	negs	r0, r0
   b889e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b88a2:	4770      	bx	lr
   b88a4:	4252      	negs	r2, r2
   b88a6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b88aa:	f000 f809 	bl	b88c0 <__udivmoddi4>
   b88ae:	f8dd e004 	ldr.w	lr, [sp, #4]
   b88b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b88b6:	b004      	add	sp, #16
   b88b8:	4252      	negs	r2, r2
   b88ba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b88be:	4770      	bx	lr

000b88c0 <__udivmoddi4>:
   b88c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b88c4:	9d08      	ldr	r5, [sp, #32]
   b88c6:	4604      	mov	r4, r0
   b88c8:	468e      	mov	lr, r1
   b88ca:	2b00      	cmp	r3, #0
   b88cc:	d14d      	bne.n	b896a <__udivmoddi4+0xaa>
   b88ce:	428a      	cmp	r2, r1
   b88d0:	4694      	mov	ip, r2
   b88d2:	d969      	bls.n	b89a8 <__udivmoddi4+0xe8>
   b88d4:	fab2 f282 	clz	r2, r2
   b88d8:	b152      	cbz	r2, b88f0 <__udivmoddi4+0x30>
   b88da:	fa01 f302 	lsl.w	r3, r1, r2
   b88de:	f1c2 0120 	rsb	r1, r2, #32
   b88e2:	fa20 f101 	lsr.w	r1, r0, r1
   b88e6:	fa0c fc02 	lsl.w	ip, ip, r2
   b88ea:	ea41 0e03 	orr.w	lr, r1, r3
   b88ee:	4094      	lsls	r4, r2
   b88f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
   b88f4:	0c21      	lsrs	r1, r4, #16
   b88f6:	fbbe f6f8 	udiv	r6, lr, r8
   b88fa:	fa1f f78c 	uxth.w	r7, ip
   b88fe:	fb08 e316 	mls	r3, r8, r6, lr
   b8902:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   b8906:	fb06 f107 	mul.w	r1, r6, r7
   b890a:	4299      	cmp	r1, r3
   b890c:	d90a      	bls.n	b8924 <__udivmoddi4+0x64>
   b890e:	eb1c 0303 	adds.w	r3, ip, r3
   b8912:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
   b8916:	f080 811f 	bcs.w	b8b58 <__udivmoddi4+0x298>
   b891a:	4299      	cmp	r1, r3
   b891c:	f240 811c 	bls.w	b8b58 <__udivmoddi4+0x298>
   b8920:	3e02      	subs	r6, #2
   b8922:	4463      	add	r3, ip
   b8924:	1a5b      	subs	r3, r3, r1
   b8926:	b2a4      	uxth	r4, r4
   b8928:	fbb3 f0f8 	udiv	r0, r3, r8
   b892c:	fb08 3310 	mls	r3, r8, r0, r3
   b8930:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   b8934:	fb00 f707 	mul.w	r7, r0, r7
   b8938:	42a7      	cmp	r7, r4
   b893a:	d90a      	bls.n	b8952 <__udivmoddi4+0x92>
   b893c:	eb1c 0404 	adds.w	r4, ip, r4
   b8940:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b8944:	f080 810a 	bcs.w	b8b5c <__udivmoddi4+0x29c>
   b8948:	42a7      	cmp	r7, r4
   b894a:	f240 8107 	bls.w	b8b5c <__udivmoddi4+0x29c>
   b894e:	4464      	add	r4, ip
   b8950:	3802      	subs	r0, #2
   b8952:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   b8956:	1be4      	subs	r4, r4, r7
   b8958:	2600      	movs	r6, #0
   b895a:	b11d      	cbz	r5, b8964 <__udivmoddi4+0xa4>
   b895c:	40d4      	lsrs	r4, r2
   b895e:	2300      	movs	r3, #0
   b8960:	e9c5 4300 	strd	r4, r3, [r5]
   b8964:	4631      	mov	r1, r6
   b8966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b896a:	428b      	cmp	r3, r1
   b896c:	d909      	bls.n	b8982 <__udivmoddi4+0xc2>
   b896e:	2d00      	cmp	r5, #0
   b8970:	f000 80ef 	beq.w	b8b52 <__udivmoddi4+0x292>
   b8974:	2600      	movs	r6, #0
   b8976:	e9c5 0100 	strd	r0, r1, [r5]
   b897a:	4630      	mov	r0, r6
   b897c:	4631      	mov	r1, r6
   b897e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b8982:	fab3 f683 	clz	r6, r3
   b8986:	2e00      	cmp	r6, #0
   b8988:	d14a      	bne.n	b8a20 <__udivmoddi4+0x160>
   b898a:	428b      	cmp	r3, r1
   b898c:	d302      	bcc.n	b8994 <__udivmoddi4+0xd4>
   b898e:	4282      	cmp	r2, r0
   b8990:	f200 80f9 	bhi.w	b8b86 <__udivmoddi4+0x2c6>
   b8994:	1a84      	subs	r4, r0, r2
   b8996:	eb61 0303 	sbc.w	r3, r1, r3
   b899a:	2001      	movs	r0, #1
   b899c:	469e      	mov	lr, r3
   b899e:	2d00      	cmp	r5, #0
   b89a0:	d0e0      	beq.n	b8964 <__udivmoddi4+0xa4>
   b89a2:	e9c5 4e00 	strd	r4, lr, [r5]
   b89a6:	e7dd      	b.n	b8964 <__udivmoddi4+0xa4>
   b89a8:	b902      	cbnz	r2, b89ac <__udivmoddi4+0xec>
   b89aa:	deff      	udf	#255	; 0xff
   b89ac:	fab2 f282 	clz	r2, r2
   b89b0:	2a00      	cmp	r2, #0
   b89b2:	f040 8092 	bne.w	b8ada <__udivmoddi4+0x21a>
   b89b6:	eba1 010c 	sub.w	r1, r1, ip
   b89ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b89be:	fa1f fe8c 	uxth.w	lr, ip
   b89c2:	2601      	movs	r6, #1
   b89c4:	0c20      	lsrs	r0, r4, #16
   b89c6:	fbb1 f3f7 	udiv	r3, r1, r7
   b89ca:	fb07 1113 	mls	r1, r7, r3, r1
   b89ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b89d2:	fb0e f003 	mul.w	r0, lr, r3
   b89d6:	4288      	cmp	r0, r1
   b89d8:	d908      	bls.n	b89ec <__udivmoddi4+0x12c>
   b89da:	eb1c 0101 	adds.w	r1, ip, r1
   b89de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   b89e2:	d202      	bcs.n	b89ea <__udivmoddi4+0x12a>
   b89e4:	4288      	cmp	r0, r1
   b89e6:	f200 80cb 	bhi.w	b8b80 <__udivmoddi4+0x2c0>
   b89ea:	4643      	mov	r3, r8
   b89ec:	1a09      	subs	r1, r1, r0
   b89ee:	b2a4      	uxth	r4, r4
   b89f0:	fbb1 f0f7 	udiv	r0, r1, r7
   b89f4:	fb07 1110 	mls	r1, r7, r0, r1
   b89f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
   b89fc:	fb0e fe00 	mul.w	lr, lr, r0
   b8a00:	45a6      	cmp	lr, r4
   b8a02:	d908      	bls.n	b8a16 <__udivmoddi4+0x156>
   b8a04:	eb1c 0404 	adds.w	r4, ip, r4
   b8a08:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
   b8a0c:	d202      	bcs.n	b8a14 <__udivmoddi4+0x154>
   b8a0e:	45a6      	cmp	lr, r4
   b8a10:	f200 80bb 	bhi.w	b8b8a <__udivmoddi4+0x2ca>
   b8a14:	4608      	mov	r0, r1
   b8a16:	eba4 040e 	sub.w	r4, r4, lr
   b8a1a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   b8a1e:	e79c      	b.n	b895a <__udivmoddi4+0x9a>
   b8a20:	f1c6 0720 	rsb	r7, r6, #32
   b8a24:	40b3      	lsls	r3, r6
   b8a26:	fa22 fc07 	lsr.w	ip, r2, r7
   b8a2a:	ea4c 0c03 	orr.w	ip, ip, r3
   b8a2e:	fa20 f407 	lsr.w	r4, r0, r7
   b8a32:	fa01 f306 	lsl.w	r3, r1, r6
   b8a36:	431c      	orrs	r4, r3
   b8a38:	40f9      	lsrs	r1, r7
   b8a3a:	ea4f 491c 	mov.w	r9, ip, lsr #16
   b8a3e:	fa00 f306 	lsl.w	r3, r0, r6
   b8a42:	fbb1 f8f9 	udiv	r8, r1, r9
   b8a46:	0c20      	lsrs	r0, r4, #16
   b8a48:	fa1f fe8c 	uxth.w	lr, ip
   b8a4c:	fb09 1118 	mls	r1, r9, r8, r1
   b8a50:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b8a54:	fb08 f00e 	mul.w	r0, r8, lr
   b8a58:	4288      	cmp	r0, r1
   b8a5a:	fa02 f206 	lsl.w	r2, r2, r6
   b8a5e:	d90b      	bls.n	b8a78 <__udivmoddi4+0x1b8>
   b8a60:	eb1c 0101 	adds.w	r1, ip, r1
   b8a64:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
   b8a68:	f080 8088 	bcs.w	b8b7c <__udivmoddi4+0x2bc>
   b8a6c:	4288      	cmp	r0, r1
   b8a6e:	f240 8085 	bls.w	b8b7c <__udivmoddi4+0x2bc>
   b8a72:	f1a8 0802 	sub.w	r8, r8, #2
   b8a76:	4461      	add	r1, ip
   b8a78:	1a09      	subs	r1, r1, r0
   b8a7a:	b2a4      	uxth	r4, r4
   b8a7c:	fbb1 f0f9 	udiv	r0, r1, r9
   b8a80:	fb09 1110 	mls	r1, r9, r0, r1
   b8a84:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   b8a88:	fb00 fe0e 	mul.w	lr, r0, lr
   b8a8c:	458e      	cmp	lr, r1
   b8a8e:	d908      	bls.n	b8aa2 <__udivmoddi4+0x1e2>
   b8a90:	eb1c 0101 	adds.w	r1, ip, r1
   b8a94:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
   b8a98:	d26c      	bcs.n	b8b74 <__udivmoddi4+0x2b4>
   b8a9a:	458e      	cmp	lr, r1
   b8a9c:	d96a      	bls.n	b8b74 <__udivmoddi4+0x2b4>
   b8a9e:	3802      	subs	r0, #2
   b8aa0:	4461      	add	r1, ip
   b8aa2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   b8aa6:	fba0 9402 	umull	r9, r4, r0, r2
   b8aaa:	eba1 010e 	sub.w	r1, r1, lr
   b8aae:	42a1      	cmp	r1, r4
   b8ab0:	46c8      	mov	r8, r9
   b8ab2:	46a6      	mov	lr, r4
   b8ab4:	d356      	bcc.n	b8b64 <__udivmoddi4+0x2a4>
   b8ab6:	d053      	beq.n	b8b60 <__udivmoddi4+0x2a0>
   b8ab8:	b15d      	cbz	r5, b8ad2 <__udivmoddi4+0x212>
   b8aba:	ebb3 0208 	subs.w	r2, r3, r8
   b8abe:	eb61 010e 	sbc.w	r1, r1, lr
   b8ac2:	fa01 f707 	lsl.w	r7, r1, r7
   b8ac6:	fa22 f306 	lsr.w	r3, r2, r6
   b8aca:	40f1      	lsrs	r1, r6
   b8acc:	431f      	orrs	r7, r3
   b8ace:	e9c5 7100 	strd	r7, r1, [r5]
   b8ad2:	2600      	movs	r6, #0
   b8ad4:	4631      	mov	r1, r6
   b8ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b8ada:	f1c2 0320 	rsb	r3, r2, #32
   b8ade:	40d8      	lsrs	r0, r3
   b8ae0:	fa0c fc02 	lsl.w	ip, ip, r2
   b8ae4:	fa21 f303 	lsr.w	r3, r1, r3
   b8ae8:	4091      	lsls	r1, r2
   b8aea:	4301      	orrs	r1, r0
   b8aec:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b8af0:	fa1f fe8c 	uxth.w	lr, ip
   b8af4:	fbb3 f0f7 	udiv	r0, r3, r7
   b8af8:	fb07 3610 	mls	r6, r7, r0, r3
   b8afc:	0c0b      	lsrs	r3, r1, #16
   b8afe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   b8b02:	fb00 f60e 	mul.w	r6, r0, lr
   b8b06:	429e      	cmp	r6, r3
   b8b08:	fa04 f402 	lsl.w	r4, r4, r2
   b8b0c:	d908      	bls.n	b8b20 <__udivmoddi4+0x260>
   b8b0e:	eb1c 0303 	adds.w	r3, ip, r3
   b8b12:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
   b8b16:	d22f      	bcs.n	b8b78 <__udivmoddi4+0x2b8>
   b8b18:	429e      	cmp	r6, r3
   b8b1a:	d92d      	bls.n	b8b78 <__udivmoddi4+0x2b8>
   b8b1c:	3802      	subs	r0, #2
   b8b1e:	4463      	add	r3, ip
   b8b20:	1b9b      	subs	r3, r3, r6
   b8b22:	b289      	uxth	r1, r1
   b8b24:	fbb3 f6f7 	udiv	r6, r3, r7
   b8b28:	fb07 3316 	mls	r3, r7, r6, r3
   b8b2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   b8b30:	fb06 f30e 	mul.w	r3, r6, lr
   b8b34:	428b      	cmp	r3, r1
   b8b36:	d908      	bls.n	b8b4a <__udivmoddi4+0x28a>
   b8b38:	eb1c 0101 	adds.w	r1, ip, r1
   b8b3c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
   b8b40:	d216      	bcs.n	b8b70 <__udivmoddi4+0x2b0>
   b8b42:	428b      	cmp	r3, r1
   b8b44:	d914      	bls.n	b8b70 <__udivmoddi4+0x2b0>
   b8b46:	3e02      	subs	r6, #2
   b8b48:	4461      	add	r1, ip
   b8b4a:	1ac9      	subs	r1, r1, r3
   b8b4c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   b8b50:	e738      	b.n	b89c4 <__udivmoddi4+0x104>
   b8b52:	462e      	mov	r6, r5
   b8b54:	4628      	mov	r0, r5
   b8b56:	e705      	b.n	b8964 <__udivmoddi4+0xa4>
   b8b58:	4606      	mov	r6, r0
   b8b5a:	e6e3      	b.n	b8924 <__udivmoddi4+0x64>
   b8b5c:	4618      	mov	r0, r3
   b8b5e:	e6f8      	b.n	b8952 <__udivmoddi4+0x92>
   b8b60:	454b      	cmp	r3, r9
   b8b62:	d2a9      	bcs.n	b8ab8 <__udivmoddi4+0x1f8>
   b8b64:	ebb9 0802 	subs.w	r8, r9, r2
   b8b68:	eb64 0e0c 	sbc.w	lr, r4, ip
   b8b6c:	3801      	subs	r0, #1
   b8b6e:	e7a3      	b.n	b8ab8 <__udivmoddi4+0x1f8>
   b8b70:	4646      	mov	r6, r8
   b8b72:	e7ea      	b.n	b8b4a <__udivmoddi4+0x28a>
   b8b74:	4620      	mov	r0, r4
   b8b76:	e794      	b.n	b8aa2 <__udivmoddi4+0x1e2>
   b8b78:	4640      	mov	r0, r8
   b8b7a:	e7d1      	b.n	b8b20 <__udivmoddi4+0x260>
   b8b7c:	46d0      	mov	r8, sl
   b8b7e:	e77b      	b.n	b8a78 <__udivmoddi4+0x1b8>
   b8b80:	3b02      	subs	r3, #2
   b8b82:	4461      	add	r1, ip
   b8b84:	e732      	b.n	b89ec <__udivmoddi4+0x12c>
   b8b86:	4630      	mov	r0, r6
   b8b88:	e709      	b.n	b899e <__udivmoddi4+0xde>
   b8b8a:	4464      	add	r4, ip
   b8b8c:	3802      	subs	r0, #2
   b8b8e:	e742      	b.n	b8a16 <__udivmoddi4+0x156>

000b8b90 <__aeabi_idiv0>:
   b8b90:	4770      	bx	lr
   b8b92:	bf00      	nop

000b8b94 <atexit>:
   b8b94:	2300      	movs	r3, #0
   b8b96:	4601      	mov	r1, r0
   b8b98:	461a      	mov	r2, r3
   b8b9a:	4618      	mov	r0, r3
   b8b9c:	f000 b86a 	b.w	b8c74 <__register_exitproc>

000b8ba0 <memcpy>:
   b8ba0:	440a      	add	r2, r1
   b8ba2:	4291      	cmp	r1, r2
   b8ba4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b8ba8:	d100      	bne.n	b8bac <memcpy+0xc>
   b8baa:	4770      	bx	lr
   b8bac:	b510      	push	{r4, lr}
   b8bae:	f811 4b01 	ldrb.w	r4, [r1], #1
   b8bb2:	f803 4f01 	strb.w	r4, [r3, #1]!
   b8bb6:	4291      	cmp	r1, r2
   b8bb8:	d1f9      	bne.n	b8bae <memcpy+0xe>
   b8bba:	bd10      	pop	{r4, pc}

000b8bbc <memset>:
   b8bbc:	4402      	add	r2, r0
   b8bbe:	4603      	mov	r3, r0
   b8bc0:	4293      	cmp	r3, r2
   b8bc2:	d100      	bne.n	b8bc6 <memset+0xa>
   b8bc4:	4770      	bx	lr
   b8bc6:	f803 1b01 	strb.w	r1, [r3], #1
   b8bca:	e7f9      	b.n	b8bc0 <memset+0x4>

000b8bcc <srand>:
   b8bcc:	b538      	push	{r3, r4, r5, lr}
   b8bce:	4b10      	ldr	r3, [pc, #64]	; (b8c10 <srand+0x44>)
   b8bd0:	681d      	ldr	r5, [r3, #0]
   b8bd2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8bd4:	4604      	mov	r4, r0
   b8bd6:	b9b3      	cbnz	r3, b8c06 <srand+0x3a>
   b8bd8:	2018      	movs	r0, #24
   b8bda:	f7fc fc85 	bl	b54e8 <malloc>
   b8bde:	4602      	mov	r2, r0
   b8be0:	63a8      	str	r0, [r5, #56]	; 0x38
   b8be2:	b920      	cbnz	r0, b8bee <srand+0x22>
   b8be4:	4b0b      	ldr	r3, [pc, #44]	; (b8c14 <srand+0x48>)
   b8be6:	480c      	ldr	r0, [pc, #48]	; (b8c18 <srand+0x4c>)
   b8be8:	2142      	movs	r1, #66	; 0x42
   b8bea:	f7fc fcb5 	bl	b5558 <__assert_func>
   b8bee:	490b      	ldr	r1, [pc, #44]	; (b8c1c <srand+0x50>)
   b8bf0:	4b0b      	ldr	r3, [pc, #44]	; (b8c20 <srand+0x54>)
   b8bf2:	e9c0 1300 	strd	r1, r3, [r0]
   b8bf6:	4b0b      	ldr	r3, [pc, #44]	; (b8c24 <srand+0x58>)
   b8bf8:	6083      	str	r3, [r0, #8]
   b8bfa:	230b      	movs	r3, #11
   b8bfc:	8183      	strh	r3, [r0, #12]
   b8bfe:	2100      	movs	r1, #0
   b8c00:	2001      	movs	r0, #1
   b8c02:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b8c06:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8c08:	2200      	movs	r2, #0
   b8c0a:	611c      	str	r4, [r3, #16]
   b8c0c:	615a      	str	r2, [r3, #20]
   b8c0e:	bd38      	pop	{r3, r4, r5, pc}
   b8c10:	2003e5ac 	.word	0x2003e5ac
   b8c14:	000b90a8 	.word	0x000b90a8
   b8c18:	000b90bf 	.word	0x000b90bf
   b8c1c:	abcd330e 	.word	0xabcd330e
   b8c20:	e66d1234 	.word	0xe66d1234
   b8c24:	0005deec 	.word	0x0005deec

000b8c28 <strdup>:
   b8c28:	4b02      	ldr	r3, [pc, #8]	; (b8c34 <strdup+0xc>)
   b8c2a:	4601      	mov	r1, r0
   b8c2c:	6818      	ldr	r0, [r3, #0]
   b8c2e:	f000 b803 	b.w	b8c38 <_strdup_r>
   b8c32:	bf00      	nop
   b8c34:	2003e5ac 	.word	0x2003e5ac

000b8c38 <_strdup_r>:
   b8c38:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8c3a:	4604      	mov	r4, r0
   b8c3c:	4608      	mov	r0, r1
   b8c3e:	460d      	mov	r5, r1
   b8c40:	f000 f80f 	bl	b8c62 <strlen>
   b8c44:	1c42      	adds	r2, r0, #1
   b8c46:	4611      	mov	r1, r2
   b8c48:	4620      	mov	r0, r4
   b8c4a:	9201      	str	r2, [sp, #4]
   b8c4c:	f7fc fc74 	bl	b5538 <_malloc_r>
   b8c50:	4604      	mov	r4, r0
   b8c52:	b118      	cbz	r0, b8c5c <_strdup_r+0x24>
   b8c54:	9a01      	ldr	r2, [sp, #4]
   b8c56:	4629      	mov	r1, r5
   b8c58:	f7ff ffa2 	bl	b8ba0 <memcpy>
   b8c5c:	4620      	mov	r0, r4
   b8c5e:	b003      	add	sp, #12
   b8c60:	bd30      	pop	{r4, r5, pc}

000b8c62 <strlen>:
   b8c62:	4603      	mov	r3, r0
   b8c64:	f813 2b01 	ldrb.w	r2, [r3], #1
   b8c68:	2a00      	cmp	r2, #0
   b8c6a:	d1fb      	bne.n	b8c64 <strlen+0x2>
   b8c6c:	1a18      	subs	r0, r3, r0
   b8c6e:	3801      	subs	r0, #1
   b8c70:	4770      	bx	lr
	...

000b8c74 <__register_exitproc>:
   b8c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8c78:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b8d34 <__register_exitproc+0xc0>
   b8c7c:	4606      	mov	r6, r0
   b8c7e:	f8d8 0000 	ldr.w	r0, [r8]
   b8c82:	461f      	mov	r7, r3
   b8c84:	460d      	mov	r5, r1
   b8c86:	4691      	mov	r9, r2
   b8c88:	f000 f856 	bl	b8d38 <__retarget_lock_acquire_recursive>
   b8c8c:	4b25      	ldr	r3, [pc, #148]	; (b8d24 <__register_exitproc+0xb0>)
   b8c8e:	681c      	ldr	r4, [r3, #0]
   b8c90:	b934      	cbnz	r4, b8ca0 <__register_exitproc+0x2c>
   b8c92:	4c25      	ldr	r4, [pc, #148]	; (b8d28 <__register_exitproc+0xb4>)
   b8c94:	601c      	str	r4, [r3, #0]
   b8c96:	4b25      	ldr	r3, [pc, #148]	; (b8d2c <__register_exitproc+0xb8>)
   b8c98:	b113      	cbz	r3, b8ca0 <__register_exitproc+0x2c>
   b8c9a:	681b      	ldr	r3, [r3, #0]
   b8c9c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b8ca0:	6863      	ldr	r3, [r4, #4]
   b8ca2:	2b1f      	cmp	r3, #31
   b8ca4:	dd07      	ble.n	b8cb6 <__register_exitproc+0x42>
   b8ca6:	f8d8 0000 	ldr.w	r0, [r8]
   b8caa:	f000 f847 	bl	b8d3c <__retarget_lock_release_recursive>
   b8cae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b8cb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b8cb6:	b34e      	cbz	r6, b8d0c <__register_exitproc+0x98>
   b8cb8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b8cbc:	b988      	cbnz	r0, b8ce2 <__register_exitproc+0x6e>
   b8cbe:	4b1c      	ldr	r3, [pc, #112]	; (b8d30 <__register_exitproc+0xbc>)
   b8cc0:	b923      	cbnz	r3, b8ccc <__register_exitproc+0x58>
   b8cc2:	f8d8 0000 	ldr.w	r0, [r8]
   b8cc6:	f000 f838 	bl	b8d3a <__retarget_lock_release>
   b8cca:	e7f0      	b.n	b8cae <__register_exitproc+0x3a>
   b8ccc:	f44f 7084 	mov.w	r0, #264	; 0x108
   b8cd0:	f7fc fc0a 	bl	b54e8 <malloc>
   b8cd4:	2800      	cmp	r0, #0
   b8cd6:	d0f4      	beq.n	b8cc2 <__register_exitproc+0x4e>
   b8cd8:	2300      	movs	r3, #0
   b8cda:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b8cde:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b8ce2:	6863      	ldr	r3, [r4, #4]
   b8ce4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b8ce8:	2201      	movs	r2, #1
   b8cea:	409a      	lsls	r2, r3
   b8cec:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b8cf0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b8cf4:	4313      	orrs	r3, r2
   b8cf6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b8cfa:	2e02      	cmp	r6, #2
   b8cfc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b8d00:	bf02      	ittt	eq
   b8d02:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b8d06:	4313      	orreq	r3, r2
   b8d08:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b8d0c:	6863      	ldr	r3, [r4, #4]
   b8d0e:	f8d8 0000 	ldr.w	r0, [r8]
   b8d12:	1c5a      	adds	r2, r3, #1
   b8d14:	3302      	adds	r3, #2
   b8d16:	6062      	str	r2, [r4, #4]
   b8d18:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b8d1c:	f000 f80e 	bl	b8d3c <__retarget_lock_release_recursive>
   b8d20:	2000      	movs	r0, #0
   b8d22:	e7c6      	b.n	b8cb2 <__register_exitproc+0x3e>
   b8d24:	2003e7ec 	.word	0x2003e7ec
   b8d28:	2003e760 	.word	0x2003e760
   b8d2c:	00000000 	.word	0x00000000
   b8d30:	000b54e9 	.word	0x000b54e9
   b8d34:	2003e610 	.word	0x2003e610

000b8d38 <__retarget_lock_acquire_recursive>:
   b8d38:	4770      	bx	lr

000b8d3a <__retarget_lock_release>:
   b8d3a:	4770      	bx	lr

000b8d3c <__retarget_lock_release_recursive>:
   b8d3c:	4770      	bx	lr

000b8d3e <link_code_end>:
	...

000b8d40 <dynalib_user>:
   b8d40:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b8d50:	0000 0000 6144 676e 7265 756f 2073 654c     ....Dangerous Le
   b8d60:	6576 006c 6948 6867 5020 6c6f 7475 6f69     vel.High Polutio
   b8d70:	006e 6f4c 2077 6f50 756c 6974 6e6f 4600     n.Low Polution.F
   b8d80:	6572 6873 4120 7269 5200 6165 6964 676e     resh Air.Reading
   b8d90:	5520 736e 6375 6563 7373 7566 006c 504c      Unsuccessful.LP
   b8da0:	3a4f 2520 756c 5200 7461 6f69 203a 6625     O: %lu.Ratio: %f
   b8db0:	2525 4300 6e6f 6563 746e 6172 6974 6e6f     %%.Concentration
   b8dc0:	203a 6625 7020 7363 4c2f 7400 6d65 0070     : %f pcs/L.temp.
   b8dd0:	7568 696d 6964 7974 7000 6572 7373 7275     humidity.pressur
   b8de0:	0065 6c61 6974 7574 6564 6100 7269 7551     e.altitude.airQu
   b8df0:	6c61 7469 0079 706c 006f 6172 6974 006f     ality.lpo.ratio.
   b8e00:	6f63 636e 5700 6165 6874 7265 5320 6174     conc.Weather Sta
   b8e10:	6974 6e6f 4f20 6c6e 6e69 2065 293a 4400     tion Online :).D
   b8e20:	7275 7461 6f69 3a6e 0020 6c41 6974 7574     uration: .Altitu
   b8e30:	6564 203a 5400 6d65 6570 6172 7574 6572     de: .Temperature
   b8e40:	203a 4800 6d75 6469 7469 3a79 0020 7250     : .Humidity: .Pr
   b8e50:	7365 7573 6572 203a 4100 7269 5120 6175     essure: .Air Qua
   b8e60:	696c 7974 203a 4400 7375 2074 6f63 636e     lity: .Dust conc
   b8e70:	6e65 7274 7461 6f69 3a6e 0020 6f4c 6461     entration: .Load
   b8e80:	6e69 0067 6564 6166 6c75 2074 4d00 4253     ing.default .MSB
   b8e90:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
   b8ea0:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
   b8eb0:	7465 6974 676e 2073 7325 7525 2520 2073     ettings %s%u %s 
   b8ec0:	4f4d 4544 7525 003e                         MODE%u>.

000b8ec8 <_ZTVN8particle11SPISettingsE>:
	...
   b8ed0:	467d 000b 4651 000b 4653 000b               }F..QF..SF..

000b8edc <_ZN16AirQualitySensor12FORCE_SIGNALE>:
   b8edc:	0000 0000                                   ....

000b8ee0 <_ZN16AirQualitySensor13LOW_POLLUTIONE>:
   b8ee0:	0002 0000                                   ....

000b8ee4 <_ZN16AirQualitySensor14HIGH_POLLUTIONE>:
   b8ee4:	0001 0000                                   ....

000b8ee8 <_ZN16AirQualitySensor9FRESH_AIRE>:
   b8ee8:	0003 0000                                   ....

000b8eec <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b8ef4:	55ed 000b 55f3 000b 5631 000b 5601 000b     .U...U..1V...V..
   b8f04:	55ef 000b                                   .U..

000b8f08 <_ZTVN5spark13EthernetClassE>:
	...
   b8f10:	5b7b 000b 5b71 000b 5b67 000b 5b5d 000b     {[..q[..g[..][..
   b8f20:	5b51 000b 5b45 000b 5de9 000b 5df1 000b     Q[..E[...]...]..
   b8f30:	5b39 000b 5b31 000b 5b27 000b 5b1d 000b     9[..1[..'[...[..
   b8f40:	5e21 000b                                   !^..

000b8f44 <_ZTV7TwoWire>:
	...
   b8f4c:	5b99 000b 5be3 000b 5bbb 000b 5b9b 000b     .[...[...[...[..
   b8f5c:	5bc3 000b 5bcb 000b 5bd3 000b 5bdb 000b     .[...[...[...[..

000b8f6c <_ZTV9IPAddress>:
	...
   b8f74:	5cb7 000b 5ca7 000b 5ca9 000b 7061 0070     .\...\...\..app.

000b8f84 <_ZTVN5spark12NetworkClassE>:
	...
   b8f8c:	5da9 000b 5db3 000b 5dbd 000b 5dc7 000b     .]...]...]...]..
   b8f9c:	5dd1 000b 5ddd 000b 5de9 000b 5df1 000b     .]...]...]...]..
   b8fac:	5df9 000b 5e05 000b 5e0d 000b 5e17 000b     .]...^...^...^..
   b8fbc:	5e21 000b 616e 006e 6e69 0066 766f 0066     !^..nan.inf.ovf.
   b8fcc:	002e                                        ..

000b8fce <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b8fce:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   b8fde:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   b8fee:	6d69 0065 0000                              ime...

000b8ff4 <_ZTV11USARTSerial>:
	...
   b8ffc:	64c1 000b 652d 000b 6505 000b 5f0d 000b     .d..-e...e..._..
   b900c:	64d5 000b 64f1 000b 64e3 000b 64ff 000b     .d...d...d...d..
   b901c:	64c3 000b 64c7 000b                         .d...d..

000b9024 <_ZTV9USBSerial>:
	...
   b902c:	656b 000b 65d3 000b 65a9 000b 5f0d 000b     ke...e...e..._..
   b903c:	659b 000b 656d 000b 657d 000b 65cd 000b     .e..me..}e...e..
   b904c:	658d 000b 6565 000b                         .e..ee..

000b9054 <_ZTVN5spark9WiFiClassE>:
	...
   b905c:	66cb 000b 66c1 000b 66b7 000b 666d 000b     .f...f...f..mf..
   b906c:	66ab 000b 669f 000b 5de9 000b 5df1 000b     .f...f...]...]..
   b907c:	6693 000b 668b 000b 6681 000b 6677 000b     .f...f...f..wf..
   b908c:	5e21 000b                                   !^..

000b9090 <_ZSt7nothrow>:
	...

000b9098 <TWO52>:
   b9098:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.
   b90a8:	4552 4e45 2054 616d 6c6c 636f 7320 6375     REENT malloc suc
   b90b8:	6563 6465 6465 2f00 6d74 2f70 656a 6b6e     ceeded./tmp/jenk
   b90c8:	6e69 2d73 4347 2d43 3031 702d 7069 6c65     ins-GCC-10-pipel
   b90d8:	6e69 2d65 3834 325f 3230 3130 3231 5f34     ine-48_20201124_
   b90e8:	3631 3630 3831 3630 3933 732f 6372 6e2f     1606180639/src/n
   b90f8:	7765 696c 2f62 656e 6c77 6269 6c2f 6269     ewlib/newlib/lib
   b9108:	2f63 7473 6c64 6269 722f 6e61 2e64 0063     c/stdlib/rand.c.

000b9118 <link_const_variable_data_end>:
   b9118:	000b4619 	.word	0x000b4619
   b911c:	000b55dd 	.word	0x000b55dd
   b9120:	000b5b85 	.word	0x000b5b85
   b9124:	000b5d99 	.word	0x000b5d99
   b9128:	000b5ef9 	.word	0x000b5ef9
   b912c:	000b61dd 	.word	0x000b61dd
   b9130:	000b6489 	.word	0x000b6489
   b9134:	000b64ad 	.word	0x000b64ad
   b9138:	000b66d5 	.word	0x000b66d5

000b913c <link_constructors_end>:
   b913c:	00000000 	.word	0x00000000
