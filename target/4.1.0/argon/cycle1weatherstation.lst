
/Users/lucy/Desktop/AlevelProject/cycle1weatherstation/target/4.1.0/argon/cycle1weatherstation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004790  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b87b0  000b87b0  000087b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.exidx    00000008  000b87d4  000b87d4  000087d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .backup       00000004  2003f400  000b87dc  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  2003e5f0  000b87e0  0001e5f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000190  2003e660  2003e660  0002e660  2**2
                  ALLOC
  8 .module_info_suffix 00000028  000b8850  000b8850  00028850  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b8878  000b8878  00028878  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   0011b0ee  00000000  00000000  0002887c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0001248d  00000000  00000000  0014396a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00036905  00000000  00000000  00155df7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002868  00000000  00000000  0018c6fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00009d50  00000000  00000000  0018ef64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000392e1  00000000  00000000  00198cb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003bcfa  00000000  00000000  001d1f95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00138201  00000000  00000000  0020dc8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00007590  00000000  00000000  00345e90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f004 f959 	bl	b82e8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f004 f961 	bl	b8304 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e5f0 	.word	0x2003e5f0
   b404c:	000b87e0 	.word	0x000b87e0
   b4050:	2003e660 	.word	0x2003e660
   b4054:	2003e660 	.word	0x2003e660
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f001 ffff 	bl	b6064 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000b8788 	.word	0x000b8788
   b4080:	000b87ac 	.word	0x000b87ac

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b878 	b.w	b4178 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 f8bd 	bl	b4208 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f001 bf9f 	b.w	b5fd4 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f000 bfff 	b.w	b5098 <malloc>

000b409a <_Znaj>:
   b409a:	f000 bffd 	b.w	b5098 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f001 b803 	b.w	b50a8 <free>

000b40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a2:	7800      	ldrb	r0, [r0, #0]
   b40a4:	fab0 f080 	clz	r0, r0
   b40a8:	0940      	lsrs	r0, r0, #5
   b40aa:	4770      	bx	lr

000b40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ac:	2301      	movs	r3, #1
   b40ae:	7003      	strb	r3, [r0, #0]
   b40b0:	4770      	bx	lr

000b40b2 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>:

    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value), int> = 0>
    size_t println(T b, int base = DEC) {
   b40b2:	b570      	push	{r4, r5, r6, lr}
   b40b4:	4605      	mov	r5, r0
   b40b6:	460c      	mov	r4, r1

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
   b40b8:	4616      	mov	r6, r2
   b40ba:	b942      	cbnz	r2, b40ce <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x1c>
        return write(n);
   b40bc:	6803      	ldr	r3, [r0, #0]
   b40be:	b2c9      	uxtb	r1, r1
   b40c0:	689b      	ldr	r3, [r3, #8]
   b40c2:	4798      	blx	r3
        n += println();
   b40c4:	4628      	mov	r0, r5
    }
   b40c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        n += println();
   b40ca:	f001 bd1e 	b.w	b5b0a <_ZN5Print7printlnEv>
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b40ce:	2900      	cmp	r1, #0
   b40d0:	da0a      	bge.n	b40e8 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x36>
   b40d2:	2a0a      	cmp	r2, #10
   b40d4:	d108      	bne.n	b40e8 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x36>
            t = print('-');
   b40d6:	212d      	movs	r1, #45	; 0x2d
   b40d8:	f001 fd14 	bl	b5b04 <_ZN5Print5printEc>
            val = -n;
   b40dc:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b40de:	b2f2      	uxtb	r2, r6
   b40e0:	4628      	mov	r0, r5
   b40e2:	f001 fd1e 	bl	b5b22 <_ZN5Print11printNumberEmh>
   b40e6:	e7ed      	b.n	b40c4 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x12>
            val = n;
   b40e8:	4621      	mov	r1, r4
   b40ea:	e7f8      	b.n	b40de <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x2c>

000b40ec <_Z20getBarometerReadingsv>:
int altitude = 0;


// BAROMETER SENSOR CODE

void getBarometerReadings() {
   b40ec:	b508      	push	{r3, lr}
  //Collects readings from sensors
  temp = (int)bme.readTemperature();
   b40ee:	4811      	ldr	r0, [pc, #68]	; (b4134 <_Z20getBarometerReadingsv+0x48>)
   b40f0:	f000 fbd0 	bl	b4894 <_ZN15Adafruit_BME28015readTemperatureEv>
   b40f4:	4b10      	ldr	r3, [pc, #64]	; (b4138 <_Z20getBarometerReadingsv+0x4c>)
  humidity = (int)bme.readHumidity();
   b40f6:	480f      	ldr	r0, [pc, #60]	; (b4134 <_Z20getBarometerReadingsv+0x48>)
  temp = (int)bme.readTemperature();
   b40f8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   b40fc:	ed83 0a00 	vstr	s0, [r3]
  humidity = (int)bme.readHumidity();
   b4100:	f000 fbf8 	bl	b48f4 <_ZN15Adafruit_BME28012readHumidityEv>
   b4104:	4b0d      	ldr	r3, [pc, #52]	; (b413c <_Z20getBarometerReadingsv+0x50>)
  pressure = (int)bme.readPressure();
   b4106:	480b      	ldr	r0, [pc, #44]	; (b4134 <_Z20getBarometerReadingsv+0x48>)
  humidity = (int)bme.readHumidity();
   b4108:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   b410c:	ed83 0a00 	vstr	s0, [r3]
  pressure = (int)bme.readPressure();
   b4110:	f000 fc3a 	bl	b4988 <_ZN15Adafruit_BME28012readPressureEv>
   b4114:	4b0a      	ldr	r3, [pc, #40]	; (b4140 <_Z20getBarometerReadingsv+0x54>)
  altitude = (int)bme.readAltitude(1013.25);
   b4116:	4807      	ldr	r0, [pc, #28]	; (b4134 <_Z20getBarometerReadingsv+0x48>)
  pressure = (int)bme.readPressure();
   b4118:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   b411c:	ed83 0a00 	vstr	s0, [r3]
  altitude = (int)bme.readAltitude(1013.25);
   b4120:	ed9f 0a08 	vldr	s0, [pc, #32]	; b4144 <_Z20getBarometerReadingsv+0x58>
   b4124:	f000 fd00 	bl	b4b28 <_ZN15Adafruit_BME28012readAltitudeEf>
   b4128:	4b07      	ldr	r3, [pc, #28]	; (b4148 <_Z20getBarometerReadingsv+0x5c>)
   b412a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   b412e:	ed83 0a00 	vstr	s0, [r3]
}
   b4132:	bd08      	pop	{r3, pc}
   b4134:	2003e668 	.word	0x2003e668
   b4138:	2003e6b4 	.word	0x2003e6b4
   b413c:	2003e6ac 	.word	0x2003e6ac
   b4140:	2003e6b0 	.word	0x2003e6b0
   b4144:	447d5000 	.word	0x447d5000
   b4148:	2003e664 	.word	0x2003e664

000b414c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b414c:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b414e:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b4150:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b4152:	b17c      	cbz	r4, b4174 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b4154:	6863      	ldr	r3, [r4, #4]
   b4156:	3b01      	subs	r3, #1
   b4158:	6063      	str	r3, [r4, #4]
   b415a:	b95b      	cbnz	r3, b4174 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b415c:	6823      	ldr	r3, [r4, #0]
   b415e:	4620      	mov	r0, r4
   b4160:	689b      	ldr	r3, [r3, #8]
   b4162:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4164:	68a3      	ldr	r3, [r4, #8]
   b4166:	3b01      	subs	r3, #1
   b4168:	60a3      	str	r3, [r4, #8]
   b416a:	b91b      	cbnz	r3, b4174 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b416c:	6823      	ldr	r3, [r4, #0]
   b416e:	4620      	mov	r0, r4
   b4170:	68db      	ldr	r3, [r3, #12]
   b4172:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b4174:	4628      	mov	r0, r5
   b4176:	bd38      	pop	{r3, r4, r5, pc}

000b4178 <setup>:

void setup() {
   b4178:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  bme.begin();
   b417a:	4818      	ldr	r0, [pc, #96]	; (b41dc <setup+0x64>)
   b417c:	f000 fd65 	bl	b4c4a <_ZN15Adafruit_BME2805beginEv>

  Serial.begin(9600);
   b4180:	f001 fea2 	bl	b5ec8 <_Z16_fetch_usbserialv>
   b4184:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4188:	f001 fe92 	bl	b5eb0 <_ZN9USBSerial5beginEl>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   b418c:	4914      	ldr	r1, [pc, #80]	; (b41e0 <setup+0x68>)
   b418e:	4815      	ldr	r0, [pc, #84]	; (b41e4 <setup+0x6c>)
   b4190:	2300      	movs	r3, #0
   b4192:	2202      	movs	r2, #2
   b4194:	f000 ff00 	bl	b4f98 <spark_variable>
   b4198:	4913      	ldr	r1, [pc, #76]	; (b41e8 <setup+0x70>)
   b419a:	4814      	ldr	r0, [pc, #80]	; (b41ec <setup+0x74>)
   b419c:	2300      	movs	r3, #0
   b419e:	2202      	movs	r2, #2
   b41a0:	f000 fefa 	bl	b4f98 <spark_variable>
   b41a4:	4912      	ldr	r1, [pc, #72]	; (b41f0 <setup+0x78>)
   b41a6:	4813      	ldr	r0, [pc, #76]	; (b41f4 <setup+0x7c>)
   b41a8:	2300      	movs	r3, #0
   b41aa:	2202      	movs	r2, #2
   b41ac:	f000 fef4 	bl	b4f98 <spark_variable>
   b41b0:	4911      	ldr	r1, [pc, #68]	; (b41f8 <setup+0x80>)
   b41b2:	4812      	ldr	r0, [pc, #72]	; (b41fc <setup+0x84>)
   b41b4:	2300      	movs	r3, #0
   b41b6:	2202      	movs	r2, #2
   b41b8:	f000 feee 	bl	b4f98 <spark_variable>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b41bc:	4b10      	ldr	r3, [pc, #64]	; (b4200 <setup+0x88>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b41be:	4911      	ldr	r1, [pc, #68]	; (b4204 <setup+0x8c>)
   b41c0:	781b      	ldrb	r3, [r3, #0]
   b41c2:	f88d 3000 	strb.w	r3, [sp]
   b41c6:	2200      	movs	r2, #0
   b41c8:	233c      	movs	r3, #60	; 0x3c
   b41ca:	a802      	add	r0, sp, #8
   b41cc:	f001 f90a 	bl	b53e4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b41d0:	a803      	add	r0, sp, #12
   b41d2:	f7ff ffbb 	bl	b414c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  Particle.variable("humidity", humidity);
  Particle.variable("pressure", pressure);
  Particle.variable("altitude", altitude);

  Particle.publish("Weather Station Online :)");
}
   b41d6:	b005      	add	sp, #20
   b41d8:	f85d fb04 	ldr.w	pc, [sp], #4
   b41dc:	2003e668 	.word	0x2003e668
   b41e0:	2003e6b4 	.word	0x2003e6b4
   b41e4:	000b849c 	.word	0x000b849c
   b41e8:	2003e6ac 	.word	0x2003e6ac
   b41ec:	000b84a1 	.word	0x000b84a1
   b41f0:	2003e6b0 	.word	0x2003e6b0
   b41f4:	000b84aa 	.word	0x000b84aa
   b41f8:	2003e664 	.word	0x2003e664
   b41fc:	000b84b3 	.word	0x000b84b3
   b4200:	2003e660 	.word	0x2003e660
   b4204:	000b84bc 	.word	0x000b84bc

000b4208 <loop>:


void loop() {
   b4208:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  getBarometerReadings();
   b420a:	f7ff ff6f 	bl	b40ec <_Z20getBarometerReadingsv>
   b420e:	4b20      	ldr	r3, [pc, #128]	; (b4290 <loop+0x88>)
   b4210:	4920      	ldr	r1, [pc, #128]	; (b4294 <loop+0x8c>)
   b4212:	781b      	ldrb	r3, [r3, #0]
   b4214:	f88d 3000 	strb.w	r3, [sp]
   b4218:	2200      	movs	r2, #0
   b421a:	233c      	movs	r3, #60	; 0x3c
   b421c:	a802      	add	r0, sp, #8
   b421e:	f001 f8e1 	bl	b53e4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b4222:	a803      	add	r0, sp, #12
   b4224:	f7ff ff92 	bl	b414c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

  Particle.publish("testing");

  Serial.print("Temperature: ");
   b4228:	f001 fe4e 	bl	b5ec8 <_Z16_fetch_usbserialv>
   b422c:	491a      	ldr	r1, [pc, #104]	; (b4298 <loop+0x90>)
   b422e:	f001 fc65 	bl	b5afc <_ZN5Print5printEPKc>
  Serial.println(temp);
   b4232:	f001 fe49 	bl	b5ec8 <_Z16_fetch_usbserialv>
   b4236:	4b19      	ldr	r3, [pc, #100]	; (b429c <loop+0x94>)
   b4238:	220a      	movs	r2, #10
   b423a:	6819      	ldr	r1, [r3, #0]
   b423c:	f7ff ff39 	bl	b40b2 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>

  Serial.print("Humidity: ");
   b4240:	f001 fe42 	bl	b5ec8 <_Z16_fetch_usbserialv>
   b4244:	4916      	ldr	r1, [pc, #88]	; (b42a0 <loop+0x98>)
   b4246:	f001 fc59 	bl	b5afc <_ZN5Print5printEPKc>
  Serial.println(humidity);
   b424a:	f001 fe3d 	bl	b5ec8 <_Z16_fetch_usbserialv>
   b424e:	4b15      	ldr	r3, [pc, #84]	; (b42a4 <loop+0x9c>)
   b4250:	220a      	movs	r2, #10
   b4252:	6819      	ldr	r1, [r3, #0]
   b4254:	f7ff ff2d 	bl	b40b2 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>

  Serial.print("Pressure: ");
   b4258:	f001 fe36 	bl	b5ec8 <_Z16_fetch_usbserialv>
   b425c:	4912      	ldr	r1, [pc, #72]	; (b42a8 <loop+0xa0>)
   b425e:	f001 fc4d 	bl	b5afc <_ZN5Print5printEPKc>
  Serial.println(pressure);
   b4262:	f001 fe31 	bl	b5ec8 <_Z16_fetch_usbserialv>
   b4266:	4b11      	ldr	r3, [pc, #68]	; (b42ac <loop+0xa4>)
   b4268:	220a      	movs	r2, #10
   b426a:	6819      	ldr	r1, [r3, #0]
   b426c:	f7ff ff21 	bl	b40b2 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>

  Serial.print("Altitude: ");
   b4270:	f001 fe2a 	bl	b5ec8 <_Z16_fetch_usbserialv>
   b4274:	490e      	ldr	r1, [pc, #56]	; (b42b0 <loop+0xa8>)
   b4276:	f001 fc41 	bl	b5afc <_ZN5Print5printEPKc>
  Serial.println(altitude);
   b427a:	f001 fe25 	bl	b5ec8 <_Z16_fetch_usbserialv>
   b427e:	4b0d      	ldr	r3, [pc, #52]	; (b42b4 <loop+0xac>)
   b4280:	6819      	ldr	r1, [r3, #0]
   b4282:	220a      	movs	r2, #10

   b4284:	b005      	add	sp, #20
   b4286:	f85d eb04 	ldr.w	lr, [sp], #4
  Serial.println(altitude);
   b428a:	f7ff bf12 	b.w	b40b2 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
   b428e:	bf00      	nop
   b4290:	2003e660 	.word	0x2003e660
   b4294:	000b84d6 	.word	0x000b84d6
   b4298:	000b84de 	.word	0x000b84de
   b429c:	2003e6b4 	.word	0x2003e6b4
   b42a0:	000b84ec 	.word	0x000b84ec
   b42a4:	2003e6ac 	.word	0x2003e6ac
   b42a8:	000b84f7 	.word	0x000b84f7
   b42ac:	2003e6b0 	.word	0x2003e6b0
   b42b0:	000b8502 	.word	0x000b8502
   b42b4:	2003e664 	.word	0x2003e664

000b42b8 <_GLOBAL__sub_I_bme>:
        val_(val) {
   b42b8:	4b02      	ldr	r3, [pc, #8]	; (b42c4 <_GLOBAL__sub_I_bme+0xc>)
Adafruit_BME280 bme;
   b42ba:	4803      	ldr	r0, [pc, #12]	; (b42c8 <_GLOBAL__sub_I_bme+0x10>)
   b42bc:	2200      	movs	r2, #0
   b42be:	701a      	strb	r2, [r3, #0]
   b42c0:	f000 b844 	b.w	b434c <_ZN15Adafruit_BME280C1Ev>
   b42c4:	2003e660 	.word	0x2003e660
   b42c8:	2003e668 	.word	0x2003e668

000b42cc <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b42cc:	4770      	bx	lr

000b42ce <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b42ce:	b510      	push	{r4, lr}
  }
   b42d0:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b42d2:	4604      	mov	r4, r0
  }
   b42d4:	f7ff fee3 	bl	b409e <_ZdlPvj>
   b42d8:	4620      	mov	r0, r4
   b42da:	bd10      	pop	{r4, pc}

000b42dc <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b42dc:	b40e      	push	{r1, r2, r3}
   b42de:	b503      	push	{r0, r1, lr}
   b42e0:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b42e2:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b42e4:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b42e8:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b42ea:	f001 fc38 	bl	b5b5e <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b42ee:	b002      	add	sp, #8
   b42f0:	f85d eb04 	ldr.w	lr, [sp], #4
   b42f4:	b003      	add	sp, #12
   b42f6:	4770      	bx	lr

000b42f8 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b42f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b42fa:	4604      	mov	r4, r0
   b42fc:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b42fe:	7922      	ldrb	r2, [r4, #4]
   b4300:	68a3      	ldr	r3, [r4, #8]
   b4302:	b132      	cbz	r2, b4312 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b4304:	b9a3      	cbnz	r3, b4330 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b4306:	490b      	ldr	r1, [pc, #44]	; (b4334 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b4308:	b002      	add	sp, #8
   b430a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b430e:	f001 bbf5 	b.w	b5afc <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4312:	4a09      	ldr	r2, [pc, #36]	; (b4338 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b4314:	7b26      	ldrb	r6, [r4, #12]
   b4316:	4d09      	ldr	r5, [pc, #36]	; (b433c <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b4318:	4909      	ldr	r1, [pc, #36]	; (b4340 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b431a:	7b64      	ldrb	r4, [r4, #13]
   b431c:	2e01      	cmp	r6, #1
   b431e:	bf18      	it	ne
   b4320:	4629      	movne	r1, r5
   b4322:	e9cd 1400 	strd	r1, r4, [sp]
   b4326:	4907      	ldr	r1, [pc, #28]	; (b4344 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b4328:	f7ff ffd8 	bl	b42dc <_ZN5Print6printfEPKcz>
  }
   b432c:	b002      	add	sp, #8
   b432e:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4330:	4a05      	ldr	r2, [pc, #20]	; (b4348 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b4332:	e7ef      	b.n	b4314 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b4334:	000b851e 	.word	0x000b851e
   b4338:	000b850c 	.word	0x000b850c
   b433c:	000b851a 	.word	0x000b851a
   b4340:	000b8516 	.word	0x000b8516
   b4344:	000b8534 	.word	0x000b8534
   b4348:	000b850d 	.word	0x000b850d

000b434c <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   b434c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b4350:	6103      	str	r3, [r0, #16]
{ }
   b4352:	4770      	bx	lr

000b4354 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b4354:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b4356:	4c0b      	ldr	r4, [pc, #44]	; (b4384 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b4358:	7821      	ldrb	r1, [r4, #0]
   b435a:	f3bf 8f5b 	dmb	ish
   b435e:	f011 0101 	ands.w	r1, r1, #1
   b4362:	d10b      	bne.n	b437c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b4364:	4620      	mov	r0, r4
   b4366:	9101      	str	r1, [sp, #4]
   b4368:	f7ff fe9b 	bl	b40a2 <__cxa_guard_acquire>
   b436c:	9901      	ldr	r1, [sp, #4]
   b436e:	b128      	cbz	r0, b437c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b4370:	4805      	ldr	r0, [pc, #20]	; (b4388 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b4372:	f001 fc31 	bl	b5bd8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b4376:	4620      	mov	r0, r4
   b4378:	f7ff fe98 	bl	b40ac <__cxa_guard_release>
        return instance;
    }
   b437c:	4802      	ldr	r0, [pc, #8]	; (b4388 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b437e:	b002      	add	sp, #8
   b4380:	bd10      	pop	{r4, pc}
   b4382:	bf00      	nop
   b4384:	2003e6b8 	.word	0x2003e6b8
   b4388:	2003e6bc 	.word	0x2003e6bc

000b438c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>:
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
   b438c:	b508      	push	{r3, lr}
        instance().endTransaction();
   b438e:	f7ff ffe1 	bl	b4354 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    }
   b4392:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        instance().endTransaction();
   b4396:	f001 bc3d 	b.w	b5c14 <_ZN8SPIClass14endTransactionEv>

000b439a <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>:
    int32_t beginTransaction(const particle::SPISettings& settings) {
   b439a:	b507      	push	{r0, r1, r2, lr}
   b439c:	9001      	str	r0, [sp, #4]
        return instance().beginTransaction(settings);
   b439e:	f7ff ffd9 	bl	b4354 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b43a2:	9901      	ldr	r1, [sp, #4]
    }
   b43a4:	b003      	add	sp, #12
   b43a6:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().beginTransaction(settings);
   b43aa:	f001 bc4d 	b.w	b5c48 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b43ae <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   b43ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   b43b2:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b43b6:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   b43b8:	4605      	mov	r5, r0
   b43ba:	460f      	mov	r7, r1
    if (_sck == -1)
   b43bc:	d106      	bne.n	b43cc <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b43be:	f7ff ffc9 	bl	b4354 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b43c2:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   b43c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b43c8:	f001 bcac 	b.w	b5d24 <_ZN8SPIClass8transferEh>
    uint8_t reply = 0;
   b43cc:	2400      	movs	r4, #0
    for (int i=7; i>=0; i--) {
   b43ce:	2607      	movs	r6, #7
        digitalWrite(_mosi, x & (1<<i));
   b43d0:	f04f 0801 	mov.w	r8, #1
        digitalWrite(_sck, LOW);
   b43d4:	f995 0013 	ldrsb.w	r0, [r5, #19]
   b43d8:	2100      	movs	r1, #0
   b43da:	b280      	uxth	r0, r0
   b43dc:	f001 fec3 	bl	b6166 <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   b43e0:	f995 0011 	ldrsb.w	r0, [r5, #17]
   b43e4:	fa08 f106 	lsl.w	r1, r8, r6
   b43e8:	4039      	ands	r1, r7
   b43ea:	b280      	uxth	r0, r0
   b43ec:	f001 febb 	bl	b6166 <digitalWrite>
        digitalWrite(_sck, HIGH);
   b43f0:	f995 0013 	ldrsb.w	r0, [r5, #19]
   b43f4:	2101      	movs	r1, #1
   b43f6:	b280      	uxth	r0, r0
   b43f8:	f001 feb5 	bl	b6166 <digitalWrite>
        if (digitalRead(_miso))
   b43fc:	f995 0012 	ldrsb.w	r0, [r5, #18]
        reply <<= 1;
   b4400:	0064      	lsls	r4, r4, #1
        if (digitalRead(_miso))
   b4402:	b280      	uxth	r0, r0
        reply <<= 1;
   b4404:	b2e4      	uxtb	r4, r4
        if (digitalRead(_miso))
   b4406:	f001 fec7 	bl	b6198 <digitalRead>
   b440a:	b108      	cbz	r0, b4410 <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   b440c:	f044 0401 	orr.w	r4, r4, #1
    for (int i=7; i>=0; i--) {
   b4410:	3e01      	subs	r6, #1
   b4412:	d2df      	bcs.n	b43d4 <_ZN15Adafruit_BME2807spixferEh+0x26>
}
   b4414:	4620      	mov	r0, r4
   b4416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b441c <_ZN15Adafruit_BME2806write8Ehh>:
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   b441c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   b441e:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b4422:	3301      	adds	r3, #1
void Adafruit_BME280::write8(byte reg, byte value) {
   b4424:	4604      	mov	r4, r0
   b4426:	460e      	mov	r6, r1
   b4428:	4615      	mov	r5, r2
    if (_cs == -1) {
   b442a:	d113      	bne.n	b4454 <_ZN15Adafruit_BME2806write8Ehh+0x38>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b442c:	7901      	ldrb	r1, [r0, #4]
   b442e:	6800      	ldr	r0, [r0, #0]
   b4430:	f001 f9fe 	bl	b5830 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b4434:	6820      	ldr	r0, [r4, #0]
   b4436:	6803      	ldr	r3, [r0, #0]
   b4438:	4631      	mov	r1, r6
   b443a:	689b      	ldr	r3, [r3, #8]
   b443c:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   b443e:	6820      	ldr	r0, [r4, #0]
   b4440:	6803      	ldr	r3, [r0, #0]
   b4442:	4629      	mov	r1, r5
   b4444:	689b      	ldr	r3, [r3, #8]
   b4446:	4798      	blx	r3
        _wire -> endTransmission();
   b4448:	6820      	ldr	r0, [r4, #0]
        spixfer(value);
        digitalWrite(_cs, HIGH);
    if (_sck == -1)
        SPI.endTransaction(); // release the SPI bus
    }
}
   b444a:	b004      	add	sp, #16
   b444c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        _wire -> endTransmission();
   b4450:	f001 b9f6 	b.w	b5840 <_ZN7TwoWire15endTransmissionEv>
        if (_sck == -1)
   b4454:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b4458:	3301      	adds	r3, #1
   b445a:	d10c      	bne.n	b4476 <_ZN15Adafruit_BME2806write8Ehh+0x5a>
      dataMode_{dataMode}
   b445c:	4b16      	ldr	r3, [pc, #88]	; (b44b8 <_ZN15Adafruit_BME2806write8Ehh+0x9c>)
   b445e:	9300      	str	r3, [sp, #0]
   b4460:	2300      	movs	r3, #0
   b4462:	f88d 3004 	strb.w	r3, [sp, #4]
   b4466:	4b15      	ldr	r3, [pc, #84]	; (b44bc <_ZN15Adafruit_BME2806write8Ehh+0xa0>)
   b4468:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b446a:	4668      	mov	r0, sp
   b446c:	2301      	movs	r3, #1
   b446e:	f8ad 300c 	strh.w	r3, [sp, #12]
   b4472:	f7ff ff92 	bl	b439a <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b4476:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b447a:	2100      	movs	r1, #0
   b447c:	b280      	uxth	r0, r0
   b447e:	f001 fe72 	bl	b6166 <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   b4482:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   b4486:	4620      	mov	r0, r4
   b4488:	f7ff ff91 	bl	b43ae <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   b448c:	4629      	mov	r1, r5
   b448e:	4620      	mov	r0, r4
   b4490:	f7ff ff8d 	bl	b43ae <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   b4494:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4498:	2101      	movs	r1, #1
   b449a:	b280      	uxth	r0, r0
   b449c:	f001 fe63 	bl	b6166 <digitalWrite>
    if (_sck == -1)
   b44a0:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b44a4:	3301      	adds	r3, #1
   b44a6:	d104      	bne.n	b44b2 <_ZN15Adafruit_BME2806write8Ehh+0x96>
}
   b44a8:	b004      	add	sp, #16
   b44aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        SPI.endTransaction(); // release the SPI bus
   b44ae:	f7ff bf6d 	b.w	b438c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
}
   b44b2:	b004      	add	sp, #16
   b44b4:	bd70      	pop	{r4, r5, r6, pc}
   b44b6:	bf00      	nop
   b44b8:	000b855c 	.word	0x000b855c
   b44bc:	0007a120 	.word	0x0007a120

000b44c0 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
		 standby_duration  duration) {
   b44c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.osrs_t   = tempSampling;
   b44c2:	00db      	lsls	r3, r3, #3
   b44c4:	f002 0207 	and.w	r2, r2, #7
   b44c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
   b44cc:	4313      	orrs	r3, r2
   b44ce:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
		 standby_duration  duration) {
   b44d2:	f89d 6018 	ldrb.w	r6, [sp, #24]
    _measReg.osrs_t   = tempSampling;
   b44d6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    _humReg.osrs_h    = humSampling;
   b44da:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 standby_duration  duration) {
   b44de:	f89d 501c 	ldrb.w	r5, [sp, #28]
   b44e2:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _humReg.osrs_h    = humSampling;
   b44e6:	f366 1347 	bfi	r3, r6, #5, #3
   b44ea:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.t_sb   = duration;
   b44ee:	00ed      	lsls	r5, r5, #3
   b44f0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   b44f4:	f007 0707 	and.w	r7, r7, #7
   b44f8:	f005 0538 	and.w	r5, r5, #56	; 0x38
   b44fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   b4500:	433d      	orrs	r5, r7
		 standby_duration  duration) {
   b4502:	4604      	mov	r4, r0
    _configReg.t_sb   = duration;
   b4504:	431d      	orrs	r5, r3
   b4506:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   b450a:	f006 0207 	and.w	r2, r6, #7
   b450e:	21f2      	movs	r1, #242	; 0xf2
   b4510:	f7ff ff84 	bl	b441c <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   b4514:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   b4518:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   b451c:	f002 0107 	and.w	r1, r2, #7
   b4520:	009b      	lsls	r3, r3, #2
   b4522:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   b4526:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   b452a:	4620      	mov	r0, r4
   b452c:	21f5      	movs	r1, #245	; 0xf5
   b452e:	f7ff ff75 	bl	b441c <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   b4532:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   b4536:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   b453a:	f002 0107 	and.w	r1, r2, #7
   b453e:	009b      	lsls	r3, r3, #2
   b4540:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   b4544:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   b4548:	4620      	mov	r0, r4
   b454a:	21f4      	movs	r1, #244	; 0xf4
}
   b454c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   b4550:	f7ff bf64 	b.w	b441c <_ZN15Adafruit_BME2806write8Ehh>

000b4554 <_ZN15Adafruit_BME2805read8Eh>:
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   b4554:	b530      	push	{r4, r5, lr}
    uint8_t value;
    
    if (_cs == -1) {
   b4556:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b455a:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::read8(byte reg) {
   b455c:	b085      	sub	sp, #20
   b455e:	4604      	mov	r4, r0
   b4560:	460d      	mov	r5, r1
    if (_cs == -1) {
   b4562:	d118      	bne.n	b4596 <_ZN15Adafruit_BME2805read8Eh+0x42>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b4564:	7901      	ldrb	r1, [r0, #4]
   b4566:	6800      	ldr	r0, [r0, #0]
   b4568:	f001 f962 	bl	b5830 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b456c:	6820      	ldr	r0, [r4, #0]
   b456e:	6803      	ldr	r3, [r0, #0]
   b4570:	4629      	mov	r1, r5
   b4572:	689b      	ldr	r3, [r3, #8]
   b4574:	4798      	blx	r3
        _wire -> endTransmission();
   b4576:	6820      	ldr	r0, [r4, #0]
   b4578:	f001 f962 	bl	b5840 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   b457c:	7921      	ldrb	r1, [r4, #4]
   b457e:	6820      	ldr	r0, [r4, #0]
   b4580:	2201      	movs	r2, #1
   b4582:	f001 f952 	bl	b582a <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   b4586:	6820      	ldr	r0, [r4, #0]
   b4588:	6803      	ldr	r3, [r0, #0]
   b458a:	695b      	ldr	r3, [r3, #20]
   b458c:	4798      	blx	r3
   b458e:	b2c5      	uxtb	r5, r0
        digitalWrite(_cs, HIGH);
        if (_sck == -1)
            SPI.endTransaction(); // release the SPI bus
    }
    return value;
}
   b4590:	4628      	mov	r0, r5
   b4592:	b005      	add	sp, #20
   b4594:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b4596:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b459a:	3301      	adds	r3, #1
   b459c:	d10c      	bne.n	b45b8 <_ZN15Adafruit_BME2805read8Eh+0x64>
   b459e:	4b15      	ldr	r3, [pc, #84]	; (b45f4 <_ZN15Adafruit_BME2805read8Eh+0xa0>)
   b45a0:	9300      	str	r3, [sp, #0]
   b45a2:	2300      	movs	r3, #0
   b45a4:	f88d 3004 	strb.w	r3, [sp, #4]
   b45a8:	4b13      	ldr	r3, [pc, #76]	; (b45f8 <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   b45aa:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b45ac:	4668      	mov	r0, sp
   b45ae:	2301      	movs	r3, #1
   b45b0:	f8ad 300c 	strh.w	r3, [sp, #12]
   b45b4:	f7ff fef1 	bl	b439a <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b45b8:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b45bc:	2100      	movs	r1, #0
   b45be:	b280      	uxth	r0, r0
   b45c0:	f001 fdd1 	bl	b6166 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b45c4:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b45c8:	4620      	mov	r0, r4
   b45ca:	f7ff fef0 	bl	b43ae <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   b45ce:	2100      	movs	r1, #0
   b45d0:	4620      	mov	r0, r4
   b45d2:	f7ff feec 	bl	b43ae <_ZN15Adafruit_BME2807spixferEh>
   b45d6:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   b45d8:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b45dc:	2101      	movs	r1, #1
   b45de:	b280      	uxth	r0, r0
   b45e0:	f001 fdc1 	bl	b6166 <digitalWrite>
        if (_sck == -1)
   b45e4:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b45e8:	3301      	adds	r3, #1
   b45ea:	d1d1      	bne.n	b4590 <_ZN15Adafruit_BME2805read8Eh+0x3c>
            SPI.endTransaction(); // release the SPI bus
   b45ec:	f7ff fece 	bl	b438c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   b45f0:	e7ce      	b.n	b4590 <_ZN15Adafruit_BME2805read8Eh+0x3c>
   b45f2:	bf00      	nop
   b45f4:	000b855c 	.word	0x000b855c
   b45f8:	0007a120 	.word	0x0007a120

000b45fc <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
    @brief return true if chip is busy reading cal data
    @returns true if reading calibration, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::isReadingCalibration(void)
{
   b45fc:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   b45fe:	21f3      	movs	r1, #243	; 0xf3
   b4600:	f7ff ffa8 	bl	b4554 <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
   b4604:	f000 0001 	and.w	r0, r0, #1
   b4608:	bd08      	pop	{r3, pc}
	...

000b460c <_ZN15Adafruit_BME2806read16Eh>:
{
   b460c:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   b460e:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b4612:	3301      	adds	r3, #1
{
   b4614:	b085      	sub	sp, #20
   b4616:	4604      	mov	r4, r0
   b4618:	460d      	mov	r5, r1
    if (_cs == -1) {
   b461a:	d11f      	bne.n	b465c <_ZN15Adafruit_BME2806read16Eh+0x50>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b461c:	7901      	ldrb	r1, [r0, #4]
   b461e:	6800      	ldr	r0, [r0, #0]
   b4620:	f001 f906 	bl	b5830 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b4624:	6820      	ldr	r0, [r4, #0]
   b4626:	6803      	ldr	r3, [r0, #0]
   b4628:	4629      	mov	r1, r5
   b462a:	689b      	ldr	r3, [r3, #8]
   b462c:	4798      	blx	r3
        _wire -> endTransmission();
   b462e:	6820      	ldr	r0, [r4, #0]
   b4630:	f001 f906 	bl	b5840 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   b4634:	7921      	ldrb	r1, [r4, #4]
   b4636:	6820      	ldr	r0, [r4, #0]
   b4638:	2202      	movs	r2, #2
   b463a:	f001 f8f6 	bl	b582a <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   b463e:	6820      	ldr	r0, [r4, #0]
   b4640:	6803      	ldr	r3, [r0, #0]
   b4642:	695b      	ldr	r3, [r3, #20]
   b4644:	4798      	blx	r3
   b4646:	4605      	mov	r5, r0
   b4648:	6820      	ldr	r0, [r4, #0]
   b464a:	6803      	ldr	r3, [r0, #0]
   b464c:	695b      	ldr	r3, [r3, #20]
   b464e:	4798      	blx	r3
   b4650:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   b4654:	b285      	uxth	r5, r0
}
   b4656:	4628      	mov	r0, r5
   b4658:	b005      	add	sp, #20
   b465a:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b465c:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b4660:	3301      	adds	r3, #1
   b4662:	d10c      	bne.n	b467e <_ZN15Adafruit_BME2806read16Eh+0x72>
   b4664:	4b18      	ldr	r3, [pc, #96]	; (b46c8 <_ZN15Adafruit_BME2806read16Eh+0xbc>)
   b4666:	9300      	str	r3, [sp, #0]
   b4668:	2300      	movs	r3, #0
   b466a:	f88d 3004 	strb.w	r3, [sp, #4]
   b466e:	4b17      	ldr	r3, [pc, #92]	; (b46cc <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   b4670:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b4672:	4668      	mov	r0, sp
   b4674:	2301      	movs	r3, #1
   b4676:	f8ad 300c 	strh.w	r3, [sp, #12]
   b467a:	f7ff fe8e 	bl	b439a <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b467e:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4682:	2100      	movs	r1, #0
   b4684:	b280      	uxth	r0, r0
   b4686:	f001 fd6e 	bl	b6166 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b468a:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b468e:	4620      	mov	r0, r4
   b4690:	f7ff fe8d 	bl	b43ae <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   b4694:	2100      	movs	r1, #0
   b4696:	4620      	mov	r0, r4
   b4698:	f7ff fe89 	bl	b43ae <_ZN15Adafruit_BME2807spixferEh>
   b469c:	2100      	movs	r1, #0
   b469e:	4605      	mov	r5, r0
   b46a0:	4620      	mov	r0, r4
   b46a2:	f7ff fe84 	bl	b43ae <_ZN15Adafruit_BME2807spixferEh>
   b46a6:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   b46aa:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   b46ac:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b46b0:	2101      	movs	r1, #1
   b46b2:	b280      	uxth	r0, r0
   b46b4:	f001 fd57 	bl	b6166 <digitalWrite>
        if (_sck == -1)
   b46b8:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b46bc:	3301      	adds	r3, #1
   b46be:	d1ca      	bne.n	b4656 <_ZN15Adafruit_BME2806read16Eh+0x4a>
            SPI.endTransaction(); // release the SPI bus
   b46c0:	f7ff fe64 	bl	b438c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   b46c4:	e7c7      	b.n	b4656 <_ZN15Adafruit_BME2806read16Eh+0x4a>
   b46c6:	bf00      	nop
   b46c8:	000b855c 	.word	0x000b855c
   b46cc:	0007a120 	.word	0x0007a120

000b46d0 <_ZN15Adafruit_BME2809read16_LEEh>:
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   b46d0:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   b46d2:	f7ff ff9b 	bl	b460c <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   b46d6:	ba40      	rev16	r0, r0
}
   b46d8:	b280      	uxth	r0, r0
   b46da:	bd08      	pop	{r3, pc}

000b46dc <_ZN15Adafruit_BME28016readCoefficientsEv>:
{
   b46dc:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b46de:	2188      	movs	r1, #136	; 0x88
{
   b46e0:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b46e2:	f7ff fff5 	bl	b46d0 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   b46e6:	218a      	movs	r1, #138	; 0x8a
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b46e8:	82a0      	strh	r0, [r4, #20]
    return (int16_t)read16_LE(reg);
   b46ea:	4620      	mov	r0, r4
   b46ec:	f7ff fff0 	bl	b46d0 <_ZN15Adafruit_BME2809read16_LEEh>
   b46f0:	218c      	movs	r1, #140	; 0x8c
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   b46f2:	82e0      	strh	r0, [r4, #22]
    return (int16_t)read16_LE(reg);
   b46f4:	4620      	mov	r0, r4
   b46f6:	f7ff ffeb 	bl	b46d0 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b46fa:	218e      	movs	r1, #142	; 0x8e
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   b46fc:	8320      	strh	r0, [r4, #24]
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b46fe:	4620      	mov	r0, r4
   b4700:	f7ff ffe6 	bl	b46d0 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   b4704:	2190      	movs	r1, #144	; 0x90
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b4706:	8360      	strh	r0, [r4, #26]
    return (int16_t)read16_LE(reg);
   b4708:	4620      	mov	r0, r4
   b470a:	f7ff ffe1 	bl	b46d0 <_ZN15Adafruit_BME2809read16_LEEh>
   b470e:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   b4710:	83a0      	strh	r0, [r4, #28]
    return (int16_t)read16_LE(reg);
   b4712:	4620      	mov	r0, r4
   b4714:	f7ff ffdc 	bl	b46d0 <_ZN15Adafruit_BME2809read16_LEEh>
   b4718:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   b471a:	83e0      	strh	r0, [r4, #30]
    return (int16_t)read16_LE(reg);
   b471c:	4620      	mov	r0, r4
   b471e:	f7ff ffd7 	bl	b46d0 <_ZN15Adafruit_BME2809read16_LEEh>
   b4722:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   b4724:	8420      	strh	r0, [r4, #32]
    return (int16_t)read16_LE(reg);
   b4726:	4620      	mov	r0, r4
   b4728:	f7ff ffd2 	bl	b46d0 <_ZN15Adafruit_BME2809read16_LEEh>
   b472c:	2198      	movs	r1, #152	; 0x98
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   b472e:	8460      	strh	r0, [r4, #34]	; 0x22
    return (int16_t)read16_LE(reg);
   b4730:	4620      	mov	r0, r4
   b4732:	f7ff ffcd 	bl	b46d0 <_ZN15Adafruit_BME2809read16_LEEh>
   b4736:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   b4738:	84a0      	strh	r0, [r4, #36]	; 0x24
    return (int16_t)read16_LE(reg);
   b473a:	4620      	mov	r0, r4
   b473c:	f7ff ffc8 	bl	b46d0 <_ZN15Adafruit_BME2809read16_LEEh>
   b4740:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   b4742:	84e0      	strh	r0, [r4, #38]	; 0x26
    return (int16_t)read16_LE(reg);
   b4744:	4620      	mov	r0, r4
   b4746:	f7ff ffc3 	bl	b46d0 <_ZN15Adafruit_BME2809read16_LEEh>
   b474a:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   b474c:	8520      	strh	r0, [r4, #40]	; 0x28
    return (int16_t)read16_LE(reg);
   b474e:	4620      	mov	r0, r4
   b4750:	f7ff ffbe 	bl	b46d0 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b4754:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   b4756:	8560      	strh	r0, [r4, #42]	; 0x2a
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b4758:	4620      	mov	r0, r4
   b475a:	f7ff fefb 	bl	b4554 <_ZN15Adafruit_BME2805read8Eh>
    return (int16_t)read16_LE(reg);
   b475e:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b4760:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    return (int16_t)read16_LE(reg);
   b4764:	4620      	mov	r0, r4
   b4766:	f7ff ffb3 	bl	b46d0 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b476a:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   b476c:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b476e:	4620      	mov	r0, r4
   b4770:	f7ff fef0 	bl	b4554 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   b4774:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b4776:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   b477a:	4620      	mov	r0, r4
   b477c:	f7ff feea 	bl	b4554 <_ZN15Adafruit_BME2805read8Eh>
   b4780:	21e5      	movs	r1, #229	; 0xe5
   b4782:	4605      	mov	r5, r0
   b4784:	4620      	mov	r0, r4
   b4786:	f7ff fee5 	bl	b4554 <_ZN15Adafruit_BME2805read8Eh>
   b478a:	f000 030f 	and.w	r3, r0, #15
   b478e:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   b4792:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   b4794:	21e6      	movs	r1, #230	; 0xe6
   b4796:	4620      	mov	r0, r4
   b4798:	f7ff fedc 	bl	b4554 <_ZN15Adafruit_BME2805read8Eh>
   b479c:	21e5      	movs	r1, #229	; 0xe5
   b479e:	4605      	mov	r5, r0
   b47a0:	4620      	mov	r0, r4
   b47a2:	f7ff fed7 	bl	b4554 <_ZN15Adafruit_BME2805read8Eh>
   b47a6:	f3c0 1307 	ubfx	r3, r0, #4, #8
   b47aa:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   b47ae:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   b47b0:	21e7      	movs	r1, #231	; 0xe7
   b47b2:	4620      	mov	r0, r4
   b47b4:	f7ff fece 	bl	b4554 <_ZN15Adafruit_BME2805read8Eh>
   b47b8:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
}
   b47bc:	bd38      	pop	{r3, r4, r5, pc}
	...

000b47c0 <_ZN15Adafruit_BME2806read24Eh>:
{
   b47c0:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   b47c2:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b47c6:	3301      	adds	r3, #1
{
   b47c8:	b085      	sub	sp, #20
   b47ca:	4604      	mov	r4, r0
   b47cc:	460d      	mov	r5, r1
    if (_cs == -1) {
   b47ce:	d123      	bne.n	b4818 <_ZN15Adafruit_BME2806read24Eh+0x58>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b47d0:	7901      	ldrb	r1, [r0, #4]
   b47d2:	6800      	ldr	r0, [r0, #0]
   b47d4:	f001 f82c 	bl	b5830 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b47d8:	6820      	ldr	r0, [r4, #0]
   b47da:	6803      	ldr	r3, [r0, #0]
   b47dc:	4629      	mov	r1, r5
   b47de:	689b      	ldr	r3, [r3, #8]
   b47e0:	4798      	blx	r3
        _wire -> endTransmission();
   b47e2:	6820      	ldr	r0, [r4, #0]
   b47e4:	f001 f82c 	bl	b5840 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
   b47e8:	7921      	ldrb	r1, [r4, #4]
   b47ea:	6820      	ldr	r0, [r4, #0]
   b47ec:	2203      	movs	r2, #3
   b47ee:	f001 f81c 	bl	b582a <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   b47f2:	6820      	ldr	r0, [r4, #0]
   b47f4:	6803      	ldr	r3, [r0, #0]
   b47f6:	695b      	ldr	r3, [r3, #20]
   b47f8:	4798      	blx	r3
        value <<= 8;
   b47fa:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   b47fc:	6820      	ldr	r0, [r4, #0]
   b47fe:	6803      	ldr	r3, [r0, #0]
   b4800:	695b      	ldr	r3, [r3, #20]
   b4802:	4798      	blx	r3
   b4804:	4328      	orrs	r0, r5
        value <<= 8;
   b4806:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   b4808:	6820      	ldr	r0, [r4, #0]
   b480a:	6803      	ldr	r3, [r0, #0]
   b480c:	695b      	ldr	r3, [r3, #20]
   b480e:	4798      	blx	r3
   b4810:	4305      	orrs	r5, r0
}
   b4812:	4628      	mov	r0, r5
   b4814:	b005      	add	sp, #20
   b4816:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b4818:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b481c:	3301      	adds	r3, #1
   b481e:	d10c      	bne.n	b483a <_ZN15Adafruit_BME2806read24Eh+0x7a>
   b4820:	4b1a      	ldr	r3, [pc, #104]	; (b488c <_ZN15Adafruit_BME2806read24Eh+0xcc>)
   b4822:	9300      	str	r3, [sp, #0]
   b4824:	2300      	movs	r3, #0
   b4826:	f88d 3004 	strb.w	r3, [sp, #4]
   b482a:	4b19      	ldr	r3, [pc, #100]	; (b4890 <_ZN15Adafruit_BME2806read24Eh+0xd0>)
   b482c:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b482e:	4668      	mov	r0, sp
   b4830:	2301      	movs	r3, #1
   b4832:	f8ad 300c 	strh.w	r3, [sp, #12]
   b4836:	f7ff fdb0 	bl	b439a <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b483a:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b483e:	2100      	movs	r1, #0
   b4840:	b280      	uxth	r0, r0
   b4842:	f001 fc90 	bl	b6166 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b4846:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b484a:	4620      	mov	r0, r4
   b484c:	f7ff fdaf 	bl	b43ae <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   b4850:	2100      	movs	r1, #0
   b4852:	4620      	mov	r0, r4
   b4854:	f7ff fdab 	bl	b43ae <_ZN15Adafruit_BME2807spixferEh>
        value |= spixfer(0);
   b4858:	2100      	movs	r1, #0
        value <<= 8;
   b485a:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   b485c:	4620      	mov	r0, r4
   b485e:	f7ff fda6 	bl	b43ae <_ZN15Adafruit_BME2807spixferEh>
   b4862:	4328      	orrs	r0, r5
        value <<= 8;
   b4864:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   b4866:	2100      	movs	r1, #0
   b4868:	4620      	mov	r0, r4
   b486a:	f7ff fda0 	bl	b43ae <_ZN15Adafruit_BME2807spixferEh>
   b486e:	4305      	orrs	r5, r0
        digitalWrite(_cs, HIGH);
   b4870:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4874:	2101      	movs	r1, #1
   b4876:	b280      	uxth	r0, r0
   b4878:	f001 fc75 	bl	b6166 <digitalWrite>
        if (_sck == -1)
   b487c:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b4880:	3301      	adds	r3, #1
   b4882:	d1c6      	bne.n	b4812 <_ZN15Adafruit_BME2806read24Eh+0x52>
            SPI.endTransaction(); // release the SPI bus
   b4884:	f7ff fd82 	bl	b438c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
    return value;
   b4888:	e7c3      	b.n	b4812 <_ZN15Adafruit_BME2806read24Eh+0x52>
   b488a:	bf00      	nop
   b488c:	000b855c 	.word	0x000b855c
   b4890:	0007a120 	.word	0x0007a120

000b4894 <_ZN15Adafruit_BME28015readTemperatureEv>:
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   b4894:	b510      	push	{r4, lr}
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   b4896:	21fa      	movs	r1, #250	; 0xfa
{
   b4898:	4604      	mov	r4, r0
    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   b489a:	f7ff ff91 	bl	b47c0 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
   b489e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b48a2:	d01f      	beq.n	b48e4 <_ZN15Adafruit_BME28015readTemperatureEv+0x50>
        return NAN;
    adc_T >>= 4;

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b48a4:	8aa1      	ldrh	r1, [r4, #20]
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   b48a6:	ed9f 7a11 	vldr	s14, [pc, #68]	; b48ec <_ZN15Adafruit_BME28015readTemperatureEv+0x58>
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b48aa:	004b      	lsls	r3, r1, #1
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b48ac:	ebc1 2220 	rsb	r2, r1, r0, asr #8
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b48b0:	ebc3 11e0 	rsb	r1, r3, r0, asr #7
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
   b48b4:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b48b8:	4359      	muls	r1, r3
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b48ba:	fb02 f302 	mul.w	r3, r2, r2
            ((int32_t)_bme280_calib.dig_T3)) >> 14;
   b48be:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
   b48c2:	131b      	asrs	r3, r3, #12
   b48c4:	4353      	muls	r3, r2
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b48c6:	139b      	asrs	r3, r3, #14
    t_fine = var1 + var2;
   b48c8:	eb03 23e1 	add.w	r3, r3, r1, asr #11
   b48cc:	60e3      	str	r3, [r4, #12]
    float T = (t_fine * 5 + 128) >> 8;
   b48ce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b48d2:	3380      	adds	r3, #128	; 0x80
   b48d4:	121b      	asrs	r3, r3, #8
   b48d6:	ee07 3a90 	vmov	s15, r3
   b48da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    return T/100;
   b48de:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   b48e2:	bd10      	pop	{r4, pc}
        return NAN;
   b48e4:	ed9f 0a02 	vldr	s0, [pc, #8]	; b48f0 <_ZN15Adafruit_BME28015readTemperatureEv+0x5c>
   b48e8:	e7fb      	b.n	b48e2 <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
   b48ea:	bf00      	nop
   b48ec:	42c80000 	.word	0x42c80000
   b48f0:	7fc00000 	.word	0x7fc00000

000b48f4 <_ZN15Adafruit_BME28012readHumidityEv>:
/*!
    @brief  Returns the humidity from the sensor
    @returns the humidity value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readHumidity(void) {
   b48f4:	b538      	push	{r3, r4, r5, lr}
   b48f6:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   b48f8:	f7ff ffcc 	bl	b4894 <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
   b48fc:	21fd      	movs	r1, #253	; 0xfd
   b48fe:	4620      	mov	r0, r4
   b4900:	f7ff fe84 	bl	b460c <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
   b4904:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   b4908:	d038      	beq.n	b497c <_ZN15Adafruit_BME28012readHumidityEv+0x88>
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
   b490a:	68e1      	ldr	r1, [r4, #12]

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   b490c:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
    v_x1_u32r = (t_fine - ((int32_t)76800));
   b4910:	f5a1 3596 	sub.w	r5, r1, #76800	; 0x12c00
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   b4914:	f9b4 1032 	ldrsh.w	r1, [r4, #50]	; 0x32
   b4918:	0509      	lsls	r1, r1, #20
   b491a:	ebc1 3380 	rsb	r3, r1, r0, lsl #14
   b491e:	fb05 3312 	mls	r3, r5, r2, r3
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   b4922:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   b4926:	13da      	asrs	r2, r3, #15
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4928:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b492c:	f994 1036 	ldrsb.w	r1, [r4, #54]	; 0x36
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4930:	436b      	muls	r3, r5
   b4932:	12db      	asrs	r3, r3, #11
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b4934:	4369      	muls	r1, r5
   b4936:	1289      	asrs	r1, r1, #10
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4938:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b493c:	434b      	muls	r3, r1
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b493e:	129b      	asrs	r3, r3, #10
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   b4940:	f9b4 102e 	ldrsh.w	r1, [r4, #46]	; 0x2e
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4944:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   b4948:	434b      	muls	r3, r1
   b494a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   b494e:	139b      	asrs	r3, r3, #14
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   b4950:	4353      	muls	r3, r2

    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   b4952:	13da      	asrs	r2, r3, #15
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
   b4954:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   b4958:	4352      	muls	r2, r2
   b495a:	11d2      	asrs	r2, r2, #7
   b495c:	434a      	muls	r2, r1
   b495e:	eba3 1322 	sub.w	r3, r3, r2, asr #4

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
   b4962:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
   b4966:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   b496a:	bfa8      	it	ge
   b496c:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
    float h = (v_x1_u32r>>12);
   b4970:	131b      	asrs	r3, r3, #12
   b4972:	ee00 3a10 	vmov	s0, r3
    return  h / 1024.0;
   b4976:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
}
   b497a:	bd38      	pop	{r3, r4, r5, pc}
        return NAN;
   b497c:	ed9f 0a01 	vldr	s0, [pc, #4]	; b4984 <_ZN15Adafruit_BME28012readHumidityEv+0x90>
   b4980:	e7fb      	b.n	b497a <_ZN15Adafruit_BME28012readHumidityEv+0x86>
   b4982:	bf00      	nop
   b4984:	7fc00000 	.word	0x7fc00000

000b4988 <_ZN15Adafruit_BME28012readPressureEv>:
float Adafruit_BME280::readPressure(void) {
   b4988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b498c:	4605      	mov	r5, r0
    readTemperature(); // must be done first to get t_fine
   b498e:	f7ff ff81 	bl	b4894 <_ZN15Adafruit_BME28015readTemperatureEv>
    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   b4992:	21f7      	movs	r1, #247	; 0xf7
   b4994:	4628      	mov	r0, r5
   b4996:	f7ff ff13 	bl	b47c0 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   b499a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b499e:	f000 80b6 	beq.w	b4b0e <_ZN15Adafruit_BME28012readPressureEv+0x186>
    var1 = ((int64_t)t_fine) - 128000;
   b49a2:	68e9      	ldr	r1, [r5, #12]
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b49a4:	f9b5 301c 	ldrsh.w	r3, [r5, #28]
    var1 = ((int64_t)t_fine) - 128000;
   b49a8:	ea4f 7ee1 	mov.w	lr, r1, asr #31
   b49ac:	f5b1 31fa 	subs.w	r1, r1, #128000	; 0x1f400
   b49b0:	f14e 3eff 	adc.w	lr, lr, #4294967295	; 0xffffffff
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b49b4:	17dc      	asrs	r4, r3, #31
   b49b6:	fb03 f20e 	mul.w	r2, r3, lr
   b49ba:	fb01 2204 	mla	r2, r1, r4, r2
   b49be:	fba3 3401 	umull	r3, r4, r3, r1
   b49c2:	4422      	add	r2, r4
   b49c4:	0312      	lsls	r2, r2, #12
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b49c6:	fba1 7801 	umull	r7, r8, r1, r1
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b49ca:	031c      	lsls	r4, r3, #12
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b49cc:	fb01 f60e 	mul.w	r6, r1, lr
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b49d0:	ea42 5213 	orr.w	r2, r2, r3, lsr #20
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   b49d4:	f9b5 301e 	ldrsh.w	r3, [r5, #30]
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b49d8:	eb08 0846 	add.w	r8, r8, r6, lsl #1
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   b49dc:	ea4f 7ce3 	mov.w	ip, r3, asr #31
   b49e0:	fb03 f608 	mul.w	r6, r3, r8
   b49e4:	fb07 660c 	mla	r6, r7, ip, r6
   b49e8:	fba3 3c07 	umull	r3, ip, r3, r7
   b49ec:	4466      	add	r6, ip
   b49ee:	0a1b      	lsrs	r3, r3, #8
   b49f0:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
   b49f4:	191b      	adds	r3, r3, r4
   b49f6:	eb42 2226 	adc.w	r2, r2, r6, asr #8
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   b49fa:	8b6e      	ldrh	r6, [r5, #26]
   b49fc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
   b4a00:	fba3 3406 	umull	r3, r4, r3, r6
   b4a04:	fb06 4402 	mla	r4, r6, r2, r4
   b4a08:	17e3      	asrs	r3, r4, #31
   b4a0a:	1062      	asrs	r2, r4, #1
    if (var1 == 0) {
   b4a0c:	ea53 0464 	orrs.w	r4, r3, r4, asr #1
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   b4a10:	f04f 0c00 	mov.w	ip, #0
    if (var1 == 0) {
   b4a14:	d07e      	beq.n	b4b14 <_ZN15Adafruit_BME28012readPressureEv+0x18c>
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b4a16:	f9b5 4024 	ldrsh.w	r4, [r5, #36]	; 0x24
   b4a1a:	fb04 f608 	mul.w	r6, r4, r8
   b4a1e:	ea4f 79e4 	mov.w	r9, r4, asr #31
   b4a22:	fb07 6609 	mla	r6, r7, r9, r6
   b4a26:	fba4 4707 	umull	r4, r7, r4, r7
   b4a2a:	443e      	add	r6, r7
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   b4a2c:	f9b5 7022 	ldrsh.w	r7, [r5, #34]	; 0x22
   b4a30:	ea4f 78e7 	mov.w	r8, r7, asr #31
   b4a34:	fb07 fe0e 	mul.w	lr, r7, lr
   b4a38:	fb01 ee08 	mla	lr, r1, r8, lr
   b4a3c:	fba7 7101 	umull	r7, r1, r7, r1
   b4a40:	4471      	add	r1, lr
   b4a42:	0449      	lsls	r1, r1, #17
   b4a44:	ea41 31d7 	orr.w	r1, r1, r7, lsr #15
    adc_P >>= 4;
   b4a48:	1100      	asrs	r0, r0, #4
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   b4a4a:	047f      	lsls	r7, r7, #17
   b4a4c:	193f      	adds	r7, r7, r4
    p = 1048576 - adc_P;
   b4a4e:	f5c0 1480 	rsb	r4, r0, #1048576	; 0x100000
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   b4a52:	eb46 0601 	adc.w	r6, r6, r1
    p = (((p<<31) - var2)*3125) / var1;
   b4a56:	f004 4000 	and.w	r0, r4, #2147483648	; 0x80000000
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   b4a5a:	f9b5 1020 	ldrsh.w	r1, [r5, #32]
   b4a5e:	eb1c 0707 	adds.w	r7, ip, r7
    p = (((p<<31) - var2)*3125) / var1;
   b4a62:	ea40 0054 	orr.w	r0, r0, r4, lsr #1
   b4a66:	07e4      	lsls	r4, r4, #31
   b4a68:	1be4      	subs	r4, r4, r7
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   b4a6a:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
    p = (((p<<31) - var2)*3125) / var1;
   b4a6e:	f640 4135 	movw	r1, #3125	; 0xc35
   b4a72:	eb60 0606 	sbc.w	r6, r0, r6
   b4a76:	fba4 0401 	umull	r0, r4, r4, r1
   b4a7a:	fb01 4106 	mla	r1, r1, r6, r4
   b4a7e:	f003 fa73 	bl	b7f68 <__aeabi_ldivmod>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   b4a82:	f9b5 202a 	ldrsh.w	r2, [r5, #42]	; 0x2a
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b4a86:	f9b5 6028 	ldrsh.w	r6, [r5, #40]	; 0x28
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   b4a8a:	ea4f 3c61 	mov.w	ip, r1, asr #13
   b4a8e:	0b43      	lsrs	r3, r0, #13
   b4a90:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
   b4a94:	fb02 f70c 	mul.w	r7, r2, ip
   b4a98:	17d4      	asrs	r4, r2, #31
   b4a9a:	fb03 7704 	mla	r7, r3, r4, r7
   b4a9e:	fba2 2403 	umull	r2, r4, r2, r3
   b4aa2:	443c      	add	r4, r7
   b4aa4:	fb02 f70c 	mul.w	r7, r2, ip
   b4aa8:	fb03 7704 	mla	r7, r3, r4, r7
   b4aac:	fba2 2303 	umull	r2, r3, r2, r3
   b4ab0:	441f      	add	r7, r3
   b4ab2:	0e53      	lsrs	r3, r2, #25
   b4ab4:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b4ab8:	181b      	adds	r3, r3, r0
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b4aba:	ea4f 72e6 	mov.w	r2, r6, asr #31
   b4abe:	fb06 f401 	mul.w	r4, r6, r1
    p = (((p<<31) - var2)*3125) / var1;
   b4ac2:	4686      	mov	lr, r0
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b4ac4:	eb41 6767 	adc.w	r7, r1, r7, asr #25
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b4ac8:	fb02 4100 	mla	r1, r2, r0, r4
   b4acc:	fba6 060e 	umull	r0, r6, r6, lr
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b4ad0:	f9b5 4026 	ldrsh.w	r4, [r5, #38]	; 0x26
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b4ad4:	4431      	add	r1, r6
   b4ad6:	0cc0      	lsrs	r0, r0, #19
   b4ad8:	ea40 3041 	orr.w	r0, r0, r1, lsl #13
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b4adc:	1818      	adds	r0, r3, r0
   b4ade:	ea4f 75e4 	mov.w	r5, r4, asr #31
   b4ae2:	eb47 41e1 	adc.w	r1, r7, r1, asr #19
   b4ae6:	0a00      	lsrs	r0, r0, #8
   b4ae8:	012d      	lsls	r5, r5, #4
   b4aea:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
   b4aee:	ea45 7514 	orr.w	r5, r5, r4, lsr #28
   b4af2:	0124      	lsls	r4, r4, #4
   b4af4:	1820      	adds	r0, r4, r0
    return (float)p/256;
   b4af6:	eb45 2121 	adc.w	r1, r5, r1, asr #8
   b4afa:	f003 f9f7 	bl	b7eec <__aeabi_l2f>
   b4afe:	ed9f 0a07 	vldr	s0, [pc, #28]	; b4b1c <_ZN15Adafruit_BME28012readPressureEv+0x194>
   b4b02:	ee07 0a90 	vmov	s15, r0
   b4b06:	ee27 0a80 	vmul.f32	s0, s15, s0
}
   b4b0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return NAN;
   b4b0e:	ed9f 0a04 	vldr	s0, [pc, #16]	; b4b20 <_ZN15Adafruit_BME28012readPressureEv+0x198>
   b4b12:	e7fa      	b.n	b4b0a <_ZN15Adafruit_BME28012readPressureEv+0x182>
        return 0; // avoid exception caused by division by zero
   b4b14:	ed9f 0a03 	vldr	s0, [pc, #12]	; b4b24 <_ZN15Adafruit_BME28012readPressureEv+0x19c>
   b4b18:	e7f7      	b.n	b4b0a <_ZN15Adafruit_BME28012readPressureEv+0x182>
   b4b1a:	bf00      	nop
   b4b1c:	3b800000 	.word	0x3b800000
   b4b20:	7fc00000 	.word	0x7fc00000
   b4b24:	00000000 	.word	0x00000000

000b4b28 <_ZN15Adafruit_BME28012readAltitudeEf>:
    @param  seaLevel      Sea-level pressure in hPa
    @returns the altitude value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readAltitude(float seaLevel)
{
   b4b28:	b508      	push	{r3, lr}
   b4b2a:	ed2d 8b02 	vpush	{d8}
   b4b2e:	eeb0 8a40 	vmov.f32	s16, s0

    // Note that using the equation from wikipedia can give bad results
    // at high altitude. See this thread for more information:
    //  http://forums.adafruit.com/viewtopic.php?f=22&t=58064

    float atmospheric = readPressure() / 100.0F;
   b4b32:	f7ff ff29 	bl	b4988 <_ZN15Adafruit_BME28012readPressureEv>
   b4b36:	ed9f 7a16 	vldr	s14, [pc, #88]	; b4b90 <_ZN15Adafruit_BME28012readAltitudeEf+0x68>
   b4b3a:	eec0 7a07 	vdiv.f32	s15, s0, s14
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   b4b3e:	eec7 7a88 	vdiv.f32	s15, s15, s16
   b4b42:	ee17 0a90 	vmov	r0, s15
   b4b46:	f002 fda9 	bl	b769c <__aeabi_f2d>
   b4b4a:	ed9f 1b0d 	vldr	d1, [pc, #52]	; b4b80 <_ZN15Adafruit_BME28012readAltitudeEf+0x58>
   b4b4e:	ec41 0b10 	vmov	d0, r0, r1
   b4b52:	f001 fbb9 	bl	b62c8 <pow>
    return 44330.0 * (1.0 - pow(atmospheric / seaLevel, 0.1903));
   b4b56:	490f      	ldr	r1, [pc, #60]	; (b4b94 <_ZN15Adafruit_BME28012readAltitudeEf+0x6c>)
   b4b58:	ec53 2b10 	vmov	r2, r3, d0
   b4b5c:	2000      	movs	r0, #0
   b4b5e:	f002 fc3d 	bl	b73dc <__aeabi_dsub>
   b4b62:	a309      	add	r3, pc, #36	; (adr r3, b4b88 <_ZN15Adafruit_BME28012readAltitudeEf+0x60>)
   b4b64:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4b68:	f002 fdf0 	bl	b774c <__aeabi_dmul>
   b4b6c:	f003 f89e 	bl	b7cac <__aeabi_d2f>
}
   b4b70:	ecbd 8b02 	vpop	{d8}
   b4b74:	ee00 0a10 	vmov	s0, r0
   b4b78:	bd08      	pop	{r3, pc}
   b4b7a:	bf00      	nop
   b4b7c:	f3af 8000 	nop.w
   b4b80:	1a36e2eb 	.word	0x1a36e2eb
   b4b84:	3fc85bc0 	.word	0x3fc85bc0
   b4b88:	00000000 	.word	0x00000000
   b4b8c:	40e5a540 	.word	0x40e5a540
   b4b90:	42c80000 	.word	0x42c80000
   b4b94:	3ff00000 	.word	0x3ff00000

000b4b98 <_ZN15Adafruit_BME2804initEv>:
{
   b4b98:	b530      	push	{r4, r5, lr}
   b4b9a:	4604      	mov	r4, r0
    if (_cs == -1) {
   b4b9c:	f990 0010 	ldrsb.w	r0, [r0, #16]
   b4ba0:	1c42      	adds	r2, r0, #1
{
   b4ba2:	b085      	sub	sp, #20
    if (_cs == -1) {
   b4ba4:	d119      	bne.n	b4bda <_ZN15Adafruit_BME2804initEv+0x42>
        _wire -> begin();
   b4ba6:	6820      	ldr	r0, [r4, #0]
   b4ba8:	f000 fe10 	bl	b57cc <_ZN7TwoWire5beginEv>
    _sensorID = read8(BME280_REGISTER_CHIPID);
   b4bac:	21d0      	movs	r1, #208	; 0xd0
   b4bae:	4620      	mov	r0, r4
   b4bb0:	f7ff fcd0 	bl	b4554 <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   b4bb4:	2860      	cmp	r0, #96	; 0x60
    _sensorID = read8(BME280_REGISTER_CHIPID);
   b4bb6:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   b4bb8:	d145      	bne.n	b4c46 <_ZN15Adafruit_BME2804initEv+0xae>
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   b4bba:	4620      	mov	r0, r4
   b4bbc:	22b6      	movs	r2, #182	; 0xb6
   b4bbe:	21e0      	movs	r1, #224	; 0xe0
   b4bc0:	f7ff fc2c 	bl	b441c <_ZN15Adafruit_BME2806write8Ehh>
    delay(300);
   b4bc4:	f44f 7096 	mov.w	r0, #300	; 0x12c
   b4bc8:	f000 faa6 	bl	b5118 <delay>
    while (isReadingCalibration())
   b4bcc:	4620      	mov	r0, r4
   b4bce:	f7ff fd15 	bl	b45fc <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   b4bd2:	4605      	mov	r5, r0
   b4bd4:	b328      	cbz	r0, b4c22 <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   b4bd6:	2064      	movs	r0, #100	; 0x64
   b4bd8:	e7f6      	b.n	b4bc8 <_ZN15Adafruit_BME2804initEv+0x30>
        digitalWrite(_cs, HIGH);
   b4bda:	2101      	movs	r1, #1
   b4bdc:	b280      	uxth	r0, r0
   b4bde:	f001 fac2 	bl	b6166 <digitalWrite>
        pinMode(_cs, OUTPUT);
   b4be2:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4be6:	2101      	movs	r1, #1
   b4be8:	b280      	uxth	r0, r0
   b4bea:	f001 faab 	bl	b6144 <pinMode>
        if (_sck == -1) {
   b4bee:	f994 0013 	ldrsb.w	r0, [r4, #19]
   b4bf2:	1c43      	adds	r3, r0, #1
   b4bf4:	d104      	bne.n	b4c00 <_ZN15Adafruit_BME2804initEv+0x68>
        instance().begin();
   b4bf6:	f7ff fbad 	bl	b4354 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4bfa:	f000 fff7 	bl	b5bec <_ZN8SPIClass5beginEv>
    }
   b4bfe:	e7d5      	b.n	b4bac <_ZN15Adafruit_BME2804initEv+0x14>
            pinMode(_sck, OUTPUT);
   b4c00:	2101      	movs	r1, #1
   b4c02:	b280      	uxth	r0, r0
   b4c04:	f001 fa9e 	bl	b6144 <pinMode>
            pinMode(_mosi, OUTPUT);
   b4c08:	f994 0011 	ldrsb.w	r0, [r4, #17]
   b4c0c:	2101      	movs	r1, #1
   b4c0e:	b280      	uxth	r0, r0
   b4c10:	f001 fa98 	bl	b6144 <pinMode>
            pinMode(_miso, INPUT);
   b4c14:	f994 0012 	ldrsb.w	r0, [r4, #18]
   b4c18:	2100      	movs	r1, #0
   b4c1a:	b280      	uxth	r0, r0
   b4c1c:	f001 fa92 	bl	b6144 <pinMode>
   b4c20:	e7c4      	b.n	b4bac <_ZN15Adafruit_BME2804initEv+0x14>
    readCoefficients(); // read trimming parameters, see DS 4.2.2
   b4c22:	4620      	mov	r0, r4
   b4c24:	f7ff fd5a 	bl	b46dc <_ZN15Adafruit_BME28016readCoefficientsEv>
    setSampling(); // use defaults
   b4c28:	2305      	movs	r3, #5
   b4c2a:	9300      	str	r3, [sp, #0]
   b4c2c:	461a      	mov	r2, r3
   b4c2e:	2103      	movs	r1, #3
   b4c30:	4620      	mov	r0, r4
   b4c32:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b4c36:	f7ff fc43 	bl	b44c0 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
    delay(100);
   b4c3a:	2064      	movs	r0, #100	; 0x64
   b4c3c:	f000 fa6c 	bl	b5118 <delay>
    return true;
   b4c40:	2001      	movs	r0, #1
}
   b4c42:	b005      	add	sp, #20
   b4c44:	bd30      	pop	{r4, r5, pc}
        return false;
   b4c46:	2000      	movs	r0, #0
   b4c48:	e7fb      	b.n	b4c42 <_ZN15Adafruit_BME2804initEv+0xaa>

000b4c4a <_ZN15Adafruit_BME2805beginEv>:
    _i2caddr = BME280_ADDRESS;
   b4c4a:	2377      	movs	r3, #119	; 0x77
{
   b4c4c:	b510      	push	{r4, lr}
    _i2caddr = BME280_ADDRESS;
   b4c4e:	7103      	strb	r3, [r0, #4]
{
   b4c50:	4604      	mov	r4, r0
	_wire = &Wire;
   b4c52:	f001 facf 	bl	b61f4 <_Z19__fetch_global_Wirev>
   b4c56:	6020      	str	r0, [r4, #0]
	status = init();
   b4c58:	4620      	mov	r0, r4
   b4c5a:	f7ff ff9d 	bl	b4b98 <_ZN15Adafruit_BME2804initEv>
 	if(!status){
   b4c5e:	b930      	cbnz	r0, b4c6e <_ZN15Adafruit_BME2805beginEv+0x24>
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
   b4c60:	2376      	movs	r3, #118	; 0x76
   b4c62:	7123      	strb	r3, [r4, #4]
 		status = init();
   b4c64:	4620      	mov	r0, r4
}
   b4c66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 		status = init();
   b4c6a:	f7ff bf95 	b.w	b4b98 <_ZN15Adafruit_BME2804initEv>
}
   b4c6e:	bd10      	pop	{r4, pc}

000b4c70 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4c70:	b508      	push	{r3, lr}
   b4c72:	4b02      	ldr	r3, [pc, #8]	; (b4c7c <os_mutex_recursive_create+0xc>)
   b4c74:	681b      	ldr	r3, [r3, #0]
   b4c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4c78:	9301      	str	r3, [sp, #4]
   b4c7a:	bd08      	pop	{r3, pc}
   b4c7c:	00030248 	.word	0x00030248

000b4c80 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4c80:	b508      	push	{r3, lr}
   b4c82:	4b02      	ldr	r3, [pc, #8]	; (b4c8c <HAL_RNG_GetRandomNumber+0xc>)
   b4c84:	681b      	ldr	r3, [r3, #0]
   b4c86:	685b      	ldr	r3, [r3, #4]
   b4c88:	9301      	str	r3, [sp, #4]
   b4c8a:	bd08      	pop	{r3, pc}
   b4c8c:	00030218 	.word	0x00030218

000b4c90 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4c90:	b508      	push	{r3, lr}
   b4c92:	4b02      	ldr	r3, [pc, #8]	; (b4c9c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4c94:	681b      	ldr	r3, [r3, #0]
   b4c96:	695b      	ldr	r3, [r3, #20]
   b4c98:	9301      	str	r3, [sp, #4]
   b4c9a:	bd08      	pop	{r3, pc}
   b4c9c:	00030218 	.word	0x00030218

000b4ca0 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b4ca0:	b508      	push	{r3, lr}
   b4ca2:	4b02      	ldr	r3, [pc, #8]	; (b4cac <HAL_Pin_Mode+0xc>)
   b4ca4:	681b      	ldr	r3, [r3, #0]
   b4ca6:	689b      	ldr	r3, [r3, #8]
   b4ca8:	9301      	str	r3, [sp, #4]
   b4caa:	bd08      	pop	{r3, pc}
   b4cac:	0003022c 	.word	0x0003022c

000b4cb0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b4cb0:	b508      	push	{r3, lr}
   b4cb2:	4b02      	ldr	r3, [pc, #8]	; (b4cbc <HAL_Get_Pin_Mode+0xc>)
   b4cb4:	681b      	ldr	r3, [r3, #0]
   b4cb6:	68db      	ldr	r3, [r3, #12]
   b4cb8:	9301      	str	r3, [sp, #4]
   b4cba:	bd08      	pop	{r3, pc}
   b4cbc:	0003022c 	.word	0x0003022c

000b4cc0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b4cc0:	b508      	push	{r3, lr}
   b4cc2:	4b02      	ldr	r3, [pc, #8]	; (b4ccc <HAL_GPIO_Write+0xc>)
   b4cc4:	681b      	ldr	r3, [r3, #0]
   b4cc6:	691b      	ldr	r3, [r3, #16]
   b4cc8:	9301      	str	r3, [sp, #4]
   b4cca:	bd08      	pop	{r3, pc}
   b4ccc:	0003022c 	.word	0x0003022c

000b4cd0 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b4cd0:	b508      	push	{r3, lr}
   b4cd2:	4b02      	ldr	r3, [pc, #8]	; (b4cdc <HAL_GPIO_Read+0xc>)
   b4cd4:	681b      	ldr	r3, [r3, #0]
   b4cd6:	695b      	ldr	r3, [r3, #20]
   b4cd8:	9301      	str	r3, [sp, #4]
   b4cda:	bd08      	pop	{r3, pc}
   b4cdc:	0003022c 	.word	0x0003022c

000b4ce0 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b4ce0:	b508      	push	{r3, lr}
   b4ce2:	4b02      	ldr	r3, [pc, #8]	; (b4cec <hal_i2c_begin+0xc>)
   b4ce4:	681b      	ldr	r3, [r3, #0]
   b4ce6:	68db      	ldr	r3, [r3, #12]
   b4ce8:	9301      	str	r3, [sp, #4]
   b4cea:	bd08      	pop	{r3, pc}
   b4cec:	00030228 	.word	0x00030228

000b4cf0 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b4cf0:	b508      	push	{r3, lr}
   b4cf2:	4b02      	ldr	r3, [pc, #8]	; (b4cfc <hal_i2c_begin_transmission+0xc>)
   b4cf4:	681b      	ldr	r3, [r3, #0]
   b4cf6:	699b      	ldr	r3, [r3, #24]
   b4cf8:	9301      	str	r3, [sp, #4]
   b4cfa:	bd08      	pop	{r3, pc}
   b4cfc:	00030228 	.word	0x00030228

000b4d00 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b4d00:	b508      	push	{r3, lr}
   b4d02:	4b02      	ldr	r3, [pc, #8]	; (b4d0c <hal_i2c_end_transmission+0xc>)
   b4d04:	681b      	ldr	r3, [r3, #0]
   b4d06:	69db      	ldr	r3, [r3, #28]
   b4d08:	9301      	str	r3, [sp, #4]
   b4d0a:	bd08      	pop	{r3, pc}
   b4d0c:	00030228 	.word	0x00030228

000b4d10 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4d10:	b508      	push	{r3, lr}
   b4d12:	4b02      	ldr	r3, [pc, #8]	; (b4d1c <hal_i2c_write+0xc>)
   b4d14:	681b      	ldr	r3, [r3, #0]
   b4d16:	6a1b      	ldr	r3, [r3, #32]
   b4d18:	9301      	str	r3, [sp, #4]
   b4d1a:	bd08      	pop	{r3, pc}
   b4d1c:	00030228 	.word	0x00030228

000b4d20 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4d20:	b508      	push	{r3, lr}
   b4d22:	4b02      	ldr	r3, [pc, #8]	; (b4d2c <hal_i2c_available+0xc>)
   b4d24:	681b      	ldr	r3, [r3, #0]
   b4d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4d28:	9301      	str	r3, [sp, #4]
   b4d2a:	bd08      	pop	{r3, pc}
   b4d2c:	00030228 	.word	0x00030228

000b4d30 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4d30:	b508      	push	{r3, lr}
   b4d32:	4b02      	ldr	r3, [pc, #8]	; (b4d3c <hal_i2c_read+0xc>)
   b4d34:	681b      	ldr	r3, [r3, #0]
   b4d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4d38:	9301      	str	r3, [sp, #4]
   b4d3a:	bd08      	pop	{r3, pc}
   b4d3c:	00030228 	.word	0x00030228

000b4d40 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4d40:	b508      	push	{r3, lr}
   b4d42:	4b02      	ldr	r3, [pc, #8]	; (b4d4c <hal_i2c_peek+0xc>)
   b4d44:	681b      	ldr	r3, [r3, #0]
   b4d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4d48:	9301      	str	r3, [sp, #4]
   b4d4a:	bd08      	pop	{r3, pc}
   b4d4c:	00030228 	.word	0x00030228

000b4d50 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4d50:	b508      	push	{r3, lr}
   b4d52:	4b02      	ldr	r3, [pc, #8]	; (b4d5c <hal_i2c_flush+0xc>)
   b4d54:	681b      	ldr	r3, [r3, #0]
   b4d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4d58:	9301      	str	r3, [sp, #4]
   b4d5a:	bd08      	pop	{r3, pc}
   b4d5c:	00030228 	.word	0x00030228

000b4d60 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4d60:	b508      	push	{r3, lr}
   b4d62:	4b02      	ldr	r3, [pc, #8]	; (b4d6c <hal_i2c_is_enabled+0xc>)
   b4d64:	681b      	ldr	r3, [r3, #0]
   b4d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4d68:	9301      	str	r3, [sp, #4]
   b4d6a:	bd08      	pop	{r3, pc}
   b4d6c:	00030228 	.word	0x00030228

000b4d70 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4d70:	b508      	push	{r3, lr}
   b4d72:	4b02      	ldr	r3, [pc, #8]	; (b4d7c <hal_i2c_init+0xc>)
   b4d74:	681b      	ldr	r3, [r3, #0]
   b4d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4d78:	9301      	str	r3, [sp, #4]
   b4d7a:	bd08      	pop	{r3, pc}
   b4d7c:	00030228 	.word	0x00030228

000b4d80 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b4d80:	b508      	push	{r3, lr}
   b4d82:	4b02      	ldr	r3, [pc, #8]	; (b4d8c <hal_i2c_request_ex+0xc>)
   b4d84:	681b      	ldr	r3, [r3, #0]
   b4d86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4d88:	9301      	str	r3, [sp, #4]
   b4d8a:	bd08      	pop	{r3, pc}
   b4d8c:	00030228 	.word	0x00030228

000b4d90 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4d90:	b508      	push	{r3, lr}
   b4d92:	4b02      	ldr	r3, [pc, #8]	; (b4d9c <inet_inet_ntop+0xc>)
   b4d94:	681b      	ldr	r3, [r3, #0]
   b4d96:	695b      	ldr	r3, [r3, #20]
   b4d98:	9301      	str	r3, [sp, #4]
   b4d9a:	bd08      	pop	{r3, pc}
   b4d9c:	00030264 	.word	0x00030264

000b4da0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4da0:	b508      	push	{r3, lr}
   b4da2:	4b02      	ldr	r3, [pc, #8]	; (b4dac <netdb_freeaddrinfo+0xc>)
   b4da4:	681b      	ldr	r3, [r3, #0]
   b4da6:	689b      	ldr	r3, [r3, #8]
   b4da8:	9301      	str	r3, [sp, #4]
   b4daa:	bd08      	pop	{r3, pc}
   b4dac:	00030268 	.word	0x00030268

000b4db0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4db0:	b508      	push	{r3, lr}
   b4db2:	4b02      	ldr	r3, [pc, #8]	; (b4dbc <netdb_getaddrinfo+0xc>)
   b4db4:	681b      	ldr	r3, [r3, #0]
   b4db6:	68db      	ldr	r3, [r3, #12]
   b4db8:	9301      	str	r3, [sp, #4]
   b4dba:	bd08      	pop	{r3, pc}
   b4dbc:	00030268 	.word	0x00030268

000b4dc0 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b4dc0:	b508      	push	{r3, lr}
   b4dc2:	4b02      	ldr	r3, [pc, #8]	; (b4dcc <hal_spi_begin+0xc>)
   b4dc4:	681b      	ldr	r3, [r3, #0]
   b4dc6:	681b      	ldr	r3, [r3, #0]
   b4dc8:	9301      	str	r3, [sp, #4]
   b4dca:	bd08      	pop	{r3, pc}
   b4dcc:	00030230 	.word	0x00030230

000b4dd0 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b4dd0:	b508      	push	{r3, lr}
   b4dd2:	4b02      	ldr	r3, [pc, #8]	; (b4ddc <hal_spi_transfer+0xc>)
   b4dd4:	681b      	ldr	r3, [r3, #0]
   b4dd6:	695b      	ldr	r3, [r3, #20]
   b4dd8:	9301      	str	r3, [sp, #4]
   b4dda:	bd08      	pop	{r3, pc}
   b4ddc:	00030230 	.word	0x00030230

000b4de0 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4de0:	b508      	push	{r3, lr}
   b4de2:	4b02      	ldr	r3, [pc, #8]	; (b4dec <hal_spi_init+0xc>)
   b4de4:	681b      	ldr	r3, [r3, #0]
   b4de6:	69db      	ldr	r3, [r3, #28]
   b4de8:	9301      	str	r3, [sp, #4]
   b4dea:	bd08      	pop	{r3, pc}
   b4dec:	00030230 	.word	0x00030230

000b4df0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4df0:	b508      	push	{r3, lr}
   b4df2:	4b02      	ldr	r3, [pc, #8]	; (b4dfc <hal_spi_is_enabled+0xc>)
   b4df4:	681b      	ldr	r3, [r3, #0]
   b4df6:	6a1b      	ldr	r3, [r3, #32]
   b4df8:	9301      	str	r3, [sp, #4]
   b4dfa:	bd08      	pop	{r3, pc}
   b4dfc:	00030230 	.word	0x00030230

000b4e00 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b4e00:	b508      	push	{r3, lr}
   b4e02:	4b02      	ldr	r3, [pc, #8]	; (b4e0c <hal_spi_info+0xc>)
   b4e04:	681b      	ldr	r3, [r3, #0]
   b4e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4e08:	9301      	str	r3, [sp, #4]
   b4e0a:	bd08      	pop	{r3, pc}
   b4e0c:	00030230 	.word	0x00030230

000b4e10 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b4e10:	b508      	push	{r3, lr}
   b4e12:	4b02      	ldr	r3, [pc, #8]	; (b4e1c <hal_spi_set_settings+0xc>)
   b4e14:	681b      	ldr	r3, [r3, #0]
   b4e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4e18:	9301      	str	r3, [sp, #4]
   b4e1a:	bd08      	pop	{r3, pc}
   b4e1c:	00030230 	.word	0x00030230

000b4e20 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b4e20:	b508      	push	{r3, lr}
   b4e22:	4b02      	ldr	r3, [pc, #8]	; (b4e2c <hal_spi_acquire+0xc>)
   b4e24:	681b      	ldr	r3, [r3, #0]
   b4e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4e28:	9301      	str	r3, [sp, #4]
   b4e2a:	bd08      	pop	{r3, pc}
   b4e2c:	00030230 	.word	0x00030230

000b4e30 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b4e30:	b508      	push	{r3, lr}
   b4e32:	4b02      	ldr	r3, [pc, #8]	; (b4e3c <hal_spi_release+0xc>)
   b4e34:	681b      	ldr	r3, [r3, #0]
   b4e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4e38:	9301      	str	r3, [sp, #4]
   b4e3a:	bd08      	pop	{r3, pc}
   b4e3c:	00030230 	.word	0x00030230

000b4e40 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4e40:	b508      	push	{r3, lr}
   b4e42:	4b02      	ldr	r3, [pc, #8]	; (b4e4c <hal_usart_write+0xc>)
   b4e44:	681b      	ldr	r3, [r3, #0]
   b4e46:	68db      	ldr	r3, [r3, #12]
   b4e48:	9301      	str	r3, [sp, #4]
   b4e4a:	bd08      	pop	{r3, pc}
   b4e4c:	0003023c 	.word	0x0003023c

000b4e50 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4e50:	b508      	push	{r3, lr}
   b4e52:	4b02      	ldr	r3, [pc, #8]	; (b4e5c <hal_usart_available+0xc>)
   b4e54:	681b      	ldr	r3, [r3, #0]
   b4e56:	691b      	ldr	r3, [r3, #16]
   b4e58:	9301      	str	r3, [sp, #4]
   b4e5a:	bd08      	pop	{r3, pc}
   b4e5c:	0003023c 	.word	0x0003023c

000b4e60 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4e60:	b508      	push	{r3, lr}
   b4e62:	4b02      	ldr	r3, [pc, #8]	; (b4e6c <hal_usart_read+0xc>)
   b4e64:	681b      	ldr	r3, [r3, #0]
   b4e66:	695b      	ldr	r3, [r3, #20]
   b4e68:	9301      	str	r3, [sp, #4]
   b4e6a:	bd08      	pop	{r3, pc}
   b4e6c:	0003023c 	.word	0x0003023c

000b4e70 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4e70:	b508      	push	{r3, lr}
   b4e72:	4b02      	ldr	r3, [pc, #8]	; (b4e7c <hal_usart_peek+0xc>)
   b4e74:	681b      	ldr	r3, [r3, #0]
   b4e76:	699b      	ldr	r3, [r3, #24]
   b4e78:	9301      	str	r3, [sp, #4]
   b4e7a:	bd08      	pop	{r3, pc}
   b4e7c:	0003023c 	.word	0x0003023c

000b4e80 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4e80:	b508      	push	{r3, lr}
   b4e82:	4b02      	ldr	r3, [pc, #8]	; (b4e8c <hal_usart_flush+0xc>)
   b4e84:	681b      	ldr	r3, [r3, #0]
   b4e86:	69db      	ldr	r3, [r3, #28]
   b4e88:	9301      	str	r3, [sp, #4]
   b4e8a:	bd08      	pop	{r3, pc}
   b4e8c:	0003023c 	.word	0x0003023c

000b4e90 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4e90:	b508      	push	{r3, lr}
   b4e92:	4b02      	ldr	r3, [pc, #8]	; (b4e9c <hal_usart_is_enabled+0xc>)
   b4e94:	681b      	ldr	r3, [r3, #0]
   b4e96:	6a1b      	ldr	r3, [r3, #32]
   b4e98:	9301      	str	r3, [sp, #4]
   b4e9a:	bd08      	pop	{r3, pc}
   b4e9c:	0003023c 	.word	0x0003023c

000b4ea0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4ea0:	b508      	push	{r3, lr}
   b4ea2:	4b02      	ldr	r3, [pc, #8]	; (b4eac <hal_usart_available_data_for_write+0xc>)
   b4ea4:	681b      	ldr	r3, [r3, #0]
   b4ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4ea8:	9301      	str	r3, [sp, #4]
   b4eaa:	bd08      	pop	{r3, pc}
   b4eac:	0003023c 	.word	0x0003023c

000b4eb0 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4eb0:	b508      	push	{r3, lr}
   b4eb2:	4b02      	ldr	r3, [pc, #8]	; (b4ebc <hal_usart_init_ex+0xc>)
   b4eb4:	681b      	ldr	r3, [r3, #0]
   b4eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4eb8:	9301      	str	r3, [sp, #4]
   b4eba:	bd08      	pop	{r3, pc}
   b4ebc:	0003023c 	.word	0x0003023c

000b4ec0 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4ec0:	b508      	push	{r3, lr}
   b4ec2:	4b02      	ldr	r3, [pc, #8]	; (b4ecc <HAL_USB_USART_Init+0xc>)
   b4ec4:	681b      	ldr	r3, [r3, #0]
   b4ec6:	681b      	ldr	r3, [r3, #0]
   b4ec8:	9301      	str	r3, [sp, #4]
   b4eca:	bd08      	pop	{r3, pc}
   b4ecc:	0003024c 	.word	0x0003024c

000b4ed0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4ed0:	b508      	push	{r3, lr}
   b4ed2:	4b02      	ldr	r3, [pc, #8]	; (b4edc <HAL_USB_USART_Begin+0xc>)
   b4ed4:	681b      	ldr	r3, [r3, #0]
   b4ed6:	685b      	ldr	r3, [r3, #4]
   b4ed8:	9301      	str	r3, [sp, #4]
   b4eda:	bd08      	pop	{r3, pc}
   b4edc:	0003024c 	.word	0x0003024c

000b4ee0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4ee0:	b508      	push	{r3, lr}
   b4ee2:	4b02      	ldr	r3, [pc, #8]	; (b4eec <HAL_USB_USART_Available_Data+0xc>)
   b4ee4:	681b      	ldr	r3, [r3, #0]
   b4ee6:	691b      	ldr	r3, [r3, #16]
   b4ee8:	9301      	str	r3, [sp, #4]
   b4eea:	bd08      	pop	{r3, pc}
   b4eec:	0003024c 	.word	0x0003024c

000b4ef0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4ef0:	b508      	push	{r3, lr}
   b4ef2:	4b02      	ldr	r3, [pc, #8]	; (b4efc <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4ef4:	681b      	ldr	r3, [r3, #0]
   b4ef6:	695b      	ldr	r3, [r3, #20]
   b4ef8:	9301      	str	r3, [sp, #4]
   b4efa:	bd08      	pop	{r3, pc}
   b4efc:	0003024c 	.word	0x0003024c

000b4f00 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4f00:	b508      	push	{r3, lr}
   b4f02:	4b02      	ldr	r3, [pc, #8]	; (b4f0c <HAL_USB_USART_Receive_Data+0xc>)
   b4f04:	681b      	ldr	r3, [r3, #0]
   b4f06:	699b      	ldr	r3, [r3, #24]
   b4f08:	9301      	str	r3, [sp, #4]
   b4f0a:	bd08      	pop	{r3, pc}
   b4f0c:	0003024c 	.word	0x0003024c

000b4f10 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4f10:	b508      	push	{r3, lr}
   b4f12:	4b02      	ldr	r3, [pc, #8]	; (b4f1c <HAL_USB_USART_Send_Data+0xc>)
   b4f14:	681b      	ldr	r3, [r3, #0]
   b4f16:	69db      	ldr	r3, [r3, #28]
   b4f18:	9301      	str	r3, [sp, #4]
   b4f1a:	bd08      	pop	{r3, pc}
   b4f1c:	0003024c 	.word	0x0003024c

000b4f20 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4f20:	b508      	push	{r3, lr}
   b4f22:	4b02      	ldr	r3, [pc, #8]	; (b4f2c <HAL_USB_USART_Flush_Data+0xc>)
   b4f24:	681b      	ldr	r3, [r3, #0]
   b4f26:	6a1b      	ldr	r3, [r3, #32]
   b4f28:	9301      	str	r3, [sp, #4]
   b4f2a:	bd08      	pop	{r3, pc}
   b4f2c:	0003024c 	.word	0x0003024c

000b4f30 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4f30:	b508      	push	{r3, lr}
   b4f32:	4b02      	ldr	r3, [pc, #8]	; (b4f3c <set_system_mode+0xc>)
   b4f34:	681b      	ldr	r3, [r3, #0]
   b4f36:	685b      	ldr	r3, [r3, #4]
   b4f38:	9301      	str	r3, [sp, #4]
   b4f3a:	bd08      	pop	{r3, pc}
   b4f3c:	00030220 	.word	0x00030220

000b4f40 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4f40:	b508      	push	{r3, lr}
   b4f42:	4b02      	ldr	r3, [pc, #8]	; (b4f4c <system_delay_ms+0xc>)
   b4f44:	681b      	ldr	r3, [r3, #0]
   b4f46:	695b      	ldr	r3, [r3, #20]
   b4f48:	9301      	str	r3, [sp, #4]
   b4f4a:	bd08      	pop	{r3, pc}
   b4f4c:	00030220 	.word	0x00030220

000b4f50 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b4f50:	b508      	push	{r3, lr}
   b4f52:	4b02      	ldr	r3, [pc, #8]	; (b4f5c <application_thread_current+0xc>)
   b4f54:	681b      	ldr	r3, [r3, #0]
   b4f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4f58:	9301      	str	r3, [sp, #4]
   b4f5a:	bd08      	pop	{r3, pc}
   b4f5c:	00030220 	.word	0x00030220

000b4f60 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b4f60:	b508      	push	{r3, lr}
   b4f62:	4b02      	ldr	r3, [pc, #8]	; (b4f6c <application_thread_invoke+0xc>)
   b4f64:	681b      	ldr	r3, [r3, #0]
   b4f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4f68:	9301      	str	r3, [sp, #4]
   b4f6a:	bd08      	pop	{r3, pc}
   b4f6c:	00030220 	.word	0x00030220

000b4f70 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4f70:	b508      	push	{r3, lr}
   b4f72:	4b03      	ldr	r3, [pc, #12]	; (b4f80 <system_ctrl_set_app_request_handler+0x10>)
   b4f74:	681b      	ldr	r3, [r3, #0]
   b4f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4f7a:	9301      	str	r3, [sp, #4]
   b4f7c:	bd08      	pop	{r3, pc}
   b4f7e:	0000      	.short	0x0000
   b4f80:	00030220 	.word	0x00030220

000b4f84 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4f84:	b508      	push	{r3, lr}
   b4f86:	4b03      	ldr	r3, [pc, #12]	; (b4f94 <system_ctrl_set_result+0x10>)
   b4f88:	681b      	ldr	r3, [r3, #0]
   b4f8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4f8e:	9301      	str	r3, [sp, #4]
   b4f90:	bd08      	pop	{r3, pc}
   b4f92:	0000      	.short	0x0000
   b4f94:	00030220 	.word	0x00030220

000b4f98 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   b4f98:	b508      	push	{r3, lr}
   b4f9a:	4b02      	ldr	r3, [pc, #8]	; (b4fa4 <spark_variable+0xc>)
   b4f9c:	681b      	ldr	r3, [r3, #0]
   b4f9e:	681b      	ldr	r3, [r3, #0]
   b4fa0:	9301      	str	r3, [sp, #4]
   b4fa2:	bd08      	pop	{r3, pc}
   b4fa4:	00030244 	.word	0x00030244

000b4fa8 <spark_cloud_flag_connected>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b4fa8:	b508      	push	{r3, lr}
   b4faa:	4b02      	ldr	r3, [pc, #8]	; (b4fb4 <spark_cloud_flag_connected+0xc>)
   b4fac:	681b      	ldr	r3, [r3, #0]
   b4fae:	695b      	ldr	r3, [r3, #20]
   b4fb0:	9301      	str	r3, [sp, #4]
   b4fb2:	bd08      	pop	{r3, pc}
   b4fb4:	00030244 	.word	0x00030244

000b4fb8 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b4fb8:	b508      	push	{r3, lr}
   b4fba:	4b02      	ldr	r3, [pc, #8]	; (b4fc4 <spark_send_event+0xc>)
   b4fbc:	681b      	ldr	r3, [r3, #0]
   b4fbe:	6a1b      	ldr	r3, [r3, #32]
   b4fc0:	9301      	str	r3, [sp, #4]
   b4fc2:	bd08      	pop	{r3, pc}
   b4fc4:	00030244 	.word	0x00030244

000b4fc8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4fc8:	b508      	push	{r3, lr}
   b4fca:	4b02      	ldr	r3, [pc, #8]	; (b4fd4 <spark_set_random_seed_from_cloud_handler+0xc>)
   b4fcc:	681b      	ldr	r3, [r3, #0]
   b4fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4fd0:	9301      	str	r3, [sp, #4]
   b4fd2:	bd08      	pop	{r3, pc}
   b4fd4:	00030244 	.word	0x00030244

000b4fd8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4fd8:	b508      	push	{r3, lr}
   b4fda:	4b02      	ldr	r3, [pc, #8]	; (b4fe4 <network_connect+0xc>)
   b4fdc:	681b      	ldr	r3, [r3, #0]
   b4fde:	685b      	ldr	r3, [r3, #4]
   b4fe0:	9301      	str	r3, [sp, #4]
   b4fe2:	bd08      	pop	{r3, pc}
   b4fe4:	00030240 	.word	0x00030240

000b4fe8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4fe8:	b508      	push	{r3, lr}
   b4fea:	4b02      	ldr	r3, [pc, #8]	; (b4ff4 <network_connecting+0xc>)
   b4fec:	681b      	ldr	r3, [r3, #0]
   b4fee:	689b      	ldr	r3, [r3, #8]
   b4ff0:	9301      	str	r3, [sp, #4]
   b4ff2:	bd08      	pop	{r3, pc}
   b4ff4:	00030240 	.word	0x00030240

000b4ff8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4ff8:	b508      	push	{r3, lr}
   b4ffa:	4b02      	ldr	r3, [pc, #8]	; (b5004 <network_disconnect+0xc>)
   b4ffc:	681b      	ldr	r3, [r3, #0]
   b4ffe:	68db      	ldr	r3, [r3, #12]
   b5000:	9301      	str	r3, [sp, #4]
   b5002:	bd08      	pop	{r3, pc}
   b5004:	00030240 	.word	0x00030240

000b5008 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b5008:	b508      	push	{r3, lr}
   b500a:	4b02      	ldr	r3, [pc, #8]	; (b5014 <network_ready+0xc>)
   b500c:	681b      	ldr	r3, [r3, #0]
   b500e:	691b      	ldr	r3, [r3, #16]
   b5010:	9301      	str	r3, [sp, #4]
   b5012:	bd08      	pop	{r3, pc}
   b5014:	00030240 	.word	0x00030240

000b5018 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b5018:	b508      	push	{r3, lr}
   b501a:	4b02      	ldr	r3, [pc, #8]	; (b5024 <network_on+0xc>)
   b501c:	681b      	ldr	r3, [r3, #0]
   b501e:	695b      	ldr	r3, [r3, #20]
   b5020:	9301      	str	r3, [sp, #4]
   b5022:	bd08      	pop	{r3, pc}
   b5024:	00030240 	.word	0x00030240

000b5028 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b5028:	b508      	push	{r3, lr}
   b502a:	4b02      	ldr	r3, [pc, #8]	; (b5034 <network_off+0xc>)
   b502c:	681b      	ldr	r3, [r3, #0]
   b502e:	699b      	ldr	r3, [r3, #24]
   b5030:	9301      	str	r3, [sp, #4]
   b5032:	bd08      	pop	{r3, pc}
   b5034:	00030240 	.word	0x00030240

000b5038 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b5038:	b508      	push	{r3, lr}
   b503a:	4b02      	ldr	r3, [pc, #8]	; (b5044 <network_listen+0xc>)
   b503c:	681b      	ldr	r3, [r3, #0]
   b503e:	69db      	ldr	r3, [r3, #28]
   b5040:	9301      	str	r3, [sp, #4]
   b5042:	bd08      	pop	{r3, pc}
   b5044:	00030240 	.word	0x00030240

000b5048 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b5048:	b508      	push	{r3, lr}
   b504a:	4b02      	ldr	r3, [pc, #8]	; (b5054 <network_listening+0xc>)
   b504c:	681b      	ldr	r3, [r3, #0]
   b504e:	6a1b      	ldr	r3, [r3, #32]
   b5050:	9301      	str	r3, [sp, #4]
   b5052:	bd08      	pop	{r3, pc}
   b5054:	00030240 	.word	0x00030240

000b5058 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b5058:	b508      	push	{r3, lr}
   b505a:	4b02      	ldr	r3, [pc, #8]	; (b5064 <network_set_listen_timeout+0xc>)
   b505c:	681b      	ldr	r3, [r3, #0]
   b505e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5060:	9301      	str	r3, [sp, #4]
   b5062:	bd08      	pop	{r3, pc}
   b5064:	00030240 	.word	0x00030240

000b5068 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b5068:	b508      	push	{r3, lr}
   b506a:	4b02      	ldr	r3, [pc, #8]	; (b5074 <network_get_listen_timeout+0xc>)
   b506c:	681b      	ldr	r3, [r3, #0]
   b506e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5070:	9301      	str	r3, [sp, #4]
   b5072:	bd08      	pop	{r3, pc}
   b5074:	00030240 	.word	0x00030240

000b5078 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b5078:	b508      	push	{r3, lr}
   b507a:	4b02      	ldr	r3, [pc, #8]	; (b5084 <network_is_on+0xc>)
   b507c:	681b      	ldr	r3, [r3, #0]
   b507e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5080:	9301      	str	r3, [sp, #4]
   b5082:	bd08      	pop	{r3, pc}
   b5084:	00030240 	.word	0x00030240

000b5088 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b5088:	b508      	push	{r3, lr}
   b508a:	4b02      	ldr	r3, [pc, #8]	; (b5094 <network_is_off+0xc>)
   b508c:	681b      	ldr	r3, [r3, #0]
   b508e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5090:	9301      	str	r3, [sp, #4]
   b5092:	bd08      	pop	{r3, pc}
   b5094:	00030240 	.word	0x00030240

000b5098 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b5098:	b508      	push	{r3, lr}
   b509a:	4b02      	ldr	r3, [pc, #8]	; (b50a4 <malloc+0xc>)
   b509c:	681b      	ldr	r3, [r3, #0]
   b509e:	681b      	ldr	r3, [r3, #0]
   b50a0:	9301      	str	r3, [sp, #4]
   b50a2:	bd08      	pop	{r3, pc}
   b50a4:	0003021c 	.word	0x0003021c

000b50a8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b50a8:	b508      	push	{r3, lr}
   b50aa:	4b02      	ldr	r3, [pc, #8]	; (b50b4 <free+0xc>)
   b50ac:	681b      	ldr	r3, [r3, #0]
   b50ae:	685b      	ldr	r3, [r3, #4]
   b50b0:	9301      	str	r3, [sp, #4]
   b50b2:	bd08      	pop	{r3, pc}
   b50b4:	0003021c 	.word	0x0003021c

000b50b8 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b50b8:	b508      	push	{r3, lr}
   b50ba:	4b02      	ldr	r3, [pc, #8]	; (b50c4 <vsnprintf+0xc>)
   b50bc:	681b      	ldr	r3, [r3, #0]
   b50be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b50c0:	9301      	str	r3, [sp, #4]
   b50c2:	bd08      	pop	{r3, pc}
   b50c4:	0003021c 	.word	0x0003021c

000b50c8 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b50c8:	b508      	push	{r3, lr}
   b50ca:	4b02      	ldr	r3, [pc, #8]	; (b50d4 <abort+0xc>)
   b50cc:	681b      	ldr	r3, [r3, #0]
   b50ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b50d0:	9301      	str	r3, [sp, #4]
   b50d2:	bd08      	pop	{r3, pc}
   b50d4:	0003021c 	.word	0x0003021c

000b50d8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b50d8:	b508      	push	{r3, lr}
   b50da:	4b02      	ldr	r3, [pc, #8]	; (b50e4 <_malloc_r+0xc>)
   b50dc:	681b      	ldr	r3, [r3, #0]
   b50de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b50e0:	9301      	str	r3, [sp, #4]
   b50e2:	bd08      	pop	{r3, pc}
   b50e4:	0003021c 	.word	0x0003021c

000b50e8 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b50e8:	b508      	push	{r3, lr}
   b50ea:	4b02      	ldr	r3, [pc, #8]	; (b50f4 <__errno+0xc>)
   b50ec:	681b      	ldr	r3, [r3, #0]
   b50ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b50f0:	9301      	str	r3, [sp, #4]
   b50f2:	bd08      	pop	{r3, pc}
   b50f4:	0003021c 	.word	0x0003021c

000b50f8 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b50f8:	b508      	push	{r3, lr}
   b50fa:	4b02      	ldr	r3, [pc, #8]	; (b5104 <__assert_func+0xc>)
   b50fc:	681b      	ldr	r3, [r3, #0]
   b50fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5100:	9301      	str	r3, [sp, #4]
   b5102:	bd08      	pop	{r3, pc}
   b5104:	0003021c 	.word	0x0003021c

000b5108 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b5108:	b508      	push	{r3, lr}
   b510a:	4b02      	ldr	r3, [pc, #8]	; (b5114 <newlib_impure_ptr_callback+0xc>)
   b510c:	681b      	ldr	r3, [r3, #0]
   b510e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5110:	9301      	str	r3, [sp, #4]
   b5112:	bd08      	pop	{r3, pc}
   b5114:	0003021c 	.word	0x0003021c

000b5118 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b5118:	2100      	movs	r1, #0
   b511a:	f7ff bf11 	b.w	b4f40 <system_delay_ms>

000b511e <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b511e:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b5120:	6883      	ldr	r3, [r0, #8]
   b5122:	4604      	mov	r4, r0
   b5124:	b90b      	cbnz	r3, b512a <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b5126:	f001 f8cb 	bl	b62c0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b512a:	68c3      	ldr	r3, [r0, #12]
   b512c:	4798      	blx	r3
      if (_M_manager)
   b512e:	68a3      	ldr	r3, [r4, #8]
   b5130:	b11b      	cbz	r3, b513a <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5132:	2203      	movs	r2, #3
   b5134:	4621      	mov	r1, r4
   b5136:	4620      	mov	r0, r4
   b5138:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b513a:	4620      	mov	r0, r4
   b513c:	2110      	movs	r1, #16
}
   b513e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b5142:	f7fe bfac 	b.w	b409e <_ZdlPvj>

000b5146 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b5146:	b510      	push	{r4, lr}
      if (_M_manager)
   b5148:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b514a:	4604      	mov	r4, r0
      if (_M_manager)
   b514c:	b113      	cbz	r3, b5154 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b514e:	2203      	movs	r2, #3
   b5150:	4601      	mov	r1, r0
   b5152:	4798      	blx	r3
    }
   b5154:	4620      	mov	r0, r4
   b5156:	bd10      	pop	{r4, pc}

000b5158 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b5158:	b513      	push	{r0, r1, r4, lr}
   b515a:	460b      	mov	r3, r1
   b515c:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b515e:	e9d0 0100 	ldrd	r0, r1, [r0]
   b5162:	466c      	mov	r4, sp
   b5164:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b5168:	e893 0003 	ldmia.w	r3, {r0, r1}
   b516c:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b5170:	e894 0003 	ldmia.w	r4, {r0, r1}
   b5174:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b5178:	b002      	add	sp, #8
   b517a:	bd10      	pop	{r4, pc}

000b517c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b517c:	4802      	ldr	r0, [pc, #8]	; (b5188 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b517e:	2300      	movs	r3, #0
   b5180:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b5182:	f7ff bd75 	b.w	b4c70 <os_mutex_recursive_create>
   b5186:	bf00      	nop
   b5188:	2003e6c4 	.word	0x2003e6c4

000b518c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b518c:	4770      	bx	lr

000b518e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b518e:	2000      	movs	r0, #0
   b5190:	4770      	bx	lr

000b5192 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b5192:	b510      	push	{r4, lr}
   b5194:	2110      	movs	r1, #16
   b5196:	4604      	mov	r4, r0
   b5198:	f7fe ff81 	bl	b409e <_ZdlPvj>
   b519c:	4620      	mov	r0, r4
   b519e:	bd10      	pop	{r4, pc}

000b51a0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b51a0:	b508      	push	{r3, lr}
      { delete this; }
   b51a2:	f7ff fff6 	bl	b5192 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b51a6:	bd08      	pop	{r3, pc}

000b51a8 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b51a8:	b530      	push	{r4, r5, lr}
        type_(type) {
   b51aa:	2200      	movs	r2, #0
   b51ac:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b51b0:	6002      	str	r2, [r0, #0]
   b51b2:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b51b4:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b51b6:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b51b8:	680c      	ldr	r4, [r1, #0]
   b51ba:	8085      	strh	r5, [r0, #4]
   b51bc:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b51be:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b51c0:	bd30      	pop	{r4, r5, pc}

000b51c2 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b51c2:	b510      	push	{r4, lr}
   b51c4:	4604      	mov	r4, r0
    free((void*)msg_);
   b51c6:	6800      	ldr	r0, [r0, #0]
   b51c8:	f7ff ff6e 	bl	b50a8 <free>
}
   b51cc:	4620      	mov	r0, r4
   b51ce:	bd10      	pop	{r4, pc}

000b51d0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b51d0:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b51d2:	68c4      	ldr	r4, [r0, #12]
   b51d4:	b1f4      	cbz	r4, b5214 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b51d6:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b51d8:	2b02      	cmp	r3, #2
   b51da:	d103      	bne.n	b51e4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b51dc:	f104 000c 	add.w	r0, r4, #12
   b51e0:	f7ff ffef 	bl	b51c2 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b51e4:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b51e6:	b135      	cbz	r5, b51f6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b51e8:	4628      	mov	r0, r5
   b51ea:	f7ff ffac 	bl	b5146 <_ZNSt14_Function_baseD1Ev>
   b51ee:	2110      	movs	r1, #16
   b51f0:	4628      	mov	r0, r5
   b51f2:	f7fe ff54 	bl	b409e <_ZdlPvj>
   b51f6:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b51f8:	b135      	cbz	r5, b5208 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b51fa:	4628      	mov	r0, r5
   b51fc:	f7ff ffa3 	bl	b5146 <_ZNSt14_Function_baseD1Ev>
   b5200:	2110      	movs	r1, #16
   b5202:	4628      	mov	r0, r5
   b5204:	f7fe ff4b 	bl	b409e <_ZdlPvj>
   b5208:	4620      	mov	r0, r4
   b520a:	2114      	movs	r1, #20
   b520c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b5210:	f7fe bf45 	b.w	b409e <_ZdlPvj>
   b5214:	bd38      	pop	{r3, r4, r5, pc}

000b5216 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b5216:	680b      	ldr	r3, [r1, #0]
   b5218:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b521a:	684b      	ldr	r3, [r1, #4]
   b521c:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b521e:	b113      	cbz	r3, b5226 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b5220:	685a      	ldr	r2, [r3, #4]
   b5222:	3201      	adds	r2, #1
   b5224:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b5226:	4770      	bx	lr

000b5228 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b5228:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b522a:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b522c:	4668      	mov	r0, sp
   b522e:	460d      	mov	r5, r1
   b5230:	f7ff fff1 	bl	b5216 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5234:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b5236:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5238:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b523a:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b523c:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b523e:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b5240:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b5242:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b5244:	f7fe ff82 	bl	b414c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b5248:	b135      	cbz	r5, b5258 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b524a:	1d28      	adds	r0, r5, #4
   b524c:	f7fe ff7e 	bl	b414c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5250:	2108      	movs	r1, #8
   b5252:	4628      	mov	r0, r5
   b5254:	f7fe ff23 	bl	b409e <_ZdlPvj>
        return p;
    }
   b5258:	4620      	mov	r0, r4
   b525a:	b003      	add	sp, #12
   b525c:	bd30      	pop	{r4, r5, pc}

000b525e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b525e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b5260:	b510      	push	{r4, lr}
      if (_M_empty())
   b5262:	b90a      	cbnz	r2, b5268 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b5264:	f001 f82c 	bl	b62c0 <_ZSt25__throw_bad_function_callv>
    }
   b5268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b526c:	68c3      	ldr	r3, [r0, #12]
   b526e:	4718      	bx	r3

000b5270 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b5270:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b5272:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b5274:	f100 0110 	add.w	r1, r0, #16
   b5278:	f7ff fff1 	bl	b525e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b527c:	bd08      	pop	{r3, pc}

000b527e <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b527e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b5280:	b510      	push	{r4, lr}
      if (_M_empty())
   b5282:	b90a      	cbnz	r2, b5288 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b5284:	f001 f81c 	bl	b62c0 <_ZSt25__throw_bad_function_callv>
    }
   b5288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b528c:	68c3      	ldr	r3, [r0, #12]
   b528e:	4718      	bx	r3

000b5290 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b5290:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b5292:	6800      	ldr	r0, [r0, #0]
   b5294:	f100 0110 	add.w	r1, r0, #16
   b5298:	f7ff fff1 	bl	b527e <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b529c:	bd08      	pop	{r3, pc}
	...

000b52a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b52a0:	b538      	push	{r3, r4, r5, lr}
   b52a2:	2300      	movs	r3, #0
   b52a4:	4604      	mov	r4, r0
   b52a6:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b52a8:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b52aa:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b52ac:	f7fe fef3 	bl	b4096 <_Znwj>
   b52b0:	b128      	cbz	r0, b52be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b52b2:	2301      	movs	r3, #1
   b52b4:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b52b8:	4b02      	ldr	r3, [pc, #8]	; (b52c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b52ba:	6003      	str	r3, [r0, #0]
   b52bc:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b52be:	6020      	str	r0, [r4, #0]
	}
   b52c0:	4620      	mov	r0, r4
   b52c2:	bd38      	pop	{r3, r4, r5, pc}
   b52c4:	000b8570 	.word	0x000b8570

000b52c8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b52c8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b52ca:	2300      	movs	r3, #0
   b52cc:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b52ce:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b52d0:	4604      	mov	r4, r0
   b52d2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b52d4:	b12b      	cbz	r3, b52e2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b52d6:	2202      	movs	r2, #2
   b52d8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b52da:	68eb      	ldr	r3, [r5, #12]
   b52dc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b52de:	68ab      	ldr	r3, [r5, #8]
   b52e0:	60a3      	str	r3, [r4, #8]
    }
   b52e2:	4620      	mov	r0, r4
   b52e4:	bd38      	pop	{r3, r4, r5, pc}
	...

000b52e8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b52e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b52ea:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b52ec:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b52ee:	4668      	mov	r0, sp
   b52f0:	f7ff ff5a 	bl	b51a8 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b52f4:	f04f 0302 	mov.w	r3, #2
   b52f8:	e8d4 2f4f 	ldrexb	r2, [r4]
   b52fc:	2a00      	cmp	r2, #0
   b52fe:	d103      	bne.n	b5308 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b5300:	e8c4 3f41 	strexb	r1, r3, [r4]
   b5304:	2900      	cmp	r1, #0
   b5306:	d1f7      	bne.n	b52f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b5308:	d125      	bne.n	b5356 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b530a:	f104 050c 	add.w	r5, r4, #12
   b530e:	4669      	mov	r1, sp
   b5310:	4628      	mov	r0, r5
   b5312:	f7ff ff49 	bl	b51a8 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b5316:	f3bf 8f5b 	dmb	ish
   b531a:	2301      	movs	r3, #1
   b531c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b531e:	2000      	movs	r0, #0
   b5320:	f104 0308 	add.w	r3, r4, #8
   b5324:	f3bf 8f5b 	dmb	ish
   b5328:	e853 6f00 	ldrex	r6, [r3]
   b532c:	e843 0200 	strex	r2, r0, [r3]
   b5330:	2a00      	cmp	r2, #0
   b5332:	d1f9      	bne.n	b5328 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b5334:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b5338:	b16e      	cbz	r6, b5356 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b533a:	f7ff fe09 	bl	b4f50 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b533e:	b178      	cbz	r0, b5360 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b5340:	4629      	mov	r1, r5
   b5342:	4630      	mov	r0, r6
   b5344:	f7ff ff8b 	bl	b525e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b5348:	4630      	mov	r0, r6
   b534a:	f7ff fefc 	bl	b5146 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b534e:	2110      	movs	r1, #16
   b5350:	4630      	mov	r0, r6
   b5352:	f7fe fea4 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   b5356:	4668      	mov	r0, sp
   b5358:	f7ff ff33 	bl	b51c2 <_ZN8particle5ErrorD1Ev>
    }
   b535c:	b009      	add	sp, #36	; 0x24
   b535e:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b5360:	4631      	mov	r1, r6
   b5362:	a802      	add	r0, sp, #8
   b5364:	f7ff ffb0 	bl	b52c8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b5368:	68e0      	ldr	r0, [r4, #12]
   b536a:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b536e:	b108      	cbz	r0, b5374 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b5370:	f002 fffe 	bl	b8370 <strdup>
        type_(type) {
   b5374:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b5376:	2010      	movs	r0, #16
   b5378:	f8ad 501c 	strh.w	r5, [sp, #28]
   b537c:	f7fe fe8b 	bl	b4096 <_Znwj>
   b5380:	4605      	mov	r5, r0
   b5382:	b1e8      	cbz	r0, b53c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b5384:	2700      	movs	r7, #0
   b5386:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5388:	2018      	movs	r0, #24
   b538a:	f7fe fe84 	bl	b4096 <_Znwj>
   b538e:	4604      	mov	r4, r0
   b5390:	b188      	cbz	r0, b53b6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b5392:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b5394:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b5396:	a802      	add	r0, sp, #8
   b5398:	f7ff fede 	bl	b5158 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b539c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b539e:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b53a0:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b53a2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b53a4:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b53a6:	a906      	add	r1, sp, #24
   b53a8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b53aa:	60e3      	str	r3, [r4, #12]
   b53ac:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b53b0:	9205      	str	r2, [sp, #20]
   b53b2:	f7ff fef9 	bl	b51a8 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b53b6:	4b08      	ldr	r3, [pc, #32]	; (b53d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b53b8:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b53ba:	4b08      	ldr	r3, [pc, #32]	; (b53dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b53bc:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b53be:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b53c0:	a806      	add	r0, sp, #24
   b53c2:	f7ff fefe 	bl	b51c2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b53c6:	a802      	add	r0, sp, #8
   b53c8:	f7ff febd 	bl	b5146 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b53cc:	2200      	movs	r2, #0
   b53ce:	4629      	mov	r1, r5
   b53d0:	4803      	ldr	r0, [pc, #12]	; (b53e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b53d2:	f7ff fdc5 	bl	b4f60 <application_thread_invoke>
   b53d6:	e7b7      	b.n	b5348 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b53d8:	000b5271 	.word	0x000b5271
   b53dc:	000b54f5 	.word	0x000b54f5
   b53e0:	000b511f 	.word	0x000b511f

000b53e4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b53e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b53e8:	b08b      	sub	sp, #44	; 0x2c
   b53ea:	4605      	mov	r5, r0
   b53ec:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b53f0:	460f      	mov	r7, r1
   b53f2:	4690      	mov	r8, r2
   b53f4:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b53f6:	f7ff fdd7 	bl	b4fa8 <spark_cloud_flag_connected>
   b53fa:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b53fc:	4683      	mov	fp, r0
   b53fe:	bb38      	cbnz	r0, b5450 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b5400:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b5404:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b5406:	a905      	add	r1, sp, #20
   b5408:	4630      	mov	r0, r6
   b540a:	f8ad 3018 	strh.w	r3, [sp, #24]
   b540e:	f7ff fecb 	bl	b51a8 <_ZN8particle5ErrorC1EOS0_>
   b5412:	2014      	movs	r0, #20
   b5414:	f7fe fe3f 	bl	b4096 <_Znwj>
   b5418:	4604      	mov	r4, r0
   b541a:	b148      	cbz	r0, b5430 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b541c:	2302      	movs	r3, #2
   b541e:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b5420:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b5422:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b5426:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b5428:	4631      	mov	r1, r6
   b542a:	300c      	adds	r0, #12
   b542c:	f7ff febc 	bl	b51a8 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b5430:	4628      	mov	r0, r5
	: __shared_count(__p)
   b5432:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b5434:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b5438:	f7ff ff32 	bl	b52a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b543c:	4630      	mov	r0, r6
   b543e:	f7ff fec0 	bl	b51c2 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b5442:	a805      	add	r0, sp, #20
   b5444:	f7ff febd 	bl	b51c2 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b5448:	4628      	mov	r0, r5
   b544a:	b00b      	add	sp, #44	; 0x2c
   b544c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b5450:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b5452:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b5454:	2014      	movs	r0, #20
   b5456:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b545a:	9307      	str	r3, [sp, #28]
   b545c:	f7fe fe1b 	bl	b4096 <_Znwj>
   b5460:	4601      	mov	r1, r0
   b5462:	b118      	cbz	r0, b546c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b5464:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b5468:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b546a:	7044      	strb	r4, [r0, #1]
   b546c:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b546e:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b5470:	f7ff ff16 	bl	b52a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b5474:	4b1e      	ldr	r3, [pc, #120]	; (b54f0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b5476:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b5478:	2008      	movs	r0, #8
   b547a:	f7fe fe0c 	bl	b4096 <_Znwj>
   b547e:	4604      	mov	r4, r0
   b5480:	b110      	cbz	r0, b5488 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b5482:	a903      	add	r1, sp, #12
   b5484:	f7ff fec7 	bl	b5216 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b5488:	9600      	str	r6, [sp, #0]
   b548a:	fa5f f38a 	uxtb.w	r3, sl
   b548e:	464a      	mov	r2, r9
   b5490:	4641      	mov	r1, r8
   b5492:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b5494:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b5496:	f7ff fd8f 	bl	b4fb8 <spark_send_event>
   b549a:	b9b8      	cbnz	r0, b54cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b549c:	9b03      	ldr	r3, [sp, #12]
   b549e:	785b      	ldrb	r3, [r3, #1]
   b54a0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b54a4:	b993      	cbnz	r3, b54cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b54a6:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b54aa:	a905      	add	r1, sp, #20
   b54ac:	a803      	add	r0, sp, #12
   b54ae:	9205      	str	r2, [sp, #20]
   b54b0:	f8ad 3018 	strh.w	r3, [sp, #24]
   b54b4:	f7ff ff18 	bl	b52e8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b54b8:	a805      	add	r0, sp, #20
   b54ba:	f7ff fe82 	bl	b51c2 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b54be:	a805      	add	r0, sp, #20
   b54c0:	9909      	ldr	r1, [sp, #36]	; 0x24
   b54c2:	f7ff feb1 	bl	b5228 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b54c6:	a806      	add	r0, sp, #24
   b54c8:	f7fe fe40 	bl	b414c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b54cc:	a903      	add	r1, sp, #12
   b54ce:	a805      	add	r0, sp, #20
   b54d0:	f7ff fea1 	bl	b5216 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b54d4:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b54d6:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b54d8:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b54da:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b54dc:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b54de:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b54e0:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b54e2:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b54e4:	f7fe fe32 	bl	b414c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b54e8:	a804      	add	r0, sp, #16
   b54ea:	f7fe fe2f 	bl	b414c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b54ee:	e7ab      	b.n	b5448 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b54f0:	000b5571 	.word	0x000b5571

000b54f4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b54f4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b54f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b54f8:	4605      	mov	r5, r0
	switch (__op)
   b54fa:	d103      	bne.n	b5504 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b54fc:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b54fe:	6003      	str	r3, [r0, #0]
      }
   b5500:	2000      	movs	r0, #0
   b5502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b5504:	2a02      	cmp	r2, #2
   b5506:	d010      	beq.n	b552a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b5508:	2a03      	cmp	r2, #3
   b550a:	d1f9      	bne.n	b5500 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b550c:	6804      	ldr	r4, [r0, #0]
   b550e:	2c00      	cmp	r4, #0
   b5510:	d0f6      	beq.n	b5500 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b5512:	f104 0010 	add.w	r0, r4, #16
   b5516:	f7ff fe54 	bl	b51c2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b551a:	4620      	mov	r0, r4
   b551c:	f7ff fe13 	bl	b5146 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b5520:	2118      	movs	r1, #24
   b5522:	4620      	mov	r0, r4
   b5524:	f7fe fdbb 	bl	b409e <_ZdlPvj>
   b5528:	e7ea      	b.n	b5500 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b552a:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b552c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b552e:	f7fe fdb2 	bl	b4096 <_Znwj>
   b5532:	4604      	mov	r4, r0
   b5534:	b150      	cbz	r0, b554c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b5536:	4631      	mov	r1, r6
   b5538:	f7ff fec6 	bl	b52c8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b553c:	6930      	ldr	r0, [r6, #16]
   b553e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b5542:	b108      	cbz	r0, b5548 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b5544:	f002 ff14 	bl	b8370 <strdup>
        type_(type) {
   b5548:	6120      	str	r0, [r4, #16]
   b554a:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b554c:	602c      	str	r4, [r5, #0]
	}
   b554e:	e7d7      	b.n	b5500 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b5550 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b5550:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b5552:	2300      	movs	r3, #0
   b5554:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b5556:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b5558:	4604      	mov	r4, r0
   b555a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b555c:	b12b      	cbz	r3, b556a <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b555e:	2202      	movs	r2, #2
   b5560:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b5562:	68eb      	ldr	r3, [r5, #12]
   b5564:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b5566:	68ab      	ldr	r3, [r5, #8]
   b5568:	60a3      	str	r3, [r4, #8]
    }
   b556a:	4620      	mov	r0, r4
   b556c:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5570 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b5570:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5572:	b089      	sub	sp, #36	; 0x24
   b5574:	4604      	mov	r4, r0
   b5576:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b5578:	a801      	add	r0, sp, #4
   b557a:	4611      	mov	r1, r2
   b557c:	f7ff fe54 	bl	b5228 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b5580:	b1a4      	cbz	r4, b55ac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b5582:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b5584:	b11d      	cbz	r5, b558e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b5586:	4628      	mov	r0, r5
   b5588:	f002 fef2 	bl	b8370 <strdup>
   b558c:	4605      	mov	r5, r0
   b558e:	a801      	add	r0, sp, #4
   b5590:	a903      	add	r1, sp, #12
        type_(type) {
   b5592:	9503      	str	r5, [sp, #12]
   b5594:	f8ad 4010 	strh.w	r4, [sp, #16]
   b5598:	f7ff fea6 	bl	b52e8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b559c:	a803      	add	r0, sp, #12
   b559e:	f7ff fe10 	bl	b51c2 <_ZN8particle5ErrorD1Ev>
   b55a2:	a802      	add	r0, sp, #8
   b55a4:	f7fe fdd2 	bl	b414c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b55a8:	b009      	add	sp, #36	; 0x24
   b55aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b55ac:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b55ae:	2301      	movs	r3, #1
   b55b0:	e8d5 2f4f 	ldrexb	r2, [r5]
   b55b4:	2a00      	cmp	r2, #0
   b55b6:	d103      	bne.n	b55c0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b55b8:	e8c5 3f41 	strexb	r1, r3, [r5]
   b55bc:	2900      	cmp	r1, #0
   b55be:	d1f7      	bne.n	b55b0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b55c0:	d1ef      	bne.n	b55a2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b55c2:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b55c4:	f3bf 8f5b 	dmb	ish
   b55c8:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b55ca:	1d2b      	adds	r3, r5, #4
   b55cc:	f3bf 8f5b 	dmb	ish
   b55d0:	e853 6f00 	ldrex	r6, [r3]
   b55d4:	e843 4200 	strex	r2, r4, [r3]
   b55d8:	2a00      	cmp	r2, #0
   b55da:	d1f9      	bne.n	b55d0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b55dc:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b55e0:	2e00      	cmp	r6, #0
   b55e2:	d0de      	beq.n	b55a2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b55e4:	4620      	mov	r0, r4
   b55e6:	f7ff fcb3 	bl	b4f50 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b55ea:	4607      	mov	r7, r0
   b55ec:	b160      	cbz	r0, b5608 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b55ee:	f105 010c 	add.w	r1, r5, #12
   b55f2:	4630      	mov	r0, r6
   b55f4:	f7ff fe43 	bl	b527e <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b55f8:	4630      	mov	r0, r6
   b55fa:	f7ff fda4 	bl	b5146 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b55fe:	2110      	movs	r1, #16
   b5600:	4630      	mov	r0, r6
   b5602:	f7fe fd4c 	bl	b409e <_ZdlPvj>
   b5606:	e7cc      	b.n	b55a2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b5608:	4631      	mov	r1, r6
   b560a:	a803      	add	r0, sp, #12
   b560c:	f7ff ffa0 	bl	b5550 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b5610:	7b2b      	ldrb	r3, [r5, #12]
   b5612:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b5616:	2010      	movs	r0, #16
   b5618:	f7fe fd3d 	bl	b4096 <_Znwj>
   b561c:	4605      	mov	r5, r0
   b561e:	b1d0      	cbz	r0, b5656 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b5620:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5622:	2014      	movs	r0, #20
   b5624:	f7fe fd37 	bl	b4096 <_Znwj>
   b5628:	4604      	mov	r4, r0
   b562a:	b178      	cbz	r0, b564c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b562c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b562e:	4601      	mov	r1, r0
   b5630:	a803      	add	r0, sp, #12
   b5632:	f7ff fd91 	bl	b5158 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5636:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5638:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b563a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b563c:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b563e:	9205      	str	r2, [sp, #20]
   b5640:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b5642:	60e3      	str	r3, [r4, #12]
   b5644:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b5648:	9206      	str	r2, [sp, #24]
   b564a:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b564c:	4b06      	ldr	r3, [pc, #24]	; (b5668 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b564e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b5650:	4b06      	ldr	r3, [pc, #24]	; (b566c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5652:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b5654:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b5656:	a803      	add	r0, sp, #12
   b5658:	f7ff fd75 	bl	b5146 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b565c:	2200      	movs	r2, #0
   b565e:	4629      	mov	r1, r5
   b5660:	4803      	ldr	r0, [pc, #12]	; (b5670 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b5662:	f7ff fc7d 	bl	b4f60 <application_thread_invoke>
   b5666:	e7c7      	b.n	b55f8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b5668:	000b5291 	.word	0x000b5291
   b566c:	000b5675 	.word	0x000b5675
   b5670:	000b511f 	.word	0x000b511f

000b5674 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b5674:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b5676:	b570      	push	{r4, r5, r6, lr}
   b5678:	4604      	mov	r4, r0
	switch (__op)
   b567a:	d103      	bne.n	b5684 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b567c:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b567e:	6003      	str	r3, [r0, #0]
      }
   b5680:	2000      	movs	r0, #0
   b5682:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b5684:	2a02      	cmp	r2, #2
   b5686:	d00c      	beq.n	b56a2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b5688:	2a03      	cmp	r2, #3
   b568a:	d1f9      	bne.n	b5680 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b568c:	6804      	ldr	r4, [r0, #0]
   b568e:	2c00      	cmp	r4, #0
   b5690:	d0f6      	beq.n	b5680 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b5692:	4620      	mov	r0, r4
   b5694:	f7ff fd57 	bl	b5146 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b5698:	2114      	movs	r1, #20
   b569a:	4620      	mov	r0, r4
   b569c:	f7fe fcff 	bl	b409e <_ZdlPvj>
   b56a0:	e7ee      	b.n	b5680 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b56a2:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b56a4:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b56a6:	f7fe fcf6 	bl	b4096 <_Znwj>
   b56aa:	4605      	mov	r5, r0
   b56ac:	b120      	cbz	r0, b56b8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b56ae:	4631      	mov	r1, r6
   b56b0:	f7ff ff4e 	bl	b5550 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b56b4:	7c33      	ldrb	r3, [r6, #16]
   b56b6:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b56b8:	6025      	str	r5, [r4, #0]
	}
   b56ba:	e7e1      	b.n	b5680 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b56bc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b56bc:	2200      	movs	r2, #0
   b56be:	6840      	ldr	r0, [r0, #4]
   b56c0:	4611      	mov	r1, r2
   b56c2:	f7ff bcc1 	b.w	b5048 <network_listening>

000b56c6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b56c6:	2200      	movs	r2, #0
   b56c8:	6840      	ldr	r0, [r0, #4]
   b56ca:	4611      	mov	r1, r2
   b56cc:	f7ff bccc 	b.w	b5068 <network_get_listen_timeout>

000b56d0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b56d0:	6840      	ldr	r0, [r0, #4]
   b56d2:	2200      	movs	r2, #0
   b56d4:	f7ff bcc0 	b.w	b5058 <network_set_listen_timeout>

000b56d8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b56d8:	6840      	ldr	r0, [r0, #4]
   b56da:	2200      	movs	r2, #0
   b56dc:	f081 0101 	eor.w	r1, r1, #1
   b56e0:	f7ff bcaa 	b.w	b5038 <network_listen>

000b56e4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b56e4:	2300      	movs	r3, #0
   b56e6:	6840      	ldr	r0, [r0, #4]
   b56e8:	461a      	mov	r2, r3
   b56ea:	4619      	mov	r1, r3
   b56ec:	f7ff bc9c 	b.w	b5028 <network_off>

000b56f0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b56f0:	2300      	movs	r3, #0
   b56f2:	6840      	ldr	r0, [r0, #4]
   b56f4:	461a      	mov	r2, r3
   b56f6:	4619      	mov	r1, r3
   b56f8:	f7ff bc8e 	b.w	b5018 <network_on>

000b56fc <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b56fc:	2200      	movs	r2, #0
   b56fe:	6840      	ldr	r0, [r0, #4]
   b5700:	4611      	mov	r1, r2
   b5702:	f7ff bc81 	b.w	b5008 <network_ready>

000b5706 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5706:	2200      	movs	r2, #0
   b5708:	6840      	ldr	r0, [r0, #4]
   b570a:	4611      	mov	r1, r2
   b570c:	f7ff bc6c 	b.w	b4fe8 <network_connecting>

000b5710 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5710:	6840      	ldr	r0, [r0, #4]
   b5712:	2200      	movs	r2, #0
   b5714:	2102      	movs	r1, #2
   b5716:	f7ff bc6f 	b.w	b4ff8 <network_disconnect>

000b571a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b571a:	2300      	movs	r3, #0
   b571c:	6840      	ldr	r0, [r0, #4]
   b571e:	461a      	mov	r2, r3
   b5720:	f7ff bc5a 	b.w	b4fd8 <network_connect>

000b5724 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5724:	4b02      	ldr	r3, [pc, #8]	; (b5730 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b5726:	2203      	movs	r2, #3
   b5728:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b572a:	4a02      	ldr	r2, [pc, #8]	; (b5734 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b572c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b572e:	4770      	bx	lr
   b5730:	2003e6c8 	.word	0x2003e6c8
   b5734:	000b858c 	.word	0x000b858c

000b5738 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b5738:	4770      	bx	lr

000b573a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b573a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b573c:	4606      	mov	r6, r0
   b573e:	4615      	mov	r5, r2
   b5740:	460c      	mov	r4, r1
   b5742:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b5744:	42bc      	cmp	r4, r7
   b5746:	d006      	beq.n	b5756 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b5748:	6833      	ldr	r3, [r6, #0]
   b574a:	f814 1b01 	ldrb.w	r1, [r4], #1
   b574e:	689b      	ldr	r3, [r3, #8]
   b5750:	4630      	mov	r0, r6
   b5752:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b5754:	e7f6      	b.n	b5744 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b5756:	4628      	mov	r0, r5
   b5758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b575a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b575a:	7c00      	ldrb	r0, [r0, #16]
   b575c:	2200      	movs	r2, #0
   b575e:	f7ff bad7 	b.w	b4d10 <hal_i2c_write>

000b5762 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b5762:	7c00      	ldrb	r0, [r0, #16]
   b5764:	2100      	movs	r1, #0
   b5766:	f7ff badb 	b.w	b4d20 <hal_i2c_available>

000b576a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b576a:	7c00      	ldrb	r0, [r0, #16]
   b576c:	2100      	movs	r1, #0
   b576e:	f7ff badf 	b.w	b4d30 <hal_i2c_read>

000b5772 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b5772:	7c00      	ldrb	r0, [r0, #16]
   b5774:	2100      	movs	r1, #0
   b5776:	f7ff bae3 	b.w	b4d40 <hal_i2c_peek>

000b577a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b577a:	7c00      	ldrb	r0, [r0, #16]
   b577c:	2100      	movs	r1, #0
   b577e:	f7ff bae7 	b.w	b4d50 <hal_i2c_flush>

000b5782 <_ZN7TwoWireD0Ev>:
   b5782:	b510      	push	{r4, lr}
   b5784:	2114      	movs	r1, #20
   b5786:	4604      	mov	r4, r0
   b5788:	f7fe fc89 	bl	b409e <_ZdlPvj>
   b578c:	4620      	mov	r0, r4
   b578e:	bd10      	pop	{r4, pc}

000b5790 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5790:	b538      	push	{r3, r4, r5, lr}
   b5792:	4604      	mov	r4, r0
   b5794:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b5796:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b579a:	2200      	movs	r2, #0
   b579c:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b57a0:	4b09      	ldr	r3, [pc, #36]	; (b57c8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b57a2:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b57a4:	4608      	mov	r0, r1
   b57a6:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b57a8:	4629      	mov	r1, r5
   b57aa:	f7ff fae1 	bl	b4d70 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b57ae:	30bf      	adds	r0, #191	; 0xbf
   b57b0:	d108      	bne.n	b57c4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b57b2:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b57b4:	07db      	lsls	r3, r3, #31
   b57b6:	d505      	bpl.n	b57c4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b57b8:	6868      	ldr	r0, [r5, #4]
   b57ba:	f7ff fc75 	bl	b50a8 <free>
    free(conf.tx_buffer);
   b57be:	68e8      	ldr	r0, [r5, #12]
   b57c0:	f7ff fc72 	bl	b50a8 <free>
}
   b57c4:	4620      	mov	r0, r4
   b57c6:	bd38      	pop	{r3, r4, r5, pc}
   b57c8:	000b85c8 	.word	0x000b85c8

000b57cc <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b57cc:	2300      	movs	r3, #0
   b57ce:	7c00      	ldrb	r0, [r0, #16]
   b57d0:	461a      	mov	r2, r3
   b57d2:	4619      	mov	r1, r3
   b57d4:	f7ff ba84 	b.w	b4ce0 <hal_i2c_begin>

000b57d8 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b57d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b57da:	2200      	movs	r2, #0
   b57dc:	2314      	movs	r3, #20
   b57de:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b57e2:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b57e6:	780b      	ldrb	r3, [r1, #0]
   b57e8:	f88d 3008 	strb.w	r3, [sp, #8]
   b57ec:	684b      	ldr	r3, [r1, #4]
   b57ee:	9303      	str	r3, [sp, #12]
   b57f0:	68cb      	ldr	r3, [r1, #12]
   b57f2:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b57f4:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b57f6:	7a0b      	ldrb	r3, [r1, #8]
   b57f8:	9305      	str	r3, [sp, #20]
   b57fa:	a901      	add	r1, sp, #4
   b57fc:	f7ff fac0 	bl	b4d80 <hal_i2c_request_ex>
}
   b5800:	b007      	add	sp, #28
   b5802:	f85d fb04 	ldr.w	pc, [sp], #4

000b5806 <_ZN7TwoWire11requestFromEhjh>:
{
   b5806:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b5808:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b580a:	f88d 1000 	strb.w	r1, [sp]
   b580e:	f04f 0164 	mov.w	r1, #100	; 0x64
   b5812:	9103      	str	r1, [sp, #12]
   b5814:	bf18      	it	ne
   b5816:	2301      	movne	r3, #1
   b5818:	4669      	mov	r1, sp
    size_ = size;
   b581a:	9201      	str	r2, [sp, #4]
   b581c:	f88d 3008 	strb.w	r3, [sp, #8]
   b5820:	f7ff ffda 	bl	b57d8 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b5824:	b005      	add	sp, #20
   b5826:	f85d fb04 	ldr.w	pc, [sp], #4

000b582a <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b582a:	2301      	movs	r3, #1
   b582c:	f7ff bfeb 	b.w	b5806 <_ZN7TwoWire11requestFromEhjh>

000b5830 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b5830:	7c00      	ldrb	r0, [r0, #16]
   b5832:	2200      	movs	r2, #0
   b5834:	f7ff ba5c 	b.w	b4cf0 <hal_i2c_begin_transmission>

000b5838 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b5838:	7c00      	ldrb	r0, [r0, #16]
   b583a:	2200      	movs	r2, #0
   b583c:	f7ff ba60 	b.w	b4d00 <hal_i2c_end_transmission>

000b5840 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b5840:	2101      	movs	r1, #1
   b5842:	f7ff bff9 	b.w	b5838 <_ZN7TwoWire15endTransmissionEh>

000b5846 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b5846:	4770      	bx	lr

000b5848 <_ZN9IPAddressD0Ev>:
   b5848:	b510      	push	{r4, lr}
   b584a:	2118      	movs	r1, #24
   b584c:	4604      	mov	r4, r0
   b584e:	f7fe fc26 	bl	b409e <_ZdlPvj>
   b5852:	4620      	mov	r0, r4
   b5854:	bd10      	pop	{r4, pc}

000b5856 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b5856:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b5858:	7d03      	ldrb	r3, [r0, #20]
   b585a:	2b06      	cmp	r3, #6
{
   b585c:	b08d      	sub	sp, #52	; 0x34
   b585e:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5860:	f100 0704 	add.w	r7, r0, #4
   b5864:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b5868:	d012      	beq.n	b5890 <_ZNK9IPAddress7printToER5Print+0x3a>
   b586a:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b586e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b5872:	220a      	movs	r2, #10
   b5874:	4630      	mov	r0, r6
   b5876:	f000 f954 	bl	b5b22 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b587a:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b587c:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b587e:	d019      	beq.n	b58b4 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b5880:	2c00      	cmp	r4, #0
   b5882:	d0f4      	beq.n	b586e <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b5884:	212e      	movs	r1, #46	; 0x2e
   b5886:	4630      	mov	r0, r6
   b5888:	f000 f93c 	bl	b5b04 <_ZN5Print5printEc>
   b588c:	4404      	add	r4, r0
   b588e:	e7ee      	b.n	b586e <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5890:	232f      	movs	r3, #47	; 0x2f
   b5892:	466a      	mov	r2, sp
   b5894:	4639      	mov	r1, r7
   b5896:	200a      	movs	r0, #10
		buf[0] = 0;
   b5898:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b589c:	f7ff fa78 	bl	b4d90 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b58a0:	4668      	mov	r0, sp
   b58a2:	f002 fd82 	bl	b83aa <strlen>
   b58a6:	6833      	ldr	r3, [r6, #0]
   b58a8:	4602      	mov	r2, r0
   b58aa:	68db      	ldr	r3, [r3, #12]
   b58ac:	4669      	mov	r1, sp
   b58ae:	4630      	mov	r0, r6
   b58b0:	4798      	blx	r3
   b58b2:	4604      	mov	r4, r0
    }
    return n;
}
   b58b4:	4620      	mov	r0, r4
   b58b6:	b00d      	add	sp, #52	; 0x34
   b58b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b58bc <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b58bc:	b510      	push	{r4, lr}
   b58be:	4b05      	ldr	r3, [pc, #20]	; (b58d4 <_ZN9IPAddressC1Ev+0x18>)
   b58c0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b58c2:	2211      	movs	r2, #17
   b58c4:	f840 3b04 	str.w	r3, [r0], #4
   b58c8:	2100      	movs	r1, #0
   b58ca:	f002 fd1b 	bl	b8304 <memset>
}
   b58ce:	4620      	mov	r0, r4
   b58d0:	bd10      	pop	{r4, pc}
   b58d2:	bf00      	nop
   b58d4:	000b85f0 	.word	0x000b85f0

000b58d8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b58d8:	4603      	mov	r3, r0
   b58da:	4a07      	ldr	r2, [pc, #28]	; (b58f8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b58dc:	b510      	push	{r4, lr}
   b58de:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b58e2:	f101 0210 	add.w	r2, r1, #16
   b58e6:	f851 4b04 	ldr.w	r4, [r1], #4
   b58ea:	f843 4b04 	str.w	r4, [r3], #4
   b58ee:	4291      	cmp	r1, r2
   b58f0:	d1f9      	bne.n	b58e6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b58f2:	780a      	ldrb	r2, [r1, #0]
   b58f4:	701a      	strb	r2, [r3, #0]
}
   b58f6:	bd10      	pop	{r4, pc}
   b58f8:	000b85f0 	.word	0x000b85f0

000b58fc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b58fc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b58fe:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b5902:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b5906:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b590a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b590e:	2304      	movs	r3, #4
   b5910:	6041      	str	r1, [r0, #4]
   b5912:	7503      	strb	r3, [r0, #20]
}
   b5914:	bd10      	pop	{r4, pc}
	...

000b5918 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5918:	b507      	push	{r0, r1, r2, lr}
   b591a:	4b06      	ldr	r3, [pc, #24]	; (b5934 <_ZN9IPAddressC1EPKh+0x1c>)
   b591c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b591e:	78cb      	ldrb	r3, [r1, #3]
   b5920:	9300      	str	r3, [sp, #0]
   b5922:	788b      	ldrb	r3, [r1, #2]
   b5924:	784a      	ldrb	r2, [r1, #1]
   b5926:	7809      	ldrb	r1, [r1, #0]
   b5928:	f7ff ffe8 	bl	b58fc <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b592c:	b003      	add	sp, #12
   b592e:	f85d fb04 	ldr.w	pc, [sp], #4
   b5932:	bf00      	nop
   b5934:	000b85f0 	.word	0x000b85f0

000b5938 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b5938:	4b01      	ldr	r3, [pc, #4]	; (b5940 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b593a:	4a02      	ldr	r2, [pc, #8]	; (b5944 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b593c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b593e:	4770      	bx	lr
   b5940:	2003e6d0 	.word	0x2003e6d0
   b5944:	000b85fc 	.word	0x000b85fc

000b5948 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b5948:	2300      	movs	r3, #0
   b594a:	6840      	ldr	r0, [r0, #4]
   b594c:	461a      	mov	r2, r3
   b594e:	f7ff bb43 	b.w	b4fd8 <network_connect>

000b5952 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b5952:	6840      	ldr	r0, [r0, #4]
   b5954:	2200      	movs	r2, #0
   b5956:	2102      	movs	r1, #2
   b5958:	f7ff bb4e 	b.w	b4ff8 <network_disconnect>

000b595c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b595c:	2200      	movs	r2, #0
   b595e:	6840      	ldr	r0, [r0, #4]
   b5960:	4611      	mov	r1, r2
   b5962:	f7ff bb41 	b.w	b4fe8 <network_connecting>

000b5966 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b5966:	2200      	movs	r2, #0
   b5968:	6840      	ldr	r0, [r0, #4]
   b596a:	4611      	mov	r1, r2
   b596c:	f7ff bb4c 	b.w	b5008 <network_ready>

000b5970 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b5970:	2300      	movs	r3, #0
   b5972:	6840      	ldr	r0, [r0, #4]
   b5974:	461a      	mov	r2, r3
   b5976:	4619      	mov	r1, r3
   b5978:	f7ff bb4e 	b.w	b5018 <network_on>

000b597c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b597c:	2300      	movs	r3, #0
   b597e:	6840      	ldr	r0, [r0, #4]
   b5980:	461a      	mov	r2, r3
   b5982:	4619      	mov	r1, r3
   b5984:	f7ff bb50 	b.w	b5028 <network_off>

000b5988 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b5988:	6840      	ldr	r0, [r0, #4]
   b598a:	2100      	movs	r1, #0
   b598c:	f7ff bb74 	b.w	b5078 <network_is_on>

000b5990 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b5990:	6840      	ldr	r0, [r0, #4]
   b5992:	2100      	movs	r1, #0
   b5994:	f7ff bb78 	b.w	b5088 <network_is_off>

000b5998 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5998:	6840      	ldr	r0, [r0, #4]
   b599a:	2200      	movs	r2, #0
   b599c:	f081 0101 	eor.w	r1, r1, #1
   b59a0:	f7ff bb4a 	b.w	b5038 <network_listen>

000b59a4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b59a4:	6840      	ldr	r0, [r0, #4]
   b59a6:	2200      	movs	r2, #0
   b59a8:	f7ff bb56 	b.w	b5058 <network_set_listen_timeout>

000b59ac <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b59ac:	2200      	movs	r2, #0
   b59ae:	6840      	ldr	r0, [r0, #4]
   b59b0:	4611      	mov	r1, r2
   b59b2:	f7ff bb59 	b.w	b5068 <network_get_listen_timeout>

000b59b6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b59b6:	2200      	movs	r2, #0
   b59b8:	6840      	ldr	r0, [r0, #4]
   b59ba:	4611      	mov	r1, r2
   b59bc:	f7ff bb44 	b.w	b5048 <network_listening>

000b59c0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b59c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b59c4:	b095      	sub	sp, #84	; 0x54
   b59c6:	4614      	mov	r4, r2
   b59c8:	460d      	mov	r5, r1
   b59ca:	4607      	mov	r7, r0
    IPAddress addr;
   b59cc:	f7ff ff76 	bl	b58bc <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b59d0:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b59d2:	221c      	movs	r2, #28
   b59d4:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b59d6:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b59d8:	f002 fc94 	bl	b8304 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b59dc:	2340      	movs	r3, #64	; 0x40
   b59de:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b59e0:	4620      	mov	r0, r4
   b59e2:	466b      	mov	r3, sp
   b59e4:	aa0c      	add	r2, sp, #48	; 0x30
   b59e6:	2100      	movs	r1, #0
   b59e8:	f7ff f9e2 	bl	b4db0 <netdb_getaddrinfo>
    if (!r) {
   b59ec:	4604      	mov	r4, r0
   b59ee:	2800      	cmp	r0, #0
   b59f0:	d14b      	bne.n	b5a8a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b59f2:	4602      	mov	r2, r0
   b59f4:	2101      	movs	r1, #1
   b59f6:	6868      	ldr	r0, [r5, #4]
   b59f8:	f7ff fb06 	bl	b5008 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b59fc:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b59fe:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5a00:	4622      	mov	r2, r4
   b5a02:	6868      	ldr	r0, [r5, #4]
   b5a04:	f7ff fb00 	bl	b5008 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5a08:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5a0a:	4681      	mov	r9, r0
        bool ok = false;
   b5a0c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5a0e:	2e00      	cmp	r6, #0
   b5a10:	d03b      	beq.n	b5a8a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b5a12:	2900      	cmp	r1, #0
   b5a14:	d139      	bne.n	b5a8a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b5a16:	6873      	ldr	r3, [r6, #4]
   b5a18:	2b02      	cmp	r3, #2
   b5a1a:	d003      	beq.n	b5a24 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b5a1c:	2b0a      	cmp	r3, #10
   b5a1e:	d011      	beq.n	b5a44 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5a20:	69f6      	ldr	r6, [r6, #28]
   b5a22:	e7f4      	b.n	b5a0e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b5a24:	f1b8 0f00 	cmp.w	r8, #0
   b5a28:	d0fa      	beq.n	b5a20 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b5a2a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b5a2c:	a806      	add	r0, sp, #24
   b5a2e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5a30:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b5a32:	f7ff ff71 	bl	b5918 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5a36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5a38:	1d3c      	adds	r4, r7, #4
   b5a3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5a3c:	682b      	ldr	r3, [r5, #0]
   b5a3e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5a40:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b5a42:	e7ed      	b.n	b5a20 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b5a44:	f1b9 0f00 	cmp.w	r9, #0
   b5a48:	d0ea      	beq.n	b5a20 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b5a4a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b5a4c:	2210      	movs	r2, #16
   b5a4e:	a801      	add	r0, sp, #4
   b5a50:	f002 fc58 	bl	b8304 <memset>
                    a.v = 6;
   b5a54:	2306      	movs	r3, #6
   b5a56:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5a5a:	ad01      	add	r5, sp, #4
   b5a5c:	f104 0308 	add.w	r3, r4, #8
   b5a60:	3418      	adds	r4, #24
   b5a62:	6818      	ldr	r0, [r3, #0]
   b5a64:	6859      	ldr	r1, [r3, #4]
   b5a66:	462a      	mov	r2, r5
   b5a68:	c203      	stmia	r2!, {r0, r1}
   b5a6a:	3308      	adds	r3, #8
   b5a6c:	42a3      	cmp	r3, r4
   b5a6e:	4615      	mov	r5, r2
   b5a70:	d1f7      	bne.n	b5a62 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b5a72:	a901      	add	r1, sp, #4
   b5a74:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b5a76:	ad07      	add	r5, sp, #28
   b5a78:	f7ff ff2e 	bl	b58d8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5a7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5a7e:	1d3c      	adds	r4, r7, #4
   b5a80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5a82:	682b      	ldr	r3, [r5, #0]
   b5a84:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5a86:	4649      	mov	r1, r9
   b5a88:	e7ca      	b.n	b5a20 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b5a8a:	9800      	ldr	r0, [sp, #0]
   b5a8c:	f7ff f988 	bl	b4da0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b5a90:	4638      	mov	r0, r7
   b5a92:	b015      	add	sp, #84	; 0x54
   b5a94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5a98 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b5a98:	4b02      	ldr	r3, [pc, #8]	; (b5aa4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b5a9a:	4a03      	ldr	r2, [pc, #12]	; (b5aa8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b5a9c:	601a      	str	r2, [r3, #0]
   b5a9e:	2200      	movs	r2, #0
   b5aa0:	605a      	str	r2, [r3, #4]

} // spark
   b5aa2:	4770      	bx	lr
   b5aa4:	2003e6d4 	.word	0x2003e6d4
   b5aa8:	000b8608 	.word	0x000b8608

000b5aac <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b5aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5aae:	4606      	mov	r6, r0
   b5ab0:	460d      	mov	r5, r1
  size_t n = 0;
   b5ab2:	188f      	adds	r7, r1, r2
   b5ab4:	2400      	movs	r4, #0
  while (size--) {
   b5ab6:	42bd      	cmp	r5, r7
   b5ab8:	d00c      	beq.n	b5ad4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b5aba:	6833      	ldr	r3, [r6, #0]
   b5abc:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5ac0:	689b      	ldr	r3, [r3, #8]
   b5ac2:	4630      	mov	r0, r6
   b5ac4:	4798      	blx	r3
     if (chunk>=0)
   b5ac6:	1e03      	subs	r3, r0, #0
   b5ac8:	db01      	blt.n	b5ace <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b5aca:	441c      	add	r4, r3
  while (size--) {
   b5acc:	e7f3      	b.n	b5ab6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b5ace:	2c00      	cmp	r4, #0
   b5ad0:	bf08      	it	eq
   b5ad2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b5ad4:	4620      	mov	r0, r4
   b5ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5ad8 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b5ad8:	b513      	push	{r0, r1, r4, lr}
   b5ada:	4604      	mov	r4, r0
    }
   b5adc:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b5ade:	b159      	cbz	r1, b5af8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5ae0:	9101      	str	r1, [sp, #4]
   b5ae2:	f002 fc62 	bl	b83aa <strlen>
   b5ae6:	6823      	ldr	r3, [r4, #0]
   b5ae8:	9901      	ldr	r1, [sp, #4]
   b5aea:	68db      	ldr	r3, [r3, #12]
   b5aec:	4602      	mov	r2, r0
   b5aee:	4620      	mov	r0, r4
    }
   b5af0:	b002      	add	sp, #8
   b5af2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b5af6:	4718      	bx	r3
    }
   b5af8:	b002      	add	sp, #8
   b5afa:	bd10      	pop	{r4, pc}

000b5afc <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b5afc:	b508      	push	{r3, lr}
  return write(str);
   b5afe:	f7ff ffeb 	bl	b5ad8 <_ZN5Print5writeEPKc>
}
   b5b02:	bd08      	pop	{r3, pc}

000b5b04 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b5b04:	6803      	ldr	r3, [r0, #0]
   b5b06:	689b      	ldr	r3, [r3, #8]
   b5b08:	4718      	bx	r3

000b5b0a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b5b0a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b5b0c:	210d      	movs	r1, #13
{
   b5b0e:	4605      	mov	r5, r0
  size_t n = print('\r');
   b5b10:	f7ff fff8 	bl	b5b04 <_ZN5Print5printEc>
  n += print('\n');
   b5b14:	210a      	movs	r1, #10
  size_t n = print('\r');
   b5b16:	4604      	mov	r4, r0
  n += print('\n');
   b5b18:	4628      	mov	r0, r5
   b5b1a:	f7ff fff3 	bl	b5b04 <_ZN5Print5printEc>
  return n;
}
   b5b1e:	4420      	add	r0, r4
   b5b20:	bd38      	pop	{r3, r4, r5, pc}

000b5b22 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b5b22:	b530      	push	{r4, r5, lr}
   b5b24:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b5b26:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5b28:	2a01      	cmp	r2, #1
  *str = '\0';
   b5b2a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b5b2e:	bf98      	it	ls
   b5b30:	220a      	movls	r2, #10
   b5b32:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b5b34:	460d      	mov	r5, r1
   b5b36:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b5b3a:	fb01 5312 	mls	r3, r1, r2, r5
   b5b3e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5b42:	2b09      	cmp	r3, #9
   b5b44:	bf94      	ite	ls
   b5b46:	3330      	addls	r3, #48	; 0x30
   b5b48:	3337      	addhi	r3, #55	; 0x37
   b5b4a:	b2db      	uxtb	r3, r3
  } while(n);
   b5b4c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5b4e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b5b52:	d9ef      	bls.n	b5b34 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b5b54:	4621      	mov	r1, r4
   b5b56:	f7ff ffbf 	bl	b5ad8 <_ZN5Print5writeEPKc>
}
   b5b5a:	b00b      	add	sp, #44	; 0x2c
   b5b5c:	bd30      	pop	{r4, r5, pc}

000b5b5e <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b5b5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5b62:	b086      	sub	sp, #24
   b5b64:	af00      	add	r7, sp, #0
   b5b66:	4605      	mov	r5, r0
   b5b68:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b5b6a:	1d38      	adds	r0, r7, #4
   b5b6c:	2114      	movs	r1, #20
{
   b5b6e:	4614      	mov	r4, r2
    va_copy(args2, args);
   b5b70:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b5b72:	f7ff faa1 	bl	b50b8 <vsnprintf>

    if (n<bufsize)
   b5b76:	2813      	cmp	r0, #19
   b5b78:	d80e      	bhi.n	b5b98 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b5b7a:	1d39      	adds	r1, r7, #4
   b5b7c:	4628      	mov	r0, r5
   b5b7e:	f7ff ffab 	bl	b5ad8 <_ZN5Print5writeEPKc>
   b5b82:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b5b84:	b11e      	cbz	r6, b5b8e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b5b86:	4628      	mov	r0, r5
   b5b88:	f7ff ffbf 	bl	b5b0a <_ZN5Print7printlnEv>
   b5b8c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b5b8e:	4620      	mov	r0, r4
   b5b90:	3718      	adds	r7, #24
   b5b92:	46bd      	mov	sp, r7
   b5b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b5b98:	f100 0308 	add.w	r3, r0, #8
   b5b9c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b5ba0:	46e8      	mov	r8, sp
        char bigger[n+1];
   b5ba2:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b5ba6:	4622      	mov	r2, r4
   b5ba8:	1c41      	adds	r1, r0, #1
   b5baa:	683b      	ldr	r3, [r7, #0]
   b5bac:	4668      	mov	r0, sp
   b5bae:	f7ff fa83 	bl	b50b8 <vsnprintf>
  return write(str);
   b5bb2:	4669      	mov	r1, sp
   b5bb4:	4628      	mov	r0, r5
   b5bb6:	f7ff ff8f 	bl	b5ad8 <_ZN5Print5writeEPKc>
   b5bba:	4604      	mov	r4, r0
   b5bbc:	46c5      	mov	sp, r8
   b5bbe:	e7e1      	b.n	b5b84 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b5bc0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b5bc0:	4b01      	ldr	r3, [pc, #4]	; (b5bc8 <_GLOBAL__sub_I_RGB+0x8>)
   b5bc2:	2200      	movs	r2, #0
   b5bc4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b5bc6:	4770      	bx	lr
   b5bc8:	2003e6dc 	.word	0x2003e6dc

000b5bcc <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b5bcc:	2100      	movs	r1, #0
   b5bce:	f7ff b92f 	b.w	b4e30 <hal_spi_release>

000b5bd2 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b5bd2:	2100      	movs	r1, #0
   b5bd4:	f7ff b924 	b.w	b4e20 <hal_spi_acquire>

000b5bd8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b5bd8:	b510      	push	{r4, lr}
   b5bda:	4604      	mov	r4, r0
   b5bdc:	4608      	mov	r0, r1
{
    _spi = spi;
   b5bde:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b5be0:	f7ff f8fe 	bl	b4de0 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b5be4:	2300      	movs	r3, #0
   b5be6:	6063      	str	r3, [r4, #4]
}
   b5be8:	4620      	mov	r0, r4
   b5bea:	bd10      	pop	{r4, pc}

000b5bec <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b5bec:	b513      	push	{r0, r1, r4, lr}
   b5bee:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b5bf0:	7800      	ldrb	r0, [r0, #0]
   b5bf2:	f7ff ffee 	bl	b5bd2 <_ZN8SPIClass4lockEv.isra.0>
   b5bf6:	b958      	cbnz	r0, b5c10 <_ZN8SPIClass5beginEv+0x24>
   b5bf8:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b5bfa:	9001      	str	r0, [sp, #4]
   b5bfc:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b5c00:	f7ff f8de 	bl	b4dc0 <hal_spi_begin>
        unlock();
   b5c04:	9801      	ldr	r0, [sp, #4]
    }
}
   b5c06:	b002      	add	sp, #8
   b5c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5c0c:	f7ff bfde 	b.w	b5bcc <_ZN8SPIClass6unlockEv.isra.0>
   b5c10:	b002      	add	sp, #8
   b5c12:	bd10      	pop	{r4, pc}

000b5c14 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b5c14:	7800      	ldrb	r0, [r0, #0]
   b5c16:	f7ff bfd9 	b.w	b5bcc <_ZN8SPIClass6unlockEv.isra.0>
	...

000b5c1c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b5c1c:	0840      	lsrs	r0, r0, #1
{
   b5c1e:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b5c20:	6018      	str	r0, [r3, #0]
   b5c22:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b5c24:	6818      	ldr	r0, [r3, #0]
   b5c26:	4288      	cmp	r0, r1
   b5c28:	b2e5      	uxtb	r5, r4
   b5c2a:	d906      	bls.n	b5c3a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b5c2c:	3401      	adds	r4, #1
   b5c2e:	2c08      	cmp	r4, #8
   b5c30:	d002      	beq.n	b5c38 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b5c32:	0840      	lsrs	r0, r0, #1
   b5c34:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b5c36:	e7f5      	b.n	b5c24 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b5c38:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b5c3a:	4b02      	ldr	r3, [pc, #8]	; (b5c44 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b5c3c:	5d5b      	ldrb	r3, [r3, r5]
   b5c3e:	7013      	strb	r3, [r2, #0]
}
   b5c40:	bd30      	pop	{r4, r5, pc}
   b5c42:	bf00      	nop
   b5c44:	000b863c 	.word	0x000b863c

000b5c48 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b5c48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5c4c:	4606      	mov	r6, r0
   b5c4e:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b5c50:	7800      	ldrb	r0, [r0, #0]
{
   b5c52:	460c      	mov	r4, r1
    CHECK(lock());
   b5c54:	f7ff ffbd 	bl	b5bd2 <_ZN8SPIClass4lockEv.isra.0>
   b5c58:	2800      	cmp	r0, #0
   b5c5a:	db1b      	blt.n	b5c94 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b5c5c:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b5c5e:	2214      	movs	r2, #20
   b5c60:	2100      	movs	r1, #0
   b5c62:	a809      	add	r0, sp, #36	; 0x24
   b5c64:	f002 fb4e 	bl	b8304 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b5c68:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b5c6a:	2200      	movs	r2, #0
   b5c6c:	a909      	add	r1, sp, #36	; 0x24
   b5c6e:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b5c70:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b5c74:	f7ff f8c4 	bl	b4e00 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b5c78:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b5c7c:	b113      	cbz	r3, b5c84 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b5c7e:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b5c82:	b155      	cbz	r5, b5c9a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b5c84:	2700      	movs	r7, #0
   b5c86:	46b9      	mov	r9, r7
   b5c88:	46b8      	mov	r8, r7
   b5c8a:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b5c8c:	7923      	ldrb	r3, [r4, #4]
   b5c8e:	b15d      	cbz	r5, b5ca8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b5c90:	b1c3      	cbz	r3, b5cc4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b5c92:	2000      	movs	r0, #0
}
   b5c94:	b00f      	add	sp, #60	; 0x3c
   b5c96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b5c9a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b5c9e:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b5ca2:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b5ca6:	e7f1      	b.n	b5c8c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b5ca8:	2b00      	cmp	r3, #0
   b5caa:	d135      	bne.n	b5d18 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b5cac:	68a3      	ldr	r3, [r4, #8]
   b5cae:	4543      	cmp	r3, r8
   b5cb0:	d108      	bne.n	b5cc4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b5cb2:	f88d 9020 	strb.w	r9, [sp, #32]
   b5cb6:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b5cba:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b5cbe:	89a3      	ldrh	r3, [r4, #12]
   b5cc0:	429a      	cmp	r2, r3
   b5cc2:	d0e6      	beq.n	b5c92 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b5cc4:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b5cc6:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b5cc8:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b5ccc:	980a      	ldr	r0, [sp, #40]	; 0x28
   b5cce:	ab04      	add	r3, sp, #16
   b5cd0:	f10d 020f 	add.w	r2, sp, #15
   b5cd4:	f7ff ffa2 	bl	b5c1c <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b5cd8:	7921      	ldrb	r1, [r4, #4]
   b5cda:	b985      	cbnz	r5, b5cfe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b5cdc:	b989      	cbnz	r1, b5d02 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b5cde:	68a3      	ldr	r3, [r4, #8]
   b5ce0:	4543      	cmp	r3, r8
   b5ce2:	d30e      	bcc.n	b5d02 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b5ce4:	f88d 9020 	strb.w	r9, [sp, #32]
   b5ce8:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b5cec:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b5cf0:	89a3      	ldrh	r3, [r4, #12]
   b5cf2:	429a      	cmp	r2, r3
   b5cf4:	d105      	bne.n	b5d02 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b5cf6:	9b04      	ldr	r3, [sp, #16]
   b5cf8:	4543      	cmp	r3, r8
   b5cfa:	d102      	bne.n	b5d02 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b5cfc:	e7c9      	b.n	b5c92 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b5cfe:	2900      	cmp	r1, #0
   b5d00:	d1f9      	bne.n	b5cf6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b5d02:	2300      	movs	r3, #0
   b5d04:	9301      	str	r3, [sp, #4]
   b5d06:	7b63      	ldrb	r3, [r4, #13]
   b5d08:	9300      	str	r3, [sp, #0]
   b5d0a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b5d0e:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b5d10:	7830      	ldrb	r0, [r6, #0]
   b5d12:	f7ff f87d 	bl	b4e10 <hal_spi_set_settings>
   b5d16:	e7bc      	b.n	b5c92 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b5d18:	e9cd 5500 	strd	r5, r5, [sp]
   b5d1c:	462b      	mov	r3, r5
   b5d1e:	462a      	mov	r2, r5
   b5d20:	2101      	movs	r1, #1
   b5d22:	e7f5      	b.n	b5d10 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b5d24 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b5d24:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b5d26:	7800      	ldrb	r0, [r0, #0]
   b5d28:	f7ff f852 	bl	b4dd0 <hal_spi_transfer>
}
   b5d2c:	b2c0      	uxtb	r0, r0
   b5d2e:	bd08      	pop	{r3, pc}

000b5d30 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5d30:	4b05      	ldr	r3, [pc, #20]	; (b5d48 <_GLOBAL__sub_I_System+0x18>)
   b5d32:	2202      	movs	r2, #2
   b5d34:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5d36:	4b05      	ldr	r3, [pc, #20]	; (b5d4c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b5d38:	4a05      	ldr	r2, [pc, #20]	; (b5d50 <_GLOBAL__sub_I_System+0x20>)
   b5d3a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5d3c:	2000      	movs	r0, #0
   b5d3e:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5d42:	f7ff b8f5 	b.w	b4f30 <set_system_mode>
   b5d46:	bf00      	nop
   b5d48:	2003e6f8 	.word	0x2003e6f8
   b5d4c:	2003e6ec 	.word	0x2003e6ec
   b5d50:	ffff0000 	.word	0xffff0000

000b5d54 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5d54:	4b02      	ldr	r3, [pc, #8]	; (b5d60 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b5d56:	681a      	ldr	r2, [r3, #0]
   b5d58:	4b02      	ldr	r3, [pc, #8]	; (b5d64 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b5d5a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5d5c:	4770      	bx	lr
   b5d5e:	bf00      	nop
   b5d60:	2003e5f0 	.word	0x2003e5f0
   b5d64:	2003e6fc 	.word	0x2003e6fc

000b5d68 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b5d68:	4770      	bx	lr

000b5d6a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5d6a:	7441      	strb	r1, [r0, #17]
}
   b5d6c:	4770      	bx	lr

000b5d6e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b5d6e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b5d70:	7c00      	ldrb	r0, [r0, #16]
   b5d72:	f7ff f895 	bl	b4ea0 <hal_usart_available_data_for_write>
}
   b5d76:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5d7a:	bd08      	pop	{r3, pc}

000b5d7c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b5d7c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b5d7e:	7c00      	ldrb	r0, [r0, #16]
   b5d80:	f7ff f866 	bl	b4e50 <hal_usart_available>
}
   b5d84:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5d88:	bd08      	pop	{r3, pc}

000b5d8a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b5d8a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b5d8c:	7c00      	ldrb	r0, [r0, #16]
   b5d8e:	f7ff f86f 	bl	b4e70 <hal_usart_peek>
}
   b5d92:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5d96:	bd08      	pop	{r3, pc}

000b5d98 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5d98:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b5d9a:	7c00      	ldrb	r0, [r0, #16]
   b5d9c:	f7ff f860 	bl	b4e60 <hal_usart_read>
}
   b5da0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5da4:	bd08      	pop	{r3, pc}

000b5da6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b5da6:	7c00      	ldrb	r0, [r0, #16]
   b5da8:	f7ff b86a 	b.w	b4e80 <hal_usart_flush>

000b5dac <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5dac:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5dae:	7c45      	ldrb	r5, [r0, #17]
{
   b5db0:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5db2:	b12d      	cbz	r5, b5dc0 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b5db4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b5db6:	b003      	add	sp, #12
   b5db8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b5dbc:	f7ff b840 	b.w	b4e40 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5dc0:	7c00      	ldrb	r0, [r0, #16]
   b5dc2:	9101      	str	r1, [sp, #4]
   b5dc4:	f7ff f86c 	bl	b4ea0 <hal_usart_available_data_for_write>
   b5dc8:	2800      	cmp	r0, #0
   b5dca:	9901      	ldr	r1, [sp, #4]
   b5dcc:	dcf2      	bgt.n	b5db4 <_ZN11USARTSerial5writeEh+0x8>
}
   b5dce:	4628      	mov	r0, r5
   b5dd0:	b003      	add	sp, #12
   b5dd2:	bd30      	pop	{r4, r5, pc}

000b5dd4 <_ZN11USARTSerialD0Ev>:
   b5dd4:	b510      	push	{r4, lr}
   b5dd6:	2114      	movs	r1, #20
   b5dd8:	4604      	mov	r4, r0
   b5dda:	f7fe f960 	bl	b409e <_ZdlPvj>
   b5dde:	4620      	mov	r0, r4
   b5de0:	bd10      	pop	{r4, pc}
	...

000b5de4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b5de4:	b510      	push	{r4, lr}
   b5de6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5dea:	4604      	mov	r4, r0
   b5dec:	4608      	mov	r0, r1
   b5dee:	4611      	mov	r1, r2
   b5df0:	2200      	movs	r2, #0
   b5df2:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5df6:	4b04      	ldr	r3, [pc, #16]	; (b5e08 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b5df8:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5dfa:	2301      	movs	r3, #1
  _serial = serial;
   b5dfc:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5dfe:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b5e00:	f7ff f856 	bl	b4eb0 <hal_usart_init_ex>
}
   b5e04:	4620      	mov	r0, r4
   b5e06:	bd10      	pop	{r4, pc}
   b5e08:	000b8668 	.word	0x000b8668

000b5e0c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5e0c:	7441      	strb	r1, [r0, #17]
}
   b5e0e:	4770      	bx	lr

000b5e10 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5e10:	4770      	bx	lr

000b5e12 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b5e12:	4770      	bx	lr

000b5e14 <_ZN9USBSerial4readEv>:
{
   b5e14:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b5e16:	2100      	movs	r1, #0
   b5e18:	7c00      	ldrb	r0, [r0, #16]
   b5e1a:	f7ff f871 	bl	b4f00 <HAL_USB_USART_Receive_Data>
}
   b5e1e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5e22:	bd08      	pop	{r3, pc}

000b5e24 <_ZN9USBSerial4peekEv>:
{
   b5e24:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b5e26:	2101      	movs	r1, #1
   b5e28:	7c00      	ldrb	r0, [r0, #16]
   b5e2a:	f7ff f869 	bl	b4f00 <HAL_USB_USART_Receive_Data>
}
   b5e2e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5e32:	bd08      	pop	{r3, pc}

000b5e34 <_ZN9USBSerial17availableForWriteEv>:
{
   b5e34:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b5e36:	7c00      	ldrb	r0, [r0, #16]
   b5e38:	f7ff f85a 	bl	b4ef0 <HAL_USB_USART_Available_Data_For_Write>
}
   b5e3c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5e40:	bd08      	pop	{r3, pc}

000b5e42 <_ZN9USBSerial9availableEv>:
{
   b5e42:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b5e44:	7c00      	ldrb	r0, [r0, #16]
   b5e46:	f7ff f84b 	bl	b4ee0 <HAL_USB_USART_Available_Data>
}
   b5e4a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5e4e:	bd08      	pop	{r3, pc}

000b5e50 <_ZN9USBSerial5writeEh>:
{
   b5e50:	b513      	push	{r0, r1, r4, lr}
   b5e52:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5e54:	7c00      	ldrb	r0, [r0, #16]
{
   b5e56:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5e58:	f7ff f84a 	bl	b4ef0 <HAL_USB_USART_Available_Data_For_Write>
   b5e5c:	2800      	cmp	r0, #0
   b5e5e:	9901      	ldr	r1, [sp, #4]
   b5e60:	dc01      	bgt.n	b5e66 <_ZN9USBSerial5writeEh+0x16>
   b5e62:	7c60      	ldrb	r0, [r4, #17]
   b5e64:	b120      	cbz	r0, b5e70 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b5e66:	7c20      	ldrb	r0, [r4, #16]
   b5e68:	f7ff f852 	bl	b4f10 <HAL_USB_USART_Send_Data>
   b5e6c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b5e70:	b002      	add	sp, #8
   b5e72:	bd10      	pop	{r4, pc}

000b5e74 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b5e74:	7c00      	ldrb	r0, [r0, #16]
   b5e76:	f7ff b853 	b.w	b4f20 <HAL_USB_USART_Flush_Data>

000b5e7a <_ZN9USBSerialD0Ev>:
   b5e7a:	b510      	push	{r4, lr}
   b5e7c:	2114      	movs	r1, #20
   b5e7e:	4604      	mov	r4, r0
   b5e80:	f7fe f90d 	bl	b409e <_ZdlPvj>
   b5e84:	4620      	mov	r0, r4
   b5e86:	bd10      	pop	{r4, pc}

000b5e88 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b5e88:	b510      	push	{r4, lr}
   b5e8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5e8e:	4604      	mov	r4, r0
   b5e90:	4608      	mov	r0, r1
   b5e92:	2100      	movs	r1, #0
   b5e94:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5e98:	4b04      	ldr	r3, [pc, #16]	; (b5eac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b5e9a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5e9c:	2301      	movs	r3, #1
  _serial = serial;
   b5e9e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5ea0:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b5ea2:	4611      	mov	r1, r2
   b5ea4:	f7ff f80c 	bl	b4ec0 <HAL_USB_USART_Init>
}
   b5ea8:	4620      	mov	r0, r4
   b5eaa:	bd10      	pop	{r4, pc}
   b5eac:	000b8698 	.word	0x000b8698

000b5eb0 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b5eb0:	7c00      	ldrb	r0, [r0, #16]
   b5eb2:	2200      	movs	r2, #0
   b5eb4:	f7ff b80c 	b.w	b4ed0 <HAL_USB_USART_Begin>

000b5eb8 <_Z19acquireSerialBufferv>:
{
   b5eb8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b5eba:	2214      	movs	r2, #20
{
   b5ebc:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b5ebe:	2100      	movs	r1, #0
   b5ec0:	f002 fa20 	bl	b8304 <memset>
}
   b5ec4:	4620      	mov	r0, r4
   b5ec6:	bd10      	pop	{r4, pc}

000b5ec8 <_Z16_fetch_usbserialv>:
{
   b5ec8:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5eca:	4c0f      	ldr	r4, [pc, #60]	; (b5f08 <_Z16_fetch_usbserialv+0x40>)
{
   b5ecc:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b5ece:	a803      	add	r0, sp, #12
   b5ed0:	f7ff fff2 	bl	b5eb8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5ed4:	7821      	ldrb	r1, [r4, #0]
   b5ed6:	f3bf 8f5b 	dmb	ish
   b5eda:	f011 0101 	ands.w	r1, r1, #1
   b5ede:	d10f      	bne.n	b5f00 <_Z16_fetch_usbserialv+0x38>
   b5ee0:	4620      	mov	r0, r4
   b5ee2:	9101      	str	r1, [sp, #4]
   b5ee4:	f7fe f8dd 	bl	b40a2 <__cxa_guard_acquire>
   b5ee8:	9901      	ldr	r1, [sp, #4]
   b5eea:	b148      	cbz	r0, b5f00 <_Z16_fetch_usbserialv+0x38>
   b5eec:	aa03      	add	r2, sp, #12
   b5eee:	4807      	ldr	r0, [pc, #28]	; (b5f0c <_Z16_fetch_usbserialv+0x44>)
   b5ef0:	f7ff ffca 	bl	b5e88 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b5ef4:	4620      	mov	r0, r4
   b5ef6:	f7fe f8d9 	bl	b40ac <__cxa_guard_release>
   b5efa:	4805      	ldr	r0, [pc, #20]	; (b5f10 <_Z16_fetch_usbserialv+0x48>)
   b5efc:	f002 f9ee 	bl	b82dc <atexit>
	return _usbserial;
}
   b5f00:	4802      	ldr	r0, [pc, #8]	; (b5f0c <_Z16_fetch_usbserialv+0x44>)
   b5f02:	b008      	add	sp, #32
   b5f04:	bd10      	pop	{r4, pc}
   b5f06:	bf00      	nop
   b5f08:	2003e700 	.word	0x2003e700
   b5f0c:	2003e704 	.word	0x2003e704
   b5f10:	000b5e11 	.word	0x000b5e11

000b5f14 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b5f14:	2200      	movs	r2, #0
   b5f16:	6840      	ldr	r0, [r0, #4]
   b5f18:	4611      	mov	r1, r2
   b5f1a:	f7ff b875 	b.w	b5008 <network_ready>

000b5f1e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5f1e:	2200      	movs	r2, #0
   b5f20:	6840      	ldr	r0, [r0, #4]
   b5f22:	4611      	mov	r1, r2
   b5f24:	f7ff b890 	b.w	b5048 <network_listening>

000b5f28 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5f28:	2200      	movs	r2, #0
   b5f2a:	6840      	ldr	r0, [r0, #4]
   b5f2c:	4611      	mov	r1, r2
   b5f2e:	f7ff b89b 	b.w	b5068 <network_get_listen_timeout>

000b5f32 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5f32:	6840      	ldr	r0, [r0, #4]
   b5f34:	2200      	movs	r2, #0
   b5f36:	f7ff b88f 	b.w	b5058 <network_set_listen_timeout>

000b5f3a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5f3a:	6840      	ldr	r0, [r0, #4]
   b5f3c:	2200      	movs	r2, #0
   b5f3e:	f081 0101 	eor.w	r1, r1, #1
   b5f42:	f7ff b879 	b.w	b5038 <network_listen>

000b5f46 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5f46:	2300      	movs	r3, #0
   b5f48:	6840      	ldr	r0, [r0, #4]
   b5f4a:	461a      	mov	r2, r3
   b5f4c:	4619      	mov	r1, r3
   b5f4e:	f7ff b86b 	b.w	b5028 <network_off>

000b5f52 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5f52:	2300      	movs	r3, #0
   b5f54:	6840      	ldr	r0, [r0, #4]
   b5f56:	461a      	mov	r2, r3
   b5f58:	4619      	mov	r1, r3
   b5f5a:	f7ff b85d 	b.w	b5018 <network_on>

000b5f5e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5f5e:	2200      	movs	r2, #0
   b5f60:	6840      	ldr	r0, [r0, #4]
   b5f62:	4611      	mov	r1, r2
   b5f64:	f7ff b840 	b.w	b4fe8 <network_connecting>

000b5f68 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5f68:	6840      	ldr	r0, [r0, #4]
   b5f6a:	2200      	movs	r2, #0
   b5f6c:	2102      	movs	r1, #2
   b5f6e:	f7ff b843 	b.w	b4ff8 <network_disconnect>

000b5f72 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5f72:	2300      	movs	r3, #0
   b5f74:	6840      	ldr	r0, [r0, #4]
   b5f76:	461a      	mov	r2, r3
   b5f78:	f7ff b82e 	b.w	b4fd8 <network_connect>

000b5f7c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b5f7c:	4b02      	ldr	r3, [pc, #8]	; (b5f88 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b5f7e:	2204      	movs	r2, #4
   b5f80:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b5f82:	4a02      	ldr	r2, [pc, #8]	; (b5f8c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b5f84:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b5f86:	4770      	bx	lr
   b5f88:	2003e718 	.word	0x2003e718
   b5f8c:	000b86c8 	.word	0x000b86c8

000b5f90 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b5f90:	4b01      	ldr	r3, [pc, #4]	; (b5f98 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b5f92:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b5f94:	4770      	bx	lr
   b5f96:	bf00      	nop
   b5f98:	2003e5f8 	.word	0x2003e5f8

000b5f9c <serialEventRun>:
{
   b5f9c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b5f9e:	4b0b      	ldr	r3, [pc, #44]	; (b5fcc <serialEventRun+0x30>)
   b5fa0:	b143      	cbz	r3, b5fb4 <serialEventRun+0x18>
   b5fa2:	f7ff ff91 	bl	b5ec8 <_Z16_fetch_usbserialv>
   b5fa6:	6803      	ldr	r3, [r0, #0]
   b5fa8:	691b      	ldr	r3, [r3, #16]
   b5faa:	4798      	blx	r3
   b5fac:	2800      	cmp	r0, #0
   b5fae:	dd01      	ble.n	b5fb4 <serialEventRun+0x18>
        serialEvent();
   b5fb0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b5fb4:	4b06      	ldr	r3, [pc, #24]	; (b5fd0 <serialEventRun+0x34>)
   b5fb6:	b143      	cbz	r3, b5fca <serialEventRun+0x2e>
   b5fb8:	f000 f95c 	bl	b6274 <_Z22__fetch_global_Serial1v>
   b5fbc:	6803      	ldr	r3, [r0, #0]
   b5fbe:	691b      	ldr	r3, [r3, #16]
   b5fc0:	4798      	blx	r3
   b5fc2:	2800      	cmp	r0, #0
   b5fc4:	dd01      	ble.n	b5fca <serialEventRun+0x2e>
        serialEvent1();
   b5fc6:	f3af 8000 	nop.w
}
   b5fca:	bd08      	pop	{r3, pc}
	...

000b5fd4 <_post_loop>:
{
   b5fd4:	b508      	push	{r3, lr}
	serialEventRun();
   b5fd6:	f7ff ffe1 	bl	b5f9c <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5fda:	f7fe fe59 	bl	b4c90 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5fde:	4b01      	ldr	r3, [pc, #4]	; (b5fe4 <_post_loop+0x10>)
   b5fe0:	6018      	str	r0, [r3, #0]
}
   b5fe2:	bd08      	pop	{r3, pc}
   b5fe4:	2003e728 	.word	0x2003e728

000b5fe8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5fe8:	4805      	ldr	r0, [pc, #20]	; (b6000 <_Z33system_initialize_user_backup_ramv+0x18>)
   b5fea:	4a06      	ldr	r2, [pc, #24]	; (b6004 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b5fec:	4906      	ldr	r1, [pc, #24]	; (b6008 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b5fee:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5ff0:	1a12      	subs	r2, r2, r0
   b5ff2:	f002 f979 	bl	b82e8 <memcpy>
    __backup_sram_signature = signature;
   b5ff6:	4b05      	ldr	r3, [pc, #20]	; (b600c <_Z33system_initialize_user_backup_ramv+0x24>)
   b5ff8:	4a05      	ldr	r2, [pc, #20]	; (b6010 <_Z33system_initialize_user_backup_ramv+0x28>)
   b5ffa:	601a      	str	r2, [r3, #0]
}
   b5ffc:	bd08      	pop	{r3, pc}
   b5ffe:	bf00      	nop
   b6000:	2003f400 	.word	0x2003f400
   b6004:	2003f404 	.word	0x2003f404
   b6008:	000b87dc 	.word	0x000b87dc
   b600c:	2003f400 	.word	0x2003f400
   b6010:	9a271c1e 	.word	0x9a271c1e

000b6014 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b6014:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6016:	2300      	movs	r3, #0
   b6018:	9300      	str	r3, [sp, #0]
   b601a:	461a      	mov	r2, r3
   b601c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6020:	f7fe ffb0 	bl	b4f84 <system_ctrl_set_result>
}
   b6024:	b003      	add	sp, #12
   b6026:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b602c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b602c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b602e:	8843      	ldrh	r3, [r0, #2]
   b6030:	2b0a      	cmp	r3, #10
   b6032:	d008      	beq.n	b6046 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b6034:	2b50      	cmp	r3, #80	; 0x50
   b6036:	d10b      	bne.n	b6050 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b6038:	4b09      	ldr	r3, [pc, #36]	; (b6060 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b603a:	681b      	ldr	r3, [r3, #0]
   b603c:	b14b      	cbz	r3, b6052 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b603e:	b003      	add	sp, #12
   b6040:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b6044:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b6046:	f7ff ffe5 	bl	b6014 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b604a:	b003      	add	sp, #12
   b604c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6050:	2300      	movs	r3, #0
   b6052:	9300      	str	r3, [sp, #0]
   b6054:	461a      	mov	r2, r3
   b6056:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b605a:	f7fe ff93 	bl	b4f84 <system_ctrl_set_result>
}
   b605e:	e7f4      	b.n	b604a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b6060:	2003e724 	.word	0x2003e724

000b6064 <module_user_init_hook>:
{
   b6064:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b6066:	4812      	ldr	r0, [pc, #72]	; (b60b0 <module_user_init_hook+0x4c>)
   b6068:	2100      	movs	r1, #0
   b606a:	f7ff f84d 	bl	b5108 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b606e:	4b11      	ldr	r3, [pc, #68]	; (b60b4 <module_user_init_hook+0x50>)
   b6070:	681a      	ldr	r2, [r3, #0]
   b6072:	4b11      	ldr	r3, [pc, #68]	; (b60b8 <module_user_init_hook+0x54>)
   b6074:	429a      	cmp	r2, r3
   b6076:	4b11      	ldr	r3, [pc, #68]	; (b60bc <module_user_init_hook+0x58>)
   b6078:	bf0c      	ite	eq
   b607a:	2201      	moveq	r2, #1
   b607c:	2200      	movne	r2, #0
   b607e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b6080:	d001      	beq.n	b6086 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b6082:	f7ff ffb1 	bl	b5fe8 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b6086:	f7fe fdfb 	bl	b4c80 <HAL_RNG_GetRandomNumber>
   b608a:	4604      	mov	r4, r0
    srand(seed);
   b608c:	f002 f942 	bl	b8314 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b6090:	4b0b      	ldr	r3, [pc, #44]	; (b60c0 <module_user_init_hook+0x5c>)
   b6092:	b113      	cbz	r3, b609a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b6094:	4620      	mov	r0, r4
   b6096:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b609a:	2100      	movs	r1, #0
   b609c:	4808      	ldr	r0, [pc, #32]	; (b60c0 <module_user_init_hook+0x5c>)
   b609e:	f7fe ff93 	bl	b4fc8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b60a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b60a6:	4807      	ldr	r0, [pc, #28]	; (b60c4 <module_user_init_hook+0x60>)
   b60a8:	2100      	movs	r1, #0
   b60aa:	f7fe bf61 	b.w	b4f70 <system_ctrl_set_app_request_handler>
   b60ae:	bf00      	nop
   b60b0:	000b5f91 	.word	0x000b5f91
   b60b4:	2003f400 	.word	0x2003f400
   b60b8:	9a271c1e 	.word	0x9a271c1e
   b60bc:	2003e720 	.word	0x2003e720
   b60c0:	00000000 	.word	0x00000000
   b60c4:	000b602d 	.word	0x000b602d

000b60c8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b60c8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b60ca:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b60cc:	d902      	bls.n	b60d4 <pinAvailable+0xc>
    return false;
   b60ce:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b60d0:	b002      	add	sp, #8
   b60d2:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b60d4:	f1a0 030b 	sub.w	r3, r0, #11
   b60d8:	2b02      	cmp	r3, #2
   b60da:	d81a      	bhi.n	b6112 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b60dc:	4c17      	ldr	r4, [pc, #92]	; (b613c <pinAvailable+0x74>)
   b60de:	7821      	ldrb	r1, [r4, #0]
   b60e0:	f3bf 8f5b 	dmb	ish
   b60e4:	f011 0101 	ands.w	r1, r1, #1
   b60e8:	d10b      	bne.n	b6102 <pinAvailable+0x3a>
   b60ea:	4620      	mov	r0, r4
   b60ec:	9101      	str	r1, [sp, #4]
   b60ee:	f7fd ffd8 	bl	b40a2 <__cxa_guard_acquire>
   b60f2:	9901      	ldr	r1, [sp, #4]
   b60f4:	b128      	cbz	r0, b6102 <pinAvailable+0x3a>
   b60f6:	4812      	ldr	r0, [pc, #72]	; (b6140 <pinAvailable+0x78>)
   b60f8:	f7ff fd6e 	bl	b5bd8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b60fc:	4620      	mov	r0, r4
   b60fe:	f7fd ffd5 	bl	b40ac <__cxa_guard_release>
   b6102:	4b0f      	ldr	r3, [pc, #60]	; (b6140 <pinAvailable+0x78>)
   b6104:	7818      	ldrb	r0, [r3, #0]
   b6106:	f7fe fe73 	bl	b4df0 <hal_spi_is_enabled>
   b610a:	2800      	cmp	r0, #0
   b610c:	d1df      	bne.n	b60ce <pinAvailable+0x6>
  return true; // 'pin' is available
   b610e:	2001      	movs	r0, #1
   b6110:	e7de      	b.n	b60d0 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b6112:	2801      	cmp	r0, #1
   b6114:	d809      	bhi.n	b612a <pinAvailable+0x62>
   b6116:	f000 f86d 	bl	b61f4 <_Z19__fetch_global_Wirev>
   b611a:	2100      	movs	r1, #0
   b611c:	7c00      	ldrb	r0, [r0, #16]
   b611e:	f7fe fe1f 	bl	b4d60 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b6122:	f080 0001 	eor.w	r0, r0, #1
   b6126:	b2c0      	uxtb	r0, r0
   b6128:	e7d2      	b.n	b60d0 <pinAvailable+0x8>
   b612a:	3809      	subs	r0, #9
   b612c:	2801      	cmp	r0, #1
   b612e:	d8ee      	bhi.n	b610e <pinAvailable+0x46>
   b6130:	f000 f8a0 	bl	b6274 <_Z22__fetch_global_Serial1v>
   b6134:	7c00      	ldrb	r0, [r0, #16]
   b6136:	f7fe feab 	bl	b4e90 <hal_usart_is_enabled>
   b613a:	e7f2      	b.n	b6122 <pinAvailable+0x5a>
   b613c:	2003e6b8 	.word	0x2003e6b8
   b6140:	2003e6bc 	.word	0x2003e6bc

000b6144 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6144:	2823      	cmp	r0, #35	; 0x23
{
   b6146:	b538      	push	{r3, r4, r5, lr}
   b6148:	4604      	mov	r4, r0
   b614a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b614c:	d80a      	bhi.n	b6164 <pinMode+0x20>
   b614e:	29ff      	cmp	r1, #255	; 0xff
   b6150:	d008      	beq.n	b6164 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b6152:	f7ff ffb9 	bl	b60c8 <pinAvailable>
   b6156:	b128      	cbz	r0, b6164 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b6158:	4629      	mov	r1, r5
   b615a:	4620      	mov	r0, r4
}
   b615c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b6160:	f7fe bd9e 	b.w	b4ca0 <HAL_Pin_Mode>
}
   b6164:	bd38      	pop	{r3, r4, r5, pc}

000b6166 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b6166:	b538      	push	{r3, r4, r5, lr}
   b6168:	4604      	mov	r4, r0
   b616a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b616c:	f7fe fda0 	bl	b4cb0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b6170:	28ff      	cmp	r0, #255	; 0xff
   b6172:	d010      	beq.n	b6196 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b6174:	2806      	cmp	r0, #6
   b6176:	d804      	bhi.n	b6182 <digitalWrite+0x1c>
   b6178:	234d      	movs	r3, #77	; 0x4d
   b617a:	fa23 f000 	lsr.w	r0, r3, r0
   b617e:	07c3      	lsls	r3, r0, #31
   b6180:	d409      	bmi.n	b6196 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b6182:	4620      	mov	r0, r4
   b6184:	f7ff ffa0 	bl	b60c8 <pinAvailable>
   b6188:	b128      	cbz	r0, b6196 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b618a:	4629      	mov	r1, r5
   b618c:	4620      	mov	r0, r4
}
   b618e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b6192:	f7fe bd95 	b.w	b4cc0 <HAL_GPIO_Write>
}
   b6196:	bd38      	pop	{r3, r4, r5, pc}

000b6198 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b6198:	b510      	push	{r4, lr}
   b619a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b619c:	f7fe fd88 	bl	b4cb0 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b61a0:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b61a2:	b2db      	uxtb	r3, r3
   b61a4:	2b01      	cmp	r3, #1
   b61a6:	d908      	bls.n	b61ba <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b61a8:	4620      	mov	r0, r4
   b61aa:	f7ff ff8d 	bl	b60c8 <pinAvailable>
   b61ae:	b120      	cbz	r0, b61ba <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b61b0:	4620      	mov	r0, r4
}
   b61b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b61b6:	f7fe bd8b 	b.w	b4cd0 <HAL_GPIO_Read>
}
   b61ba:	2000      	movs	r0, #0
   b61bc:	bd10      	pop	{r4, pc}

000b61be <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b61be:	4770      	bx	lr

000b61c0 <_Z17acquireWireBufferv>:
{
   b61c0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b61c2:	4b0a      	ldr	r3, [pc, #40]	; (b61ec <_Z17acquireWireBufferv+0x2c>)
   b61c4:	6003      	str	r3, [r0, #0]
   b61c6:	2301      	movs	r3, #1
{
   b61c8:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b61ca:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b61cc:	4908      	ldr	r1, [pc, #32]	; (b61f0 <_Z17acquireWireBufferv+0x30>)
   b61ce:	2020      	movs	r0, #32
   b61d0:	f000 f874 	bl	b62bc <_ZnajRKSt9nothrow_t>
	};
   b61d4:	2520      	movs	r5, #32
   b61d6:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b61d8:	4905      	ldr	r1, [pc, #20]	; (b61f0 <_Z17acquireWireBufferv+0x30>)
	};
   b61da:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b61dc:	4628      	mov	r0, r5
   b61de:	f000 f86d 	bl	b62bc <_ZnajRKSt9nothrow_t>
	};
   b61e2:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b61e6:	4620      	mov	r0, r4
   b61e8:	bd38      	pop	{r3, r4, r5, pc}
   b61ea:	bf00      	nop
   b61ec:	00010018 	.word	0x00010018
   b61f0:	000b86fc 	.word	0x000b86fc

000b61f4 <_Z19__fetch_global_Wirev>:
{
   b61f4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b61f6:	4d0e      	ldr	r5, [pc, #56]	; (b6230 <_Z19__fetch_global_Wirev+0x3c>)
   b61f8:	7829      	ldrb	r1, [r5, #0]
   b61fa:	f3bf 8f5b 	dmb	ish
   b61fe:	f011 0401 	ands.w	r4, r1, #1
{
   b6202:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6204:	d111      	bne.n	b622a <_Z19__fetch_global_Wirev+0x36>
   b6206:	4628      	mov	r0, r5
   b6208:	f7fd ff4b 	bl	b40a2 <__cxa_guard_acquire>
   b620c:	b168      	cbz	r0, b622a <_Z19__fetch_global_Wirev+0x36>
   b620e:	4668      	mov	r0, sp
   b6210:	f7ff ffd6 	bl	b61c0 <_Z17acquireWireBufferv>
   b6214:	466a      	mov	r2, sp
   b6216:	4621      	mov	r1, r4
   b6218:	4806      	ldr	r0, [pc, #24]	; (b6234 <_Z19__fetch_global_Wirev+0x40>)
   b621a:	f7ff fab9 	bl	b5790 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b621e:	4628      	mov	r0, r5
   b6220:	f7fd ff44 	bl	b40ac <__cxa_guard_release>
   b6224:	4804      	ldr	r0, [pc, #16]	; (b6238 <_Z19__fetch_global_Wirev+0x44>)
   b6226:	f002 f859 	bl	b82dc <atexit>
	return wire;
}
   b622a:	4802      	ldr	r0, [pc, #8]	; (b6234 <_Z19__fetch_global_Wirev+0x40>)
   b622c:	b007      	add	sp, #28
   b622e:	bd30      	pop	{r4, r5, pc}
   b6230:	2003e72c 	.word	0x2003e72c
   b6234:	2003e730 	.word	0x2003e730
   b6238:	000b61bf 	.word	0x000b61bf

000b623c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b623c:	4770      	bx	lr
	...

000b6240 <_Z20acquireSerial1Bufferv>:
{
   b6240:	b538      	push	{r3, r4, r5, lr}
   b6242:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b6244:	2514      	movs	r5, #20
   b6246:	462a      	mov	r2, r5
   b6248:	2100      	movs	r1, #0
   b624a:	f002 f85b 	bl	b8304 <memset>
   b624e:	8025      	strh	r5, [r4, #0]
   b6250:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6252:	4907      	ldr	r1, [pc, #28]	; (b6270 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b6254:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6256:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b6258:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b625a:	f000 f82f 	bl	b62bc <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b625e:	4904      	ldr	r1, [pc, #16]	; (b6270 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b6260:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6262:	4628      	mov	r0, r5
   b6264:	f000 f82a 	bl	b62bc <_ZnajRKSt9nothrow_t>
    };
   b6268:	60e0      	str	r0, [r4, #12]
}
   b626a:	4620      	mov	r0, r4
   b626c:	bd38      	pop	{r3, r4, r5, pc}
   b626e:	bf00      	nop
   b6270:	000b86fc 	.word	0x000b86fc

000b6274 <_Z22__fetch_global_Serial1v>:
{
   b6274:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6276:	4d0e      	ldr	r5, [pc, #56]	; (b62b0 <_Z22__fetch_global_Serial1v+0x3c>)
   b6278:	7829      	ldrb	r1, [r5, #0]
   b627a:	f3bf 8f5b 	dmb	ish
   b627e:	f011 0401 	ands.w	r4, r1, #1
{
   b6282:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6284:	d111      	bne.n	b62aa <_Z22__fetch_global_Serial1v+0x36>
   b6286:	4628      	mov	r0, r5
   b6288:	f7fd ff0b 	bl	b40a2 <__cxa_guard_acquire>
   b628c:	b168      	cbz	r0, b62aa <_Z22__fetch_global_Serial1v+0x36>
   b628e:	a801      	add	r0, sp, #4
   b6290:	f7ff ffd6 	bl	b6240 <_Z20acquireSerial1Bufferv>
   b6294:	aa01      	add	r2, sp, #4
   b6296:	4621      	mov	r1, r4
   b6298:	4806      	ldr	r0, [pc, #24]	; (b62b4 <_Z22__fetch_global_Serial1v+0x40>)
   b629a:	f7ff fda3 	bl	b5de4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b629e:	4628      	mov	r0, r5
   b62a0:	f7fd ff04 	bl	b40ac <__cxa_guard_release>
   b62a4:	4804      	ldr	r0, [pc, #16]	; (b62b8 <_Z22__fetch_global_Serial1v+0x44>)
   b62a6:	f002 f819 	bl	b82dc <atexit>
    return serial1;
}
   b62aa:	4802      	ldr	r0, [pc, #8]	; (b62b4 <_Z22__fetch_global_Serial1v+0x40>)
   b62ac:	b007      	add	sp, #28
   b62ae:	bd30      	pop	{r4, r5, pc}
   b62b0:	2003e744 	.word	0x2003e744
   b62b4:	2003e748 	.word	0x2003e748
   b62b8:	000b623d 	.word	0x000b623d

000b62bc <_ZnajRKSt9nothrow_t>:
   b62bc:	f7fd beed 	b.w	b409a <_Znaj>

000b62c0 <_ZSt25__throw_bad_function_callv>:
   b62c0:	b508      	push	{r3, lr}
   b62c2:	f7fe ff01 	bl	b50c8 <abort>
	...

000b62c8 <pow>:
   b62c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b62ca:	ed2d 8b02 	vpush	{d8}
   b62ce:	ec57 6b10 	vmov	r6, r7, d0
   b62d2:	ec55 4b11 	vmov	r4, r5, d1
   b62d6:	f000 f8cb 	bl	b6470 <__ieee754_pow>
   b62da:	4b63      	ldr	r3, [pc, #396]	; (b6468 <pow+0x1a0>)
   b62dc:	eeb0 8a40 	vmov.f32	s16, s0
   b62e0:	eef0 8a60 	vmov.f32	s17, s1
   b62e4:	f993 3000 	ldrsb.w	r3, [r3]
   b62e8:	3301      	adds	r3, #1
   b62ea:	d02a      	beq.n	b6342 <pow+0x7a>
   b62ec:	4622      	mov	r2, r4
   b62ee:	462b      	mov	r3, r5
   b62f0:	4620      	mov	r0, r4
   b62f2:	4629      	mov	r1, r5
   b62f4:	f001 fcc4 	bl	b7c80 <__aeabi_dcmpun>
   b62f8:	bb18      	cbnz	r0, b6342 <pow+0x7a>
   b62fa:	4632      	mov	r2, r6
   b62fc:	463b      	mov	r3, r7
   b62fe:	4630      	mov	r0, r6
   b6300:	4639      	mov	r1, r7
   b6302:	f001 fcbd 	bl	b7c80 <__aeabi_dcmpun>
   b6306:	2800      	cmp	r0, #0
   b6308:	d144      	bne.n	b6394 <pow+0xcc>
   b630a:	2200      	movs	r2, #0
   b630c:	2300      	movs	r3, #0
   b630e:	4630      	mov	r0, r6
   b6310:	4639      	mov	r1, r7
   b6312:	f001 fc83 	bl	b7c1c <__aeabi_dcmpeq>
   b6316:	b1d8      	cbz	r0, b6350 <pow+0x88>
   b6318:	2200      	movs	r2, #0
   b631a:	2300      	movs	r3, #0
   b631c:	4620      	mov	r0, r4
   b631e:	4629      	mov	r1, r5
   b6320:	f001 fc7c 	bl	b7c1c <__aeabi_dcmpeq>
   b6324:	2800      	cmp	r0, #0
   b6326:	d13d      	bne.n	b63a4 <pow+0xdc>
   b6328:	ec45 4b10 	vmov	d0, r4, r5
   b632c:	f000 ff10 	bl	b7150 <finite>
   b6330:	b138      	cbz	r0, b6342 <pow+0x7a>
   b6332:	4620      	mov	r0, r4
   b6334:	4629      	mov	r1, r5
   b6336:	2200      	movs	r2, #0
   b6338:	2300      	movs	r3, #0
   b633a:	f001 fc79 	bl	b7c30 <__aeabi_dcmplt>
   b633e:	2800      	cmp	r0, #0
   b6340:	d15c      	bne.n	b63fc <pow+0x134>
   b6342:	eeb0 0a48 	vmov.f32	s0, s16
   b6346:	eef0 0a68 	vmov.f32	s1, s17
   b634a:	ecbd 8b02 	vpop	{d8}
   b634e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b6350:	eeb0 0a48 	vmov.f32	s0, s16
   b6354:	eef0 0a68 	vmov.f32	s1, s17
   b6358:	f000 fefa 	bl	b7150 <finite>
   b635c:	b358      	cbz	r0, b63b6 <pow+0xee>
   b635e:	ec51 0b18 	vmov	r0, r1, d8
   b6362:	2200      	movs	r2, #0
   b6364:	2300      	movs	r3, #0
   b6366:	f001 fc59 	bl	b7c1c <__aeabi_dcmpeq>
   b636a:	2800      	cmp	r0, #0
   b636c:	d0e9      	beq.n	b6342 <pow+0x7a>
   b636e:	ec47 6b10 	vmov	d0, r6, r7
   b6372:	f000 feed 	bl	b7150 <finite>
   b6376:	2800      	cmp	r0, #0
   b6378:	d0e3      	beq.n	b6342 <pow+0x7a>
   b637a:	ec45 4b10 	vmov	d0, r4, r5
   b637e:	f000 fee7 	bl	b7150 <finite>
   b6382:	2800      	cmp	r0, #0
   b6384:	d0dd      	beq.n	b6342 <pow+0x7a>
   b6386:	f7fe feaf 	bl	b50e8 <__errno>
   b638a:	2322      	movs	r3, #34	; 0x22
   b638c:	ed9f 8b2e 	vldr	d8, [pc, #184]	; b6448 <pow+0x180>
   b6390:	6003      	str	r3, [r0, #0]
   b6392:	e7d6      	b.n	b6342 <pow+0x7a>
   b6394:	4620      	mov	r0, r4
   b6396:	4629      	mov	r1, r5
   b6398:	2200      	movs	r2, #0
   b639a:	2300      	movs	r3, #0
   b639c:	f001 fc3e 	bl	b7c1c <__aeabi_dcmpeq>
   b63a0:	2800      	cmp	r0, #0
   b63a2:	d0ce      	beq.n	b6342 <pow+0x7a>
   b63a4:	ed9f 8b2a 	vldr	d8, [pc, #168]	; b6450 <pow+0x188>
   b63a8:	eeb0 0a48 	vmov.f32	s0, s16
   b63ac:	eef0 0a68 	vmov.f32	s1, s17
   b63b0:	ecbd 8b02 	vpop	{d8}
   b63b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b63b6:	ec47 6b10 	vmov	d0, r6, r7
   b63ba:	f000 fec9 	bl	b7150 <finite>
   b63be:	2800      	cmp	r0, #0
   b63c0:	d0cd      	beq.n	b635e <pow+0x96>
   b63c2:	ec45 4b10 	vmov	d0, r4, r5
   b63c6:	f000 fec3 	bl	b7150 <finite>
   b63ca:	2800      	cmp	r0, #0
   b63cc:	d0c7      	beq.n	b635e <pow+0x96>
   b63ce:	ec53 2b18 	vmov	r2, r3, d8
   b63d2:	ee18 0a10 	vmov	r0, s16
   b63d6:	4619      	mov	r1, r3
   b63d8:	f001 fc52 	bl	b7c80 <__aeabi_dcmpun>
   b63dc:	bb20      	cbnz	r0, b6428 <pow+0x160>
   b63de:	f7fe fe83 	bl	b50e8 <__errno>
   b63e2:	4603      	mov	r3, r0
   b63e4:	2222      	movs	r2, #34	; 0x22
   b63e6:	601a      	str	r2, [r3, #0]
   b63e8:	4630      	mov	r0, r6
   b63ea:	4639      	mov	r1, r7
   b63ec:	2200      	movs	r2, #0
   b63ee:	2300      	movs	r3, #0
   b63f0:	f001 fc1e 	bl	b7c30 <__aeabi_dcmplt>
   b63f4:	b948      	cbnz	r0, b640a <pow+0x142>
   b63f6:	ed9f 8b18 	vldr	d8, [pc, #96]	; b6458 <pow+0x190>
   b63fa:	e7a2      	b.n	b6342 <pow+0x7a>
   b63fc:	f7fe fe74 	bl	b50e8 <__errno>
   b6400:	2321      	movs	r3, #33	; 0x21
   b6402:	ed9f 8b17 	vldr	d8, [pc, #92]	; b6460 <pow+0x198>
   b6406:	6003      	str	r3, [r0, #0]
   b6408:	e79b      	b.n	b6342 <pow+0x7a>
   b640a:	ec45 4b10 	vmov	d0, r4, r5
   b640e:	f000 feb3 	bl	b7178 <rint>
   b6412:	4622      	mov	r2, r4
   b6414:	ec51 0b10 	vmov	r0, r1, d0
   b6418:	462b      	mov	r3, r5
   b641a:	f001 fbff 	bl	b7c1c <__aeabi_dcmpeq>
   b641e:	2800      	cmp	r0, #0
   b6420:	d1e9      	bne.n	b63f6 <pow+0x12e>
   b6422:	ed9f 8b0f 	vldr	d8, [pc, #60]	; b6460 <pow+0x198>
   b6426:	e78c      	b.n	b6342 <pow+0x7a>
   b6428:	f7fe fe5e 	bl	b50e8 <__errno>
   b642c:	2200      	movs	r2, #0
   b642e:	2300      	movs	r3, #0
   b6430:	2121      	movs	r1, #33	; 0x21
   b6432:	6001      	str	r1, [r0, #0]
   b6434:	4610      	mov	r0, r2
   b6436:	4619      	mov	r1, r3
   b6438:	f001 fab2 	bl	b79a0 <__aeabi_ddiv>
   b643c:	ec41 0b18 	vmov	d8, r0, r1
   b6440:	e77f      	b.n	b6342 <pow+0x7a>
   b6442:	bf00      	nop
   b6444:	f3af 8000 	nop.w
	...
   b6454:	3ff00000 	.word	0x3ff00000
   b6458:	00000000 	.word	0x00000000
   b645c:	7ff00000 	.word	0x7ff00000
   b6460:	00000000 	.word	0x00000000
   b6464:	fff00000 	.word	0xfff00000
   b6468:	2003e5f4 	.word	0x2003e5f4
   b646c:	00000000 	.word	0x00000000

000b6470 <__ieee754_pow>:
   b6470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6474:	ec57 6b11 	vmov	r6, r7, d1
   b6478:	ed2d 8b0c 	vpush	{d8-d13}
   b647c:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   b6480:	ea5a 0206 	orrs.w	r2, sl, r6
   b6484:	b087      	sub	sp, #28
   b6486:	d03d      	beq.n	b6504 <__ieee754_pow+0x94>
   b6488:	ec55 4b10 	vmov	r4, r5, d0
   b648c:	4972      	ldr	r1, [pc, #456]	; (b6658 <__ieee754_pow+0x1e8>)
   b648e:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
   b6492:	4588      	cmp	r8, r1
   b6494:	ee10 2a10 	vmov	r2, s0
   b6498:	46a9      	mov	r9, r5
   b649a:	dc2c      	bgt.n	b64f6 <__ieee754_pow+0x86>
   b649c:	ee11 3a10 	vmov	r3, s2
   b64a0:	46bb      	mov	fp, r7
   b64a2:	d036      	beq.n	b6512 <__ieee754_pow+0xa2>
   b64a4:	458a      	cmp	sl, r1
   b64a6:	dc26      	bgt.n	b64f6 <__ieee754_pow+0x86>
   b64a8:	496b      	ldr	r1, [pc, #428]	; (b6658 <__ieee754_pow+0x1e8>)
   b64aa:	458a      	cmp	sl, r1
   b64ac:	d021      	beq.n	b64f2 <__ieee754_pow+0x82>
   b64ae:	f1b9 0f00 	cmp.w	r9, #0
   b64b2:	db39      	blt.n	b6528 <__ieee754_pow+0xb8>
   b64b4:	2100      	movs	r1, #0
   b64b6:	9100      	str	r1, [sp, #0]
   b64b8:	2b00      	cmp	r3, #0
   b64ba:	d151      	bne.n	b6560 <__ieee754_pow+0xf0>
   b64bc:	4b66      	ldr	r3, [pc, #408]	; (b6658 <__ieee754_pow+0x1e8>)
   b64be:	459a      	cmp	sl, r3
   b64c0:	f000 80a2 	beq.w	b6608 <__ieee754_pow+0x198>
   b64c4:	4b65      	ldr	r3, [pc, #404]	; (b665c <__ieee754_pow+0x1ec>)
   b64c6:	459a      	cmp	sl, r3
   b64c8:	f000 80b0 	beq.w	b662c <__ieee754_pow+0x1bc>
   b64cc:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
   b64d0:	f000 84c0 	beq.w	b6e54 <__ieee754_pow+0x9e4>
   b64d4:	4b62      	ldr	r3, [pc, #392]	; (b6660 <__ieee754_pow+0x1f0>)
   b64d6:	459b      	cmp	fp, r3
   b64d8:	d142      	bne.n	b6560 <__ieee754_pow+0xf0>
   b64da:	f1b9 0f00 	cmp.w	r9, #0
   b64de:	db3f      	blt.n	b6560 <__ieee754_pow+0xf0>
   b64e0:	ec45 4b10 	vmov	d0, r4, r5
   b64e4:	b007      	add	sp, #28
   b64e6:	ecbd 8b0c 	vpop	{d8-d13}
   b64ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b64ee:	f000 bd59 	b.w	b6fa4 <__ieee754_sqrt>
   b64f2:	2b00      	cmp	r3, #0
   b64f4:	d0db      	beq.n	b64ae <__ieee754_pow+0x3e>
   b64f6:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   b64fa:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   b64fe:	ea58 0302 	orrs.w	r3, r8, r2
   b6502:	d109      	bne.n	b6518 <__ieee754_pow+0xa8>
   b6504:	ed9f 0b50 	vldr	d0, [pc, #320]	; b6648 <__ieee754_pow+0x1d8>
   b6508:	b007      	add	sp, #28
   b650a:	ecbd 8b0c 	vpop	{d8-d13}
   b650e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6512:	b90c      	cbnz	r4, b6518 <__ieee754_pow+0xa8>
   b6514:	45c2      	cmp	sl, r8
   b6516:	ddc7      	ble.n	b64a8 <__ieee754_pow+0x38>
   b6518:	4852      	ldr	r0, [pc, #328]	; (b6664 <__ieee754_pow+0x1f4>)
   b651a:	b007      	add	sp, #28
   b651c:	ecbd 8b0c 	vpop	{d8-d13}
   b6520:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6524:	f000 be20 	b.w	b7168 <nan>
   b6528:	494f      	ldr	r1, [pc, #316]	; (b6668 <__ieee754_pow+0x1f8>)
   b652a:	458a      	cmp	sl, r1
   b652c:	f300 8085 	bgt.w	b663a <__ieee754_pow+0x1ca>
   b6530:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
   b6534:	458a      	cmp	sl, r1
   b6536:	dd0f      	ble.n	b6558 <__ieee754_pow+0xe8>
   b6538:	ea4f 512a 	mov.w	r1, sl, asr #20
   b653c:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   b6540:	2914      	cmp	r1, #20
   b6542:	f340 849b 	ble.w	b6e7c <__ieee754_pow+0xa0c>
   b6546:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
   b654a:	fa23 f001 	lsr.w	r0, r3, r1
   b654e:	fa00 f101 	lsl.w	r1, r0, r1
   b6552:	4299      	cmp	r1, r3
   b6554:	f000 84ed 	beq.w	b6f32 <__ieee754_pow+0xac2>
   b6558:	2100      	movs	r1, #0
   b655a:	9100      	str	r1, [sp, #0]
   b655c:	2b00      	cmp	r3, #0
   b655e:	d0b1      	beq.n	b64c4 <__ieee754_pow+0x54>
   b6560:	ec45 4b10 	vmov	d0, r4, r5
   b6564:	9202      	str	r2, [sp, #8]
   b6566:	f000 fde9 	bl	b713c <fabs>
   b656a:	9a02      	ldr	r2, [sp, #8]
   b656c:	bb5a      	cbnz	r2, b65c6 <__ieee754_pow+0x156>
   b656e:	f1b8 0f00 	cmp.w	r8, #0
   b6572:	d004      	beq.n	b657e <__ieee754_pow+0x10e>
   b6574:	4b39      	ldr	r3, [pc, #228]	; (b665c <__ieee754_pow+0x1ec>)
   b6576:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
   b657a:	429a      	cmp	r2, r3
   b657c:	d123      	bne.n	b65c6 <__ieee754_pow+0x156>
   b657e:	f1bb 0f00 	cmp.w	fp, #0
   b6582:	da07      	bge.n	b6594 <__ieee754_pow+0x124>
   b6584:	ec53 2b10 	vmov	r2, r3, d0
   b6588:	4934      	ldr	r1, [pc, #208]	; (b665c <__ieee754_pow+0x1ec>)
   b658a:	2000      	movs	r0, #0
   b658c:	f001 fa08 	bl	b79a0 <__aeabi_ddiv>
   b6590:	ec41 0b10 	vmov	d0, r0, r1
   b6594:	f1b9 0f00 	cmp.w	r9, #0
   b6598:	dab6      	bge.n	b6508 <__ieee754_pow+0x98>
   b659a:	9b00      	ldr	r3, [sp, #0]
   b659c:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   b65a0:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   b65a4:	ea58 0303 	orrs.w	r3, r8, r3
   b65a8:	f040 848d 	bne.w	b6ec6 <__ieee754_pow+0xa56>
   b65ac:	ec53 2b10 	vmov	r2, r3, d0
   b65b0:	4610      	mov	r0, r2
   b65b2:	4619      	mov	r1, r3
   b65b4:	f000 ff12 	bl	b73dc <__aeabi_dsub>
   b65b8:	4602      	mov	r2, r0
   b65ba:	460b      	mov	r3, r1
   b65bc:	f001 f9f0 	bl	b79a0 <__aeabi_ddiv>
   b65c0:	ec41 0b10 	vmov	d0, r0, r1
   b65c4:	e7a0      	b.n	b6508 <__ieee754_pow+0x98>
   b65c6:	9a00      	ldr	r2, [sp, #0]
   b65c8:	ea4f 73d9 	mov.w	r3, r9, lsr #31
   b65cc:	3b01      	subs	r3, #1
   b65ce:	9304      	str	r3, [sp, #16]
   b65d0:	4313      	orrs	r3, r2
   b65d2:	d035      	beq.n	b6640 <__ieee754_pow+0x1d0>
   b65d4:	4b25      	ldr	r3, [pc, #148]	; (b666c <__ieee754_pow+0x1fc>)
   b65d6:	459a      	cmp	sl, r3
   b65d8:	dd4c      	ble.n	b6674 <__ieee754_pow+0x204>
   b65da:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   b65de:	459a      	cmp	sl, r3
   b65e0:	4b23      	ldr	r3, [pc, #140]	; (b6670 <__ieee754_pow+0x200>)
   b65e2:	f340 83db 	ble.w	b6d9c <__ieee754_pow+0x92c>
   b65e6:	4598      	cmp	r8, r3
   b65e8:	f340 8360 	ble.w	b6cac <__ieee754_pow+0x83c>
   b65ec:	f1bb 0f00 	cmp.w	fp, #0
   b65f0:	f340 8360 	ble.w	b6cb4 <__ieee754_pow+0x844>
   b65f4:	a316      	add	r3, pc, #88	; (adr r3, b6650 <__ieee754_pow+0x1e0>)
   b65f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b65fa:	4610      	mov	r0, r2
   b65fc:	4619      	mov	r1, r3
   b65fe:	f001 f8a5 	bl	b774c <__aeabi_dmul>
   b6602:	ec41 0b10 	vmov	d0, r0, r1
   b6606:	e77f      	b.n	b6508 <__ieee754_pow+0x98>
   b6608:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
   b660c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   b6610:	4313      	orrs	r3, r2
   b6612:	f43f af77 	beq.w	b6504 <__ieee754_pow+0x94>
   b6616:	4b16      	ldr	r3, [pc, #88]	; (b6670 <__ieee754_pow+0x200>)
   b6618:	4598      	cmp	r8, r3
   b661a:	f340 837a 	ble.w	b6d12 <__ieee754_pow+0x8a2>
   b661e:	f1bb 0f00 	cmp.w	fp, #0
   b6622:	f2c0 8347 	blt.w	b6cb4 <__ieee754_pow+0x844>
   b6626:	ec47 6b10 	vmov	d0, r6, r7
   b662a:	e76d      	b.n	b6508 <__ieee754_pow+0x98>
   b662c:	f1bb 0f00 	cmp.w	fp, #0
   b6630:	f2c0 841a 	blt.w	b6e68 <__ieee754_pow+0x9f8>
   b6634:	ec45 4b10 	vmov	d0, r4, r5
   b6638:	e766      	b.n	b6508 <__ieee754_pow+0x98>
   b663a:	2102      	movs	r1, #2
   b663c:	9100      	str	r1, [sp, #0]
   b663e:	e73b      	b.n	b64b8 <__ieee754_pow+0x48>
   b6640:	4622      	mov	r2, r4
   b6642:	462b      	mov	r3, r5
   b6644:	e7b4      	b.n	b65b0 <__ieee754_pow+0x140>
   b6646:	bf00      	nop
   b6648:	00000000 	.word	0x00000000
   b664c:	3ff00000 	.word	0x3ff00000
   b6650:	8800759c 	.word	0x8800759c
   b6654:	7e37e43c 	.word	0x7e37e43c
   b6658:	7ff00000 	.word	0x7ff00000
   b665c:	3ff00000 	.word	0x3ff00000
   b6660:	3fe00000 	.word	0x3fe00000
   b6664:	000b8700 	.word	0x000b8700
   b6668:	433fffff 	.word	0x433fffff
   b666c:	41e00000 	.word	0x41e00000
   b6670:	3fefffff 	.word	0x3fefffff
   b6674:	4be4      	ldr	r3, [pc, #912]	; (b6a08 <__ieee754_pow+0x598>)
   b6676:	ea09 0303 	and.w	r3, r9, r3
   b667a:	2200      	movs	r2, #0
   b667c:	b953      	cbnz	r3, b6694 <__ieee754_pow+0x224>
   b667e:	ec51 0b10 	vmov	r0, r1, d0
   b6682:	4be2      	ldr	r3, [pc, #904]	; (b6a0c <__ieee754_pow+0x59c>)
   b6684:	f001 f862 	bl	b774c <__aeabi_dmul>
   b6688:	ec41 0b10 	vmov	d0, r0, r1
   b668c:	ee10 8a90 	vmov	r8, s1
   b6690:	f06f 0234 	mvn.w	r2, #52	; 0x34
   b6694:	ea4f 5328 	mov.w	r3, r8, asr #20
   b6698:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   b669c:	189a      	adds	r2, r3, r2
   b669e:	4bdc      	ldr	r3, [pc, #880]	; (b6a10 <__ieee754_pow+0x5a0>)
   b66a0:	9205      	str	r2, [sp, #20]
   b66a2:	f3c8 0813 	ubfx	r8, r8, #0, #20
   b66a6:	f048 547f 	orr.w	r4, r8, #1069547520	; 0x3fc00000
   b66aa:	4598      	cmp	r8, r3
   b66ac:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   b66b0:	dd07      	ble.n	b66c2 <__ieee754_pow+0x252>
   b66b2:	4bd8      	ldr	r3, [pc, #864]	; (b6a14 <__ieee754_pow+0x5a4>)
   b66b4:	4598      	cmp	r8, r3
   b66b6:	f340 8414 	ble.w	b6ee2 <__ieee754_pow+0xa72>
   b66ba:	3201      	adds	r2, #1
   b66bc:	9205      	str	r2, [sp, #20]
   b66be:	f5a4 1480 	sub.w	r4, r4, #1048576	; 0x100000
   b66c2:	ed9f 6bb9 	vldr	d6, [pc, #740]	; b69a8 <__ieee754_pow+0x538>
   b66c6:	ed9f 7bba 	vldr	d7, [pc, #744]	; b69b0 <__ieee754_pow+0x540>
   b66ca:	ec53 2b16 	vmov	r2, r3, d6
   b66ce:	eeb0 ca47 	vmov.f32	s24, s14
   b66d2:	eef0 ca67 	vmov.f32	s25, s15
   b66d6:	2500      	movs	r5, #0
   b66d8:	eeb0 da47 	vmov.f32	s26, s14
   b66dc:	eef0 da67 	vmov.f32	s27, s15
   b66e0:	ec5b ab10 	vmov	sl, fp, d0
   b66e4:	46a3      	mov	fp, r4
   b66e6:	4650      	mov	r0, sl
   b66e8:	4659      	mov	r1, fp
   b66ea:	ec43 2b1a 	vmov	d10, r2, r3
   b66ee:	f000 fe75 	bl	b73dc <__aeabi_dsub>
   b66f2:	ec53 2b1a 	vmov	r2, r3, d10
   b66f6:	4680      	mov	r8, r0
   b66f8:	4689      	mov	r9, r1
   b66fa:	4650      	mov	r0, sl
   b66fc:	4659      	mov	r1, fp
   b66fe:	f000 fe6f 	bl	b73e0 <__adddf3>
   b6702:	4602      	mov	r2, r0
   b6704:	460b      	mov	r3, r1
   b6706:	2000      	movs	r0, #0
   b6708:	49c3      	ldr	r1, [pc, #780]	; (b6a18 <__ieee754_pow+0x5a8>)
   b670a:	f001 f949 	bl	b79a0 <__aeabi_ddiv>
   b670e:	ec41 0b1b 	vmov	d11, r0, r1
   b6712:	4640      	mov	r0, r8
   b6714:	ec53 2b1b 	vmov	r2, r3, d11
   b6718:	4649      	mov	r1, r9
   b671a:	f001 f817 	bl	b774c <__aeabi_dmul>
   b671e:	ec41 0b18 	vmov	d8, r0, r1
   b6722:	460a      	mov	r2, r1
   b6724:	4601      	mov	r1, r0
   b6726:	e9cd 1202 	strd	r1, r2, [sp, #8]
   b672a:	2100      	movs	r1, #0
   b672c:	9102      	str	r1, [sp, #8]
   b672e:	1064      	asrs	r4, r4, #1
   b6730:	ec4b ab19 	vmov	d9, sl, fp
   b6734:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
   b6738:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   b673c:	f504 2300 	add.w	r3, r4, #524288	; 0x80000
   b6740:	2000      	movs	r0, #0
   b6742:	1959      	adds	r1, r3, r5
   b6744:	4604      	mov	r4, r0
   b6746:	460d      	mov	r5, r1
   b6748:	4602      	mov	r2, r0
   b674a:	460b      	mov	r3, r1
   b674c:	4650      	mov	r0, sl
   b674e:	4659      	mov	r1, fp
   b6750:	f000 fffc 	bl	b774c <__aeabi_dmul>
   b6754:	4602      	mov	r2, r0
   b6756:	460b      	mov	r3, r1
   b6758:	4640      	mov	r0, r8
   b675a:	4649      	mov	r1, r9
   b675c:	f000 fe3e 	bl	b73dc <__aeabi_dsub>
   b6760:	ec53 2b1a 	vmov	r2, r3, d10
   b6764:	4680      	mov	r8, r0
   b6766:	4689      	mov	r9, r1
   b6768:	4620      	mov	r0, r4
   b676a:	4629      	mov	r1, r5
   b676c:	f000 fe36 	bl	b73dc <__aeabi_dsub>
   b6770:	4602      	mov	r2, r0
   b6772:	460b      	mov	r3, r1
   b6774:	ec51 0b19 	vmov	r0, r1, d9
   b6778:	f000 fe30 	bl	b73dc <__aeabi_dsub>
   b677c:	4652      	mov	r2, sl
   b677e:	465b      	mov	r3, fp
   b6780:	f000 ffe4 	bl	b774c <__aeabi_dmul>
   b6784:	4602      	mov	r2, r0
   b6786:	460b      	mov	r3, r1
   b6788:	4640      	mov	r0, r8
   b678a:	4649      	mov	r1, r9
   b678c:	f000 fe26 	bl	b73dc <__aeabi_dsub>
   b6790:	ec53 2b1b 	vmov	r2, r3, d11
   b6794:	f000 ffda 	bl	b774c <__aeabi_dmul>
   b6798:	ec53 2b18 	vmov	r2, r3, d8
   b679c:	ec41 0b19 	vmov	d9, r0, r1
   b67a0:	ec51 0b18 	vmov	r0, r1, d8
   b67a4:	f000 ffd2 	bl	b774c <__aeabi_dmul>
   b67a8:	a383      	add	r3, pc, #524	; (adr r3, b69b8 <__ieee754_pow+0x548>)
   b67aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   b67ae:	4604      	mov	r4, r0
   b67b0:	460d      	mov	r5, r1
   b67b2:	f000 ffcb 	bl	b774c <__aeabi_dmul>
   b67b6:	a382      	add	r3, pc, #520	; (adr r3, b69c0 <__ieee754_pow+0x550>)
   b67b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b67bc:	f000 fe10 	bl	b73e0 <__adddf3>
   b67c0:	4622      	mov	r2, r4
   b67c2:	462b      	mov	r3, r5
   b67c4:	f000 ffc2 	bl	b774c <__aeabi_dmul>
   b67c8:	a37f      	add	r3, pc, #508	; (adr r3, b69c8 <__ieee754_pow+0x558>)
   b67ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   b67ce:	f000 fe07 	bl	b73e0 <__adddf3>
   b67d2:	4622      	mov	r2, r4
   b67d4:	462b      	mov	r3, r5
   b67d6:	f000 ffb9 	bl	b774c <__aeabi_dmul>
   b67da:	a37d      	add	r3, pc, #500	; (adr r3, b69d0 <__ieee754_pow+0x560>)
   b67dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   b67e0:	f000 fdfe 	bl	b73e0 <__adddf3>
   b67e4:	4622      	mov	r2, r4
   b67e6:	462b      	mov	r3, r5
   b67e8:	f000 ffb0 	bl	b774c <__aeabi_dmul>
   b67ec:	a37a      	add	r3, pc, #488	; (adr r3, b69d8 <__ieee754_pow+0x568>)
   b67ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   b67f2:	f000 fdf5 	bl	b73e0 <__adddf3>
   b67f6:	4622      	mov	r2, r4
   b67f8:	462b      	mov	r3, r5
   b67fa:	f000 ffa7 	bl	b774c <__aeabi_dmul>
   b67fe:	a378      	add	r3, pc, #480	; (adr r3, b69e0 <__ieee754_pow+0x570>)
   b6800:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6804:	f000 fdec 	bl	b73e0 <__adddf3>
   b6808:	4622      	mov	r2, r4
   b680a:	4680      	mov	r8, r0
   b680c:	4689      	mov	r9, r1
   b680e:	462b      	mov	r3, r5
   b6810:	4620      	mov	r0, r4
   b6812:	4629      	mov	r1, r5
   b6814:	f000 ff9a 	bl	b774c <__aeabi_dmul>
   b6818:	4602      	mov	r2, r0
   b681a:	460b      	mov	r3, r1
   b681c:	4640      	mov	r0, r8
   b681e:	4649      	mov	r1, r9
   b6820:	f000 ff94 	bl	b774c <__aeabi_dmul>
   b6824:	4652      	mov	r2, sl
   b6826:	4604      	mov	r4, r0
   b6828:	460d      	mov	r5, r1
   b682a:	465b      	mov	r3, fp
   b682c:	ec51 0b18 	vmov	r0, r1, d8
   b6830:	f000 fdd6 	bl	b73e0 <__adddf3>
   b6834:	ec53 2b19 	vmov	r2, r3, d9
   b6838:	f000 ff88 	bl	b774c <__aeabi_dmul>
   b683c:	4622      	mov	r2, r4
   b683e:	462b      	mov	r3, r5
   b6840:	f000 fdce 	bl	b73e0 <__adddf3>
   b6844:	4652      	mov	r2, sl
   b6846:	4680      	mov	r8, r0
   b6848:	4689      	mov	r9, r1
   b684a:	465b      	mov	r3, fp
   b684c:	4650      	mov	r0, sl
   b684e:	4659      	mov	r1, fp
   b6850:	f000 ff7c 	bl	b774c <__aeabi_dmul>
   b6854:	4602      	mov	r2, r0
   b6856:	460b      	mov	r3, r1
   b6858:	ec43 2b1a 	vmov	d10, r2, r3
   b685c:	4b6f      	ldr	r3, [pc, #444]	; (b6a1c <__ieee754_pow+0x5ac>)
   b685e:	2200      	movs	r2, #0
   b6860:	f000 fdbe 	bl	b73e0 <__adddf3>
   b6864:	4642      	mov	r2, r8
   b6866:	464b      	mov	r3, r9
   b6868:	f000 fdba 	bl	b73e0 <__adddf3>
   b686c:	2400      	movs	r4, #0
   b686e:	460d      	mov	r5, r1
   b6870:	4622      	mov	r2, r4
   b6872:	462b      	mov	r3, r5
   b6874:	4650      	mov	r0, sl
   b6876:	4659      	mov	r1, fp
   b6878:	f000 ff68 	bl	b774c <__aeabi_dmul>
   b687c:	4b67      	ldr	r3, [pc, #412]	; (b6a1c <__ieee754_pow+0x5ac>)
   b687e:	4682      	mov	sl, r0
   b6880:	468b      	mov	fp, r1
   b6882:	2200      	movs	r2, #0
   b6884:	4620      	mov	r0, r4
   b6886:	4629      	mov	r1, r5
   b6888:	f000 fda8 	bl	b73dc <__aeabi_dsub>
   b688c:	ec53 2b1a 	vmov	r2, r3, d10
   b6890:	f000 fda4 	bl	b73dc <__aeabi_dsub>
   b6894:	4602      	mov	r2, r0
   b6896:	460b      	mov	r3, r1
   b6898:	4640      	mov	r0, r8
   b689a:	4649      	mov	r1, r9
   b689c:	f000 fd9e 	bl	b73dc <__aeabi_dsub>
   b68a0:	ec53 2b18 	vmov	r2, r3, d8
   b68a4:	f000 ff52 	bl	b774c <__aeabi_dmul>
   b68a8:	4622      	mov	r2, r4
   b68aa:	462b      	mov	r3, r5
   b68ac:	4604      	mov	r4, r0
   b68ae:	460d      	mov	r5, r1
   b68b0:	ec51 0b19 	vmov	r0, r1, d9
   b68b4:	f000 ff4a 	bl	b774c <__aeabi_dmul>
   b68b8:	4602      	mov	r2, r0
   b68ba:	460b      	mov	r3, r1
   b68bc:	4620      	mov	r0, r4
   b68be:	4629      	mov	r1, r5
   b68c0:	f000 fd8e 	bl	b73e0 <__adddf3>
   b68c4:	4680      	mov	r8, r0
   b68c6:	4689      	mov	r9, r1
   b68c8:	4642      	mov	r2, r8
   b68ca:	464b      	mov	r3, r9
   b68cc:	4650      	mov	r0, sl
   b68ce:	4659      	mov	r1, fp
   b68d0:	f000 fd86 	bl	b73e0 <__adddf3>
   b68d4:	a344      	add	r3, pc, #272	; (adr r3, b69e8 <__ieee754_pow+0x578>)
   b68d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b68da:	2000      	movs	r0, #0
   b68dc:	4604      	mov	r4, r0
   b68de:	460d      	mov	r5, r1
   b68e0:	f000 ff34 	bl	b774c <__aeabi_dmul>
   b68e4:	4652      	mov	r2, sl
   b68e6:	ec41 0b19 	vmov	d9, r0, r1
   b68ea:	465b      	mov	r3, fp
   b68ec:	4620      	mov	r0, r4
   b68ee:	4629      	mov	r1, r5
   b68f0:	f000 fd74 	bl	b73dc <__aeabi_dsub>
   b68f4:	4602      	mov	r2, r0
   b68f6:	460b      	mov	r3, r1
   b68f8:	4640      	mov	r0, r8
   b68fa:	4649      	mov	r1, r9
   b68fc:	f000 fd6e 	bl	b73dc <__aeabi_dsub>
   b6900:	a33b      	add	r3, pc, #236	; (adr r3, b69f0 <__ieee754_pow+0x580>)
   b6902:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6906:	f000 ff21 	bl	b774c <__aeabi_dmul>
   b690a:	4602      	mov	r2, r0
   b690c:	460b      	mov	r3, r1
   b690e:	4620      	mov	r0, r4
   b6910:	4629      	mov	r1, r5
   b6912:	4614      	mov	r4, r2
   b6914:	461d      	mov	r5, r3
   b6916:	a338      	add	r3, pc, #224	; (adr r3, b69f8 <__ieee754_pow+0x588>)
   b6918:	e9d3 2300 	ldrd	r2, r3, [r3]
   b691c:	f000 ff16 	bl	b774c <__aeabi_dmul>
   b6920:	4602      	mov	r2, r0
   b6922:	460b      	mov	r3, r1
   b6924:	4620      	mov	r0, r4
   b6926:	4629      	mov	r1, r5
   b6928:	f000 fd5a 	bl	b73e0 <__adddf3>
   b692c:	ec53 2b1d 	vmov	r2, r3, d13
   b6930:	f000 fd56 	bl	b73e0 <__adddf3>
   b6934:	4680      	mov	r8, r0
   b6936:	9805      	ldr	r0, [sp, #20]
   b6938:	4689      	mov	r9, r1
   b693a:	f000 fe9d 	bl	b7678 <__aeabi_i2d>
   b693e:	4642      	mov	r2, r8
   b6940:	4682      	mov	sl, r0
   b6942:	468b      	mov	fp, r1
   b6944:	464b      	mov	r3, r9
   b6946:	ec51 0b19 	vmov	r0, r1, d9
   b694a:	f000 fd49 	bl	b73e0 <__adddf3>
   b694e:	ec53 2b1c 	vmov	r2, r3, d12
   b6952:	f000 fd45 	bl	b73e0 <__adddf3>
   b6956:	4652      	mov	r2, sl
   b6958:	465b      	mov	r3, fp
   b695a:	f000 fd41 	bl	b73e0 <__adddf3>
   b695e:	4652      	mov	r2, sl
   b6960:	465b      	mov	r3, fp
   b6962:	2000      	movs	r0, #0
   b6964:	4604      	mov	r4, r0
   b6966:	460d      	mov	r5, r1
   b6968:	f000 fd38 	bl	b73dc <__aeabi_dsub>
   b696c:	ec53 2b1c 	vmov	r2, r3, d12
   b6970:	f000 fd34 	bl	b73dc <__aeabi_dsub>
   b6974:	ec53 2b19 	vmov	r2, r3, d9
   b6978:	f000 fd30 	bl	b73dc <__aeabi_dsub>
   b697c:	4602      	mov	r2, r0
   b697e:	460b      	mov	r3, r1
   b6980:	4640      	mov	r0, r8
   b6982:	4649      	mov	r1, r9
   b6984:	f000 fd2a 	bl	b73dc <__aeabi_dsub>
   b6988:	9b00      	ldr	r3, [sp, #0]
   b698a:	9a04      	ldr	r2, [sp, #16]
   b698c:	3b01      	subs	r3, #1
   b698e:	4313      	orrs	r3, r2
   b6990:	4682      	mov	sl, r0
   b6992:	468b      	mov	fp, r1
   b6994:	f040 81b6 	bne.w	b6d04 <__ieee754_pow+0x894>
   b6998:	ed9f 7b19 	vldr	d7, [pc, #100]	; b6a00 <__ieee754_pow+0x590>
   b699c:	eeb0 8a47 	vmov.f32	s16, s14
   b69a0:	eef0 8a67 	vmov.f32	s17, s15
   b69a4:	e03c      	b.n	b6a20 <__ieee754_pow+0x5b0>
   b69a6:	bf00      	nop
   b69a8:	00000000 	.word	0x00000000
   b69ac:	3ff00000 	.word	0x3ff00000
	...
   b69b8:	4a454eef 	.word	0x4a454eef
   b69bc:	3fca7e28 	.word	0x3fca7e28
   b69c0:	93c9db65 	.word	0x93c9db65
   b69c4:	3fcd864a 	.word	0x3fcd864a
   b69c8:	a91d4101 	.word	0xa91d4101
   b69cc:	3fd17460 	.word	0x3fd17460
   b69d0:	518f264d 	.word	0x518f264d
   b69d4:	3fd55555 	.word	0x3fd55555
   b69d8:	db6fabff 	.word	0xdb6fabff
   b69dc:	3fdb6db6 	.word	0x3fdb6db6
   b69e0:	33333303 	.word	0x33333303
   b69e4:	3fe33333 	.word	0x3fe33333
   b69e8:	e0000000 	.word	0xe0000000
   b69ec:	3feec709 	.word	0x3feec709
   b69f0:	dc3a03fd 	.word	0xdc3a03fd
   b69f4:	3feec709 	.word	0x3feec709
   b69f8:	145b01f5 	.word	0x145b01f5
   b69fc:	be3e2fe0 	.word	0xbe3e2fe0
   b6a00:	00000000 	.word	0x00000000
   b6a04:	bff00000 	.word	0xbff00000
   b6a08:	7ff00000 	.word	0x7ff00000
   b6a0c:	43400000 	.word	0x43400000
   b6a10:	0003988e 	.word	0x0003988e
   b6a14:	000bb679 	.word	0x000bb679
   b6a18:	3ff00000 	.word	0x3ff00000
   b6a1c:	40080000 	.word	0x40080000
   b6a20:	2300      	movs	r3, #0
   b6a22:	e9cd 6700 	strd	r6, r7, [sp]
   b6a26:	9300      	str	r3, [sp, #0]
   b6a28:	e9dd 8900 	ldrd	r8, r9, [sp]
   b6a2c:	4630      	mov	r0, r6
   b6a2e:	4642      	mov	r2, r8
   b6a30:	464b      	mov	r3, r9
   b6a32:	4639      	mov	r1, r7
   b6a34:	f000 fcd2 	bl	b73dc <__aeabi_dsub>
   b6a38:	4622      	mov	r2, r4
   b6a3a:	462b      	mov	r3, r5
   b6a3c:	f000 fe86 	bl	b774c <__aeabi_dmul>
   b6a40:	4632      	mov	r2, r6
   b6a42:	463b      	mov	r3, r7
   b6a44:	4606      	mov	r6, r0
   b6a46:	460f      	mov	r7, r1
   b6a48:	4650      	mov	r0, sl
   b6a4a:	4659      	mov	r1, fp
   b6a4c:	f000 fe7e 	bl	b774c <__aeabi_dmul>
   b6a50:	4602      	mov	r2, r0
   b6a52:	460b      	mov	r3, r1
   b6a54:	4630      	mov	r0, r6
   b6a56:	4639      	mov	r1, r7
   b6a58:	f000 fcc2 	bl	b73e0 <__adddf3>
   b6a5c:	4642      	mov	r2, r8
   b6a5e:	464b      	mov	r3, r9
   b6a60:	4606      	mov	r6, r0
   b6a62:	460f      	mov	r7, r1
   b6a64:	4620      	mov	r0, r4
   b6a66:	4629      	mov	r1, r5
   b6a68:	f000 fe70 	bl	b774c <__aeabi_dmul>
   b6a6c:	4604      	mov	r4, r0
   b6a6e:	460d      	mov	r5, r1
   b6a70:	462b      	mov	r3, r5
   b6a72:	4630      	mov	r0, r6
   b6a74:	4639      	mov	r1, r7
   b6a76:	4622      	mov	r2, r4
   b6a78:	f000 fcb2 	bl	b73e0 <__adddf3>
   b6a7c:	4bc2      	ldr	r3, [pc, #776]	; (b6d88 <__ieee754_pow+0x918>)
   b6a7e:	4299      	cmp	r1, r3
   b6a80:	4680      	mov	r8, r0
   b6a82:	4689      	mov	r9, r1
   b6a84:	468a      	mov	sl, r1
   b6a86:	f340 8118 	ble.w	b6cba <__ieee754_pow+0x84a>
   b6a8a:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   b6a8e:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   b6a92:	4303      	orrs	r3, r0
   b6a94:	f040 8207 	bne.w	b6ea6 <__ieee754_pow+0xa36>
   b6a98:	a3a3      	add	r3, pc, #652	; (adr r3, b6d28 <__ieee754_pow+0x8b8>)
   b6a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6a9e:	4630      	mov	r0, r6
   b6aa0:	4639      	mov	r1, r7
   b6aa2:	f000 fc9d 	bl	b73e0 <__adddf3>
   b6aa6:	4602      	mov	r2, r0
   b6aa8:	460b      	mov	r3, r1
   b6aaa:	4640      	mov	r0, r8
   b6aac:	4649      	mov	r1, r9
   b6aae:	4690      	mov	r8, r2
   b6ab0:	4699      	mov	r9, r3
   b6ab2:	4622      	mov	r2, r4
   b6ab4:	462b      	mov	r3, r5
   b6ab6:	f000 fc91 	bl	b73dc <__aeabi_dsub>
   b6aba:	4602      	mov	r2, r0
   b6abc:	460b      	mov	r3, r1
   b6abe:	4640      	mov	r0, r8
   b6ac0:	4649      	mov	r1, r9
   b6ac2:	f001 f8d3 	bl	b7c6c <__aeabi_dcmpgt>
   b6ac6:	2800      	cmp	r0, #0
   b6ac8:	f040 81ed 	bne.w	b6ea6 <__ieee754_pow+0xa36>
   b6acc:	f3ca 530a 	ubfx	r3, sl, #20, #11
   b6ad0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   b6ad4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   b6ad8:	fa42 f303 	asr.w	r3, r2, r3
   b6adc:	4453      	add	r3, sl
   b6ade:	49ab      	ldr	r1, [pc, #684]	; (b6d8c <__ieee754_pow+0x91c>)
   b6ae0:	f3c3 520a 	ubfx	r2, r3, #20, #11
   b6ae4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   b6ae8:	fa41 fc02 	asr.w	ip, r1, r2
   b6aec:	f3c3 0113 	ubfx	r1, r3, #0, #20
   b6af0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6af4:	f1c2 0214 	rsb	r2, r2, #20
   b6af8:	fa41 f202 	asr.w	r2, r1, r2
   b6afc:	2000      	movs	r0, #0
   b6afe:	ea23 010c 	bic.w	r1, r3, ip
   b6b02:	f1ba 0f00 	cmp.w	sl, #0
   b6b06:	9200      	str	r2, [sp, #0]
   b6b08:	460b      	mov	r3, r1
   b6b0a:	4602      	mov	r2, r0
   b6b0c:	da02      	bge.n	b6b14 <__ieee754_pow+0x6a4>
   b6b0e:	9900      	ldr	r1, [sp, #0]
   b6b10:	4249      	negs	r1, r1
   b6b12:	9100      	str	r1, [sp, #0]
   b6b14:	4620      	mov	r0, r4
   b6b16:	4629      	mov	r1, r5
   b6b18:	f000 fc60 	bl	b73dc <__aeabi_dsub>
   b6b1c:	9b00      	ldr	r3, [sp, #0]
   b6b1e:	051b      	lsls	r3, r3, #20
   b6b20:	9302      	str	r3, [sp, #8]
   b6b22:	4602      	mov	r2, r0
   b6b24:	460b      	mov	r3, r1
   b6b26:	4604      	mov	r4, r0
   b6b28:	460d      	mov	r5, r1
   b6b2a:	4630      	mov	r0, r6
   b6b2c:	4639      	mov	r1, r7
   b6b2e:	f000 fc57 	bl	b73e0 <__adddf3>
   b6b32:	4689      	mov	r9, r1
   b6b34:	f04f 0800 	mov.w	r8, #0
   b6b38:	a37d      	add	r3, pc, #500	; (adr r3, b6d30 <__ieee754_pow+0x8c0>)
   b6b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6b3e:	4640      	mov	r0, r8
   b6b40:	4649      	mov	r1, r9
   b6b42:	f000 fe03 	bl	b774c <__aeabi_dmul>
   b6b46:	4622      	mov	r2, r4
   b6b48:	462b      	mov	r3, r5
   b6b4a:	4682      	mov	sl, r0
   b6b4c:	468b      	mov	fp, r1
   b6b4e:	4640      	mov	r0, r8
   b6b50:	4649      	mov	r1, r9
   b6b52:	f000 fc43 	bl	b73dc <__aeabi_dsub>
   b6b56:	4602      	mov	r2, r0
   b6b58:	460b      	mov	r3, r1
   b6b5a:	4630      	mov	r0, r6
   b6b5c:	4639      	mov	r1, r7
   b6b5e:	f000 fc3d 	bl	b73dc <__aeabi_dsub>
   b6b62:	a375      	add	r3, pc, #468	; (adr r3, b6d38 <__ieee754_pow+0x8c8>)
   b6b64:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6b68:	f000 fdf0 	bl	b774c <__aeabi_dmul>
   b6b6c:	a374      	add	r3, pc, #464	; (adr r3, b6d40 <__ieee754_pow+0x8d0>)
   b6b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6b72:	4604      	mov	r4, r0
   b6b74:	460d      	mov	r5, r1
   b6b76:	4640      	mov	r0, r8
   b6b78:	4649      	mov	r1, r9
   b6b7a:	f000 fde7 	bl	b774c <__aeabi_dmul>
   b6b7e:	4602      	mov	r2, r0
   b6b80:	460b      	mov	r3, r1
   b6b82:	4620      	mov	r0, r4
   b6b84:	4629      	mov	r1, r5
   b6b86:	f000 fc2b 	bl	b73e0 <__adddf3>
   b6b8a:	4606      	mov	r6, r0
   b6b8c:	460f      	mov	r7, r1
   b6b8e:	4632      	mov	r2, r6
   b6b90:	463b      	mov	r3, r7
   b6b92:	4650      	mov	r0, sl
   b6b94:	4659      	mov	r1, fp
   b6b96:	f000 fc23 	bl	b73e0 <__adddf3>
   b6b9a:	4652      	mov	r2, sl
   b6b9c:	465b      	mov	r3, fp
   b6b9e:	4604      	mov	r4, r0
   b6ba0:	460d      	mov	r5, r1
   b6ba2:	f000 fc1b 	bl	b73dc <__aeabi_dsub>
   b6ba6:	4602      	mov	r2, r0
   b6ba8:	460b      	mov	r3, r1
   b6baa:	4630      	mov	r0, r6
   b6bac:	4639      	mov	r1, r7
   b6bae:	f000 fc15 	bl	b73dc <__aeabi_dsub>
   b6bb2:	4622      	mov	r2, r4
   b6bb4:	4680      	mov	r8, r0
   b6bb6:	4689      	mov	r9, r1
   b6bb8:	462b      	mov	r3, r5
   b6bba:	4620      	mov	r0, r4
   b6bbc:	4629      	mov	r1, r5
   b6bbe:	f000 fdc5 	bl	b774c <__aeabi_dmul>
   b6bc2:	a361      	add	r3, pc, #388	; (adr r3, b6d48 <__ieee754_pow+0x8d8>)
   b6bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6bc8:	4606      	mov	r6, r0
   b6bca:	460f      	mov	r7, r1
   b6bcc:	f000 fdbe 	bl	b774c <__aeabi_dmul>
   b6bd0:	a35f      	add	r3, pc, #380	; (adr r3, b6d50 <__ieee754_pow+0x8e0>)
   b6bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6bd6:	f000 fc01 	bl	b73dc <__aeabi_dsub>
   b6bda:	4632      	mov	r2, r6
   b6bdc:	463b      	mov	r3, r7
   b6bde:	f000 fdb5 	bl	b774c <__aeabi_dmul>
   b6be2:	a35d      	add	r3, pc, #372	; (adr r3, b6d58 <__ieee754_pow+0x8e8>)
   b6be4:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6be8:	f000 fbfa 	bl	b73e0 <__adddf3>
   b6bec:	4632      	mov	r2, r6
   b6bee:	463b      	mov	r3, r7
   b6bf0:	f000 fdac 	bl	b774c <__aeabi_dmul>
   b6bf4:	a35a      	add	r3, pc, #360	; (adr r3, b6d60 <__ieee754_pow+0x8f0>)
   b6bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6bfa:	f000 fbef 	bl	b73dc <__aeabi_dsub>
   b6bfe:	4632      	mov	r2, r6
   b6c00:	463b      	mov	r3, r7
   b6c02:	f000 fda3 	bl	b774c <__aeabi_dmul>
   b6c06:	a358      	add	r3, pc, #352	; (adr r3, b6d68 <__ieee754_pow+0x8f8>)
   b6c08:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6c0c:	f000 fbe8 	bl	b73e0 <__adddf3>
   b6c10:	4632      	mov	r2, r6
   b6c12:	463b      	mov	r3, r7
   b6c14:	f000 fd9a 	bl	b774c <__aeabi_dmul>
   b6c18:	4602      	mov	r2, r0
   b6c1a:	460b      	mov	r3, r1
   b6c1c:	4620      	mov	r0, r4
   b6c1e:	4629      	mov	r1, r5
   b6c20:	f000 fbdc 	bl	b73dc <__aeabi_dsub>
   b6c24:	4606      	mov	r6, r0
   b6c26:	460f      	mov	r7, r1
   b6c28:	4632      	mov	r2, r6
   b6c2a:	463b      	mov	r3, r7
   b6c2c:	4620      	mov	r0, r4
   b6c2e:	4629      	mov	r1, r5
   b6c30:	f000 fd8c 	bl	b774c <__aeabi_dmul>
   b6c34:	4602      	mov	r2, r0
   b6c36:	460b      	mov	r3, r1
   b6c38:	4630      	mov	r0, r6
   b6c3a:	4639      	mov	r1, r7
   b6c3c:	4616      	mov	r6, r2
   b6c3e:	461f      	mov	r7, r3
   b6c40:	2200      	movs	r2, #0
   b6c42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b6c46:	f000 fbc9 	bl	b73dc <__aeabi_dsub>
   b6c4a:	4602      	mov	r2, r0
   b6c4c:	460b      	mov	r3, r1
   b6c4e:	4630      	mov	r0, r6
   b6c50:	4639      	mov	r1, r7
   b6c52:	f000 fea5 	bl	b79a0 <__aeabi_ddiv>
   b6c56:	4642      	mov	r2, r8
   b6c58:	4606      	mov	r6, r0
   b6c5a:	460f      	mov	r7, r1
   b6c5c:	464b      	mov	r3, r9
   b6c5e:	4620      	mov	r0, r4
   b6c60:	4629      	mov	r1, r5
   b6c62:	f000 fd73 	bl	b774c <__aeabi_dmul>
   b6c66:	4642      	mov	r2, r8
   b6c68:	464b      	mov	r3, r9
   b6c6a:	f000 fbb9 	bl	b73e0 <__adddf3>
   b6c6e:	4602      	mov	r2, r0
   b6c70:	460b      	mov	r3, r1
   b6c72:	4630      	mov	r0, r6
   b6c74:	4639      	mov	r1, r7
   b6c76:	f000 fbb1 	bl	b73dc <__aeabi_dsub>
   b6c7a:	4622      	mov	r2, r4
   b6c7c:	462b      	mov	r3, r5
   b6c7e:	f000 fbad 	bl	b73dc <__aeabi_dsub>
   b6c82:	4602      	mov	r2, r0
   b6c84:	460b      	mov	r3, r1
   b6c86:	2000      	movs	r0, #0
   b6c88:	4941      	ldr	r1, [pc, #260]	; (b6d90 <__ieee754_pow+0x920>)
   b6c8a:	f000 fba7 	bl	b73dc <__aeabi_dsub>
   b6c8e:	9a02      	ldr	r2, [sp, #8]
   b6c90:	460b      	mov	r3, r1
   b6c92:	4413      	add	r3, r2
   b6c94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   b6c98:	f2c0 8143 	blt.w	b6f22 <__ieee754_pow+0xab2>
   b6c9c:	4619      	mov	r1, r3
   b6c9e:	ec53 2b18 	vmov	r2, r3, d8
   b6ca2:	f000 fd53 	bl	b774c <__aeabi_dmul>
   b6ca6:	ec41 0b10 	vmov	d0, r0, r1
   b6caa:	e42d      	b.n	b6508 <__ieee754_pow+0x98>
   b6cac:	f1bb 0f00 	cmp.w	fp, #0
   b6cb0:	f6ff aca0 	blt.w	b65f4 <__ieee754_pow+0x184>
   b6cb4:	ed9f 0b2e 	vldr	d0, [pc, #184]	; b6d70 <__ieee754_pow+0x900>
   b6cb8:	e426      	b.n	b6508 <__ieee754_pow+0x98>
   b6cba:	f8df c0dc 	ldr.w	ip, [pc, #220]	; b6d98 <__ieee754_pow+0x928>
   b6cbe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   b6cc2:	4563      	cmp	r3, ip
   b6cc4:	f340 80e7 	ble.w	b6e96 <__ieee754_pow+0xa26>
   b6cc8:	4b32      	ldr	r3, [pc, #200]	; (b6d94 <__ieee754_pow+0x924>)
   b6cca:	440b      	add	r3, r1
   b6ccc:	4303      	orrs	r3, r0
   b6cce:	d10a      	bne.n	b6ce6 <__ieee754_pow+0x876>
   b6cd0:	4622      	mov	r2, r4
   b6cd2:	462b      	mov	r3, r5
   b6cd4:	f000 fb82 	bl	b73dc <__aeabi_dsub>
   b6cd8:	4632      	mov	r2, r6
   b6cda:	463b      	mov	r3, r7
   b6cdc:	f000 ffbc 	bl	b7c58 <__aeabi_dcmpge>
   b6ce0:	2800      	cmp	r0, #0
   b6ce2:	f43f aef3 	beq.w	b6acc <__ieee754_pow+0x65c>
   b6ce6:	a324      	add	r3, pc, #144	; (adr r3, b6d78 <__ieee754_pow+0x908>)
   b6ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6cec:	ec51 0b18 	vmov	r0, r1, d8
   b6cf0:	f000 fd2c 	bl	b774c <__aeabi_dmul>
   b6cf4:	a320      	add	r3, pc, #128	; (adr r3, b6d78 <__ieee754_pow+0x908>)
   b6cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6cfa:	f000 fd27 	bl	b774c <__aeabi_dmul>
   b6cfe:	ec41 0b10 	vmov	d0, r0, r1
   b6d02:	e401      	b.n	b6508 <__ieee754_pow+0x98>
   b6d04:	ed9f 7b1e 	vldr	d7, [pc, #120]	; b6d80 <__ieee754_pow+0x910>
   b6d08:	eeb0 8a47 	vmov.f32	s16, s14
   b6d0c:	eef0 8a67 	vmov.f32	s17, s15
   b6d10:	e686      	b.n	b6a20 <__ieee754_pow+0x5b0>
   b6d12:	f1bb 0f00 	cmp.w	fp, #0
   b6d16:	dacd      	bge.n	b6cb4 <__ieee754_pow+0x844>
   b6d18:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   b6d1c:	ee00 6a10 	vmov	s0, r6
   b6d20:	ee00 3a90 	vmov	s1, r3
   b6d24:	f7ff bbf0 	b.w	b6508 <__ieee754_pow+0x98>
   b6d28:	652b82fe 	.word	0x652b82fe
   b6d2c:	3c971547 	.word	0x3c971547
   b6d30:	00000000 	.word	0x00000000
   b6d34:	3fe62e43 	.word	0x3fe62e43
   b6d38:	fefa39ef 	.word	0xfefa39ef
   b6d3c:	3fe62e42 	.word	0x3fe62e42
   b6d40:	0ca86c39 	.word	0x0ca86c39
   b6d44:	be205c61 	.word	0xbe205c61
   b6d48:	72bea4d0 	.word	0x72bea4d0
   b6d4c:	3e663769 	.word	0x3e663769
   b6d50:	c5d26bf1 	.word	0xc5d26bf1
   b6d54:	3ebbbd41 	.word	0x3ebbbd41
   b6d58:	af25de2c 	.word	0xaf25de2c
   b6d5c:	3f11566a 	.word	0x3f11566a
   b6d60:	16bebd93 	.word	0x16bebd93
   b6d64:	3f66c16c 	.word	0x3f66c16c
   b6d68:	5555553e 	.word	0x5555553e
   b6d6c:	3fc55555 	.word	0x3fc55555
	...
   b6d78:	c2f8f359 	.word	0xc2f8f359
   b6d7c:	01a56e1f 	.word	0x01a56e1f
   b6d80:	00000000 	.word	0x00000000
   b6d84:	3ff00000 	.word	0x3ff00000
   b6d88:	408fffff 	.word	0x408fffff
   b6d8c:	000fffff 	.word	0x000fffff
   b6d90:	3ff00000 	.word	0x3ff00000
   b6d94:	3f6f3400 	.word	0x3f6f3400
   b6d98:	4090cbff 	.word	0x4090cbff
   b6d9c:	4598      	cmp	r8, r3
   b6d9e:	db85      	blt.n	b6cac <__ieee754_pow+0x83c>
   b6da0:	4b7d      	ldr	r3, [pc, #500]	; (b6f98 <__ieee754_pow+0xb28>)
   b6da2:	4598      	cmp	r8, r3
   b6da4:	f73f ac22 	bgt.w	b65ec <__ieee754_pow+0x17c>
   b6da8:	ec51 0b10 	vmov	r0, r1, d0
   b6dac:	4b7a      	ldr	r3, [pc, #488]	; (b6f98 <__ieee754_pow+0xb28>)
   b6dae:	2200      	movs	r2, #0
   b6db0:	f000 fb14 	bl	b73dc <__aeabi_dsub>
   b6db4:	a368      	add	r3, pc, #416	; (adr r3, b6f58 <__ieee754_pow+0xae8>)
   b6db6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6dba:	4604      	mov	r4, r0
   b6dbc:	460d      	mov	r5, r1
   b6dbe:	f000 fcc5 	bl	b774c <__aeabi_dmul>
   b6dc2:	a367      	add	r3, pc, #412	; (adr r3, b6f60 <__ieee754_pow+0xaf0>)
   b6dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6dc8:	4682      	mov	sl, r0
   b6dca:	468b      	mov	fp, r1
   b6dcc:	4620      	mov	r0, r4
   b6dce:	4629      	mov	r1, r5
   b6dd0:	f000 fcbc 	bl	b774c <__aeabi_dmul>
   b6dd4:	4b71      	ldr	r3, [pc, #452]	; (b6f9c <__ieee754_pow+0xb2c>)
   b6dd6:	ec41 0b18 	vmov	d8, r0, r1
   b6dda:	2200      	movs	r2, #0
   b6ddc:	4620      	mov	r0, r4
   b6dde:	4629      	mov	r1, r5
   b6de0:	f000 fcb4 	bl	b774c <__aeabi_dmul>
   b6de4:	4602      	mov	r2, r0
   b6de6:	460b      	mov	r3, r1
   b6de8:	a15f      	add	r1, pc, #380	; (adr r1, b6f68 <__ieee754_pow+0xaf8>)
   b6dea:	e9d1 0100 	ldrd	r0, r1, [r1]
   b6dee:	f000 faf5 	bl	b73dc <__aeabi_dsub>
   b6df2:	4622      	mov	r2, r4
   b6df4:	462b      	mov	r3, r5
   b6df6:	f000 fca9 	bl	b774c <__aeabi_dmul>
   b6dfa:	4602      	mov	r2, r0
   b6dfc:	460b      	mov	r3, r1
   b6dfe:	2000      	movs	r0, #0
   b6e00:	4967      	ldr	r1, [pc, #412]	; (b6fa0 <__ieee754_pow+0xb30>)
   b6e02:	f000 faeb 	bl	b73dc <__aeabi_dsub>
   b6e06:	4622      	mov	r2, r4
   b6e08:	4680      	mov	r8, r0
   b6e0a:	4689      	mov	r9, r1
   b6e0c:	462b      	mov	r3, r5
   b6e0e:	4620      	mov	r0, r4
   b6e10:	4629      	mov	r1, r5
   b6e12:	f000 fc9b 	bl	b774c <__aeabi_dmul>
   b6e16:	4602      	mov	r2, r0
   b6e18:	460b      	mov	r3, r1
   b6e1a:	4640      	mov	r0, r8
   b6e1c:	4649      	mov	r1, r9
   b6e1e:	f000 fc95 	bl	b774c <__aeabi_dmul>
   b6e22:	a353      	add	r3, pc, #332	; (adr r3, b6f70 <__ieee754_pow+0xb00>)
   b6e24:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6e28:	f000 fc90 	bl	b774c <__aeabi_dmul>
   b6e2c:	4602      	mov	r2, r0
   b6e2e:	460b      	mov	r3, r1
   b6e30:	ec51 0b18 	vmov	r0, r1, d8
   b6e34:	f000 fad2 	bl	b73dc <__aeabi_dsub>
   b6e38:	4680      	mov	r8, r0
   b6e3a:	4689      	mov	r9, r1
   b6e3c:	4642      	mov	r2, r8
   b6e3e:	464b      	mov	r3, r9
   b6e40:	4650      	mov	r0, sl
   b6e42:	4659      	mov	r1, fp
   b6e44:	f000 facc 	bl	b73e0 <__adddf3>
   b6e48:	2000      	movs	r0, #0
   b6e4a:	4652      	mov	r2, sl
   b6e4c:	465b      	mov	r3, fp
   b6e4e:	4604      	mov	r4, r0
   b6e50:	460d      	mov	r5, r1
   b6e52:	e591      	b.n	b6978 <__ieee754_pow+0x508>
   b6e54:	4622      	mov	r2, r4
   b6e56:	462b      	mov	r3, r5
   b6e58:	4620      	mov	r0, r4
   b6e5a:	4629      	mov	r1, r5
   b6e5c:	f000 fc76 	bl	b774c <__aeabi_dmul>
   b6e60:	ec41 0b10 	vmov	d0, r0, r1
   b6e64:	f7ff bb50 	b.w	b6508 <__ieee754_pow+0x98>
   b6e68:	494b      	ldr	r1, [pc, #300]	; (b6f98 <__ieee754_pow+0xb28>)
   b6e6a:	2000      	movs	r0, #0
   b6e6c:	4622      	mov	r2, r4
   b6e6e:	462b      	mov	r3, r5
   b6e70:	f000 fd96 	bl	b79a0 <__aeabi_ddiv>
   b6e74:	ec41 0b10 	vmov	d0, r0, r1
   b6e78:	f7ff bb46 	b.w	b6508 <__ieee754_pow+0x98>
   b6e7c:	2b00      	cmp	r3, #0
   b6e7e:	d144      	bne.n	b6f0a <__ieee754_pow+0xa9a>
   b6e80:	f1c1 0114 	rsb	r1, r1, #20
   b6e84:	fa4a f001 	asr.w	r0, sl, r1
   b6e88:	fa00 f101 	lsl.w	r1, r0, r1
   b6e8c:	4551      	cmp	r1, sl
   b6e8e:	d05a      	beq.n	b6f46 <__ieee754_pow+0xad6>
   b6e90:	9300      	str	r3, [sp, #0]
   b6e92:	f7ff bb17 	b.w	b64c4 <__ieee754_pow+0x54>
   b6e96:	4a42      	ldr	r2, [pc, #264]	; (b6fa0 <__ieee754_pow+0xb30>)
   b6e98:	4293      	cmp	r3, r2
   b6e9a:	dc5b      	bgt.n	b6f54 <__ieee754_pow+0xae4>
   b6e9c:	e9dd 1200 	ldrd	r1, r2, [sp]
   b6ea0:	9102      	str	r1, [sp, #8]
   b6ea2:	9100      	str	r1, [sp, #0]
   b6ea4:	e646      	b.n	b6b34 <__ieee754_pow+0x6c4>
   b6ea6:	a334      	add	r3, pc, #208	; (adr r3, b6f78 <__ieee754_pow+0xb08>)
   b6ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6eac:	ec51 0b18 	vmov	r0, r1, d8
   b6eb0:	f000 fc4c 	bl	b774c <__aeabi_dmul>
   b6eb4:	a330      	add	r3, pc, #192	; (adr r3, b6f78 <__ieee754_pow+0xb08>)
   b6eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6eba:	f000 fc47 	bl	b774c <__aeabi_dmul>
   b6ebe:	ec41 0b10 	vmov	d0, r0, r1
   b6ec2:	f7ff bb21 	b.w	b6508 <__ieee754_pow+0x98>
   b6ec6:	9b00      	ldr	r3, [sp, #0]
   b6ec8:	2b01      	cmp	r3, #1
   b6eca:	f47f ab1d 	bne.w	b6508 <__ieee754_pow+0x98>
   b6ece:	ee10 1a90 	vmov	r1, s1
   b6ed2:	ee10 2a10 	vmov	r2, s0
   b6ed6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b6eda:	ec43 2b10 	vmov	d0, r2, r3
   b6ede:	f7ff bb13 	b.w	b6508 <__ieee754_pow+0x98>
   b6ee2:	ed9f 7b27 	vldr	d7, [pc, #156]	; b6f80 <__ieee754_pow+0xb10>
   b6ee6:	eeb0 ca47 	vmov.f32	s24, s14
   b6eea:	eef0 ca67 	vmov.f32	s25, s15
   b6eee:	ed9f 7b26 	vldr	d7, [pc, #152]	; b6f88 <__ieee754_pow+0xb18>
   b6ef2:	eeb0 da47 	vmov.f32	s26, s14
   b6ef6:	eef0 da67 	vmov.f32	s27, s15
   b6efa:	ed9f 7b25 	vldr	d7, [pc, #148]	; b6f90 <__ieee754_pow+0xb20>
   b6efe:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   b6f02:	ec53 2b17 	vmov	r2, r3, d7
   b6f06:	f7ff bbeb 	b.w	b66e0 <__ieee754_pow+0x270>
   b6f0a:	ec45 4b10 	vmov	d0, r4, r5
   b6f0e:	9200      	str	r2, [sp, #0]
   b6f10:	f000 f914 	bl	b713c <fabs>
   b6f14:	9a00      	ldr	r2, [sp, #0]
   b6f16:	2a00      	cmp	r2, #0
   b6f18:	f47f ab92 	bne.w	b6640 <__ieee754_pow+0x1d0>
   b6f1c:	9200      	str	r2, [sp, #0]
   b6f1e:	f7ff bb26 	b.w	b656e <__ieee754_pow+0xfe>
   b6f22:	ec41 0b10 	vmov	d0, r0, r1
   b6f26:	9800      	ldr	r0, [sp, #0]
   b6f28:	f000 f9c2 	bl	b72b0 <scalbn>
   b6f2c:	ec51 0b10 	vmov	r0, r1, d0
   b6f30:	e6b5      	b.n	b6c9e <__ieee754_pow+0x82e>
   b6f32:	f000 0001 	and.w	r0, r0, #1
   b6f36:	f1c0 0102 	rsb	r1, r0, #2
   b6f3a:	9100      	str	r1, [sp, #0]
   b6f3c:	2b00      	cmp	r3, #0
   b6f3e:	f43f aac1 	beq.w	b64c4 <__ieee754_pow+0x54>
   b6f42:	f7ff bb0d 	b.w	b6560 <__ieee754_pow+0xf0>
   b6f46:	f000 0001 	and.w	r0, r0, #1
   b6f4a:	f1c0 0302 	rsb	r3, r0, #2
   b6f4e:	9300      	str	r3, [sp, #0]
   b6f50:	f7ff bab8 	b.w	b64c4 <__ieee754_pow+0x54>
   b6f54:	151b      	asrs	r3, r3, #20
   b6f56:	e5bb      	b.n	b6ad0 <__ieee754_pow+0x660>
   b6f58:	60000000 	.word	0x60000000
   b6f5c:	3ff71547 	.word	0x3ff71547
   b6f60:	f85ddf44 	.word	0xf85ddf44
   b6f64:	3e54ae0b 	.word	0x3e54ae0b
   b6f68:	55555555 	.word	0x55555555
   b6f6c:	3fd55555 	.word	0x3fd55555
   b6f70:	652b82fe 	.word	0x652b82fe
   b6f74:	3ff71547 	.word	0x3ff71547
   b6f78:	8800759c 	.word	0x8800759c
   b6f7c:	7e37e43c 	.word	0x7e37e43c
   b6f80:	40000000 	.word	0x40000000
   b6f84:	3fe2b803 	.word	0x3fe2b803
   b6f88:	43cfd006 	.word	0x43cfd006
   b6f8c:	3e4cfdeb 	.word	0x3e4cfdeb
   b6f90:	00000000 	.word	0x00000000
   b6f94:	3ff80000 	.word	0x3ff80000
   b6f98:	3ff00000 	.word	0x3ff00000
   b6f9c:	3fd00000 	.word	0x3fd00000
   b6fa0:	3fe00000 	.word	0x3fe00000

000b6fa4 <__ieee754_sqrt>:
   b6fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6fa8:	4a63      	ldr	r2, [pc, #396]	; (b7138 <__ieee754_sqrt+0x194>)
   b6faa:	ec55 4b10 	vmov	r4, r5, d0
   b6fae:	43aa      	bics	r2, r5
   b6fb0:	f000 809f 	beq.w	b70f2 <__ieee754_sqrt+0x14e>
   b6fb4:	2d00      	cmp	r5, #0
   b6fb6:	ee10 ca10 	vmov	ip, s0
   b6fba:	462b      	mov	r3, r5
   b6fbc:	dd54      	ble.n	b7068 <__ieee754_sqrt+0xc4>
   b6fbe:	1529      	asrs	r1, r5, #20
   b6fc0:	d063      	beq.n	b708a <__ieee754_sqrt+0xe6>
   b6fc2:	f3c3 0313 	ubfx	r3, r3, #0, #20
   b6fc6:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   b6fca:	07c9      	lsls	r1, r1, #31
   b6fcc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b6fd0:	d404      	bmi.n	b6fdc <__ieee754_sqrt+0x38>
   b6fd2:	005b      	lsls	r3, r3, #1
   b6fd4:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   b6fd8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b6fdc:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   b6fe0:	2600      	movs	r6, #0
   b6fe2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   b6fe6:	107f      	asrs	r7, r7, #1
   b6fe8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b6fec:	f04f 0e16 	mov.w	lr, #22
   b6ff0:	4634      	mov	r4, r6
   b6ff2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   b6ff6:	18a1      	adds	r1, r4, r2
   b6ff8:	4299      	cmp	r1, r3
   b6ffa:	dc02      	bgt.n	b7002 <__ieee754_sqrt+0x5e>
   b6ffc:	1a5b      	subs	r3, r3, r1
   b6ffe:	188c      	adds	r4, r1, r2
   b7000:	4416      	add	r6, r2
   b7002:	005b      	lsls	r3, r3, #1
   b7004:	f1be 0e01 	subs.w	lr, lr, #1
   b7008:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   b700c:	ea4f 0252 	mov.w	r2, r2, lsr #1
   b7010:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b7014:	d1ef      	bne.n	b6ff6 <__ieee754_sqrt+0x52>
   b7016:	4675      	mov	r5, lr
   b7018:	2020      	movs	r0, #32
   b701a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   b701e:	e00a      	b.n	b7036 <__ieee754_sqrt+0x92>
   b7020:	d044      	beq.n	b70ac <__ieee754_sqrt+0x108>
   b7022:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   b7026:	3801      	subs	r0, #1
   b7028:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   b702c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b7030:	ea4f 0252 	mov.w	r2, r2, lsr #1
   b7034:	d043      	beq.n	b70be <__ieee754_sqrt+0x11a>
   b7036:	42a3      	cmp	r3, r4
   b7038:	eb02 010e 	add.w	r1, r2, lr
   b703c:	ddf0      	ble.n	b7020 <__ieee754_sqrt+0x7c>
   b703e:	2900      	cmp	r1, #0
   b7040:	eb01 0e02 	add.w	lr, r1, r2
   b7044:	db0a      	blt.n	b705c <__ieee754_sqrt+0xb8>
   b7046:	46a0      	mov	r8, r4
   b7048:	1b1b      	subs	r3, r3, r4
   b704a:	4561      	cmp	r1, ip
   b704c:	bf88      	it	hi
   b704e:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   b7052:	ebac 0c01 	sub.w	ip, ip, r1
   b7056:	4415      	add	r5, r2
   b7058:	4644      	mov	r4, r8
   b705a:	e7e2      	b.n	b7022 <__ieee754_sqrt+0x7e>
   b705c:	f1be 0f00 	cmp.w	lr, #0
   b7060:	dbf1      	blt.n	b7046 <__ieee754_sqrt+0xa2>
   b7062:	f104 0801 	add.w	r8, r4, #1
   b7066:	e7ef      	b.n	b7048 <__ieee754_sqrt+0xa4>
   b7068:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   b706c:	4322      	orrs	r2, r4
   b706e:	d038      	beq.n	b70e2 <__ieee754_sqrt+0x13e>
   b7070:	2d00      	cmp	r5, #0
   b7072:	d14e      	bne.n	b7112 <__ieee754_sqrt+0x16e>
   b7074:	4629      	mov	r1, r5
   b7076:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   b707a:	3915      	subs	r1, #21
   b707c:	4613      	mov	r3, r2
   b707e:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   b7082:	2a00      	cmp	r2, #0
   b7084:	d0f7      	beq.n	b7076 <__ieee754_sqrt+0xd2>
   b7086:	02d6      	lsls	r6, r2, #11
   b7088:	d450      	bmi.n	b712c <__ieee754_sqrt+0x188>
   b708a:	2000      	movs	r0, #0
   b708c:	005b      	lsls	r3, r3, #1
   b708e:	02dd      	lsls	r5, r3, #11
   b7090:	4604      	mov	r4, r0
   b7092:	f100 0001 	add.w	r0, r0, #1
   b7096:	d5f9      	bpl.n	b708c <__ieee754_sqrt+0xe8>
   b7098:	461a      	mov	r2, r3
   b709a:	4663      	mov	r3, ip
   b709c:	fa0c fc00 	lsl.w	ip, ip, r0
   b70a0:	f1c0 0020 	rsb	r0, r0, #32
   b70a4:	40c3      	lsrs	r3, r0
   b70a6:	1b09      	subs	r1, r1, r4
   b70a8:	4313      	orrs	r3, r2
   b70aa:	e78a      	b.n	b6fc2 <__ieee754_sqrt+0x1e>
   b70ac:	4561      	cmp	r1, ip
   b70ae:	d8b8      	bhi.n	b7022 <__ieee754_sqrt+0x7e>
   b70b0:	2900      	cmp	r1, #0
   b70b2:	eb01 0e02 	add.w	lr, r1, r2
   b70b6:	dbd1      	blt.n	b705c <__ieee754_sqrt+0xb8>
   b70b8:	4698      	mov	r8, r3
   b70ba:	2300      	movs	r3, #0
   b70bc:	e7c9      	b.n	b7052 <__ieee754_sqrt+0xae>
   b70be:	ea53 030c 	orrs.w	r3, r3, ip
   b70c2:	d110      	bne.n	b70e6 <__ieee754_sqrt+0x142>
   b70c4:	0868      	lsrs	r0, r5, #1
   b70c6:	1071      	asrs	r1, r6, #1
   b70c8:	07f3      	lsls	r3, r6, #31
   b70ca:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   b70ce:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   b70d2:	bf48      	it	mi
   b70d4:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   b70d8:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   b70dc:	4602      	mov	r2, r0
   b70de:	ec43 2b10 	vmov	d0, r2, r3
   b70e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b70e6:	1c6a      	adds	r2, r5, #1
   b70e8:	bf16      	itet	ne
   b70ea:	1c68      	addne	r0, r5, #1
   b70ec:	3601      	addeq	r6, #1
   b70ee:	0840      	lsrne	r0, r0, #1
   b70f0:	e7e9      	b.n	b70c6 <__ieee754_sqrt+0x122>
   b70f2:	ee10 2a10 	vmov	r2, s0
   b70f6:	ee10 0a10 	vmov	r0, s0
   b70fa:	462b      	mov	r3, r5
   b70fc:	4629      	mov	r1, r5
   b70fe:	f000 fb25 	bl	b774c <__aeabi_dmul>
   b7102:	4622      	mov	r2, r4
   b7104:	462b      	mov	r3, r5
   b7106:	f000 f96b 	bl	b73e0 <__adddf3>
   b710a:	ec41 0b10 	vmov	d0, r0, r1
   b710e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7112:	ee10 2a10 	vmov	r2, s0
   b7116:	4620      	mov	r0, r4
   b7118:	4629      	mov	r1, r5
   b711a:	f000 f95f 	bl	b73dc <__aeabi_dsub>
   b711e:	4602      	mov	r2, r0
   b7120:	460b      	mov	r3, r1
   b7122:	f000 fc3d 	bl	b79a0 <__aeabi_ddiv>
   b7126:	ec41 0b10 	vmov	d0, r0, r1
   b712a:	e7da      	b.n	b70e2 <__ieee754_sqrt+0x13e>
   b712c:	4663      	mov	r3, ip
   b712e:	2020      	movs	r0, #32
   b7130:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b7134:	e7b6      	b.n	b70a4 <__ieee754_sqrt+0x100>
   b7136:	bf00      	nop
   b7138:	7ff00000 	.word	0x7ff00000

000b713c <fabs>:
   b713c:	ec51 0b10 	vmov	r0, r1, d0
   b7140:	ee10 2a10 	vmov	r2, s0
   b7144:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   b7148:	ec43 2b10 	vmov	d0, r2, r3
   b714c:	4770      	bx	lr
   b714e:	bf00      	nop

000b7150 <finite>:
   b7150:	b082      	sub	sp, #8
   b7152:	ed8d 0b00 	vstr	d0, [sp]
   b7156:	9801      	ldr	r0, [sp, #4]
   b7158:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   b715c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   b7160:	0fc0      	lsrs	r0, r0, #31
   b7162:	b002      	add	sp, #8
   b7164:	4770      	bx	lr
   b7166:	bf00      	nop

000b7168 <nan>:
   b7168:	ed9f 0b01 	vldr	d0, [pc, #4]	; b7170 <nan+0x8>
   b716c:	4770      	bx	lr
   b716e:	bf00      	nop
   b7170:	00000000 	.word	0x00000000
   b7174:	7ff80000 	.word	0x7ff80000

000b7178 <rint>:
   b7178:	b5f0      	push	{r4, r5, r6, r7, lr}
   b717a:	ec53 2b10 	vmov	r2, r3, d0
   b717e:	f3c3 5c0a 	ubfx	ip, r3, #20, #11
   b7182:	f2ac 31ff 	subw	r1, ip, #1023	; 0x3ff
   b7186:	2913      	cmp	r1, #19
   b7188:	ee10 0a10 	vmov	r0, s0
   b718c:	b083      	sub	sp, #12
   b718e:	461c      	mov	r4, r3
   b7190:	ea4f 7ed3 	mov.w	lr, r3, lsr #31
   b7194:	dc3a      	bgt.n	b720c <rint+0x94>
   b7196:	2900      	cmp	r1, #0
   b7198:	db30      	blt.n	b71fc <rint+0x84>
   b719a:	4d42      	ldr	r5, [pc, #264]	; (b72a4 <rint+0x12c>)
   b719c:	fa45 fc01 	asr.w	ip, r5, r1
   b71a0:	ea03 050c 	and.w	r5, r3, ip
   b71a4:	4315      	orrs	r5, r2
   b71a6:	d02d      	beq.n	b7204 <rint+0x8c>
   b71a8:	ea03 035c 	and.w	r3, r3, ip, lsr #1
   b71ac:	4318      	orrs	r0, r3
   b71ae:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   b71b2:	d00c      	beq.n	b71ce <rint+0x56>
   b71b4:	ea24 0c0c 	bic.w	ip, r4, ip
   b71b8:	f44f 2480 	mov.w	r4, #262144	; 0x40000
   b71bc:	2913      	cmp	r1, #19
   b71be:	fa44 f101 	asr.w	r1, r4, r1
   b71c2:	bf0c      	ite	eq
   b71c4:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
   b71c8:	2000      	movne	r0, #0
   b71ca:	ea4c 0401 	orr.w	r4, ip, r1
   b71ce:	4936      	ldr	r1, [pc, #216]	; (b72a8 <rint+0x130>)
   b71d0:	eb01 0ece 	add.w	lr, r1, lr, lsl #3
   b71d4:	4623      	mov	r3, r4
   b71d6:	e9de 4500 	ldrd	r4, r5, [lr]
   b71da:	4602      	mov	r2, r0
   b71dc:	4629      	mov	r1, r5
   b71de:	4620      	mov	r0, r4
   b71e0:	f000 f8fe 	bl	b73e0 <__adddf3>
   b71e4:	e9cd 0100 	strd	r0, r1, [sp]
   b71e8:	e9dd 0100 	ldrd	r0, r1, [sp]
   b71ec:	4622      	mov	r2, r4
   b71ee:	462b      	mov	r3, r5
   b71f0:	f000 f8f4 	bl	b73dc <__aeabi_dsub>
   b71f4:	ec41 0b10 	vmov	d0, r0, r1
   b71f8:	b003      	add	sp, #12
   b71fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b71fc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   b7200:	4311      	orrs	r1, r2
   b7202:	d124      	bne.n	b724e <rint+0xd6>
   b7204:	ec43 2b10 	vmov	d0, r2, r3
   b7208:	b003      	add	sp, #12
   b720a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b720c:	2933      	cmp	r1, #51	; 0x33
   b720e:	dd08      	ble.n	b7222 <rint+0xaa>
   b7210:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   b7214:	d1f6      	bne.n	b7204 <rint+0x8c>
   b7216:	4619      	mov	r1, r3
   b7218:	f000 f8e2 	bl	b73e0 <__adddf3>
   b721c:	ec41 0b10 	vmov	d0, r0, r1
   b7220:	e7f2      	b.n	b7208 <rint+0x90>
   b7222:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
   b7226:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b722a:	fa21 f10c 	lsr.w	r1, r1, ip
   b722e:	420a      	tst	r2, r1
   b7230:	d0e8      	beq.n	b7204 <rint+0x8c>
   b7232:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
   b7236:	ea4f 0351 	mov.w	r3, r1, lsr #1
   b723a:	d0c8      	beq.n	b71ce <rint+0x56>
   b723c:	ea20 0303 	bic.w	r3, r0, r3
   b7240:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   b7244:	fa40 fc0c 	asr.w	ip, r0, ip
   b7248:	ea43 000c 	orr.w	r0, r3, ip
   b724c:	e7bf      	b.n	b71ce <rint+0x56>
   b724e:	f3c3 0313 	ubfx	r3, r3, #0, #20
   b7252:	4318      	orrs	r0, r3
   b7254:	4a14      	ldr	r2, [pc, #80]	; (b72a8 <rint+0x130>)
   b7256:	4243      	negs	r3, r0
   b7258:	4303      	orrs	r3, r0
   b725a:	eb02 0ece 	add.w	lr, r2, lr, lsl #3
   b725e:	0b1b      	lsrs	r3, r3, #12
   b7260:	0c62      	lsrs	r2, r4, #17
   b7262:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
   b7266:	0452      	lsls	r2, r2, #17
   b7268:	ea43 0702 	orr.w	r7, r3, r2
   b726c:	463b      	mov	r3, r7
   b726e:	e9de 6700 	ldrd	r6, r7, [lr]
   b7272:	ee10 2a10 	vmov	r2, s0
   b7276:	4630      	mov	r0, r6
   b7278:	4639      	mov	r1, r7
   b727a:	f000 f8b1 	bl	b73e0 <__adddf3>
   b727e:	e9cd 0100 	strd	r0, r1, [sp]
   b7282:	4632      	mov	r2, r6
   b7284:	463b      	mov	r3, r7
   b7286:	e9dd 0100 	ldrd	r0, r1, [sp]
   b728a:	f000 f8a7 	bl	b73dc <__aeabi_dsub>
   b728e:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
   b7292:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b7296:	4602      	mov	r2, r0
   b7298:	ea41 0304 	orr.w	r3, r1, r4
   b729c:	ec43 2b10 	vmov	d0, r2, r3
   b72a0:	b003      	add	sp, #12
   b72a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b72a4:	000fffff 	.word	0x000fffff
   b72a8:	000b8708 	.word	0x000b8708
   b72ac:	00000000 	.word	0x00000000

000b72b0 <scalbn>:
   b72b0:	b538      	push	{r3, r4, r5, lr}
   b72b2:	ec53 2b10 	vmov	r2, r3, d0
   b72b6:	f3c3 510a 	ubfx	r1, r3, #20, #11
   b72ba:	4604      	mov	r4, r0
   b72bc:	469c      	mov	ip, r3
   b72be:	bb89      	cbnz	r1, b7324 <scalbn+0x74>
   b72c0:	ee10 1a10 	vmov	r1, s0
   b72c4:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
   b72c8:	ea5c 0101 	orrs.w	r1, ip, r1
   b72cc:	d029      	beq.n	b7322 <scalbn+0x72>
   b72ce:	4619      	mov	r1, r3
   b72d0:	2200      	movs	r2, #0
   b72d2:	4b3d      	ldr	r3, [pc, #244]	; (b73c8 <scalbn+0x118>)
   b72d4:	4d3d      	ldr	r5, [pc, #244]	; (b73cc <scalbn+0x11c>)
   b72d6:	ee10 0a10 	vmov	r0, s0
   b72da:	f000 fa37 	bl	b774c <__aeabi_dmul>
   b72de:	42ac      	cmp	r4, r5
   b72e0:	4602      	mov	r2, r0
   b72e2:	460b      	mov	r3, r1
   b72e4:	db16      	blt.n	b7314 <scalbn+0x64>
   b72e6:	468c      	mov	ip, r1
   b72e8:	f3c1 510a 	ubfx	r1, r1, #20, #11
   b72ec:	3936      	subs	r1, #54	; 0x36
   b72ee:	4421      	add	r1, r4
   b72f0:	f240 70fe 	movw	r0, #2046	; 0x7fe
   b72f4:	4281      	cmp	r1, r0
   b72f6:	dc21      	bgt.n	b733c <scalbn+0x8c>
   b72f8:	2900      	cmp	r1, #0
   b72fa:	dc47      	bgt.n	b738c <scalbn+0xdc>
   b72fc:	f111 0f35 	cmn.w	r1, #53	; 0x35
   b7300:	da34      	bge.n	b736c <scalbn+0xbc>
   b7302:	f24c 3150 	movw	r1, #50000	; 0xc350
   b7306:	428c      	cmp	r4, r1
   b7308:	dc18      	bgt.n	b733c <scalbn+0x8c>
   b730a:	2b00      	cmp	r3, #0
   b730c:	a126      	add	r1, pc, #152	; (adr r1, b73a8 <scalbn+0xf8>)
   b730e:	e9d1 0100 	ldrd	r0, r1, [r1]
   b7312:	db44      	blt.n	b739e <scalbn+0xee>
   b7314:	a324      	add	r3, pc, #144	; (adr r3, b73a8 <scalbn+0xf8>)
   b7316:	e9d3 2300 	ldrd	r2, r3, [r3]
   b731a:	f000 fa17 	bl	b774c <__aeabi_dmul>
   b731e:	ec41 0b10 	vmov	d0, r0, r1
   b7322:	bd38      	pop	{r3, r4, r5, pc}
   b7324:	f240 70ff 	movw	r0, #2047	; 0x7ff
   b7328:	4281      	cmp	r1, r0
   b732a:	d1e0      	bne.n	b72ee <scalbn+0x3e>
   b732c:	ee10 0a10 	vmov	r0, s0
   b7330:	4619      	mov	r1, r3
   b7332:	f000 f855 	bl	b73e0 <__adddf3>
   b7336:	ec41 0b10 	vmov	d0, r0, r1
   b733a:	bd38      	pop	{r3, r4, r5, pc}
   b733c:	2b00      	cmp	r3, #0
   b733e:	a11c      	add	r1, pc, #112	; (adr r1, b73b0 <scalbn+0x100>)
   b7340:	e9d1 0100 	ldrd	r0, r1, [r1]
   b7344:	db07      	blt.n	b7356 <scalbn+0xa6>
   b7346:	a31a      	add	r3, pc, #104	; (adr r3, b73b0 <scalbn+0x100>)
   b7348:	e9d3 2300 	ldrd	r2, r3, [r3]
   b734c:	f000 f9fe 	bl	b774c <__aeabi_dmul>
   b7350:	ec41 0b10 	vmov	d0, r0, r1
   b7354:	bd38      	pop	{r3, r4, r5, pc}
   b7356:	a118      	add	r1, pc, #96	; (adr r1, b73b8 <scalbn+0x108>)
   b7358:	e9d1 0100 	ldrd	r0, r1, [r1]
   b735c:	a314      	add	r3, pc, #80	; (adr r3, b73b0 <scalbn+0x100>)
   b735e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7362:	f000 f9f3 	bl	b774c <__aeabi_dmul>
   b7366:	ec41 0b10 	vmov	d0, r0, r1
   b736a:	e7f3      	b.n	b7354 <scalbn+0xa4>
   b736c:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   b7370:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   b7374:	3136      	adds	r1, #54	; 0x36
   b7376:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   b737a:	4610      	mov	r0, r2
   b737c:	4619      	mov	r1, r3
   b737e:	2200      	movs	r2, #0
   b7380:	4b13      	ldr	r3, [pc, #76]	; (b73d0 <scalbn+0x120>)
   b7382:	f000 f9e3 	bl	b774c <__aeabi_dmul>
   b7386:	ec41 0b10 	vmov	d0, r0, r1
   b738a:	bd38      	pop	{r3, r4, r5, pc}
   b738c:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   b7390:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   b7394:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   b7398:	ec43 2b10 	vmov	d0, r2, r3
   b739c:	bd38      	pop	{r3, r4, r5, pc}
   b739e:	a108      	add	r1, pc, #32	; (adr r1, b73c0 <scalbn+0x110>)
   b73a0:	e9d1 0100 	ldrd	r0, r1, [r1]
   b73a4:	e7b6      	b.n	b7314 <scalbn+0x64>
   b73a6:	bf00      	nop
   b73a8:	c2f8f359 	.word	0xc2f8f359
   b73ac:	01a56e1f 	.word	0x01a56e1f
   b73b0:	8800759c 	.word	0x8800759c
   b73b4:	7e37e43c 	.word	0x7e37e43c
   b73b8:	8800759c 	.word	0x8800759c
   b73bc:	fe37e43c 	.word	0xfe37e43c
   b73c0:	c2f8f359 	.word	0xc2f8f359
   b73c4:	81a56e1f 	.word	0x81a56e1f
   b73c8:	43500000 	.word	0x43500000
   b73cc:	ffff3cb0 	.word	0xffff3cb0
   b73d0:	3c900000 	.word	0x3c900000

000b73d4 <__aeabi_drsub>:
   b73d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b73d8:	e002      	b.n	b73e0 <__adddf3>
   b73da:	bf00      	nop

000b73dc <__aeabi_dsub>:
   b73dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b73e0 <__adddf3>:
   b73e0:	b530      	push	{r4, r5, lr}
   b73e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b73e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b73ea:	ea94 0f05 	teq	r4, r5
   b73ee:	bf08      	it	eq
   b73f0:	ea90 0f02 	teqeq	r0, r2
   b73f4:	bf1f      	itttt	ne
   b73f6:	ea54 0c00 	orrsne.w	ip, r4, r0
   b73fa:	ea55 0c02 	orrsne.w	ip, r5, r2
   b73fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b7402:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b7406:	f000 80e2 	beq.w	b75ce <__adddf3+0x1ee>
   b740a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b740e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b7412:	bfb8      	it	lt
   b7414:	426d      	neglt	r5, r5
   b7416:	dd0c      	ble.n	b7432 <__adddf3+0x52>
   b7418:	442c      	add	r4, r5
   b741a:	ea80 0202 	eor.w	r2, r0, r2
   b741e:	ea81 0303 	eor.w	r3, r1, r3
   b7422:	ea82 0000 	eor.w	r0, r2, r0
   b7426:	ea83 0101 	eor.w	r1, r3, r1
   b742a:	ea80 0202 	eor.w	r2, r0, r2
   b742e:	ea81 0303 	eor.w	r3, r1, r3
   b7432:	2d36      	cmp	r5, #54	; 0x36
   b7434:	bf88      	it	hi
   b7436:	bd30      	pophi	{r4, r5, pc}
   b7438:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b743c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b7440:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b7444:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b7448:	d002      	beq.n	b7450 <__adddf3+0x70>
   b744a:	4240      	negs	r0, r0
   b744c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7450:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b7454:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b7458:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b745c:	d002      	beq.n	b7464 <__adddf3+0x84>
   b745e:	4252      	negs	r2, r2
   b7460:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b7464:	ea94 0f05 	teq	r4, r5
   b7468:	f000 80a7 	beq.w	b75ba <__adddf3+0x1da>
   b746c:	f1a4 0401 	sub.w	r4, r4, #1
   b7470:	f1d5 0e20 	rsbs	lr, r5, #32
   b7474:	db0d      	blt.n	b7492 <__adddf3+0xb2>
   b7476:	fa02 fc0e 	lsl.w	ip, r2, lr
   b747a:	fa22 f205 	lsr.w	r2, r2, r5
   b747e:	1880      	adds	r0, r0, r2
   b7480:	f141 0100 	adc.w	r1, r1, #0
   b7484:	fa03 f20e 	lsl.w	r2, r3, lr
   b7488:	1880      	adds	r0, r0, r2
   b748a:	fa43 f305 	asr.w	r3, r3, r5
   b748e:	4159      	adcs	r1, r3
   b7490:	e00e      	b.n	b74b0 <__adddf3+0xd0>
   b7492:	f1a5 0520 	sub.w	r5, r5, #32
   b7496:	f10e 0e20 	add.w	lr, lr, #32
   b749a:	2a01      	cmp	r2, #1
   b749c:	fa03 fc0e 	lsl.w	ip, r3, lr
   b74a0:	bf28      	it	cs
   b74a2:	f04c 0c02 	orrcs.w	ip, ip, #2
   b74a6:	fa43 f305 	asr.w	r3, r3, r5
   b74aa:	18c0      	adds	r0, r0, r3
   b74ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b74b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b74b4:	d507      	bpl.n	b74c6 <__adddf3+0xe6>
   b74b6:	f04f 0e00 	mov.w	lr, #0
   b74ba:	f1dc 0c00 	rsbs	ip, ip, #0
   b74be:	eb7e 0000 	sbcs.w	r0, lr, r0
   b74c2:	eb6e 0101 	sbc.w	r1, lr, r1
   b74c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b74ca:	d31b      	bcc.n	b7504 <__adddf3+0x124>
   b74cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b74d0:	d30c      	bcc.n	b74ec <__adddf3+0x10c>
   b74d2:	0849      	lsrs	r1, r1, #1
   b74d4:	ea5f 0030 	movs.w	r0, r0, rrx
   b74d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b74dc:	f104 0401 	add.w	r4, r4, #1
   b74e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b74e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b74e8:	f080 809a 	bcs.w	b7620 <__adddf3+0x240>
   b74ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b74f0:	bf08      	it	eq
   b74f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b74f6:	f150 0000 	adcs.w	r0, r0, #0
   b74fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b74fe:	ea41 0105 	orr.w	r1, r1, r5
   b7502:	bd30      	pop	{r4, r5, pc}
   b7504:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b7508:	4140      	adcs	r0, r0
   b750a:	eb41 0101 	adc.w	r1, r1, r1
   b750e:	3c01      	subs	r4, #1
   b7510:	bf28      	it	cs
   b7512:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b7516:	d2e9      	bcs.n	b74ec <__adddf3+0x10c>
   b7518:	f091 0f00 	teq	r1, #0
   b751c:	bf04      	itt	eq
   b751e:	4601      	moveq	r1, r0
   b7520:	2000      	moveq	r0, #0
   b7522:	fab1 f381 	clz	r3, r1
   b7526:	bf08      	it	eq
   b7528:	3320      	addeq	r3, #32
   b752a:	f1a3 030b 	sub.w	r3, r3, #11
   b752e:	f1b3 0220 	subs.w	r2, r3, #32
   b7532:	da0c      	bge.n	b754e <__adddf3+0x16e>
   b7534:	320c      	adds	r2, #12
   b7536:	dd08      	ble.n	b754a <__adddf3+0x16a>
   b7538:	f102 0c14 	add.w	ip, r2, #20
   b753c:	f1c2 020c 	rsb	r2, r2, #12
   b7540:	fa01 f00c 	lsl.w	r0, r1, ip
   b7544:	fa21 f102 	lsr.w	r1, r1, r2
   b7548:	e00c      	b.n	b7564 <__adddf3+0x184>
   b754a:	f102 0214 	add.w	r2, r2, #20
   b754e:	bfd8      	it	le
   b7550:	f1c2 0c20 	rsble	ip, r2, #32
   b7554:	fa01 f102 	lsl.w	r1, r1, r2
   b7558:	fa20 fc0c 	lsr.w	ip, r0, ip
   b755c:	bfdc      	itt	le
   b755e:	ea41 010c 	orrle.w	r1, r1, ip
   b7562:	4090      	lslle	r0, r2
   b7564:	1ae4      	subs	r4, r4, r3
   b7566:	bfa2      	ittt	ge
   b7568:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b756c:	4329      	orrge	r1, r5
   b756e:	bd30      	popge	{r4, r5, pc}
   b7570:	ea6f 0404 	mvn.w	r4, r4
   b7574:	3c1f      	subs	r4, #31
   b7576:	da1c      	bge.n	b75b2 <__adddf3+0x1d2>
   b7578:	340c      	adds	r4, #12
   b757a:	dc0e      	bgt.n	b759a <__adddf3+0x1ba>
   b757c:	f104 0414 	add.w	r4, r4, #20
   b7580:	f1c4 0220 	rsb	r2, r4, #32
   b7584:	fa20 f004 	lsr.w	r0, r0, r4
   b7588:	fa01 f302 	lsl.w	r3, r1, r2
   b758c:	ea40 0003 	orr.w	r0, r0, r3
   b7590:	fa21 f304 	lsr.w	r3, r1, r4
   b7594:	ea45 0103 	orr.w	r1, r5, r3
   b7598:	bd30      	pop	{r4, r5, pc}
   b759a:	f1c4 040c 	rsb	r4, r4, #12
   b759e:	f1c4 0220 	rsb	r2, r4, #32
   b75a2:	fa20 f002 	lsr.w	r0, r0, r2
   b75a6:	fa01 f304 	lsl.w	r3, r1, r4
   b75aa:	ea40 0003 	orr.w	r0, r0, r3
   b75ae:	4629      	mov	r1, r5
   b75b0:	bd30      	pop	{r4, r5, pc}
   b75b2:	fa21 f004 	lsr.w	r0, r1, r4
   b75b6:	4629      	mov	r1, r5
   b75b8:	bd30      	pop	{r4, r5, pc}
   b75ba:	f094 0f00 	teq	r4, #0
   b75be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b75c2:	bf06      	itte	eq
   b75c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b75c8:	3401      	addeq	r4, #1
   b75ca:	3d01      	subne	r5, #1
   b75cc:	e74e      	b.n	b746c <__adddf3+0x8c>
   b75ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b75d2:	bf18      	it	ne
   b75d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b75d8:	d029      	beq.n	b762e <__adddf3+0x24e>
   b75da:	ea94 0f05 	teq	r4, r5
   b75de:	bf08      	it	eq
   b75e0:	ea90 0f02 	teqeq	r0, r2
   b75e4:	d005      	beq.n	b75f2 <__adddf3+0x212>
   b75e6:	ea54 0c00 	orrs.w	ip, r4, r0
   b75ea:	bf04      	itt	eq
   b75ec:	4619      	moveq	r1, r3
   b75ee:	4610      	moveq	r0, r2
   b75f0:	bd30      	pop	{r4, r5, pc}
   b75f2:	ea91 0f03 	teq	r1, r3
   b75f6:	bf1e      	ittt	ne
   b75f8:	2100      	movne	r1, #0
   b75fa:	2000      	movne	r0, #0
   b75fc:	bd30      	popne	{r4, r5, pc}
   b75fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b7602:	d105      	bne.n	b7610 <__adddf3+0x230>
   b7604:	0040      	lsls	r0, r0, #1
   b7606:	4149      	adcs	r1, r1
   b7608:	bf28      	it	cs
   b760a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b760e:	bd30      	pop	{r4, r5, pc}
   b7610:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b7614:	bf3c      	itt	cc
   b7616:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b761a:	bd30      	popcc	{r4, r5, pc}
   b761c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7620:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b7624:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b7628:	f04f 0000 	mov.w	r0, #0
   b762c:	bd30      	pop	{r4, r5, pc}
   b762e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b7632:	bf1a      	itte	ne
   b7634:	4619      	movne	r1, r3
   b7636:	4610      	movne	r0, r2
   b7638:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b763c:	bf1c      	itt	ne
   b763e:	460b      	movne	r3, r1
   b7640:	4602      	movne	r2, r0
   b7642:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b7646:	bf06      	itte	eq
   b7648:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b764c:	ea91 0f03 	teqeq	r1, r3
   b7650:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b7654:	bd30      	pop	{r4, r5, pc}
   b7656:	bf00      	nop

000b7658 <__aeabi_ui2d>:
   b7658:	f090 0f00 	teq	r0, #0
   b765c:	bf04      	itt	eq
   b765e:	2100      	moveq	r1, #0
   b7660:	4770      	bxeq	lr
   b7662:	b530      	push	{r4, r5, lr}
   b7664:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7668:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b766c:	f04f 0500 	mov.w	r5, #0
   b7670:	f04f 0100 	mov.w	r1, #0
   b7674:	e750      	b.n	b7518 <__adddf3+0x138>
   b7676:	bf00      	nop

000b7678 <__aeabi_i2d>:
   b7678:	f090 0f00 	teq	r0, #0
   b767c:	bf04      	itt	eq
   b767e:	2100      	moveq	r1, #0
   b7680:	4770      	bxeq	lr
   b7682:	b530      	push	{r4, r5, lr}
   b7684:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7688:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b768c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b7690:	bf48      	it	mi
   b7692:	4240      	negmi	r0, r0
   b7694:	f04f 0100 	mov.w	r1, #0
   b7698:	e73e      	b.n	b7518 <__adddf3+0x138>
   b769a:	bf00      	nop

000b769c <__aeabi_f2d>:
   b769c:	0042      	lsls	r2, r0, #1
   b769e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b76a2:	ea4f 0131 	mov.w	r1, r1, rrx
   b76a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b76aa:	bf1f      	itttt	ne
   b76ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b76b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b76b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b76b8:	4770      	bxne	lr
   b76ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b76be:	bf08      	it	eq
   b76c0:	4770      	bxeq	lr
   b76c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b76c6:	bf04      	itt	eq
   b76c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b76cc:	4770      	bxeq	lr
   b76ce:	b530      	push	{r4, r5, lr}
   b76d0:	f44f 7460 	mov.w	r4, #896	; 0x380
   b76d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b76d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b76dc:	e71c      	b.n	b7518 <__adddf3+0x138>
   b76de:	bf00      	nop

000b76e0 <__aeabi_ul2d>:
   b76e0:	ea50 0201 	orrs.w	r2, r0, r1
   b76e4:	bf08      	it	eq
   b76e6:	4770      	bxeq	lr
   b76e8:	b530      	push	{r4, r5, lr}
   b76ea:	f04f 0500 	mov.w	r5, #0
   b76ee:	e00a      	b.n	b7706 <__aeabi_l2d+0x16>

000b76f0 <__aeabi_l2d>:
   b76f0:	ea50 0201 	orrs.w	r2, r0, r1
   b76f4:	bf08      	it	eq
   b76f6:	4770      	bxeq	lr
   b76f8:	b530      	push	{r4, r5, lr}
   b76fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b76fe:	d502      	bpl.n	b7706 <__aeabi_l2d+0x16>
   b7700:	4240      	negs	r0, r0
   b7702:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7706:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b770a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b770e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b7712:	f43f aed8 	beq.w	b74c6 <__adddf3+0xe6>
   b7716:	f04f 0203 	mov.w	r2, #3
   b771a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b771e:	bf18      	it	ne
   b7720:	3203      	addne	r2, #3
   b7722:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b7726:	bf18      	it	ne
   b7728:	3203      	addne	r2, #3
   b772a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b772e:	f1c2 0320 	rsb	r3, r2, #32
   b7732:	fa00 fc03 	lsl.w	ip, r0, r3
   b7736:	fa20 f002 	lsr.w	r0, r0, r2
   b773a:	fa01 fe03 	lsl.w	lr, r1, r3
   b773e:	ea40 000e 	orr.w	r0, r0, lr
   b7742:	fa21 f102 	lsr.w	r1, r1, r2
   b7746:	4414      	add	r4, r2
   b7748:	e6bd      	b.n	b74c6 <__adddf3+0xe6>
   b774a:	bf00      	nop

000b774c <__aeabi_dmul>:
   b774c:	b570      	push	{r4, r5, r6, lr}
   b774e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b7752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b7756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b775a:	bf1d      	ittte	ne
   b775c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b7760:	ea94 0f0c 	teqne	r4, ip
   b7764:	ea95 0f0c 	teqne	r5, ip
   b7768:	f000 f8de 	bleq	b7928 <__aeabi_dmul+0x1dc>
   b776c:	442c      	add	r4, r5
   b776e:	ea81 0603 	eor.w	r6, r1, r3
   b7772:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b7776:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b777a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b777e:	bf18      	it	ne
   b7780:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b7784:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7788:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b778c:	d038      	beq.n	b7800 <__aeabi_dmul+0xb4>
   b778e:	fba0 ce02 	umull	ip, lr, r0, r2
   b7792:	f04f 0500 	mov.w	r5, #0
   b7796:	fbe1 e502 	umlal	lr, r5, r1, r2
   b779a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b779e:	fbe0 e503 	umlal	lr, r5, r0, r3
   b77a2:	f04f 0600 	mov.w	r6, #0
   b77a6:	fbe1 5603 	umlal	r5, r6, r1, r3
   b77aa:	f09c 0f00 	teq	ip, #0
   b77ae:	bf18      	it	ne
   b77b0:	f04e 0e01 	orrne.w	lr, lr, #1
   b77b4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b77b8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b77bc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b77c0:	d204      	bcs.n	b77cc <__aeabi_dmul+0x80>
   b77c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b77c6:	416d      	adcs	r5, r5
   b77c8:	eb46 0606 	adc.w	r6, r6, r6
   b77cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b77d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b77d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b77d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b77dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b77e0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b77e4:	bf88      	it	hi
   b77e6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b77ea:	d81e      	bhi.n	b782a <__aeabi_dmul+0xde>
   b77ec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b77f0:	bf08      	it	eq
   b77f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b77f6:	f150 0000 	adcs.w	r0, r0, #0
   b77fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b77fe:	bd70      	pop	{r4, r5, r6, pc}
   b7800:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b7804:	ea46 0101 	orr.w	r1, r6, r1
   b7808:	ea40 0002 	orr.w	r0, r0, r2
   b780c:	ea81 0103 	eor.w	r1, r1, r3
   b7810:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b7814:	bfc2      	ittt	gt
   b7816:	ebd4 050c 	rsbsgt	r5, r4, ip
   b781a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b781e:	bd70      	popgt	{r4, r5, r6, pc}
   b7820:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7824:	f04f 0e00 	mov.w	lr, #0
   b7828:	3c01      	subs	r4, #1
   b782a:	f300 80ab 	bgt.w	b7984 <__aeabi_dmul+0x238>
   b782e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b7832:	bfde      	ittt	le
   b7834:	2000      	movle	r0, #0
   b7836:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b783a:	bd70      	pople	{r4, r5, r6, pc}
   b783c:	f1c4 0400 	rsb	r4, r4, #0
   b7840:	3c20      	subs	r4, #32
   b7842:	da35      	bge.n	b78b0 <__aeabi_dmul+0x164>
   b7844:	340c      	adds	r4, #12
   b7846:	dc1b      	bgt.n	b7880 <__aeabi_dmul+0x134>
   b7848:	f104 0414 	add.w	r4, r4, #20
   b784c:	f1c4 0520 	rsb	r5, r4, #32
   b7850:	fa00 f305 	lsl.w	r3, r0, r5
   b7854:	fa20 f004 	lsr.w	r0, r0, r4
   b7858:	fa01 f205 	lsl.w	r2, r1, r5
   b785c:	ea40 0002 	orr.w	r0, r0, r2
   b7860:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b7864:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b7868:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b786c:	fa21 f604 	lsr.w	r6, r1, r4
   b7870:	eb42 0106 	adc.w	r1, r2, r6
   b7874:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7878:	bf08      	it	eq
   b787a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b787e:	bd70      	pop	{r4, r5, r6, pc}
   b7880:	f1c4 040c 	rsb	r4, r4, #12
   b7884:	f1c4 0520 	rsb	r5, r4, #32
   b7888:	fa00 f304 	lsl.w	r3, r0, r4
   b788c:	fa20 f005 	lsr.w	r0, r0, r5
   b7890:	fa01 f204 	lsl.w	r2, r1, r4
   b7894:	ea40 0002 	orr.w	r0, r0, r2
   b7898:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b789c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b78a0:	f141 0100 	adc.w	r1, r1, #0
   b78a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b78a8:	bf08      	it	eq
   b78aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b78ae:	bd70      	pop	{r4, r5, r6, pc}
   b78b0:	f1c4 0520 	rsb	r5, r4, #32
   b78b4:	fa00 f205 	lsl.w	r2, r0, r5
   b78b8:	ea4e 0e02 	orr.w	lr, lr, r2
   b78bc:	fa20 f304 	lsr.w	r3, r0, r4
   b78c0:	fa01 f205 	lsl.w	r2, r1, r5
   b78c4:	ea43 0302 	orr.w	r3, r3, r2
   b78c8:	fa21 f004 	lsr.w	r0, r1, r4
   b78cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b78d0:	fa21 f204 	lsr.w	r2, r1, r4
   b78d4:	ea20 0002 	bic.w	r0, r0, r2
   b78d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b78dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b78e0:	bf08      	it	eq
   b78e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b78e6:	bd70      	pop	{r4, r5, r6, pc}
   b78e8:	f094 0f00 	teq	r4, #0
   b78ec:	d10f      	bne.n	b790e <__aeabi_dmul+0x1c2>
   b78ee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b78f2:	0040      	lsls	r0, r0, #1
   b78f4:	eb41 0101 	adc.w	r1, r1, r1
   b78f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b78fc:	bf08      	it	eq
   b78fe:	3c01      	subeq	r4, #1
   b7900:	d0f7      	beq.n	b78f2 <__aeabi_dmul+0x1a6>
   b7902:	ea41 0106 	orr.w	r1, r1, r6
   b7906:	f095 0f00 	teq	r5, #0
   b790a:	bf18      	it	ne
   b790c:	4770      	bxne	lr
   b790e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b7912:	0052      	lsls	r2, r2, #1
   b7914:	eb43 0303 	adc.w	r3, r3, r3
   b7918:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b791c:	bf08      	it	eq
   b791e:	3d01      	subeq	r5, #1
   b7920:	d0f7      	beq.n	b7912 <__aeabi_dmul+0x1c6>
   b7922:	ea43 0306 	orr.w	r3, r3, r6
   b7926:	4770      	bx	lr
   b7928:	ea94 0f0c 	teq	r4, ip
   b792c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b7930:	bf18      	it	ne
   b7932:	ea95 0f0c 	teqne	r5, ip
   b7936:	d00c      	beq.n	b7952 <__aeabi_dmul+0x206>
   b7938:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b793c:	bf18      	it	ne
   b793e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b7942:	d1d1      	bne.n	b78e8 <__aeabi_dmul+0x19c>
   b7944:	ea81 0103 	eor.w	r1, r1, r3
   b7948:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b794c:	f04f 0000 	mov.w	r0, #0
   b7950:	bd70      	pop	{r4, r5, r6, pc}
   b7952:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b7956:	bf06      	itte	eq
   b7958:	4610      	moveq	r0, r2
   b795a:	4619      	moveq	r1, r3
   b795c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b7960:	d019      	beq.n	b7996 <__aeabi_dmul+0x24a>
   b7962:	ea94 0f0c 	teq	r4, ip
   b7966:	d102      	bne.n	b796e <__aeabi_dmul+0x222>
   b7968:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b796c:	d113      	bne.n	b7996 <__aeabi_dmul+0x24a>
   b796e:	ea95 0f0c 	teq	r5, ip
   b7972:	d105      	bne.n	b7980 <__aeabi_dmul+0x234>
   b7974:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b7978:	bf1c      	itt	ne
   b797a:	4610      	movne	r0, r2
   b797c:	4619      	movne	r1, r3
   b797e:	d10a      	bne.n	b7996 <__aeabi_dmul+0x24a>
   b7980:	ea81 0103 	eor.w	r1, r1, r3
   b7984:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7988:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b798c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b7990:	f04f 0000 	mov.w	r0, #0
   b7994:	bd70      	pop	{r4, r5, r6, pc}
   b7996:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b799a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b799e:	bd70      	pop	{r4, r5, r6, pc}

000b79a0 <__aeabi_ddiv>:
   b79a0:	b570      	push	{r4, r5, r6, lr}
   b79a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b79a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b79aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b79ae:	bf1d      	ittte	ne
   b79b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b79b4:	ea94 0f0c 	teqne	r4, ip
   b79b8:	ea95 0f0c 	teqne	r5, ip
   b79bc:	f000 f8a7 	bleq	b7b0e <__aeabi_ddiv+0x16e>
   b79c0:	eba4 0405 	sub.w	r4, r4, r5
   b79c4:	ea81 0e03 	eor.w	lr, r1, r3
   b79c8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b79cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b79d0:	f000 8088 	beq.w	b7ae4 <__aeabi_ddiv+0x144>
   b79d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b79d8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b79dc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b79e0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b79e4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b79e8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b79ec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b79f0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b79f4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b79f8:	429d      	cmp	r5, r3
   b79fa:	bf08      	it	eq
   b79fc:	4296      	cmpeq	r6, r2
   b79fe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b7a02:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b7a06:	d202      	bcs.n	b7a0e <__aeabi_ddiv+0x6e>
   b7a08:	085b      	lsrs	r3, r3, #1
   b7a0a:	ea4f 0232 	mov.w	r2, r2, rrx
   b7a0e:	1ab6      	subs	r6, r6, r2
   b7a10:	eb65 0503 	sbc.w	r5, r5, r3
   b7a14:	085b      	lsrs	r3, r3, #1
   b7a16:	ea4f 0232 	mov.w	r2, r2, rrx
   b7a1a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b7a1e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b7a22:	ebb6 0e02 	subs.w	lr, r6, r2
   b7a26:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7a2a:	bf22      	ittt	cs
   b7a2c:	1ab6      	subcs	r6, r6, r2
   b7a2e:	4675      	movcs	r5, lr
   b7a30:	ea40 000c 	orrcs.w	r0, r0, ip
   b7a34:	085b      	lsrs	r3, r3, #1
   b7a36:	ea4f 0232 	mov.w	r2, r2, rrx
   b7a3a:	ebb6 0e02 	subs.w	lr, r6, r2
   b7a3e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7a42:	bf22      	ittt	cs
   b7a44:	1ab6      	subcs	r6, r6, r2
   b7a46:	4675      	movcs	r5, lr
   b7a48:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b7a4c:	085b      	lsrs	r3, r3, #1
   b7a4e:	ea4f 0232 	mov.w	r2, r2, rrx
   b7a52:	ebb6 0e02 	subs.w	lr, r6, r2
   b7a56:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7a5a:	bf22      	ittt	cs
   b7a5c:	1ab6      	subcs	r6, r6, r2
   b7a5e:	4675      	movcs	r5, lr
   b7a60:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b7a64:	085b      	lsrs	r3, r3, #1
   b7a66:	ea4f 0232 	mov.w	r2, r2, rrx
   b7a6a:	ebb6 0e02 	subs.w	lr, r6, r2
   b7a6e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7a72:	bf22      	ittt	cs
   b7a74:	1ab6      	subcs	r6, r6, r2
   b7a76:	4675      	movcs	r5, lr
   b7a78:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b7a7c:	ea55 0e06 	orrs.w	lr, r5, r6
   b7a80:	d018      	beq.n	b7ab4 <__aeabi_ddiv+0x114>
   b7a82:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b7a86:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b7a8a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b7a8e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b7a92:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b7a96:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b7a9a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b7a9e:	d1c0      	bne.n	b7a22 <__aeabi_ddiv+0x82>
   b7aa0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b7aa4:	d10b      	bne.n	b7abe <__aeabi_ddiv+0x11e>
   b7aa6:	ea41 0100 	orr.w	r1, r1, r0
   b7aaa:	f04f 0000 	mov.w	r0, #0
   b7aae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b7ab2:	e7b6      	b.n	b7a22 <__aeabi_ddiv+0x82>
   b7ab4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b7ab8:	bf04      	itt	eq
   b7aba:	4301      	orreq	r1, r0
   b7abc:	2000      	moveq	r0, #0
   b7abe:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b7ac2:	bf88      	it	hi
   b7ac4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b7ac8:	f63f aeaf 	bhi.w	b782a <__aeabi_dmul+0xde>
   b7acc:	ebb5 0c03 	subs.w	ip, r5, r3
   b7ad0:	bf04      	itt	eq
   b7ad2:	ebb6 0c02 	subseq.w	ip, r6, r2
   b7ad6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b7ada:	f150 0000 	adcs.w	r0, r0, #0
   b7ade:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b7ae2:	bd70      	pop	{r4, r5, r6, pc}
   b7ae4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b7ae8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b7aec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b7af0:	bfc2      	ittt	gt
   b7af2:	ebd4 050c 	rsbsgt	r5, r4, ip
   b7af6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b7afa:	bd70      	popgt	{r4, r5, r6, pc}
   b7afc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7b00:	f04f 0e00 	mov.w	lr, #0
   b7b04:	3c01      	subs	r4, #1
   b7b06:	e690      	b.n	b782a <__aeabi_dmul+0xde>
   b7b08:	ea45 0e06 	orr.w	lr, r5, r6
   b7b0c:	e68d      	b.n	b782a <__aeabi_dmul+0xde>
   b7b0e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b7b12:	ea94 0f0c 	teq	r4, ip
   b7b16:	bf08      	it	eq
   b7b18:	ea95 0f0c 	teqeq	r5, ip
   b7b1c:	f43f af3b 	beq.w	b7996 <__aeabi_dmul+0x24a>
   b7b20:	ea94 0f0c 	teq	r4, ip
   b7b24:	d10a      	bne.n	b7b3c <__aeabi_ddiv+0x19c>
   b7b26:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b7b2a:	f47f af34 	bne.w	b7996 <__aeabi_dmul+0x24a>
   b7b2e:	ea95 0f0c 	teq	r5, ip
   b7b32:	f47f af25 	bne.w	b7980 <__aeabi_dmul+0x234>
   b7b36:	4610      	mov	r0, r2
   b7b38:	4619      	mov	r1, r3
   b7b3a:	e72c      	b.n	b7996 <__aeabi_dmul+0x24a>
   b7b3c:	ea95 0f0c 	teq	r5, ip
   b7b40:	d106      	bne.n	b7b50 <__aeabi_ddiv+0x1b0>
   b7b42:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b7b46:	f43f aefd 	beq.w	b7944 <__aeabi_dmul+0x1f8>
   b7b4a:	4610      	mov	r0, r2
   b7b4c:	4619      	mov	r1, r3
   b7b4e:	e722      	b.n	b7996 <__aeabi_dmul+0x24a>
   b7b50:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b7b54:	bf18      	it	ne
   b7b56:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b7b5a:	f47f aec5 	bne.w	b78e8 <__aeabi_dmul+0x19c>
   b7b5e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b7b62:	f47f af0d 	bne.w	b7980 <__aeabi_dmul+0x234>
   b7b66:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b7b6a:	f47f aeeb 	bne.w	b7944 <__aeabi_dmul+0x1f8>
   b7b6e:	e712      	b.n	b7996 <__aeabi_dmul+0x24a>

000b7b70 <__gedf2>:
   b7b70:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b7b74:	e006      	b.n	b7b84 <__cmpdf2+0x4>
   b7b76:	bf00      	nop

000b7b78 <__ledf2>:
   b7b78:	f04f 0c01 	mov.w	ip, #1
   b7b7c:	e002      	b.n	b7b84 <__cmpdf2+0x4>
   b7b7e:	bf00      	nop

000b7b80 <__cmpdf2>:
   b7b80:	f04f 0c01 	mov.w	ip, #1
   b7b84:	f84d cd04 	str.w	ip, [sp, #-4]!
   b7b88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b7b8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b7b90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b7b94:	bf18      	it	ne
   b7b96:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b7b9a:	d01b      	beq.n	b7bd4 <__cmpdf2+0x54>
   b7b9c:	b001      	add	sp, #4
   b7b9e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b7ba2:	bf0c      	ite	eq
   b7ba4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b7ba8:	ea91 0f03 	teqne	r1, r3
   b7bac:	bf02      	ittt	eq
   b7bae:	ea90 0f02 	teqeq	r0, r2
   b7bb2:	2000      	moveq	r0, #0
   b7bb4:	4770      	bxeq	lr
   b7bb6:	f110 0f00 	cmn.w	r0, #0
   b7bba:	ea91 0f03 	teq	r1, r3
   b7bbe:	bf58      	it	pl
   b7bc0:	4299      	cmppl	r1, r3
   b7bc2:	bf08      	it	eq
   b7bc4:	4290      	cmpeq	r0, r2
   b7bc6:	bf2c      	ite	cs
   b7bc8:	17d8      	asrcs	r0, r3, #31
   b7bca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b7bce:	f040 0001 	orr.w	r0, r0, #1
   b7bd2:	4770      	bx	lr
   b7bd4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b7bd8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b7bdc:	d102      	bne.n	b7be4 <__cmpdf2+0x64>
   b7bde:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b7be2:	d107      	bne.n	b7bf4 <__cmpdf2+0x74>
   b7be4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b7be8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b7bec:	d1d6      	bne.n	b7b9c <__cmpdf2+0x1c>
   b7bee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b7bf2:	d0d3      	beq.n	b7b9c <__cmpdf2+0x1c>
   b7bf4:	f85d 0b04 	ldr.w	r0, [sp], #4
   b7bf8:	4770      	bx	lr
   b7bfa:	bf00      	nop

000b7bfc <__aeabi_cdrcmple>:
   b7bfc:	4684      	mov	ip, r0
   b7bfe:	4610      	mov	r0, r2
   b7c00:	4662      	mov	r2, ip
   b7c02:	468c      	mov	ip, r1
   b7c04:	4619      	mov	r1, r3
   b7c06:	4663      	mov	r3, ip
   b7c08:	e000      	b.n	b7c0c <__aeabi_cdcmpeq>
   b7c0a:	bf00      	nop

000b7c0c <__aeabi_cdcmpeq>:
   b7c0c:	b501      	push	{r0, lr}
   b7c0e:	f7ff ffb7 	bl	b7b80 <__cmpdf2>
   b7c12:	2800      	cmp	r0, #0
   b7c14:	bf48      	it	mi
   b7c16:	f110 0f00 	cmnmi.w	r0, #0
   b7c1a:	bd01      	pop	{r0, pc}

000b7c1c <__aeabi_dcmpeq>:
   b7c1c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7c20:	f7ff fff4 	bl	b7c0c <__aeabi_cdcmpeq>
   b7c24:	bf0c      	ite	eq
   b7c26:	2001      	moveq	r0, #1
   b7c28:	2000      	movne	r0, #0
   b7c2a:	f85d fb08 	ldr.w	pc, [sp], #8
   b7c2e:	bf00      	nop

000b7c30 <__aeabi_dcmplt>:
   b7c30:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7c34:	f7ff ffea 	bl	b7c0c <__aeabi_cdcmpeq>
   b7c38:	bf34      	ite	cc
   b7c3a:	2001      	movcc	r0, #1
   b7c3c:	2000      	movcs	r0, #0
   b7c3e:	f85d fb08 	ldr.w	pc, [sp], #8
   b7c42:	bf00      	nop

000b7c44 <__aeabi_dcmple>:
   b7c44:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7c48:	f7ff ffe0 	bl	b7c0c <__aeabi_cdcmpeq>
   b7c4c:	bf94      	ite	ls
   b7c4e:	2001      	movls	r0, #1
   b7c50:	2000      	movhi	r0, #0
   b7c52:	f85d fb08 	ldr.w	pc, [sp], #8
   b7c56:	bf00      	nop

000b7c58 <__aeabi_dcmpge>:
   b7c58:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7c5c:	f7ff ffce 	bl	b7bfc <__aeabi_cdrcmple>
   b7c60:	bf94      	ite	ls
   b7c62:	2001      	movls	r0, #1
   b7c64:	2000      	movhi	r0, #0
   b7c66:	f85d fb08 	ldr.w	pc, [sp], #8
   b7c6a:	bf00      	nop

000b7c6c <__aeabi_dcmpgt>:
   b7c6c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7c70:	f7ff ffc4 	bl	b7bfc <__aeabi_cdrcmple>
   b7c74:	bf34      	ite	cc
   b7c76:	2001      	movcc	r0, #1
   b7c78:	2000      	movcs	r0, #0
   b7c7a:	f85d fb08 	ldr.w	pc, [sp], #8
   b7c7e:	bf00      	nop

000b7c80 <__aeabi_dcmpun>:
   b7c80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b7c84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b7c88:	d102      	bne.n	b7c90 <__aeabi_dcmpun+0x10>
   b7c8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b7c8e:	d10a      	bne.n	b7ca6 <__aeabi_dcmpun+0x26>
   b7c90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b7c94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b7c98:	d102      	bne.n	b7ca0 <__aeabi_dcmpun+0x20>
   b7c9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b7c9e:	d102      	bne.n	b7ca6 <__aeabi_dcmpun+0x26>
   b7ca0:	f04f 0000 	mov.w	r0, #0
   b7ca4:	4770      	bx	lr
   b7ca6:	f04f 0001 	mov.w	r0, #1
   b7caa:	4770      	bx	lr

000b7cac <__aeabi_d2f>:
   b7cac:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b7cb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b7cb4:	bf24      	itt	cs
   b7cb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b7cba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b7cbe:	d90d      	bls.n	b7cdc <__aeabi_d2f+0x30>
   b7cc0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b7cc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b7cc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b7ccc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b7cd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b7cd4:	bf08      	it	eq
   b7cd6:	f020 0001 	biceq.w	r0, r0, #1
   b7cda:	4770      	bx	lr
   b7cdc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b7ce0:	d121      	bne.n	b7d26 <__aeabi_d2f+0x7a>
   b7ce2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b7ce6:	bfbc      	itt	lt
   b7ce8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b7cec:	4770      	bxlt	lr
   b7cee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7cf2:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b7cf6:	f1c2 0218 	rsb	r2, r2, #24
   b7cfa:	f1c2 0c20 	rsb	ip, r2, #32
   b7cfe:	fa10 f30c 	lsls.w	r3, r0, ip
   b7d02:	fa20 f002 	lsr.w	r0, r0, r2
   b7d06:	bf18      	it	ne
   b7d08:	f040 0001 	orrne.w	r0, r0, #1
   b7d0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b7d10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b7d14:	fa03 fc0c 	lsl.w	ip, r3, ip
   b7d18:	ea40 000c 	orr.w	r0, r0, ip
   b7d1c:	fa23 f302 	lsr.w	r3, r3, r2
   b7d20:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b7d24:	e7cc      	b.n	b7cc0 <__aeabi_d2f+0x14>
   b7d26:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b7d2a:	d107      	bne.n	b7d3c <__aeabi_d2f+0x90>
   b7d2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b7d30:	bf1e      	ittt	ne
   b7d32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b7d36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b7d3a:	4770      	bxne	lr
   b7d3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b7d40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b7d44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b7d48:	4770      	bx	lr
   b7d4a:	bf00      	nop

000b7d4c <__aeabi_frsub>:
   b7d4c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   b7d50:	e002      	b.n	b7d58 <__addsf3>
   b7d52:	bf00      	nop

000b7d54 <__aeabi_fsub>:
   b7d54:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000b7d58 <__addsf3>:
   b7d58:	0042      	lsls	r2, r0, #1
   b7d5a:	bf1f      	itttt	ne
   b7d5c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   b7d60:	ea92 0f03 	teqne	r2, r3
   b7d64:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   b7d68:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   b7d6c:	d06a      	beq.n	b7e44 <__addsf3+0xec>
   b7d6e:	ea4f 6212 	mov.w	r2, r2, lsr #24
   b7d72:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   b7d76:	bfc1      	itttt	gt
   b7d78:	18d2      	addgt	r2, r2, r3
   b7d7a:	4041      	eorgt	r1, r0
   b7d7c:	4048      	eorgt	r0, r1
   b7d7e:	4041      	eorgt	r1, r0
   b7d80:	bfb8      	it	lt
   b7d82:	425b      	neglt	r3, r3
   b7d84:	2b19      	cmp	r3, #25
   b7d86:	bf88      	it	hi
   b7d88:	4770      	bxhi	lr
   b7d8a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   b7d8e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b7d92:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   b7d96:	bf18      	it	ne
   b7d98:	4240      	negne	r0, r0
   b7d9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b7d9e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   b7da2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   b7da6:	bf18      	it	ne
   b7da8:	4249      	negne	r1, r1
   b7daa:	ea92 0f03 	teq	r2, r3
   b7dae:	d03f      	beq.n	b7e30 <__addsf3+0xd8>
   b7db0:	f1a2 0201 	sub.w	r2, r2, #1
   b7db4:	fa41 fc03 	asr.w	ip, r1, r3
   b7db8:	eb10 000c 	adds.w	r0, r0, ip
   b7dbc:	f1c3 0320 	rsb	r3, r3, #32
   b7dc0:	fa01 f103 	lsl.w	r1, r1, r3
   b7dc4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   b7dc8:	d502      	bpl.n	b7dd0 <__addsf3+0x78>
   b7dca:	4249      	negs	r1, r1
   b7dcc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   b7dd0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b7dd4:	d313      	bcc.n	b7dfe <__addsf3+0xa6>
   b7dd6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   b7dda:	d306      	bcc.n	b7dea <__addsf3+0x92>
   b7ddc:	0840      	lsrs	r0, r0, #1
   b7dde:	ea4f 0131 	mov.w	r1, r1, rrx
   b7de2:	f102 0201 	add.w	r2, r2, #1
   b7de6:	2afe      	cmp	r2, #254	; 0xfe
   b7de8:	d251      	bcs.n	b7e8e <__addsf3+0x136>
   b7dea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   b7dee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   b7df2:	bf08      	it	eq
   b7df4:	f020 0001 	biceq.w	r0, r0, #1
   b7df8:	ea40 0003 	orr.w	r0, r0, r3
   b7dfc:	4770      	bx	lr
   b7dfe:	0049      	lsls	r1, r1, #1
   b7e00:	eb40 0000 	adc.w	r0, r0, r0
   b7e04:	3a01      	subs	r2, #1
   b7e06:	bf28      	it	cs
   b7e08:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
   b7e0c:	d2ed      	bcs.n	b7dea <__addsf3+0x92>
   b7e0e:	fab0 fc80 	clz	ip, r0
   b7e12:	f1ac 0c08 	sub.w	ip, ip, #8
   b7e16:	ebb2 020c 	subs.w	r2, r2, ip
   b7e1a:	fa00 f00c 	lsl.w	r0, r0, ip
   b7e1e:	bfaa      	itet	ge
   b7e20:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   b7e24:	4252      	neglt	r2, r2
   b7e26:	4318      	orrge	r0, r3
   b7e28:	bfbc      	itt	lt
   b7e2a:	40d0      	lsrlt	r0, r2
   b7e2c:	4318      	orrlt	r0, r3
   b7e2e:	4770      	bx	lr
   b7e30:	f092 0f00 	teq	r2, #0
   b7e34:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   b7e38:	bf06      	itte	eq
   b7e3a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   b7e3e:	3201      	addeq	r2, #1
   b7e40:	3b01      	subne	r3, #1
   b7e42:	e7b5      	b.n	b7db0 <__addsf3+0x58>
   b7e44:	ea4f 0341 	mov.w	r3, r1, lsl #1
   b7e48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   b7e4c:	bf18      	it	ne
   b7e4e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   b7e52:	d021      	beq.n	b7e98 <__addsf3+0x140>
   b7e54:	ea92 0f03 	teq	r2, r3
   b7e58:	d004      	beq.n	b7e64 <__addsf3+0x10c>
   b7e5a:	f092 0f00 	teq	r2, #0
   b7e5e:	bf08      	it	eq
   b7e60:	4608      	moveq	r0, r1
   b7e62:	4770      	bx	lr
   b7e64:	ea90 0f01 	teq	r0, r1
   b7e68:	bf1c      	itt	ne
   b7e6a:	2000      	movne	r0, #0
   b7e6c:	4770      	bxne	lr
   b7e6e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   b7e72:	d104      	bne.n	b7e7e <__addsf3+0x126>
   b7e74:	0040      	lsls	r0, r0, #1
   b7e76:	bf28      	it	cs
   b7e78:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   b7e7c:	4770      	bx	lr
   b7e7e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   b7e82:	bf3c      	itt	cc
   b7e84:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   b7e88:	4770      	bxcc	lr
   b7e8a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   b7e8e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   b7e92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b7e96:	4770      	bx	lr
   b7e98:	ea7f 6222 	mvns.w	r2, r2, asr #24
   b7e9c:	bf16      	itet	ne
   b7e9e:	4608      	movne	r0, r1
   b7ea0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   b7ea4:	4601      	movne	r1, r0
   b7ea6:	0242      	lsls	r2, r0, #9
   b7ea8:	bf06      	itte	eq
   b7eaa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   b7eae:	ea90 0f01 	teqeq	r0, r1
   b7eb2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   b7eb6:	4770      	bx	lr

000b7eb8 <__aeabi_ui2f>:
   b7eb8:	f04f 0300 	mov.w	r3, #0
   b7ebc:	e004      	b.n	b7ec8 <__aeabi_i2f+0x8>
   b7ebe:	bf00      	nop

000b7ec0 <__aeabi_i2f>:
   b7ec0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   b7ec4:	bf48      	it	mi
   b7ec6:	4240      	negmi	r0, r0
   b7ec8:	ea5f 0c00 	movs.w	ip, r0
   b7ecc:	bf08      	it	eq
   b7ece:	4770      	bxeq	lr
   b7ed0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   b7ed4:	4601      	mov	r1, r0
   b7ed6:	f04f 0000 	mov.w	r0, #0
   b7eda:	e01c      	b.n	b7f16 <__aeabi_l2f+0x2a>

000b7edc <__aeabi_ul2f>:
   b7edc:	ea50 0201 	orrs.w	r2, r0, r1
   b7ee0:	bf08      	it	eq
   b7ee2:	4770      	bxeq	lr
   b7ee4:	f04f 0300 	mov.w	r3, #0
   b7ee8:	e00a      	b.n	b7f00 <__aeabi_l2f+0x14>
   b7eea:	bf00      	nop

000b7eec <__aeabi_l2f>:
   b7eec:	ea50 0201 	orrs.w	r2, r0, r1
   b7ef0:	bf08      	it	eq
   b7ef2:	4770      	bxeq	lr
   b7ef4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   b7ef8:	d502      	bpl.n	b7f00 <__aeabi_l2f+0x14>
   b7efa:	4240      	negs	r0, r0
   b7efc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7f00:	ea5f 0c01 	movs.w	ip, r1
   b7f04:	bf02      	ittt	eq
   b7f06:	4684      	moveq	ip, r0
   b7f08:	4601      	moveq	r1, r0
   b7f0a:	2000      	moveq	r0, #0
   b7f0c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   b7f10:	bf08      	it	eq
   b7f12:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   b7f16:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   b7f1a:	fabc f28c 	clz	r2, ip
   b7f1e:	3a08      	subs	r2, #8
   b7f20:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   b7f24:	db10      	blt.n	b7f48 <__aeabi_l2f+0x5c>
   b7f26:	fa01 fc02 	lsl.w	ip, r1, r2
   b7f2a:	4463      	add	r3, ip
   b7f2c:	fa00 fc02 	lsl.w	ip, r0, r2
   b7f30:	f1c2 0220 	rsb	r2, r2, #32
   b7f34:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b7f38:	fa20 f202 	lsr.w	r2, r0, r2
   b7f3c:	eb43 0002 	adc.w	r0, r3, r2
   b7f40:	bf08      	it	eq
   b7f42:	f020 0001 	biceq.w	r0, r0, #1
   b7f46:	4770      	bx	lr
   b7f48:	f102 0220 	add.w	r2, r2, #32
   b7f4c:	fa01 fc02 	lsl.w	ip, r1, r2
   b7f50:	f1c2 0220 	rsb	r2, r2, #32
   b7f54:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   b7f58:	fa21 f202 	lsr.w	r2, r1, r2
   b7f5c:	eb43 0002 	adc.w	r0, r3, r2
   b7f60:	bf08      	it	eq
   b7f62:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   b7f66:	4770      	bx	lr

000b7f68 <__aeabi_ldivmod>:
   b7f68:	b97b      	cbnz	r3, b7f8a <__aeabi_ldivmod+0x22>
   b7f6a:	b972      	cbnz	r2, b7f8a <__aeabi_ldivmod+0x22>
   b7f6c:	2900      	cmp	r1, #0
   b7f6e:	bfbe      	ittt	lt
   b7f70:	2000      	movlt	r0, #0
   b7f72:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   b7f76:	e006      	blt.n	b7f86 <__aeabi_ldivmod+0x1e>
   b7f78:	bf08      	it	eq
   b7f7a:	2800      	cmpeq	r0, #0
   b7f7c:	bf1c      	itt	ne
   b7f7e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   b7f82:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   b7f86:	f000 b9a7 	b.w	b82d8 <__aeabi_idiv0>
   b7f8a:	f1ad 0c08 	sub.w	ip, sp, #8
   b7f8e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   b7f92:	2900      	cmp	r1, #0
   b7f94:	db09      	blt.n	b7faa <__aeabi_ldivmod+0x42>
   b7f96:	2b00      	cmp	r3, #0
   b7f98:	db1a      	blt.n	b7fd0 <__aeabi_ldivmod+0x68>
   b7f9a:	f000 f835 	bl	b8008 <__udivmoddi4>
   b7f9e:	f8dd e004 	ldr.w	lr, [sp, #4]
   b7fa2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b7fa6:	b004      	add	sp, #16
   b7fa8:	4770      	bx	lr
   b7faa:	4240      	negs	r0, r0
   b7fac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7fb0:	2b00      	cmp	r3, #0
   b7fb2:	db1b      	blt.n	b7fec <__aeabi_ldivmod+0x84>
   b7fb4:	f000 f828 	bl	b8008 <__udivmoddi4>
   b7fb8:	f8dd e004 	ldr.w	lr, [sp, #4]
   b7fbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b7fc0:	b004      	add	sp, #16
   b7fc2:	4240      	negs	r0, r0
   b7fc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7fc8:	4252      	negs	r2, r2
   b7fca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b7fce:	4770      	bx	lr
   b7fd0:	4252      	negs	r2, r2
   b7fd2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b7fd6:	f000 f817 	bl	b8008 <__udivmoddi4>
   b7fda:	f8dd e004 	ldr.w	lr, [sp, #4]
   b7fde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b7fe2:	b004      	add	sp, #16
   b7fe4:	4240      	negs	r0, r0
   b7fe6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7fea:	4770      	bx	lr
   b7fec:	4252      	negs	r2, r2
   b7fee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b7ff2:	f000 f809 	bl	b8008 <__udivmoddi4>
   b7ff6:	f8dd e004 	ldr.w	lr, [sp, #4]
   b7ffa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b7ffe:	b004      	add	sp, #16
   b8000:	4252      	negs	r2, r2
   b8002:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b8006:	4770      	bx	lr

000b8008 <__udivmoddi4>:
   b8008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b800c:	9d08      	ldr	r5, [sp, #32]
   b800e:	4604      	mov	r4, r0
   b8010:	468e      	mov	lr, r1
   b8012:	2b00      	cmp	r3, #0
   b8014:	d14d      	bne.n	b80b2 <__udivmoddi4+0xaa>
   b8016:	428a      	cmp	r2, r1
   b8018:	4694      	mov	ip, r2
   b801a:	d969      	bls.n	b80f0 <__udivmoddi4+0xe8>
   b801c:	fab2 f282 	clz	r2, r2
   b8020:	b152      	cbz	r2, b8038 <__udivmoddi4+0x30>
   b8022:	fa01 f302 	lsl.w	r3, r1, r2
   b8026:	f1c2 0120 	rsb	r1, r2, #32
   b802a:	fa20 f101 	lsr.w	r1, r0, r1
   b802e:	fa0c fc02 	lsl.w	ip, ip, r2
   b8032:	ea41 0e03 	orr.w	lr, r1, r3
   b8036:	4094      	lsls	r4, r2
   b8038:	ea4f 481c 	mov.w	r8, ip, lsr #16
   b803c:	0c21      	lsrs	r1, r4, #16
   b803e:	fbbe f6f8 	udiv	r6, lr, r8
   b8042:	fa1f f78c 	uxth.w	r7, ip
   b8046:	fb08 e316 	mls	r3, r8, r6, lr
   b804a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   b804e:	fb06 f107 	mul.w	r1, r6, r7
   b8052:	4299      	cmp	r1, r3
   b8054:	d90a      	bls.n	b806c <__udivmoddi4+0x64>
   b8056:	eb1c 0303 	adds.w	r3, ip, r3
   b805a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
   b805e:	f080 811f 	bcs.w	b82a0 <__udivmoddi4+0x298>
   b8062:	4299      	cmp	r1, r3
   b8064:	f240 811c 	bls.w	b82a0 <__udivmoddi4+0x298>
   b8068:	3e02      	subs	r6, #2
   b806a:	4463      	add	r3, ip
   b806c:	1a5b      	subs	r3, r3, r1
   b806e:	b2a4      	uxth	r4, r4
   b8070:	fbb3 f0f8 	udiv	r0, r3, r8
   b8074:	fb08 3310 	mls	r3, r8, r0, r3
   b8078:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   b807c:	fb00 f707 	mul.w	r7, r0, r7
   b8080:	42a7      	cmp	r7, r4
   b8082:	d90a      	bls.n	b809a <__udivmoddi4+0x92>
   b8084:	eb1c 0404 	adds.w	r4, ip, r4
   b8088:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b808c:	f080 810a 	bcs.w	b82a4 <__udivmoddi4+0x29c>
   b8090:	42a7      	cmp	r7, r4
   b8092:	f240 8107 	bls.w	b82a4 <__udivmoddi4+0x29c>
   b8096:	4464      	add	r4, ip
   b8098:	3802      	subs	r0, #2
   b809a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   b809e:	1be4      	subs	r4, r4, r7
   b80a0:	2600      	movs	r6, #0
   b80a2:	b11d      	cbz	r5, b80ac <__udivmoddi4+0xa4>
   b80a4:	40d4      	lsrs	r4, r2
   b80a6:	2300      	movs	r3, #0
   b80a8:	e9c5 4300 	strd	r4, r3, [r5]
   b80ac:	4631      	mov	r1, r6
   b80ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b80b2:	428b      	cmp	r3, r1
   b80b4:	d909      	bls.n	b80ca <__udivmoddi4+0xc2>
   b80b6:	2d00      	cmp	r5, #0
   b80b8:	f000 80ef 	beq.w	b829a <__udivmoddi4+0x292>
   b80bc:	2600      	movs	r6, #0
   b80be:	e9c5 0100 	strd	r0, r1, [r5]
   b80c2:	4630      	mov	r0, r6
   b80c4:	4631      	mov	r1, r6
   b80c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b80ca:	fab3 f683 	clz	r6, r3
   b80ce:	2e00      	cmp	r6, #0
   b80d0:	d14a      	bne.n	b8168 <__udivmoddi4+0x160>
   b80d2:	428b      	cmp	r3, r1
   b80d4:	d302      	bcc.n	b80dc <__udivmoddi4+0xd4>
   b80d6:	4282      	cmp	r2, r0
   b80d8:	f200 80f9 	bhi.w	b82ce <__udivmoddi4+0x2c6>
   b80dc:	1a84      	subs	r4, r0, r2
   b80de:	eb61 0303 	sbc.w	r3, r1, r3
   b80e2:	2001      	movs	r0, #1
   b80e4:	469e      	mov	lr, r3
   b80e6:	2d00      	cmp	r5, #0
   b80e8:	d0e0      	beq.n	b80ac <__udivmoddi4+0xa4>
   b80ea:	e9c5 4e00 	strd	r4, lr, [r5]
   b80ee:	e7dd      	b.n	b80ac <__udivmoddi4+0xa4>
   b80f0:	b902      	cbnz	r2, b80f4 <__udivmoddi4+0xec>
   b80f2:	deff      	udf	#255	; 0xff
   b80f4:	fab2 f282 	clz	r2, r2
   b80f8:	2a00      	cmp	r2, #0
   b80fa:	f040 8092 	bne.w	b8222 <__udivmoddi4+0x21a>
   b80fe:	eba1 010c 	sub.w	r1, r1, ip
   b8102:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b8106:	fa1f fe8c 	uxth.w	lr, ip
   b810a:	2601      	movs	r6, #1
   b810c:	0c20      	lsrs	r0, r4, #16
   b810e:	fbb1 f3f7 	udiv	r3, r1, r7
   b8112:	fb07 1113 	mls	r1, r7, r3, r1
   b8116:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b811a:	fb0e f003 	mul.w	r0, lr, r3
   b811e:	4288      	cmp	r0, r1
   b8120:	d908      	bls.n	b8134 <__udivmoddi4+0x12c>
   b8122:	eb1c 0101 	adds.w	r1, ip, r1
   b8126:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   b812a:	d202      	bcs.n	b8132 <__udivmoddi4+0x12a>
   b812c:	4288      	cmp	r0, r1
   b812e:	f200 80cb 	bhi.w	b82c8 <__udivmoddi4+0x2c0>
   b8132:	4643      	mov	r3, r8
   b8134:	1a09      	subs	r1, r1, r0
   b8136:	b2a4      	uxth	r4, r4
   b8138:	fbb1 f0f7 	udiv	r0, r1, r7
   b813c:	fb07 1110 	mls	r1, r7, r0, r1
   b8140:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
   b8144:	fb0e fe00 	mul.w	lr, lr, r0
   b8148:	45a6      	cmp	lr, r4
   b814a:	d908      	bls.n	b815e <__udivmoddi4+0x156>
   b814c:	eb1c 0404 	adds.w	r4, ip, r4
   b8150:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
   b8154:	d202      	bcs.n	b815c <__udivmoddi4+0x154>
   b8156:	45a6      	cmp	lr, r4
   b8158:	f200 80bb 	bhi.w	b82d2 <__udivmoddi4+0x2ca>
   b815c:	4608      	mov	r0, r1
   b815e:	eba4 040e 	sub.w	r4, r4, lr
   b8162:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   b8166:	e79c      	b.n	b80a2 <__udivmoddi4+0x9a>
   b8168:	f1c6 0720 	rsb	r7, r6, #32
   b816c:	40b3      	lsls	r3, r6
   b816e:	fa22 fc07 	lsr.w	ip, r2, r7
   b8172:	ea4c 0c03 	orr.w	ip, ip, r3
   b8176:	fa20 f407 	lsr.w	r4, r0, r7
   b817a:	fa01 f306 	lsl.w	r3, r1, r6
   b817e:	431c      	orrs	r4, r3
   b8180:	40f9      	lsrs	r1, r7
   b8182:	ea4f 491c 	mov.w	r9, ip, lsr #16
   b8186:	fa00 f306 	lsl.w	r3, r0, r6
   b818a:	fbb1 f8f9 	udiv	r8, r1, r9
   b818e:	0c20      	lsrs	r0, r4, #16
   b8190:	fa1f fe8c 	uxth.w	lr, ip
   b8194:	fb09 1118 	mls	r1, r9, r8, r1
   b8198:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b819c:	fb08 f00e 	mul.w	r0, r8, lr
   b81a0:	4288      	cmp	r0, r1
   b81a2:	fa02 f206 	lsl.w	r2, r2, r6
   b81a6:	d90b      	bls.n	b81c0 <__udivmoddi4+0x1b8>
   b81a8:	eb1c 0101 	adds.w	r1, ip, r1
   b81ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
   b81b0:	f080 8088 	bcs.w	b82c4 <__udivmoddi4+0x2bc>
   b81b4:	4288      	cmp	r0, r1
   b81b6:	f240 8085 	bls.w	b82c4 <__udivmoddi4+0x2bc>
   b81ba:	f1a8 0802 	sub.w	r8, r8, #2
   b81be:	4461      	add	r1, ip
   b81c0:	1a09      	subs	r1, r1, r0
   b81c2:	b2a4      	uxth	r4, r4
   b81c4:	fbb1 f0f9 	udiv	r0, r1, r9
   b81c8:	fb09 1110 	mls	r1, r9, r0, r1
   b81cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   b81d0:	fb00 fe0e 	mul.w	lr, r0, lr
   b81d4:	458e      	cmp	lr, r1
   b81d6:	d908      	bls.n	b81ea <__udivmoddi4+0x1e2>
   b81d8:	eb1c 0101 	adds.w	r1, ip, r1
   b81dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
   b81e0:	d26c      	bcs.n	b82bc <__udivmoddi4+0x2b4>
   b81e2:	458e      	cmp	lr, r1
   b81e4:	d96a      	bls.n	b82bc <__udivmoddi4+0x2b4>
   b81e6:	3802      	subs	r0, #2
   b81e8:	4461      	add	r1, ip
   b81ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   b81ee:	fba0 9402 	umull	r9, r4, r0, r2
   b81f2:	eba1 010e 	sub.w	r1, r1, lr
   b81f6:	42a1      	cmp	r1, r4
   b81f8:	46c8      	mov	r8, r9
   b81fa:	46a6      	mov	lr, r4
   b81fc:	d356      	bcc.n	b82ac <__udivmoddi4+0x2a4>
   b81fe:	d053      	beq.n	b82a8 <__udivmoddi4+0x2a0>
   b8200:	b15d      	cbz	r5, b821a <__udivmoddi4+0x212>
   b8202:	ebb3 0208 	subs.w	r2, r3, r8
   b8206:	eb61 010e 	sbc.w	r1, r1, lr
   b820a:	fa01 f707 	lsl.w	r7, r1, r7
   b820e:	fa22 f306 	lsr.w	r3, r2, r6
   b8212:	40f1      	lsrs	r1, r6
   b8214:	431f      	orrs	r7, r3
   b8216:	e9c5 7100 	strd	r7, r1, [r5]
   b821a:	2600      	movs	r6, #0
   b821c:	4631      	mov	r1, r6
   b821e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b8222:	f1c2 0320 	rsb	r3, r2, #32
   b8226:	40d8      	lsrs	r0, r3
   b8228:	fa0c fc02 	lsl.w	ip, ip, r2
   b822c:	fa21 f303 	lsr.w	r3, r1, r3
   b8230:	4091      	lsls	r1, r2
   b8232:	4301      	orrs	r1, r0
   b8234:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b8238:	fa1f fe8c 	uxth.w	lr, ip
   b823c:	fbb3 f0f7 	udiv	r0, r3, r7
   b8240:	fb07 3610 	mls	r6, r7, r0, r3
   b8244:	0c0b      	lsrs	r3, r1, #16
   b8246:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   b824a:	fb00 f60e 	mul.w	r6, r0, lr
   b824e:	429e      	cmp	r6, r3
   b8250:	fa04 f402 	lsl.w	r4, r4, r2
   b8254:	d908      	bls.n	b8268 <__udivmoddi4+0x260>
   b8256:	eb1c 0303 	adds.w	r3, ip, r3
   b825a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
   b825e:	d22f      	bcs.n	b82c0 <__udivmoddi4+0x2b8>
   b8260:	429e      	cmp	r6, r3
   b8262:	d92d      	bls.n	b82c0 <__udivmoddi4+0x2b8>
   b8264:	3802      	subs	r0, #2
   b8266:	4463      	add	r3, ip
   b8268:	1b9b      	subs	r3, r3, r6
   b826a:	b289      	uxth	r1, r1
   b826c:	fbb3 f6f7 	udiv	r6, r3, r7
   b8270:	fb07 3316 	mls	r3, r7, r6, r3
   b8274:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   b8278:	fb06 f30e 	mul.w	r3, r6, lr
   b827c:	428b      	cmp	r3, r1
   b827e:	d908      	bls.n	b8292 <__udivmoddi4+0x28a>
   b8280:	eb1c 0101 	adds.w	r1, ip, r1
   b8284:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
   b8288:	d216      	bcs.n	b82b8 <__udivmoddi4+0x2b0>
   b828a:	428b      	cmp	r3, r1
   b828c:	d914      	bls.n	b82b8 <__udivmoddi4+0x2b0>
   b828e:	3e02      	subs	r6, #2
   b8290:	4461      	add	r1, ip
   b8292:	1ac9      	subs	r1, r1, r3
   b8294:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   b8298:	e738      	b.n	b810c <__udivmoddi4+0x104>
   b829a:	462e      	mov	r6, r5
   b829c:	4628      	mov	r0, r5
   b829e:	e705      	b.n	b80ac <__udivmoddi4+0xa4>
   b82a0:	4606      	mov	r6, r0
   b82a2:	e6e3      	b.n	b806c <__udivmoddi4+0x64>
   b82a4:	4618      	mov	r0, r3
   b82a6:	e6f8      	b.n	b809a <__udivmoddi4+0x92>
   b82a8:	454b      	cmp	r3, r9
   b82aa:	d2a9      	bcs.n	b8200 <__udivmoddi4+0x1f8>
   b82ac:	ebb9 0802 	subs.w	r8, r9, r2
   b82b0:	eb64 0e0c 	sbc.w	lr, r4, ip
   b82b4:	3801      	subs	r0, #1
   b82b6:	e7a3      	b.n	b8200 <__udivmoddi4+0x1f8>
   b82b8:	4646      	mov	r6, r8
   b82ba:	e7ea      	b.n	b8292 <__udivmoddi4+0x28a>
   b82bc:	4620      	mov	r0, r4
   b82be:	e794      	b.n	b81ea <__udivmoddi4+0x1e2>
   b82c0:	4640      	mov	r0, r8
   b82c2:	e7d1      	b.n	b8268 <__udivmoddi4+0x260>
   b82c4:	46d0      	mov	r8, sl
   b82c6:	e77b      	b.n	b81c0 <__udivmoddi4+0x1b8>
   b82c8:	3b02      	subs	r3, #2
   b82ca:	4461      	add	r1, ip
   b82cc:	e732      	b.n	b8134 <__udivmoddi4+0x12c>
   b82ce:	4630      	mov	r0, r6
   b82d0:	e709      	b.n	b80e6 <__udivmoddi4+0xde>
   b82d2:	4464      	add	r4, ip
   b82d4:	3802      	subs	r0, #2
   b82d6:	e742      	b.n	b815e <__udivmoddi4+0x156>

000b82d8 <__aeabi_idiv0>:
   b82d8:	4770      	bx	lr
   b82da:	bf00      	nop

000b82dc <atexit>:
   b82dc:	2300      	movs	r3, #0
   b82de:	4601      	mov	r1, r0
   b82e0:	461a      	mov	r2, r3
   b82e2:	4618      	mov	r0, r3
   b82e4:	f000 b86a 	b.w	b83bc <__register_exitproc>

000b82e8 <memcpy>:
   b82e8:	440a      	add	r2, r1
   b82ea:	4291      	cmp	r1, r2
   b82ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b82f0:	d100      	bne.n	b82f4 <memcpy+0xc>
   b82f2:	4770      	bx	lr
   b82f4:	b510      	push	{r4, lr}
   b82f6:	f811 4b01 	ldrb.w	r4, [r1], #1
   b82fa:	f803 4f01 	strb.w	r4, [r3, #1]!
   b82fe:	4291      	cmp	r1, r2
   b8300:	d1f9      	bne.n	b82f6 <memcpy+0xe>
   b8302:	bd10      	pop	{r4, pc}

000b8304 <memset>:
   b8304:	4402      	add	r2, r0
   b8306:	4603      	mov	r3, r0
   b8308:	4293      	cmp	r3, r2
   b830a:	d100      	bne.n	b830e <memset+0xa>
   b830c:	4770      	bx	lr
   b830e:	f803 1b01 	strb.w	r1, [r3], #1
   b8312:	e7f9      	b.n	b8308 <memset+0x4>

000b8314 <srand>:
   b8314:	b538      	push	{r3, r4, r5, lr}
   b8316:	4b10      	ldr	r3, [pc, #64]	; (b8358 <srand+0x44>)
   b8318:	681d      	ldr	r5, [r3, #0]
   b831a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b831c:	4604      	mov	r4, r0
   b831e:	b9b3      	cbnz	r3, b834e <srand+0x3a>
   b8320:	2018      	movs	r0, #24
   b8322:	f7fc feb9 	bl	b5098 <malloc>
   b8326:	4602      	mov	r2, r0
   b8328:	63a8      	str	r0, [r5, #56]	; 0x38
   b832a:	b920      	cbnz	r0, b8336 <srand+0x22>
   b832c:	4b0b      	ldr	r3, [pc, #44]	; (b835c <srand+0x48>)
   b832e:	480c      	ldr	r0, [pc, #48]	; (b8360 <srand+0x4c>)
   b8330:	2142      	movs	r1, #66	; 0x42
   b8332:	f7fc fee1 	bl	b50f8 <__assert_func>
   b8336:	490b      	ldr	r1, [pc, #44]	; (b8364 <srand+0x50>)
   b8338:	4b0b      	ldr	r3, [pc, #44]	; (b8368 <srand+0x54>)
   b833a:	e9c0 1300 	strd	r1, r3, [r0]
   b833e:	4b0b      	ldr	r3, [pc, #44]	; (b836c <srand+0x58>)
   b8340:	6083      	str	r3, [r0, #8]
   b8342:	230b      	movs	r3, #11
   b8344:	8183      	strh	r3, [r0, #12]
   b8346:	2100      	movs	r1, #0
   b8348:	2001      	movs	r0, #1
   b834a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b834e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8350:	2200      	movs	r2, #0
   b8352:	611c      	str	r4, [r3, #16]
   b8354:	615a      	str	r2, [r3, #20]
   b8356:	bd38      	pop	{r3, r4, r5, pc}
   b8358:	2003e5f8 	.word	0x2003e5f8
   b835c:	000b8718 	.word	0x000b8718
   b8360:	000b872f 	.word	0x000b872f
   b8364:	abcd330e 	.word	0xabcd330e
   b8368:	e66d1234 	.word	0xe66d1234
   b836c:	0005deec 	.word	0x0005deec

000b8370 <strdup>:
   b8370:	4b02      	ldr	r3, [pc, #8]	; (b837c <strdup+0xc>)
   b8372:	4601      	mov	r1, r0
   b8374:	6818      	ldr	r0, [r3, #0]
   b8376:	f000 b803 	b.w	b8380 <_strdup_r>
   b837a:	bf00      	nop
   b837c:	2003e5f8 	.word	0x2003e5f8

000b8380 <_strdup_r>:
   b8380:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8382:	4604      	mov	r4, r0
   b8384:	4608      	mov	r0, r1
   b8386:	460d      	mov	r5, r1
   b8388:	f000 f80f 	bl	b83aa <strlen>
   b838c:	1c42      	adds	r2, r0, #1
   b838e:	4611      	mov	r1, r2
   b8390:	4620      	mov	r0, r4
   b8392:	9201      	str	r2, [sp, #4]
   b8394:	f7fc fea0 	bl	b50d8 <_malloc_r>
   b8398:	4604      	mov	r4, r0
   b839a:	b118      	cbz	r0, b83a4 <_strdup_r+0x24>
   b839c:	9a01      	ldr	r2, [sp, #4]
   b839e:	4629      	mov	r1, r5
   b83a0:	f7ff ffa2 	bl	b82e8 <memcpy>
   b83a4:	4620      	mov	r0, r4
   b83a6:	b003      	add	sp, #12
   b83a8:	bd30      	pop	{r4, r5, pc}

000b83aa <strlen>:
   b83aa:	4603      	mov	r3, r0
   b83ac:	f813 2b01 	ldrb.w	r2, [r3], #1
   b83b0:	2a00      	cmp	r2, #0
   b83b2:	d1fb      	bne.n	b83ac <strlen+0x2>
   b83b4:	1a18      	subs	r0, r3, r0
   b83b6:	3801      	subs	r0, #1
   b83b8:	4770      	bx	lr
	...

000b83bc <__register_exitproc>:
   b83bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b83c0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b847c <__register_exitproc+0xc0>
   b83c4:	4606      	mov	r6, r0
   b83c6:	f8d8 0000 	ldr.w	r0, [r8]
   b83ca:	461f      	mov	r7, r3
   b83cc:	460d      	mov	r5, r1
   b83ce:	4691      	mov	r9, r2
   b83d0:	f000 f856 	bl	b8480 <__retarget_lock_acquire_recursive>
   b83d4:	4b25      	ldr	r3, [pc, #148]	; (b846c <__register_exitproc+0xb0>)
   b83d6:	681c      	ldr	r4, [r3, #0]
   b83d8:	b934      	cbnz	r4, b83e8 <__register_exitproc+0x2c>
   b83da:	4c25      	ldr	r4, [pc, #148]	; (b8470 <__register_exitproc+0xb4>)
   b83dc:	601c      	str	r4, [r3, #0]
   b83de:	4b25      	ldr	r3, [pc, #148]	; (b8474 <__register_exitproc+0xb8>)
   b83e0:	b113      	cbz	r3, b83e8 <__register_exitproc+0x2c>
   b83e2:	681b      	ldr	r3, [r3, #0]
   b83e4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b83e8:	6863      	ldr	r3, [r4, #4]
   b83ea:	2b1f      	cmp	r3, #31
   b83ec:	dd07      	ble.n	b83fe <__register_exitproc+0x42>
   b83ee:	f8d8 0000 	ldr.w	r0, [r8]
   b83f2:	f000 f847 	bl	b8484 <__retarget_lock_release_recursive>
   b83f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b83fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b83fe:	b34e      	cbz	r6, b8454 <__register_exitproc+0x98>
   b8400:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b8404:	b988      	cbnz	r0, b842a <__register_exitproc+0x6e>
   b8406:	4b1c      	ldr	r3, [pc, #112]	; (b8478 <__register_exitproc+0xbc>)
   b8408:	b923      	cbnz	r3, b8414 <__register_exitproc+0x58>
   b840a:	f8d8 0000 	ldr.w	r0, [r8]
   b840e:	f000 f838 	bl	b8482 <__retarget_lock_release>
   b8412:	e7f0      	b.n	b83f6 <__register_exitproc+0x3a>
   b8414:	f44f 7084 	mov.w	r0, #264	; 0x108
   b8418:	f7fc fe3e 	bl	b5098 <malloc>
   b841c:	2800      	cmp	r0, #0
   b841e:	d0f4      	beq.n	b840a <__register_exitproc+0x4e>
   b8420:	2300      	movs	r3, #0
   b8422:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b8426:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b842a:	6863      	ldr	r3, [r4, #4]
   b842c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b8430:	2201      	movs	r2, #1
   b8432:	409a      	lsls	r2, r3
   b8434:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b8438:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b843c:	4313      	orrs	r3, r2
   b843e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b8442:	2e02      	cmp	r6, #2
   b8444:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b8448:	bf02      	ittt	eq
   b844a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b844e:	4313      	orreq	r3, r2
   b8450:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b8454:	6863      	ldr	r3, [r4, #4]
   b8456:	f8d8 0000 	ldr.w	r0, [r8]
   b845a:	1c5a      	adds	r2, r3, #1
   b845c:	3302      	adds	r3, #2
   b845e:	6062      	str	r2, [r4, #4]
   b8460:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b8464:	f000 f80e 	bl	b8484 <__retarget_lock_release_recursive>
   b8468:	2000      	movs	r0, #0
   b846a:	e7c6      	b.n	b83fa <__register_exitproc+0x3e>
   b846c:	2003e7e8 	.word	0x2003e7e8
   b8470:	2003e75c 	.word	0x2003e75c
   b8474:	00000000 	.word	0x00000000
   b8478:	000b5099 	.word	0x000b5099
   b847c:	2003e65c 	.word	0x2003e65c

000b8480 <__retarget_lock_acquire_recursive>:
   b8480:	4770      	bx	lr

000b8482 <__retarget_lock_release>:
   b8482:	4770      	bx	lr

000b8484 <__retarget_lock_release_recursive>:
   b8484:	4770      	bx	lr

000b8486 <link_code_end>:
	...

000b8488 <dynalib_user>:
   b8488:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b8498:	0000 0000 6574 706d 6800 6d75 6469 7469     ....temp.humidit
   b84a8:	0079 7270 7365 7573 6572 6100 746c 7469     y.pressure.altit
   b84b8:	6475 0065 6557 7461 6568 2072 7453 7461     ude.Weather Stat
   b84c8:	6f69 206e 6e4f 696c 656e 3a20 0029 6574     ion Online :).te
   b84d8:	7473 6e69 0067 6554 706d 7265 7461 7275     sting.Temperatur
   b84e8:	3a65 0020 7548 696d 6964 7974 203a 5000     e: .Humidity: .P
   b84f8:	6572 7373 7275 3a65 0020 6c41 6974 7574     ressure: .Altitu
   b8508:	6564 203a 6400 6665 7561 746c 0020 534d     de: .default .MS
   b8518:	0042 534c 0042 533c 4950 6553 7474 6e69     B.LSB.<SPISettin
   b8528:	7367 6420 6665 7561 746c 003e 533c 4950     gs default>.<SPI
   b8538:	6553 7474 6e69 7367 2520 2573 2075 7325     Settings %s%u %s
   b8548:	4d20 444f 2545 3e75 0000 0000                MODE%u>....

000b8554 <_ZTVN8particle11SPISettingsE>:
	...
   b855c:	42f9 000b 42cd 000b 42cf 000b               .B...B...B..

000b8568 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b8570:	518d 000b 5193 000b 51d1 000b 51a1 000b     .Q...Q...Q...Q..
   b8580:	518f 000b                                   .Q..

000b8584 <_ZTVN5spark13EthernetClassE>:
	...
   b858c:	571b 000b 5711 000b 5707 000b 56fd 000b     .W...W...W...V..
   b859c:	56f1 000b 56e5 000b 5989 000b 5991 000b     .V...V...Y...Y..
   b85ac:	56d9 000b 56d1 000b 56c7 000b 56bd 000b     .V...V...V...V..
   b85bc:	59c1 000b                                   .Y..

000b85c0 <_ZTV7TwoWire>:
	...
   b85c8:	5739 000b 5783 000b 575b 000b 573b 000b     9W...W..[W..;W..
   b85d8:	5763 000b 576b 000b 5773 000b 577b 000b     cW..kW..sW..{W..

000b85e8 <_ZTV9IPAddress>:
	...
   b85f0:	5857 000b 5847 000b 5849 000b 7061 0070     WX..GX..IX..app.

000b8600 <_ZTVN5spark12NetworkClassE>:
	...
   b8608:	5949 000b 5953 000b 595d 000b 5967 000b     IY..SY..]Y..gY..
   b8618:	5971 000b 597d 000b 5989 000b 5991 000b     qY..}Y...Y...Y..
   b8628:	5999 000b 59a5 000b 59ad 000b 59b7 000b     .Y...Y...Y...Y..
   b8638:	59c1 000b                                   .Y..

000b863c <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b863c:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   b864c:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   b865c:	6d69 0065                                   ime.

000b8660 <_ZTV11USARTSerial>:
	...
   b8668:	5d69 000b 5dd5 000b 5dad 000b 5aad 000b     i]...]...]...Z..
   b8678:	5d7d 000b 5d99 000b 5d8b 000b 5da7 000b     }]...]...]...]..
   b8688:	5d6b 000b 5d6f 000b                         k]..o]..

000b8690 <_ZTV9USBSerial>:
	...
   b8698:	5e13 000b 5e7b 000b 5e51 000b 5aad 000b     .^..{^..Q^...Z..
   b86a8:	5e43 000b 5e15 000b 5e25 000b 5e75 000b     C^...^..%^..u^..
   b86b8:	5e35 000b 5e0d 000b                         5^...^..

000b86c0 <_ZTVN5spark9WiFiClassE>:
	...
   b86c8:	5f73 000b 5f69 000b 5f5f 000b 5f15 000b     s_..i_..__..._..
   b86d8:	5f53 000b 5f47 000b 5989 000b 5991 000b     S_..G_...Y...Y..
   b86e8:	5f3b 000b 5f33 000b 5f29 000b 5f1f 000b     ;_..3_..)_..._..
   b86f8:	59c1 000b                                   .Y..

000b86fc <_ZSt7nothrow>:
	...

000b8708 <TWO52>:
   b8708:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.
   b8718:	4552 4e45 2054 616d 6c6c 636f 7320 6375     REENT malloc suc
   b8728:	6563 6465 6465 2f00 6d74 2f70 656a 6b6e     ceeded./tmp/jenk
   b8738:	6e69 2d73 4347 2d43 3031 702d 7069 6c65     ins-GCC-10-pipel
   b8748:	6e69 2d65 3834 325f 3230 3130 3231 5f34     ine-48_20201124_
   b8758:	3631 3630 3831 3630 3933 732f 6372 6e2f     1606180639/src/n
   b8768:	7765 696c 2f62 656e 6c77 6269 6c2f 6269     ewlib/newlib/lib
   b8778:	2f63 7473 6c64 6269 722f 6e61 2e64 0063     c/stdlib/rand.c.

000b8788 <link_const_variable_data_end>:
   b8788:	000b42b9 	.word	0x000b42b9
   b878c:	000b517d 	.word	0x000b517d
   b8790:	000b5725 	.word	0x000b5725
   b8794:	000b5939 	.word	0x000b5939
   b8798:	000b5a99 	.word	0x000b5a99
   b879c:	000b5bc1 	.word	0x000b5bc1
   b87a0:	000b5d31 	.word	0x000b5d31
   b87a4:	000b5d55 	.word	0x000b5d55
   b87a8:	000b5f7d 	.word	0x000b5f7d

000b87ac <link_constructors_end>:
   b87ac:	00000000 	.word	0x00000000
