
/Users/lucy/Desktop/AlevelProject/cycle1weatherstation/target/4.1.0/argon/cycle1weatherstation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005050  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b9070  000b9070  00009070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.exidx    00000008  000b9094  000b9094  00009094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .backup       00000004  2003f400  000b909c  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  2003e590  000b90a0  0001e590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001e8  2003e608  2003e608  0002e608  2**3
                  ALLOC
  8 .module_info_suffix 00000028  000b9118  000b9118  00029118  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b9140  000b9140  00029140  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   00133fe5  00000000  00000000  00029144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00014a92  00000000  00000000  0015d129  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0003e91f  00000000  00000000  00171bbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002eb8  00000000  00000000  001b04da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000ac68  00000000  00000000  001b3392  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003c504  00000000  00000000  001bdffa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00045699  00000000  00000000  001fa4fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0013aac1  00000000  00000000  0023fb97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000089b0  00000000  00000000  0037a658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f004 fd51 	bl	b8ad8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f004 fd59 	bl	b8af4 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e590 	.word	0x2003e590
   b404c:	000b90a0 	.word	0x000b90a0
   b4050:	2003e608 	.word	0x2003e608
   b4054:	2003e608 	.word	0x2003e608
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f002 fbdd 	bl	b6820 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000b9040 	.word	0x000b9040
   b4080:	000b9064 	.word	0x000b9064

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b930 	b.w	b42e8 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 f997 	bl	b43bc <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f002 bb7d 	b.w	b6790 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f001 bb49 	b.w	b572c <malloc>

000b409a <_Znaj>:
   b409a:	f001 bb47 	b.w	b572c <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f001 bb4d 	b.w	b573c <free>

000b40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a2:	7800      	ldrb	r0, [r0, #0]
   b40a4:	fab0 f080 	clz	r0, r0
   b40a8:	0940      	lsrs	r0, r0, #5
   b40aa:	4770      	bx	lr

000b40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ac:	2301      	movs	r3, #1
   b40ae:	7003      	strb	r3, [r0, #0]
   b40b0:	4770      	bx	lr
	...

000b40b4 <_ZN16JsonWriterStaticILj256EED1Ev>:
 * variable.
 *
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
   b40b4:	b510      	push	{r4, lr}
   b40b6:	4b03      	ldr	r3, [pc, #12]	; (b40c4 <_ZN16JsonWriterStaticILj256EED1Ev+0x10>)
   b40b8:	6003      	str	r3, [r0, #0]
   b40ba:	4604      	mov	r4, r0
   b40bc:	f000 ffc8 	bl	b5050 <_ZN10JsonWriterD1Ev>
   b40c0:	4620      	mov	r0, r4
   b40c2:	bd10      	pop	{r4, pc}
   b40c4:	000b8d7c 	.word	0x000b8d7c

000b40c8 <_ZN16JsonWriterStaticILj256EED0Ev>:
   b40c8:	b510      	push	{r4, lr}
   b40ca:	4604      	mov	r4, r0
   b40cc:	f7ff fff2 	bl	b40b4 <_ZN16JsonWriterStaticILj256EED1Ev>
   b40d0:	4620      	mov	r0, r4
   b40d2:	f44f 7198 	mov.w	r1, #304	; 0x130
   b40d6:	f7ff ffe2 	bl	b409e <_ZdlPvj>
   b40da:	4620      	mov	r0, r4
   b40dc:	bd10      	pop	{r4, pc}
	...

000b40e0 <_Z20getBarometerReadingsv>:
int altitude = 0;


// BAROMETER SENSOR CODE

void getBarometerReadings() {
   b40e0:	b508      	push	{r3, lr}
  //Collects readings from sensors
  temp = (int)bme.readTemperature();
   b40e2:	4811      	ldr	r0, [pc, #68]	; (b4128 <_Z20getBarometerReadingsv+0x48>)
   b40e4:	f000 fd60 	bl	b4ba8 <_ZN15Adafruit_BME28015readTemperatureEv>
   b40e8:	4b10      	ldr	r3, [pc, #64]	; (b412c <_Z20getBarometerReadingsv+0x4c>)
  humidity = (int)bme.readHumidity();
   b40ea:	480f      	ldr	r0, [pc, #60]	; (b4128 <_Z20getBarometerReadingsv+0x48>)
  temp = (int)bme.readTemperature();
   b40ec:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   b40f0:	ed83 0a00 	vstr	s0, [r3]
  humidity = (int)bme.readHumidity();
   b40f4:	f000 fd88 	bl	b4c08 <_ZN15Adafruit_BME28012readHumidityEv>
   b40f8:	4b0d      	ldr	r3, [pc, #52]	; (b4130 <_Z20getBarometerReadingsv+0x50>)
  pressure = (int)bme.readPressure();
   b40fa:	480b      	ldr	r0, [pc, #44]	; (b4128 <_Z20getBarometerReadingsv+0x48>)
  humidity = (int)bme.readHumidity();
   b40fc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   b4100:	ed83 0a00 	vstr	s0, [r3]
  pressure = (int)bme.readPressure();
   b4104:	f000 fdca 	bl	b4c9c <_ZN15Adafruit_BME28012readPressureEv>
   b4108:	4b0a      	ldr	r3, [pc, #40]	; (b4134 <_Z20getBarometerReadingsv+0x54>)
  altitude = (int)bme.readAltitude(1013.25);
   b410a:	4807      	ldr	r0, [pc, #28]	; (b4128 <_Z20getBarometerReadingsv+0x48>)
  pressure = (int)bme.readPressure();
   b410c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   b4110:	ed83 0a00 	vstr	s0, [r3]
  altitude = (int)bme.readAltitude(1013.25);
   b4114:	ed9f 0a08 	vldr	s0, [pc, #32]	; b4138 <_Z20getBarometerReadingsv+0x58>
   b4118:	f000 fe92 	bl	b4e40 <_ZN15Adafruit_BME28012readAltitudeEf>
   b411c:	4b07      	ldr	r3, [pc, #28]	; (b413c <_Z20getBarometerReadingsv+0x5c>)
   b411e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   b4122:	ed83 0a00 	vstr	s0, [r3]
}
   b4126:	bd08      	pop	{r3, pc}
   b4128:	2003e63c 	.word	0x2003e63c
   b412c:	2003e6b4 	.word	0x2003e6b4
   b4130:	2003e68c 	.word	0x2003e68c
   b4134:	2003e6a0 	.word	0x2003e6a0
   b4138:	447d5000 	.word	0x447d5000
   b413c:	2003e61c 	.word	0x2003e61c

000b4140 <_Z21getAirQualityReadingsv>:
//Initiates variable airQuality
String airQuality = "Loading";

//Function that collects readings from AQ sensor

void getAirQualityReadings(){
   b4140:	b508      	push	{r3, lr}

  //Gets sensor reading
  int airQualityVal = aqSensor.slope();
   b4142:	4810      	ldr	r0, [pc, #64]	; (b4184 <_Z21getAirQualityReadingsv+0x44>)
   b4144:	f000 ff3e 	bl	b4fc4 <_ZN16AirQualitySensor5slopeEv>

  //Assigns air quality
  if (airQualityVal == AirQualitySensor:: FORCE_SIGNAL) {
   b4148:	4b0f      	ldr	r3, [pc, #60]	; (b4188 <_Z21getAirQualityReadingsv+0x48>)
   b414a:	681b      	ldr	r3, [r3, #0]
   b414c:	4283      	cmp	r3, r0
   b414e:	d105      	bne.n	b415c <_Z21getAirQualityReadingsv+0x1c>
    airQuality = "Dangerous Level";
   b4150:	490e      	ldr	r1, [pc, #56]	; (b418c <_Z21getAirQualityReadingsv+0x4c>)
  }
  else if (airQualityVal == AirQualitySensor:: FRESH_AIR) {
    airQuality = "Fresh Air";
  }
  else {
    airQuality = "Reading Unsuccessful";
   b4152:	480f      	ldr	r0, [pc, #60]	; (b4190 <_Z21getAirQualityReadingsv+0x50>)
  }

}
   b4154:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    airQuality = "Reading Unsuccessful";
   b4158:	f002 b9b5 	b.w	b64c6 <_ZN6StringaSEPKc>
  else if (airQualityVal == AirQualitySensor:: HIGH_POLLUTION) {
   b415c:	4b0d      	ldr	r3, [pc, #52]	; (b4194 <_Z21getAirQualityReadingsv+0x54>)
   b415e:	681b      	ldr	r3, [r3, #0]
   b4160:	4283      	cmp	r3, r0
   b4162:	d101      	bne.n	b4168 <_Z21getAirQualityReadingsv+0x28>
    airQuality = "High Polution";
   b4164:	490c      	ldr	r1, [pc, #48]	; (b4198 <_Z21getAirQualityReadingsv+0x58>)
   b4166:	e7f4      	b.n	b4152 <_Z21getAirQualityReadingsv+0x12>
  else if (airQualityVal == AirQualitySensor:: LOW_POLLUTION) {
   b4168:	4b0c      	ldr	r3, [pc, #48]	; (b419c <_Z21getAirQualityReadingsv+0x5c>)
   b416a:	681b      	ldr	r3, [r3, #0]
   b416c:	4283      	cmp	r3, r0
   b416e:	d101      	bne.n	b4174 <_Z21getAirQualityReadingsv+0x34>
    airQuality = "Low Polution";
   b4170:	490b      	ldr	r1, [pc, #44]	; (b41a0 <_Z21getAirQualityReadingsv+0x60>)
   b4172:	e7ee      	b.n	b4152 <_Z21getAirQualityReadingsv+0x12>
  else if (airQualityVal == AirQualitySensor:: FRESH_AIR) {
   b4174:	4b0b      	ldr	r3, [pc, #44]	; (b41a4 <_Z21getAirQualityReadingsv+0x64>)
   b4176:	681b      	ldr	r3, [r3, #0]
   b4178:	4283      	cmp	r3, r0
    airQuality = "Fresh Air";
   b417a:	bf0c      	ite	eq
   b417c:	490a      	ldreq	r1, [pc, #40]	; (b41a8 <_Z21getAirQualityReadingsv+0x68>)
    airQuality = "Reading Unsuccessful";
   b417e:	490b      	ldrne	r1, [pc, #44]	; (b41ac <_Z21getAirQualityReadingsv+0x6c>)
   b4180:	e7e7      	b.n	b4152 <_Z21getAirQualityReadingsv+0x12>
   b4182:	bf00      	nop
   b4184:	2003e620 	.word	0x2003e620
   b4188:	000b8ddc 	.word	0x000b8ddc
   b418c:	000b8c8c 	.word	0x000b8c8c
   b4190:	2003e60c 	.word	0x2003e60c
   b4194:	000b8de4 	.word	0x000b8de4
   b4198:	000b8c9c 	.word	0x000b8c9c
   b419c:	000b8de0 	.word	0x000b8de0
   b41a0:	000b8caa 	.word	0x000b8caa
   b41a4:	000b8de8 	.word	0x000b8de8
   b41a8:	000b8cb7 	.word	0x000b8cb7
   b41ac:	000b8cc1 	.word	0x000b8cc1

000b41b0 <_Z21getDustSensorReadingsv>:
double ratio = 0;
double concentration = 0;



void getDustSensorReadings(){
   b41b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (lowpulseoccupancy == 0){
   b41b2:	4b31      	ldr	r3, [pc, #196]	; (b4278 <_Z21getDustSensorReadingsv+0xc8>)
   b41b4:	4a31      	ldr	r2, [pc, #196]	; (b427c <_Z21getDustSensorReadingsv+0xcc>)
   b41b6:	6819      	ldr	r1, [r3, #0]
   b41b8:	2900      	cmp	r1, #0
   b41ba:	d145      	bne.n	b4248 <_Z21getDustSensorReadingsv+0x98>
    lowpulseoccupancy = last_lpo;
   b41bc:	6812      	ldr	r2, [r2, #0]
   b41be:	601a      	str	r2, [r3, #0]
  }
  else{
    last_lpo = lowpulseoccupancy;
  }

  ratio = lowpulseoccupancy / (SENSOR_READING_INTERVAL * 10.0);
   b41c0:	6818      	ldr	r0, [r3, #0]
   b41c2:	4c2f      	ldr	r4, [pc, #188]	; (b4280 <_Z21getDustSensorReadingsv+0xd0>)
   b41c4:	f003 fe40 	bl	b7e48 <__aeabi_ui2d>
   b41c8:	a321      	add	r3, pc, #132	; (adr r3, b4250 <_Z21getDustSensorReadingsv+0xa0>)
   b41ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   b41ce:	f003 ffdf 	bl	b8190 <__aeabi_ddiv>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   b41d2:	ed9f 1b21 	vldr	d1, [pc, #132]	; b4258 <_Z21getDustSensorReadingsv+0xa8>
   b41d6:	ec41 0b10 	vmov	d0, r0, r1
   b41da:	e9c4 0100 	strd	r0, r1, [r4]
   b41de:	f002 fc6b 	bl	b6ab8 <pow>
  concentration = 1.1 * pow(ratio, 3) - 3.8 * pow(ratio, 2) + 520 * ratio + 0.62;
   b41e2:	a31f      	add	r3, pc, #124	; (adr r3, b4260 <_Z21getDustSensorReadingsv+0xb0>)
   b41e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   b41e8:	ec51 0b10 	vmov	r0, r1, d0
   b41ec:	f003 fea6 	bl	b7f3c <__aeabi_dmul>
   b41f0:	e9d4 6700 	ldrd	r6, r7, [r4]
   b41f4:	460d      	mov	r5, r1
   b41f6:	4604      	mov	r4, r0
   b41f8:	4632      	mov	r2, r6
   b41fa:	463b      	mov	r3, r7
   b41fc:	4630      	mov	r0, r6
   b41fe:	4639      	mov	r1, r7
   b4200:	f003 fe9c 	bl	b7f3c <__aeabi_dmul>
   b4204:	a318      	add	r3, pc, #96	; (adr r3, b4268 <_Z21getDustSensorReadingsv+0xb8>)
   b4206:	e9d3 2300 	ldrd	r2, r3, [r3]
   b420a:	f003 fe97 	bl	b7f3c <__aeabi_dmul>
   b420e:	4602      	mov	r2, r0
   b4210:	460b      	mov	r3, r1
   b4212:	4620      	mov	r0, r4
   b4214:	4629      	mov	r1, r5
   b4216:	f003 fcd9 	bl	b7bcc <__aeabi_dsub>
   b421a:	4b1a      	ldr	r3, [pc, #104]	; (b4284 <_Z21getDustSensorReadingsv+0xd4>)
   b421c:	4604      	mov	r4, r0
   b421e:	460d      	mov	r5, r1
   b4220:	2200      	movs	r2, #0
   b4222:	4630      	mov	r0, r6
   b4224:	4639      	mov	r1, r7
   b4226:	f003 fe89 	bl	b7f3c <__aeabi_dmul>
   b422a:	4602      	mov	r2, r0
   b422c:	460b      	mov	r3, r1
   b422e:	4620      	mov	r0, r4
   b4230:	4629      	mov	r1, r5
   b4232:	f003 fccd 	bl	b7bd0 <__adddf3>
   b4236:	a30e      	add	r3, pc, #56	; (adr r3, b4270 <_Z21getDustSensorReadingsv+0xc0>)
   b4238:	e9d3 2300 	ldrd	r2, r3, [r3]
   b423c:	f003 fcc8 	bl	b7bd0 <__adddf3>
   b4240:	4b11      	ldr	r3, [pc, #68]	; (b4288 <_Z21getDustSensorReadingsv+0xd8>)
   b4242:	e9c3 0100 	strd	r0, r1, [r3]

}
   b4246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    last_lpo = lowpulseoccupancy;
   b4248:	6011      	str	r1, [r2, #0]
   b424a:	e7b9      	b.n	b41c0 <_Z21getDustSensorReadingsv+0x10>
   b424c:	f3af 8000 	nop.w
   b4250:	00000000 	.word	0x00000000
   b4254:	41124f80 	.word	0x41124f80
   b4258:	00000000 	.word	0x00000000
   b425c:	40080000 	.word	0x40080000
   b4260:	9999999a 	.word	0x9999999a
   b4264:	3ff19999 	.word	0x3ff19999
   b4268:	66666666 	.word	0x66666666
   b426c:	400e6666 	.word	0x400e6666
   b4270:	3d70a3d7 	.word	0x3d70a3d7
   b4274:	3fe3d70a 	.word	0x3fe3d70a
   b4278:	2003e69c 	.word	0x2003e69c
   b427c:	2003e694 	.word	0x2003e694
   b4280:	2003e6a8 	.word	0x2003e6a8
   b4284:	40804000 	.word	0x40804000
   b4288:	2003e680 	.word	0x2003e680

000b428c <_Z16getLightReadingsv>:


// LIGHT SENSOR
int lightPin = A0;
int lightVal = 0;
void getLightReadings() {
   b428c:	b508      	push	{r3, lr}

  lightVal = analogRead(lightPin);
   b428e:	4b03      	ldr	r3, [pc, #12]	; (b429c <_Z16getLightReadingsv+0x10>)
   b4290:	8818      	ldrh	r0, [r3, #0]
   b4292:	f002 fb72 	bl	b697a <analogRead>
   b4296:	4b02      	ldr	r3, [pc, #8]	; (b42a0 <_Z16getLightReadingsv+0x14>)
   b4298:	6018      	str	r0, [r3, #0]

}
   b429a:	bd08      	pop	{r3, pc}
   b429c:	2003e590 	.word	0x2003e590
   b42a0:	2003e698 	.word	0x2003e698

000b42a4 <_Z16getSoundReadingsv>:

// SOUND SENSOR
int soundPin = A4;
int soundVal;

void getSoundReadings() {
   b42a4:	b508      	push	{r3, lr}
  soundVal = analogRead(soundPin);
   b42a6:	4b03      	ldr	r3, [pc, #12]	; (b42b4 <_Z16getSoundReadingsv+0x10>)
   b42a8:	8818      	ldrh	r0, [r3, #0]
   b42aa:	f002 fb66 	bl	b697a <analogRead>
   b42ae:	4b02      	ldr	r3, [pc, #8]	; (b42b8 <_Z16getSoundReadingsv+0x14>)
   b42b0:	6018      	str	r0, [r3, #0]
}
   b42b2:	bd08      	pop	{r3, pc}
   b42b4:	2003e594 	.word	0x2003e594
   b42b8:	2003e6b0 	.word	0x2003e6b0

000b42bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b42bc:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b42be:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b42c0:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b42c2:	b17c      	cbz	r4, b42e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b42c4:	6863      	ldr	r3, [r4, #4]
   b42c6:	3b01      	subs	r3, #1
   b42c8:	6063      	str	r3, [r4, #4]
   b42ca:	b95b      	cbnz	r3, b42e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b42cc:	6823      	ldr	r3, [r4, #0]
   b42ce:	4620      	mov	r0, r4
   b42d0:	689b      	ldr	r3, [r3, #8]
   b42d2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b42d4:	68a3      	ldr	r3, [r4, #8]
   b42d6:	3b01      	subs	r3, #1
   b42d8:	60a3      	str	r3, [r4, #8]
   b42da:	b91b      	cbnz	r3, b42e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b42dc:	6823      	ldr	r3, [r4, #0]
   b42de:	4620      	mov	r0, r4
   b42e0:	68db      	ldr	r3, [r3, #12]
   b42e2:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b42e4:	4628      	mov	r0, r5
   b42e6:	bd38      	pop	{r3, r4, r5, pc}

000b42e8 <setup>:


void setup() {
   b42e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b42ea:	4b15      	ldr	r3, [pc, #84]	; (b4340 <setup+0x58>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b42ec:	4915      	ldr	r1, [pc, #84]	; (b4344 <setup+0x5c>)
   b42ee:	781b      	ldrb	r3, [r3, #0]
   b42f0:	f88d 3000 	strb.w	r3, [sp]
   b42f4:	2200      	movs	r2, #0
   b42f6:	233c      	movs	r3, #60	; 0x3c
   b42f8:	a802      	add	r0, sp, #8
   b42fa:	f001 fbc5 	bl	b5a88 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b42fe:	a803      	add	r0, sp, #12
   b4300:	f7ff ffdc 	bl	b42bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

  Particle.publish("Weather Station Online :)");

  //Setup barometer sensor
  bme.begin();
   b4304:	4810      	ldr	r0, [pc, #64]	; (b4348 <setup+0x60>)
   b4306:	f000 fe2c 	bl	b4f62 <_ZN15Adafruit_BME2805beginEv>

  //Setup serial monitor
  Serial.begin(9600);
   b430a:	f002 f9bb 	bl	b6684 <_Z16_fetch_usbserialv>
   b430e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4312:	f002 f9ab 	bl	b666c <_ZN9USBSerial5beginEl>
  
  //Setup dust sensor
  pinMode(DUST_SENSOR_PIN, INPUT);
   b4316:	2100      	movs	r1, #0
   b4318:	2011      	movs	r0, #17
   b431a:	f002 faf1 	bl	b6900 <pinMode>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b431e:	f000 fff1 	bl	b5304 <HAL_Timer_Get_Milli_Seconds>
  lastCheck = millis();
   b4322:	4b0a      	ldr	r3, [pc, #40]	; (b434c <setup+0x64>)
   b4324:	6018      	str	r0, [r3, #0]

  //Setup light sensor
  pinMode(lightPin, INPUT);
   b4326:	4b0a      	ldr	r3, [pc, #40]	; (b4350 <setup+0x68>)
   b4328:	2100      	movs	r1, #0
   b432a:	8818      	ldrh	r0, [r3, #0]
   b432c:	f002 fae8 	bl	b6900 <pinMode>

  //Setup sound sensor
  pinMode(soundPin, INPUT);
   b4330:	4b08      	ldr	r3, [pc, #32]	; (b4354 <setup+0x6c>)
   b4332:	8818      	ldrh	r0, [r3, #0]
   b4334:	2100      	movs	r1, #0

  
}
   b4336:	b005      	add	sp, #20
   b4338:	f85d eb04 	ldr.w	lr, [sp], #4
  pinMode(soundPin, INPUT);
   b433c:	f002 bae0 	b.w	b6900 <pinMode>
   b4340:	2003e608 	.word	0x2003e608
   b4344:	000b8cd6 	.word	0x000b8cd6
   b4348:	2003e63c 	.word	0x2003e63c
   b434c:	2003e690 	.word	0x2003e690
   b4350:	2003e590 	.word	0x2003e590
   b4354:	2003e594 	.word	0x2003e594

000b4358 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>:
	void insertKeyValue(const char *key, T value) {
   b4358:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b435a:	4604      	mov	r4, r0
   b435c:	4615      	mov	r5, r2
   b435e:	9101      	str	r1, [sp, #4]
		insertCheckSeparator();
   b4360:	f000 ff82 	bl	b5268 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   b4364:	9901      	ldr	r1, [sp, #4]
   b4366:	2201      	movs	r2, #1
   b4368:	4620      	mov	r0, r4
   b436a:	f000 feeb 	bl	b5144 <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
   b436e:	4620      	mov	r0, r4
   b4370:	213a      	movs	r1, #58	; 0x3a
   b4372:	f000 fe9b 	bl	b50ac <_ZN10JsonWriter10insertCharEc>
	void insertValue(int value) { insertsprintf("%d", value); }
   b4376:	4904      	ldr	r1, [pc, #16]	; (b4388 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_+0x30>)
   b4378:	462a      	mov	r2, r5
   b437a:	4620      	mov	r0, r4
	}
   b437c:	b003      	add	sp, #12
   b437e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	void insertValue(int value) { insertsprintf("%d", value); }
   b4382:	f000 bed2 	b.w	b512a <_ZN10JsonWriter13insertsprintfEPKcz>
   b4386:	bf00      	nop
   b4388:	000b8cf0 	.word	0x000b8cf0

000b438c <_ZN10JsonWriter14insertKeyValueIdEEvPKcT_>:
	void insertKeyValue(const char *key, T value) {
   b438c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b438e:	4604      	mov	r4, r0
   b4390:	ed8d 0b00 	vstr	d0, [sp]
   b4394:	9103      	str	r1, [sp, #12]
		insertCheckSeparator();
   b4396:	f000 ff67 	bl	b5268 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   b439a:	9903      	ldr	r1, [sp, #12]
   b439c:	2201      	movs	r2, #1
   b439e:	4620      	mov	r0, r4
   b43a0:	f000 fed0 	bl	b5144 <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
   b43a4:	4620      	mov	r0, r4
   b43a6:	213a      	movs	r1, #58	; 0x3a
   b43a8:	f000 fe80 	bl	b50ac <_ZN10JsonWriter10insertCharEc>
		insertValue(value);
   b43ac:	ed9d 0b00 	vldr	d0, [sp]
   b43b0:	4620      	mov	r0, r4
	}
   b43b2:	b004      	add	sp, #16
   b43b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		insertValue(value);
   b43b8:	f000 bf7a 	b.w	b52b0 <_ZN10JsonWriter11insertValueEd>

000b43bc <loop>:


void loop() {
   b43bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b43be:	b0d3      	sub	sp, #332	; 0x14c

  getBarometerReadings();
   b43c0:	f7ff fe8e 	bl	b40e0 <_Z20getBarometerReadingsv>
  getAirQualityReadings();
   b43c4:	f7ff febc 	bl	b4140 <_Z21getAirQualityReadingsv>
  getLightReadings();
   b43c8:	f7ff ff60 	bl	b428c <_Z16getLightReadingsv>
  getSoundReadings();
   b43cc:	f7ff ff6a 	bl	b42a4 <_Z16getSoundReadingsv>
  


  duration = pulseIn(DUST_SENSOR_PIN, LOW);
   b43d0:	2100      	movs	r1, #0
   b43d2:	2011      	movs	r0, #17
   b43d4:	f002 fae8 	bl	b69a8 <pulseIn>
  
  lowpulseoccupancy = lowpulseoccupancy + duration;
   b43d8:	4d56      	ldr	r5, [pc, #344]	; (b4534 <loop+0x178>)
  duration = pulseIn(DUST_SENSOR_PIN, LOW);
   b43da:	4b57      	ldr	r3, [pc, #348]	; (b4538 <loop+0x17c>)

  if ((millis() - lastCheck) > SENSOR_READING_INTERVAL)
   b43dc:	4c57      	ldr	r4, [pc, #348]	; (b453c <loop+0x180>)
  duration = pulseIn(DUST_SENSOR_PIN, LOW);
   b43de:	6018      	str	r0, [r3, #0]
  lowpulseoccupancy = lowpulseoccupancy + duration;
   b43e0:	682b      	ldr	r3, [r5, #0]
   b43e2:	4418      	add	r0, r3
   b43e4:	6028      	str	r0, [r5, #0]
   b43e6:	f000 ff8d 	bl	b5304 <HAL_Timer_Get_Milli_Seconds>
  if ((millis() - lastCheck) > SENSOR_READING_INTERVAL)
   b43ea:	6823      	ldr	r3, [r4, #0]
   b43ec:	1ac0      	subs	r0, r0, r3
   b43ee:	f247 5330 	movw	r3, #30000	; 0x7530
   b43f2:	4298      	cmp	r0, r3
   b43f4:	d906      	bls.n	b4404 <loop+0x48>
  {
    getDustSensorReadings();
   b43f6:	f7ff fedb 	bl	b41b0 <_Z21getDustSensorReadingsv>
  
    lowpulseoccupancy = 0;
   b43fa:	2300      	movs	r3, #0
   b43fc:	602b      	str	r3, [r5, #0]
   b43fe:	f000 ff81 	bl	b5304 <HAL_Timer_Get_Milli_Seconds>
    lastCheck = millis();
   b4402:	6020      	str	r0, [r4, #0]
  }

  Serial.print("Temperature: ");
  Serial.println(temp);
   b4404:	4f4e      	ldr	r7, [pc, #312]	; (b4540 <loop+0x184>)
  Serial.print("Temperature: ");
   b4406:	f002 f93d 	bl	b6684 <_Z16_fetch_usbserialv>
   b440a:	494e      	ldr	r1, [pc, #312]	; (b4544 <loop+0x188>)
   b440c:	f001 fec8 	bl	b61a0 <_ZN5Print5printEPKc>
  Serial.println(temp);
   b4410:	f002 f938 	bl	b6684 <_Z16_fetch_usbserialv>
   b4414:	683c      	ldr	r4, [r7, #0]
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b4416:	2c00      	cmp	r4, #0
   b4418:	4606      	mov	r6, r0
   b441a:	f280 8088 	bge.w	b452e <loop+0x172>
            t = print('-');
   b441e:	212d      	movs	r1, #45	; 0x2d
   b4420:	f001 fec2 	bl	b61a8 <_ZN5Print5printEc>
            val = -n;
   b4424:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4426:	220a      	movs	r2, #10
   b4428:	4630      	mov	r0, r6
   b442a:	f001 fecc 	bl	b61c6 <_ZN5Print11printNumberEmh>
        n += println();
   b442e:	4630      	mov	r0, r6
   b4430:	f001 febd 	bl	b61ae <_ZN5Print7printlnEv>
public:
	explicit JsonWriterStatic() : JsonWriter(staticBuffer, BUFFER_SIZE) {};
   b4434:	a912      	add	r1, sp, #72	; 0x48
   b4436:	f44f 7280 	mov.w	r2, #256	; 0x100
   b443a:	a806      	add	r0, sp, #24
   b443c:	f000 fe24 	bl	b5088 <_ZN10JsonWriterC1EPcj>
   b4440:	4b41      	ldr	r3, [pc, #260]	; (b4548 <loop+0x18c>)
   b4442:	9306      	str	r3, [sp, #24]
	bool startObject() { return startObjectOrArray('{', '}'); };
   b4444:	227d      	movs	r2, #125	; 0x7d
   b4446:	217b      	movs	r1, #123	; 0x7b
   b4448:	a806      	add	r0, sp, #24
   b444a:	f000 ff18 	bl	b527e <_ZN10JsonWriter18startObjectOrArrayEcc>

  {
    JsonWriterAutoObject obj(&jw);

    // Add various types of data
    jw.insertKeyValue("temp", temp);
   b444e:	683a      	ldr	r2, [r7, #0]
   b4450:	493e      	ldr	r1, [pc, #248]	; (b454c <loop+0x190>)
   b4452:	a806      	add	r0, sp, #24
   b4454:	f7ff ff80 	bl	b4358 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    jw.insertKeyValue("humidity", humidity);
   b4458:	4b3d      	ldr	r3, [pc, #244]	; (b4550 <loop+0x194>)
   b445a:	493e      	ldr	r1, [pc, #248]	; (b4554 <loop+0x198>)
   b445c:	681a      	ldr	r2, [r3, #0]
   b445e:	a806      	add	r0, sp, #24
   b4460:	f7ff ff7a 	bl	b4358 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    jw.insertKeyValue("pressure", pressure);
   b4464:	4b3c      	ldr	r3, [pc, #240]	; (b4558 <loop+0x19c>)
   b4466:	493d      	ldr	r1, [pc, #244]	; (b455c <loop+0x1a0>)
   b4468:	681a      	ldr	r2, [r3, #0]
   b446a:	a806      	add	r0, sp, #24
   b446c:	f7ff ff74 	bl	b4358 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    jw.insertKeyValue("altitude", altitude);
   b4470:	4b3b      	ldr	r3, [pc, #236]	; (b4560 <loop+0x1a4>)
   b4472:	493c      	ldr	r1, [pc, #240]	; (b4564 <loop+0x1a8>)
   b4474:	681a      	ldr	r2, [r3, #0]
   b4476:	a806      	add	r0, sp, #24
   b4478:	f7ff ff6e 	bl	b4358 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    jw.insertKeyValue("airQual", airQuality);
   b447c:	493a      	ldr	r1, [pc, #232]	; (b4568 <loop+0x1ac>)
   b447e:	a802      	add	r0, sp, #8
   b4480:	f002 f816 	bl	b64b0 <_ZN6StringC1ERKS_>
		insertCheckSeparator();
   b4484:	a806      	add	r0, sp, #24
   b4486:	f000 feef 	bl	b5268 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   b448a:	2201      	movs	r2, #1
   b448c:	a806      	add	r0, sp, #24
   b448e:	4937      	ldr	r1, [pc, #220]	; (b456c <loop+0x1b0>)
   b4490:	f000 fe58 	bl	b5144 <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
   b4494:	a806      	add	r0, sp, #24
   b4496:	213a      	movs	r1, #58	; 0x3a
   b4498:	f000 fe08 	bl	b50ac <_ZN10JsonWriter10insertCharEc>
	void insertValue(const String &value) { insertString(value.c_str(), true); }
   b449c:	9902      	ldr	r1, [sp, #8]
   b449e:	2201      	movs	r2, #1
   b44a0:	a806      	add	r0, sp, #24
   b44a2:	f000 fe4f 	bl	b5144 <_ZN10JsonWriter12insertStringEPKcb>
   b44a6:	a802      	add	r0, sp, #8
   b44a8:	f001 ff94 	bl	b63d4 <_ZN6StringD1Ev>
		insertCheckSeparator();
   b44ac:	a806      	add	r0, sp, #24
    jw.insertKeyValue("lpo_val", lowpulseoccupancy);
   b44ae:	682c      	ldr	r4, [r5, #0]
   b44b0:	f000 feda 	bl	b5268 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   b44b4:	2201      	movs	r2, #1
   b44b6:	a806      	add	r0, sp, #24
   b44b8:	492d      	ldr	r1, [pc, #180]	; (b4570 <loop+0x1b4>)
   b44ba:	f000 fe43 	bl	b5144 <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
   b44be:	a806      	add	r0, sp, #24
   b44c0:	213a      	movs	r1, #58	; 0x3a
   b44c2:	f000 fdf3 	bl	b50ac <_ZN10JsonWriter10insertCharEc>
	void insertValue(unsigned long value) { insertsprintf("%lu", value); }
   b44c6:	4622      	mov	r2, r4
   b44c8:	a806      	add	r0, sp, #24
   b44ca:	492a      	ldr	r1, [pc, #168]	; (b4574 <loop+0x1b8>)
   b44cc:	f000 fe2d 	bl	b512a <_ZN10JsonWriter13insertsprintfEPKcz>
    jw.insertKeyValue("dust_ratio", ratio);
   b44d0:	4b29      	ldr	r3, [pc, #164]	; (b4578 <loop+0x1bc>)
   b44d2:	492a      	ldr	r1, [pc, #168]	; (b457c <loop+0x1c0>)
   b44d4:	ed93 0b00 	vldr	d0, [r3]
   b44d8:	a806      	add	r0, sp, #24
   b44da:	f7ff ff57 	bl	b438c <_ZN10JsonWriter14insertKeyValueIdEEvPKcT_>
    jw.insertKeyValue("dust_conc", concentration);
   b44de:	4b28      	ldr	r3, [pc, #160]	; (b4580 <loop+0x1c4>)
   b44e0:	4928      	ldr	r1, [pc, #160]	; (b4584 <loop+0x1c8>)
   b44e2:	ed93 0b00 	vldr	d0, [r3]
   b44e6:	a806      	add	r0, sp, #24
   b44e8:	f7ff ff50 	bl	b438c <_ZN10JsonWriter14insertKeyValueIdEEvPKcT_>
    jw.insertKeyValue("light", lightVal);
   b44ec:	4b26      	ldr	r3, [pc, #152]	; (b4588 <loop+0x1cc>)
   b44ee:	4927      	ldr	r1, [pc, #156]	; (b458c <loop+0x1d0>)
   b44f0:	681a      	ldr	r2, [r3, #0]
   b44f2:	a806      	add	r0, sp, #24
   b44f4:	f7ff ff30 	bl	b4358 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    jw.insertKeyValue("sound", soundVal);
   b44f8:	4b25      	ldr	r3, [pc, #148]	; (b4590 <loop+0x1d4>)
   b44fa:	4926      	ldr	r1, [pc, #152]	; (b4594 <loop+0x1d8>)
   b44fc:	681a      	ldr	r2, [r3, #0]
   b44fe:	a806      	add	r0, sp, #24
   b4500:	f7ff ff2a 	bl	b4358 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>

	/**
	 * @brief End the object
	 */
	~JsonWriterAutoObject() {
		jw->finishObjectOrArray();
   b4504:	a806      	add	r0, sp, #24
   b4506:	f000 fddf 	bl	b50c8 <_ZN10JsonWriter19finishObjectOrArrayEv>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b450a:	4b23      	ldr	r3, [pc, #140]	; (b4598 <loop+0x1dc>)
   b450c:	9a07      	ldr	r2, [sp, #28]
   b450e:	781b      	ldrb	r3, [r3, #0]
   b4510:	4922      	ldr	r1, [pc, #136]	; (b459c <loop+0x1e0>)
   b4512:	f88d 3000 	strb.w	r3, [sp]
   b4516:	a802      	add	r0, sp, #8
   b4518:	233c      	movs	r3, #60	; 0x3c
   b451a:	f001 fab5 	bl	b5a88 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b451e:	a803      	add	r0, sp, #12
   b4520:	f7ff fecc 	bl	b42bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  JsonWriterStatic<256> jw;
   b4524:	a806      	add	r0, sp, #24
   b4526:	f7ff fdc5 	bl	b40b4 <_ZN16JsonWriterStaticILj256EED1Ev>

  }
  Particle.publish("weatherStationData", jw.getBuffer(), PRIVATE);
}
   b452a:	b053      	add	sp, #332	; 0x14c
   b452c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            val = n;
   b452e:	4621      	mov	r1, r4
   b4530:	e779      	b.n	b4426 <loop+0x6a>
   b4532:	bf00      	nop
   b4534:	2003e69c 	.word	0x2003e69c
   b4538:	2003e688 	.word	0x2003e688
   b453c:	2003e690 	.word	0x2003e690
   b4540:	2003e6b4 	.word	0x2003e6b4
   b4544:	000b8cf3 	.word	0x000b8cf3
   b4548:	000b8d7c 	.word	0x000b8d7c
   b454c:	000b8d01 	.word	0x000b8d01
   b4550:	2003e68c 	.word	0x2003e68c
   b4554:	000b8d06 	.word	0x000b8d06
   b4558:	2003e6a0 	.word	0x2003e6a0
   b455c:	000b8d0f 	.word	0x000b8d0f
   b4560:	2003e61c 	.word	0x2003e61c
   b4564:	000b8d18 	.word	0x000b8d18
   b4568:	2003e60c 	.word	0x2003e60c
   b456c:	000b8d21 	.word	0x000b8d21
   b4570:	000b8d29 	.word	0x000b8d29
   b4574:	000b8d31 	.word	0x000b8d31
   b4578:	2003e6a8 	.word	0x2003e6a8
   b457c:	000b8d35 	.word	0x000b8d35
   b4580:	2003e680 	.word	0x2003e680
   b4584:	000b8d40 	.word	0x000b8d40
   b4588:	2003e698 	.word	0x2003e698
   b458c:	000b8d4a 	.word	0x000b8d4a
   b4590:	2003e6b0 	.word	0x2003e6b0
   b4594:	000b8d50 	.word	0x000b8d50
   b4598:	2003e609 	.word	0x2003e609
   b459c:	000b8d56 	.word	0x000b8d56

000b45a0 <_GLOBAL__sub_I_bme>:
   b45a0:	b508      	push	{r3, lr}
        val_(val) {
   b45a2:	4b09      	ldr	r3, [pc, #36]	; (b45c8 <_GLOBAL__sub_I_bme+0x28>)
Adafruit_BME280 bme;
   b45a4:	4809      	ldr	r0, [pc, #36]	; (b45cc <_GLOBAL__sub_I_bme+0x2c>)
   b45a6:	2200      	movs	r2, #0
   b45a8:	701a      	strb	r2, [r3, #0]
   b45aa:	4b09      	ldr	r3, [pc, #36]	; (b45d0 <_GLOBAL__sub_I_bme+0x30>)
   b45ac:	2201      	movs	r2, #1
   b45ae:	701a      	strb	r2, [r3, #0]
   b45b0:	f000 f856 	bl	b4660 <_ZN15Adafruit_BME280C1Ev>
AirQualitySensor aqSensor(AQS_PIN);
   b45b4:	2102      	movs	r1, #2
   b45b6:	4807      	ldr	r0, [pc, #28]	; (b45d4 <_GLOBAL__sub_I_bme+0x34>)
   b45b8:	f000 fce6 	bl	b4f88 <_ZN16AirQualitySensorC1Ei>
}
   b45bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
String airQuality = "Loading";
   b45c0:	4905      	ldr	r1, [pc, #20]	; (b45d8 <_GLOBAL__sub_I_bme+0x38>)
   b45c2:	4806      	ldr	r0, [pc, #24]	; (b45dc <_GLOBAL__sub_I_bme+0x3c>)
   b45c4:	f001 bf51 	b.w	b646a <_ZN6StringC1EPK19__FlashStringHelper>
   b45c8:	2003e608 	.word	0x2003e608
   b45cc:	2003e63c 	.word	0x2003e63c
   b45d0:	2003e609 	.word	0x2003e609
   b45d4:	2003e620 	.word	0x2003e620
   b45d8:	000b8d69 	.word	0x000b8d69
   b45dc:	2003e60c 	.word	0x2003e60c

000b45e0 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b45e0:	4770      	bx	lr

000b45e2 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b45e2:	b510      	push	{r4, lr}
  }
   b45e4:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b45e6:	4604      	mov	r4, r0
  }
   b45e8:	f7ff fd59 	bl	b409e <_ZdlPvj>
   b45ec:	4620      	mov	r0, r4
   b45ee:	bd10      	pop	{r4, pc}

000b45f0 <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b45f0:	b40e      	push	{r1, r2, r3}
   b45f2:	b503      	push	{r0, r1, lr}
   b45f4:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b45f6:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b45f8:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b45fc:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b45fe:	f001 fe00 	bl	b6202 <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b4602:	b002      	add	sp, #8
   b4604:	f85d eb04 	ldr.w	lr, [sp], #4
   b4608:	b003      	add	sp, #12
   b460a:	4770      	bx	lr

000b460c <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b460c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b460e:	4604      	mov	r4, r0
   b4610:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b4612:	7922      	ldrb	r2, [r4, #4]
   b4614:	68a3      	ldr	r3, [r4, #8]
   b4616:	b132      	cbz	r2, b4626 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b4618:	b9a3      	cbnz	r3, b4644 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b461a:	490b      	ldr	r1, [pc, #44]	; (b4648 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b461c:	b002      	add	sp, #8
   b461e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b4622:	f001 bdbd 	b.w	b61a0 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4626:	4a09      	ldr	r2, [pc, #36]	; (b464c <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b4628:	7b26      	ldrb	r6, [r4, #12]
   b462a:	4d09      	ldr	r5, [pc, #36]	; (b4650 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b462c:	4909      	ldr	r1, [pc, #36]	; (b4654 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b462e:	7b64      	ldrb	r4, [r4, #13]
   b4630:	2e01      	cmp	r6, #1
   b4632:	bf18      	it	ne
   b4634:	4629      	movne	r1, r5
   b4636:	e9cd 1400 	strd	r1, r4, [sp]
   b463a:	4907      	ldr	r1, [pc, #28]	; (b4658 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b463c:	f7ff ffd8 	bl	b45f0 <_ZN5Print6printfEPKcz>
  }
   b4640:	b002      	add	sp, #8
   b4642:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4644:	4a05      	ldr	r2, [pc, #20]	; (b465c <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b4646:	e7ef      	b.n	b4628 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b4648:	000b8d95 	.word	0x000b8d95
   b464c:	000b8d00 	.word	0x000b8d00
   b4650:	000b8d91 	.word	0x000b8d91
   b4654:	000b8d8d 	.word	0x000b8d8d
   b4658:	000b8dab 	.word	0x000b8dab
   b465c:	000b8d84 	.word	0x000b8d84

000b4660 <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   b4660:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b4664:	6103      	str	r3, [r0, #16]
{ }
   b4666:	4770      	bx	lr

000b4668 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b4668:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b466a:	4c0b      	ldr	r4, [pc, #44]	; (b4698 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b466c:	7821      	ldrb	r1, [r4, #0]
   b466e:	f3bf 8f5b 	dmb	ish
   b4672:	f011 0101 	ands.w	r1, r1, #1
   b4676:	d10b      	bne.n	b4690 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b4678:	4620      	mov	r0, r4
   b467a:	9101      	str	r1, [sp, #4]
   b467c:	f7ff fd11 	bl	b40a2 <__cxa_guard_acquire>
   b4680:	9901      	ldr	r1, [sp, #4]
   b4682:	b128      	cbz	r0, b4690 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b4684:	4805      	ldr	r0, [pc, #20]	; (b469c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b4686:	f001 fdf9 	bl	b627c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b468a:	4620      	mov	r0, r4
   b468c:	f7ff fd0e 	bl	b40ac <__cxa_guard_release>
        return instance;
    }
   b4690:	4802      	ldr	r0, [pc, #8]	; (b469c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b4692:	b002      	add	sp, #8
   b4694:	bd10      	pop	{r4, pc}
   b4696:	bf00      	nop
   b4698:	2003e6b8 	.word	0x2003e6b8
   b469c:	2003e6bc 	.word	0x2003e6bc

000b46a0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>:
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
   b46a0:	b508      	push	{r3, lr}
        instance().endTransaction();
   b46a2:	f7ff ffe1 	bl	b4668 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    }
   b46a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        instance().endTransaction();
   b46aa:	f001 be05 	b.w	b62b8 <_ZN8SPIClass14endTransactionEv>

000b46ae <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>:
    int32_t beginTransaction(const particle::SPISettings& settings) {
   b46ae:	b507      	push	{r0, r1, r2, lr}
   b46b0:	9001      	str	r0, [sp, #4]
        return instance().beginTransaction(settings);
   b46b2:	f7ff ffd9 	bl	b4668 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b46b6:	9901      	ldr	r1, [sp, #4]
    }
   b46b8:	b003      	add	sp, #12
   b46ba:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().beginTransaction(settings);
   b46be:	f001 be15 	b.w	b62ec <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b46c2 <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   b46c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   b46c6:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b46ca:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   b46cc:	4605      	mov	r5, r0
   b46ce:	460f      	mov	r7, r1
    if (_sck == -1)
   b46d0:	d106      	bne.n	b46e0 <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b46d2:	f7ff ffc9 	bl	b4668 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b46d6:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   b46d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b46dc:	f001 be74 	b.w	b63c8 <_ZN8SPIClass8transferEh>
    uint8_t reply = 0;
   b46e0:	2400      	movs	r4, #0
    for (int i=7; i>=0; i--) {
   b46e2:	2607      	movs	r6, #7
        digitalWrite(_mosi, x & (1<<i));
   b46e4:	f04f 0801 	mov.w	r8, #1
        digitalWrite(_sck, LOW);
   b46e8:	f995 0013 	ldrsb.w	r0, [r5, #19]
   b46ec:	2100      	movs	r1, #0
   b46ee:	b280      	uxth	r0, r0
   b46f0:	f002 f917 	bl	b6922 <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   b46f4:	f995 0011 	ldrsb.w	r0, [r5, #17]
   b46f8:	fa08 f106 	lsl.w	r1, r8, r6
   b46fc:	4039      	ands	r1, r7
   b46fe:	b280      	uxth	r0, r0
   b4700:	f002 f90f 	bl	b6922 <digitalWrite>
        digitalWrite(_sck, HIGH);
   b4704:	f995 0013 	ldrsb.w	r0, [r5, #19]
   b4708:	2101      	movs	r1, #1
   b470a:	b280      	uxth	r0, r0
   b470c:	f002 f909 	bl	b6922 <digitalWrite>
        if (digitalRead(_miso))
   b4710:	f995 0012 	ldrsb.w	r0, [r5, #18]
        reply <<= 1;
   b4714:	0064      	lsls	r4, r4, #1
        if (digitalRead(_miso))
   b4716:	b280      	uxth	r0, r0
        reply <<= 1;
   b4718:	b2e4      	uxtb	r4, r4
        if (digitalRead(_miso))
   b471a:	f002 f91b 	bl	b6954 <digitalRead>
   b471e:	b108      	cbz	r0, b4724 <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   b4720:	f044 0401 	orr.w	r4, r4, #1
    for (int i=7; i>=0; i--) {
   b4724:	3e01      	subs	r6, #1
   b4726:	d2df      	bcs.n	b46e8 <_ZN15Adafruit_BME2807spixferEh+0x26>
}
   b4728:	4620      	mov	r0, r4
   b472a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b4730 <_ZN15Adafruit_BME2806write8Ehh>:
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   b4730:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   b4732:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b4736:	3301      	adds	r3, #1
void Adafruit_BME280::write8(byte reg, byte value) {
   b4738:	4604      	mov	r4, r0
   b473a:	460e      	mov	r6, r1
   b473c:	4615      	mov	r5, r2
    if (_cs == -1) {
   b473e:	d113      	bne.n	b4768 <_ZN15Adafruit_BME2806write8Ehh+0x38>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b4740:	7901      	ldrb	r1, [r0, #4]
   b4742:	6800      	ldr	r0, [r0, #0]
   b4744:	f001 fbc6 	bl	b5ed4 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b4748:	6820      	ldr	r0, [r4, #0]
   b474a:	6803      	ldr	r3, [r0, #0]
   b474c:	4631      	mov	r1, r6
   b474e:	689b      	ldr	r3, [r3, #8]
   b4750:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   b4752:	6820      	ldr	r0, [r4, #0]
   b4754:	6803      	ldr	r3, [r0, #0]
   b4756:	4629      	mov	r1, r5
   b4758:	689b      	ldr	r3, [r3, #8]
   b475a:	4798      	blx	r3
        _wire -> endTransmission();
   b475c:	6820      	ldr	r0, [r4, #0]
        spixfer(value);
        digitalWrite(_cs, HIGH);
    if (_sck == -1)
        SPI.endTransaction(); // release the SPI bus
    }
}
   b475e:	b004      	add	sp, #16
   b4760:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        _wire -> endTransmission();
   b4764:	f001 bbbe 	b.w	b5ee4 <_ZN7TwoWire15endTransmissionEv>
        if (_sck == -1)
   b4768:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b476c:	3301      	adds	r3, #1
   b476e:	d10c      	bne.n	b478a <_ZN15Adafruit_BME2806write8Ehh+0x5a>
      dataMode_{dataMode}
   b4770:	4b16      	ldr	r3, [pc, #88]	; (b47cc <_ZN15Adafruit_BME2806write8Ehh+0x9c>)
   b4772:	9300      	str	r3, [sp, #0]
   b4774:	2300      	movs	r3, #0
   b4776:	f88d 3004 	strb.w	r3, [sp, #4]
   b477a:	4b15      	ldr	r3, [pc, #84]	; (b47d0 <_ZN15Adafruit_BME2806write8Ehh+0xa0>)
   b477c:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b477e:	4668      	mov	r0, sp
   b4780:	2301      	movs	r3, #1
   b4782:	f8ad 300c 	strh.w	r3, [sp, #12]
   b4786:	f7ff ff92 	bl	b46ae <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b478a:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b478e:	2100      	movs	r1, #0
   b4790:	b280      	uxth	r0, r0
   b4792:	f002 f8c6 	bl	b6922 <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   b4796:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   b479a:	4620      	mov	r0, r4
   b479c:	f7ff ff91 	bl	b46c2 <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   b47a0:	4629      	mov	r1, r5
   b47a2:	4620      	mov	r0, r4
   b47a4:	f7ff ff8d 	bl	b46c2 <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   b47a8:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b47ac:	2101      	movs	r1, #1
   b47ae:	b280      	uxth	r0, r0
   b47b0:	f002 f8b7 	bl	b6922 <digitalWrite>
    if (_sck == -1)
   b47b4:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b47b8:	3301      	adds	r3, #1
   b47ba:	d104      	bne.n	b47c6 <_ZN15Adafruit_BME2806write8Ehh+0x96>
}
   b47bc:	b004      	add	sp, #16
   b47be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        SPI.endTransaction(); // release the SPI bus
   b47c2:	f7ff bf6d 	b.w	b46a0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
}
   b47c6:	b004      	add	sp, #16
   b47c8:	bd70      	pop	{r4, r5, r6, pc}
   b47ca:	bf00      	nop
   b47cc:	000b8dd0 	.word	0x000b8dd0
   b47d0:	0007a120 	.word	0x0007a120

000b47d4 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
		 standby_duration  duration) {
   b47d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.osrs_t   = tempSampling;
   b47d6:	00db      	lsls	r3, r3, #3
   b47d8:	f002 0207 	and.w	r2, r2, #7
   b47dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
   b47e0:	4313      	orrs	r3, r2
   b47e2:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
		 standby_duration  duration) {
   b47e6:	f89d 6018 	ldrb.w	r6, [sp, #24]
    _measReg.osrs_t   = tempSampling;
   b47ea:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    _humReg.osrs_h    = humSampling;
   b47ee:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 standby_duration  duration) {
   b47f2:	f89d 501c 	ldrb.w	r5, [sp, #28]
   b47f6:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _humReg.osrs_h    = humSampling;
   b47fa:	f366 1347 	bfi	r3, r6, #5, #3
   b47fe:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.t_sb   = duration;
   b4802:	00ed      	lsls	r5, r5, #3
   b4804:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   b4808:	f007 0707 	and.w	r7, r7, #7
   b480c:	f005 0538 	and.w	r5, r5, #56	; 0x38
   b4810:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   b4814:	433d      	orrs	r5, r7
		 standby_duration  duration) {
   b4816:	4604      	mov	r4, r0
    _configReg.t_sb   = duration;
   b4818:	431d      	orrs	r5, r3
   b481a:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   b481e:	f006 0207 	and.w	r2, r6, #7
   b4822:	21f2      	movs	r1, #242	; 0xf2
   b4824:	f7ff ff84 	bl	b4730 <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   b4828:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   b482c:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   b4830:	f002 0107 	and.w	r1, r2, #7
   b4834:	009b      	lsls	r3, r3, #2
   b4836:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   b483a:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   b483e:	4620      	mov	r0, r4
   b4840:	21f5      	movs	r1, #245	; 0xf5
   b4842:	f7ff ff75 	bl	b4730 <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   b4846:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   b484a:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   b484e:	f002 0107 	and.w	r1, r2, #7
   b4852:	009b      	lsls	r3, r3, #2
   b4854:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   b4858:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   b485c:	4620      	mov	r0, r4
   b485e:	21f4      	movs	r1, #244	; 0xf4
}
   b4860:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   b4864:	f7ff bf64 	b.w	b4730 <_ZN15Adafruit_BME2806write8Ehh>

000b4868 <_ZN15Adafruit_BME2805read8Eh>:
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   b4868:	b530      	push	{r4, r5, lr}
    uint8_t value;
    
    if (_cs == -1) {
   b486a:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b486e:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::read8(byte reg) {
   b4870:	b085      	sub	sp, #20
   b4872:	4604      	mov	r4, r0
   b4874:	460d      	mov	r5, r1
    if (_cs == -1) {
   b4876:	d118      	bne.n	b48aa <_ZN15Adafruit_BME2805read8Eh+0x42>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b4878:	7901      	ldrb	r1, [r0, #4]
   b487a:	6800      	ldr	r0, [r0, #0]
   b487c:	f001 fb2a 	bl	b5ed4 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b4880:	6820      	ldr	r0, [r4, #0]
   b4882:	6803      	ldr	r3, [r0, #0]
   b4884:	4629      	mov	r1, r5
   b4886:	689b      	ldr	r3, [r3, #8]
   b4888:	4798      	blx	r3
        _wire -> endTransmission();
   b488a:	6820      	ldr	r0, [r4, #0]
   b488c:	f001 fb2a 	bl	b5ee4 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   b4890:	7921      	ldrb	r1, [r4, #4]
   b4892:	6820      	ldr	r0, [r4, #0]
   b4894:	2201      	movs	r2, #1
   b4896:	f001 fb1a 	bl	b5ece <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   b489a:	6820      	ldr	r0, [r4, #0]
   b489c:	6803      	ldr	r3, [r0, #0]
   b489e:	695b      	ldr	r3, [r3, #20]
   b48a0:	4798      	blx	r3
   b48a2:	b2c5      	uxtb	r5, r0
        digitalWrite(_cs, HIGH);
        if (_sck == -1)
            SPI.endTransaction(); // release the SPI bus
    }
    return value;
}
   b48a4:	4628      	mov	r0, r5
   b48a6:	b005      	add	sp, #20
   b48a8:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b48aa:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b48ae:	3301      	adds	r3, #1
   b48b0:	d10c      	bne.n	b48cc <_ZN15Adafruit_BME2805read8Eh+0x64>
   b48b2:	4b15      	ldr	r3, [pc, #84]	; (b4908 <_ZN15Adafruit_BME2805read8Eh+0xa0>)
   b48b4:	9300      	str	r3, [sp, #0]
   b48b6:	2300      	movs	r3, #0
   b48b8:	f88d 3004 	strb.w	r3, [sp, #4]
   b48bc:	4b13      	ldr	r3, [pc, #76]	; (b490c <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   b48be:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b48c0:	4668      	mov	r0, sp
   b48c2:	2301      	movs	r3, #1
   b48c4:	f8ad 300c 	strh.w	r3, [sp, #12]
   b48c8:	f7ff fef1 	bl	b46ae <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b48cc:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b48d0:	2100      	movs	r1, #0
   b48d2:	b280      	uxth	r0, r0
   b48d4:	f002 f825 	bl	b6922 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b48d8:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b48dc:	4620      	mov	r0, r4
   b48de:	f7ff fef0 	bl	b46c2 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   b48e2:	2100      	movs	r1, #0
   b48e4:	4620      	mov	r0, r4
   b48e6:	f7ff feec 	bl	b46c2 <_ZN15Adafruit_BME2807spixferEh>
   b48ea:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   b48ec:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b48f0:	2101      	movs	r1, #1
   b48f2:	b280      	uxth	r0, r0
   b48f4:	f002 f815 	bl	b6922 <digitalWrite>
        if (_sck == -1)
   b48f8:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b48fc:	3301      	adds	r3, #1
   b48fe:	d1d1      	bne.n	b48a4 <_ZN15Adafruit_BME2805read8Eh+0x3c>
            SPI.endTransaction(); // release the SPI bus
   b4900:	f7ff fece 	bl	b46a0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   b4904:	e7ce      	b.n	b48a4 <_ZN15Adafruit_BME2805read8Eh+0x3c>
   b4906:	bf00      	nop
   b4908:	000b8dd0 	.word	0x000b8dd0
   b490c:	0007a120 	.word	0x0007a120

000b4910 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
    @brief return true if chip is busy reading cal data
    @returns true if reading calibration, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::isReadingCalibration(void)
{
   b4910:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   b4912:	21f3      	movs	r1, #243	; 0xf3
   b4914:	f7ff ffa8 	bl	b4868 <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
   b4918:	f000 0001 	and.w	r0, r0, #1
   b491c:	bd08      	pop	{r3, pc}
	...

000b4920 <_ZN15Adafruit_BME2806read16Eh>:
{
   b4920:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   b4922:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b4926:	3301      	adds	r3, #1
{
   b4928:	b085      	sub	sp, #20
   b492a:	4604      	mov	r4, r0
   b492c:	460d      	mov	r5, r1
    if (_cs == -1) {
   b492e:	d11f      	bne.n	b4970 <_ZN15Adafruit_BME2806read16Eh+0x50>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b4930:	7901      	ldrb	r1, [r0, #4]
   b4932:	6800      	ldr	r0, [r0, #0]
   b4934:	f001 face 	bl	b5ed4 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b4938:	6820      	ldr	r0, [r4, #0]
   b493a:	6803      	ldr	r3, [r0, #0]
   b493c:	4629      	mov	r1, r5
   b493e:	689b      	ldr	r3, [r3, #8]
   b4940:	4798      	blx	r3
        _wire -> endTransmission();
   b4942:	6820      	ldr	r0, [r4, #0]
   b4944:	f001 face 	bl	b5ee4 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   b4948:	7921      	ldrb	r1, [r4, #4]
   b494a:	6820      	ldr	r0, [r4, #0]
   b494c:	2202      	movs	r2, #2
   b494e:	f001 fabe 	bl	b5ece <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   b4952:	6820      	ldr	r0, [r4, #0]
   b4954:	6803      	ldr	r3, [r0, #0]
   b4956:	695b      	ldr	r3, [r3, #20]
   b4958:	4798      	blx	r3
   b495a:	4605      	mov	r5, r0
   b495c:	6820      	ldr	r0, [r4, #0]
   b495e:	6803      	ldr	r3, [r0, #0]
   b4960:	695b      	ldr	r3, [r3, #20]
   b4962:	4798      	blx	r3
   b4964:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   b4968:	b285      	uxth	r5, r0
}
   b496a:	4628      	mov	r0, r5
   b496c:	b005      	add	sp, #20
   b496e:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b4970:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b4974:	3301      	adds	r3, #1
   b4976:	d10c      	bne.n	b4992 <_ZN15Adafruit_BME2806read16Eh+0x72>
   b4978:	4b18      	ldr	r3, [pc, #96]	; (b49dc <_ZN15Adafruit_BME2806read16Eh+0xbc>)
   b497a:	9300      	str	r3, [sp, #0]
   b497c:	2300      	movs	r3, #0
   b497e:	f88d 3004 	strb.w	r3, [sp, #4]
   b4982:	4b17      	ldr	r3, [pc, #92]	; (b49e0 <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   b4984:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b4986:	4668      	mov	r0, sp
   b4988:	2301      	movs	r3, #1
   b498a:	f8ad 300c 	strh.w	r3, [sp, #12]
   b498e:	f7ff fe8e 	bl	b46ae <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b4992:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4996:	2100      	movs	r1, #0
   b4998:	b280      	uxth	r0, r0
   b499a:	f001 ffc2 	bl	b6922 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b499e:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b49a2:	4620      	mov	r0, r4
   b49a4:	f7ff fe8d 	bl	b46c2 <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   b49a8:	2100      	movs	r1, #0
   b49aa:	4620      	mov	r0, r4
   b49ac:	f7ff fe89 	bl	b46c2 <_ZN15Adafruit_BME2807spixferEh>
   b49b0:	2100      	movs	r1, #0
   b49b2:	4605      	mov	r5, r0
   b49b4:	4620      	mov	r0, r4
   b49b6:	f7ff fe84 	bl	b46c2 <_ZN15Adafruit_BME2807spixferEh>
   b49ba:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   b49be:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   b49c0:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b49c4:	2101      	movs	r1, #1
   b49c6:	b280      	uxth	r0, r0
   b49c8:	f001 ffab 	bl	b6922 <digitalWrite>
        if (_sck == -1)
   b49cc:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b49d0:	3301      	adds	r3, #1
   b49d2:	d1ca      	bne.n	b496a <_ZN15Adafruit_BME2806read16Eh+0x4a>
            SPI.endTransaction(); // release the SPI bus
   b49d4:	f7ff fe64 	bl	b46a0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   b49d8:	e7c7      	b.n	b496a <_ZN15Adafruit_BME2806read16Eh+0x4a>
   b49da:	bf00      	nop
   b49dc:	000b8dd0 	.word	0x000b8dd0
   b49e0:	0007a120 	.word	0x0007a120

000b49e4 <_ZN15Adafruit_BME2809read16_LEEh>:
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   b49e4:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   b49e6:	f7ff ff9b 	bl	b4920 <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   b49ea:	ba40      	rev16	r0, r0
}
   b49ec:	b280      	uxth	r0, r0
   b49ee:	bd08      	pop	{r3, pc}

000b49f0 <_ZN15Adafruit_BME28016readCoefficientsEv>:
{
   b49f0:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b49f2:	2188      	movs	r1, #136	; 0x88
{
   b49f4:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b49f6:	f7ff fff5 	bl	b49e4 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   b49fa:	218a      	movs	r1, #138	; 0x8a
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   b49fc:	82a0      	strh	r0, [r4, #20]
    return (int16_t)read16_LE(reg);
   b49fe:	4620      	mov	r0, r4
   b4a00:	f7ff fff0 	bl	b49e4 <_ZN15Adafruit_BME2809read16_LEEh>
   b4a04:	218c      	movs	r1, #140	; 0x8c
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   b4a06:	82e0      	strh	r0, [r4, #22]
    return (int16_t)read16_LE(reg);
   b4a08:	4620      	mov	r0, r4
   b4a0a:	f7ff ffeb 	bl	b49e4 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b4a0e:	218e      	movs	r1, #142	; 0x8e
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   b4a10:	8320      	strh	r0, [r4, #24]
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b4a12:	4620      	mov	r0, r4
   b4a14:	f7ff ffe6 	bl	b49e4 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   b4a18:	2190      	movs	r1, #144	; 0x90
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   b4a1a:	8360      	strh	r0, [r4, #26]
    return (int16_t)read16_LE(reg);
   b4a1c:	4620      	mov	r0, r4
   b4a1e:	f7ff ffe1 	bl	b49e4 <_ZN15Adafruit_BME2809read16_LEEh>
   b4a22:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   b4a24:	83a0      	strh	r0, [r4, #28]
    return (int16_t)read16_LE(reg);
   b4a26:	4620      	mov	r0, r4
   b4a28:	f7ff ffdc 	bl	b49e4 <_ZN15Adafruit_BME2809read16_LEEh>
   b4a2c:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   b4a2e:	83e0      	strh	r0, [r4, #30]
    return (int16_t)read16_LE(reg);
   b4a30:	4620      	mov	r0, r4
   b4a32:	f7ff ffd7 	bl	b49e4 <_ZN15Adafruit_BME2809read16_LEEh>
   b4a36:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   b4a38:	8420      	strh	r0, [r4, #32]
    return (int16_t)read16_LE(reg);
   b4a3a:	4620      	mov	r0, r4
   b4a3c:	f7ff ffd2 	bl	b49e4 <_ZN15Adafruit_BME2809read16_LEEh>
   b4a40:	2198      	movs	r1, #152	; 0x98
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   b4a42:	8460      	strh	r0, [r4, #34]	; 0x22
    return (int16_t)read16_LE(reg);
   b4a44:	4620      	mov	r0, r4
   b4a46:	f7ff ffcd 	bl	b49e4 <_ZN15Adafruit_BME2809read16_LEEh>
   b4a4a:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   b4a4c:	84a0      	strh	r0, [r4, #36]	; 0x24
    return (int16_t)read16_LE(reg);
   b4a4e:	4620      	mov	r0, r4
   b4a50:	f7ff ffc8 	bl	b49e4 <_ZN15Adafruit_BME2809read16_LEEh>
   b4a54:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   b4a56:	84e0      	strh	r0, [r4, #38]	; 0x26
    return (int16_t)read16_LE(reg);
   b4a58:	4620      	mov	r0, r4
   b4a5a:	f7ff ffc3 	bl	b49e4 <_ZN15Adafruit_BME2809read16_LEEh>
   b4a5e:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   b4a60:	8520      	strh	r0, [r4, #40]	; 0x28
    return (int16_t)read16_LE(reg);
   b4a62:	4620      	mov	r0, r4
   b4a64:	f7ff ffbe 	bl	b49e4 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b4a68:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   b4a6a:	8560      	strh	r0, [r4, #42]	; 0x2a
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b4a6c:	4620      	mov	r0, r4
   b4a6e:	f7ff fefb 	bl	b4868 <_ZN15Adafruit_BME2805read8Eh>
    return (int16_t)read16_LE(reg);
   b4a72:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   b4a74:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    return (int16_t)read16_LE(reg);
   b4a78:	4620      	mov	r0, r4
   b4a7a:	f7ff ffb3 	bl	b49e4 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b4a7e:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   b4a80:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b4a82:	4620      	mov	r0, r4
   b4a84:	f7ff fef0 	bl	b4868 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   b4a88:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   b4a8a:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   b4a8e:	4620      	mov	r0, r4
   b4a90:	f7ff feea 	bl	b4868 <_ZN15Adafruit_BME2805read8Eh>
   b4a94:	21e5      	movs	r1, #229	; 0xe5
   b4a96:	4605      	mov	r5, r0
   b4a98:	4620      	mov	r0, r4
   b4a9a:	f7ff fee5 	bl	b4868 <_ZN15Adafruit_BME2805read8Eh>
   b4a9e:	f000 030f 	and.w	r3, r0, #15
   b4aa2:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   b4aa6:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   b4aa8:	21e6      	movs	r1, #230	; 0xe6
   b4aaa:	4620      	mov	r0, r4
   b4aac:	f7ff fedc 	bl	b4868 <_ZN15Adafruit_BME2805read8Eh>
   b4ab0:	21e5      	movs	r1, #229	; 0xe5
   b4ab2:	4605      	mov	r5, r0
   b4ab4:	4620      	mov	r0, r4
   b4ab6:	f7ff fed7 	bl	b4868 <_ZN15Adafruit_BME2805read8Eh>
   b4aba:	f3c0 1307 	ubfx	r3, r0, #4, #8
   b4abe:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   b4ac2:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   b4ac4:	21e7      	movs	r1, #231	; 0xe7
   b4ac6:	4620      	mov	r0, r4
   b4ac8:	f7ff fece 	bl	b4868 <_ZN15Adafruit_BME2805read8Eh>
   b4acc:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
}
   b4ad0:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4ad4 <_ZN15Adafruit_BME2806read24Eh>:
{
   b4ad4:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   b4ad6:	f990 3010 	ldrsb.w	r3, [r0, #16]
   b4ada:	3301      	adds	r3, #1
{
   b4adc:	b085      	sub	sp, #20
   b4ade:	4604      	mov	r4, r0
   b4ae0:	460d      	mov	r5, r1
    if (_cs == -1) {
   b4ae2:	d123      	bne.n	b4b2c <_ZN15Adafruit_BME2806read24Eh+0x58>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   b4ae4:	7901      	ldrb	r1, [r0, #4]
   b4ae6:	6800      	ldr	r0, [r0, #0]
   b4ae8:	f001 f9f4 	bl	b5ed4 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   b4aec:	6820      	ldr	r0, [r4, #0]
   b4aee:	6803      	ldr	r3, [r0, #0]
   b4af0:	4629      	mov	r1, r5
   b4af2:	689b      	ldr	r3, [r3, #8]
   b4af4:	4798      	blx	r3
        _wire -> endTransmission();
   b4af6:	6820      	ldr	r0, [r4, #0]
   b4af8:	f001 f9f4 	bl	b5ee4 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
   b4afc:	7921      	ldrb	r1, [r4, #4]
   b4afe:	6820      	ldr	r0, [r4, #0]
   b4b00:	2203      	movs	r2, #3
   b4b02:	f001 f9e4 	bl	b5ece <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   b4b06:	6820      	ldr	r0, [r4, #0]
   b4b08:	6803      	ldr	r3, [r0, #0]
   b4b0a:	695b      	ldr	r3, [r3, #20]
   b4b0c:	4798      	blx	r3
        value <<= 8;
   b4b0e:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   b4b10:	6820      	ldr	r0, [r4, #0]
   b4b12:	6803      	ldr	r3, [r0, #0]
   b4b14:	695b      	ldr	r3, [r3, #20]
   b4b16:	4798      	blx	r3
   b4b18:	4328      	orrs	r0, r5
        value <<= 8;
   b4b1a:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   b4b1c:	6820      	ldr	r0, [r4, #0]
   b4b1e:	6803      	ldr	r3, [r0, #0]
   b4b20:	695b      	ldr	r3, [r3, #20]
   b4b22:	4798      	blx	r3
   b4b24:	4305      	orrs	r5, r0
}
   b4b26:	4628      	mov	r0, r5
   b4b28:	b005      	add	sp, #20
   b4b2a:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   b4b2c:	f990 3013 	ldrsb.w	r3, [r0, #19]
   b4b30:	3301      	adds	r3, #1
   b4b32:	d10c      	bne.n	b4b4e <_ZN15Adafruit_BME2806read24Eh+0x7a>
   b4b34:	4b1a      	ldr	r3, [pc, #104]	; (b4ba0 <_ZN15Adafruit_BME2806read24Eh+0xcc>)
   b4b36:	9300      	str	r3, [sp, #0]
   b4b38:	2300      	movs	r3, #0
   b4b3a:	f88d 3004 	strb.w	r3, [sp, #4]
   b4b3e:	4b19      	ldr	r3, [pc, #100]	; (b4ba4 <_ZN15Adafruit_BME2806read24Eh+0xd0>)
   b4b40:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   b4b42:	4668      	mov	r0, sp
   b4b44:	2301      	movs	r3, #1
   b4b46:	f8ad 300c 	strh.w	r3, [sp, #12]
   b4b4a:	f7ff fdb0 	bl	b46ae <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
   b4b4e:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4b52:	2100      	movs	r1, #0
   b4b54:	b280      	uxth	r0, r0
   b4b56:	f001 fee4 	bl	b6922 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   b4b5a:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b4b5e:	4620      	mov	r0, r4
   b4b60:	f7ff fdaf 	bl	b46c2 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   b4b64:	2100      	movs	r1, #0
   b4b66:	4620      	mov	r0, r4
   b4b68:	f7ff fdab 	bl	b46c2 <_ZN15Adafruit_BME2807spixferEh>
        value |= spixfer(0);
   b4b6c:	2100      	movs	r1, #0
        value <<= 8;
   b4b6e:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   b4b70:	4620      	mov	r0, r4
   b4b72:	f7ff fda6 	bl	b46c2 <_ZN15Adafruit_BME2807spixferEh>
   b4b76:	4328      	orrs	r0, r5
        value <<= 8;
   b4b78:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   b4b7a:	2100      	movs	r1, #0
   b4b7c:	4620      	mov	r0, r4
   b4b7e:	f7ff fda0 	bl	b46c2 <_ZN15Adafruit_BME2807spixferEh>
   b4b82:	4305      	orrs	r5, r0
        digitalWrite(_cs, HIGH);
   b4b84:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4b88:	2101      	movs	r1, #1
   b4b8a:	b280      	uxth	r0, r0
   b4b8c:	f001 fec9 	bl	b6922 <digitalWrite>
        if (_sck == -1)
   b4b90:	f994 3013 	ldrsb.w	r3, [r4, #19]
   b4b94:	3301      	adds	r3, #1
   b4b96:	d1c6      	bne.n	b4b26 <_ZN15Adafruit_BME2806read24Eh+0x52>
            SPI.endTransaction(); // release the SPI bus
   b4b98:	f7ff fd82 	bl	b46a0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
    return value;
   b4b9c:	e7c3      	b.n	b4b26 <_ZN15Adafruit_BME2806read24Eh+0x52>
   b4b9e:	bf00      	nop
   b4ba0:	000b8dd0 	.word	0x000b8dd0
   b4ba4:	0007a120 	.word	0x0007a120

000b4ba8 <_ZN15Adafruit_BME28015readTemperatureEv>:
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   b4ba8:	b510      	push	{r4, lr}
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   b4baa:	21fa      	movs	r1, #250	; 0xfa
{
   b4bac:	4604      	mov	r4, r0
    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   b4bae:	f7ff ff91 	bl	b4ad4 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
   b4bb2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b4bb6:	d01f      	beq.n	b4bf8 <_ZN15Adafruit_BME28015readTemperatureEv+0x50>
        return NAN;
    adc_T >>= 4;

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4bb8:	8aa1      	ldrh	r1, [r4, #20]
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   b4bba:	ed9f 7a11 	vldr	s14, [pc, #68]	; b4c00 <_ZN15Adafruit_BME28015readTemperatureEv+0x58>
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4bbe:	004b      	lsls	r3, r1, #1
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b4bc0:	ebc1 2220 	rsb	r2, r1, r0, asr #8
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4bc4:	ebc3 11e0 	rsb	r1, r3, r0, asr #7
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
   b4bc8:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   b4bcc:	4359      	muls	r1, r3
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b4bce:	fb02 f302 	mul.w	r3, r2, r2
            ((int32_t)_bme280_calib.dig_T3)) >> 14;
   b4bd2:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
   b4bd6:	131b      	asrs	r3, r3, #12
   b4bd8:	4353      	muls	r3, r2
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   b4bda:	139b      	asrs	r3, r3, #14
    t_fine = var1 + var2;
   b4bdc:	eb03 23e1 	add.w	r3, r3, r1, asr #11
   b4be0:	60e3      	str	r3, [r4, #12]
    float T = (t_fine * 5 + 128) >> 8;
   b4be2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b4be6:	3380      	adds	r3, #128	; 0x80
   b4be8:	121b      	asrs	r3, r3, #8
   b4bea:	ee07 3a90 	vmov	s15, r3
   b4bee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    return T/100;
   b4bf2:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   b4bf6:	bd10      	pop	{r4, pc}
        return NAN;
   b4bf8:	ed9f 0a02 	vldr	s0, [pc, #8]	; b4c04 <_ZN15Adafruit_BME28015readTemperatureEv+0x5c>
   b4bfc:	e7fb      	b.n	b4bf6 <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
   b4bfe:	bf00      	nop
   b4c00:	42c80000 	.word	0x42c80000
   b4c04:	7fc00000 	.word	0x7fc00000

000b4c08 <_ZN15Adafruit_BME28012readHumidityEv>:
/*!
    @brief  Returns the humidity from the sensor
    @returns the humidity value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readHumidity(void) {
   b4c08:	b538      	push	{r3, r4, r5, lr}
   b4c0a:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   b4c0c:	f7ff ffcc 	bl	b4ba8 <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
   b4c10:	21fd      	movs	r1, #253	; 0xfd
   b4c12:	4620      	mov	r0, r4
   b4c14:	f7ff fe84 	bl	b4920 <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
   b4c18:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   b4c1c:	d038      	beq.n	b4c90 <_ZN15Adafruit_BME28012readHumidityEv+0x88>
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
   b4c1e:	68e1      	ldr	r1, [r4, #12]

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   b4c20:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
    v_x1_u32r = (t_fine - ((int32_t)76800));
   b4c24:	f5a1 3596 	sub.w	r5, r1, #76800	; 0x12c00
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   b4c28:	f9b4 1032 	ldrsh.w	r1, [r4, #50]	; 0x32
   b4c2c:	0509      	lsls	r1, r1, #20
   b4c2e:	ebc1 3380 	rsb	r3, r1, r0, lsl #14
   b4c32:	fb05 3312 	mls	r3, r5, r2, r3
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   b4c36:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   b4c3a:	13da      	asrs	r2, r3, #15
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4c3c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b4c40:	f994 1036 	ldrsb.w	r1, [r4, #54]	; 0x36
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4c44:	436b      	muls	r3, r5
   b4c46:	12db      	asrs	r3, r3, #11
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b4c48:	4369      	muls	r1, r5
   b4c4a:	1289      	asrs	r1, r1, #10
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4c4c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   b4c50:	434b      	muls	r3, r1
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4c52:	129b      	asrs	r3, r3, #10
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   b4c54:	f9b4 102e 	ldrsh.w	r1, [r4, #46]	; 0x2e
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   b4c58:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   b4c5c:	434b      	muls	r3, r1
   b4c5e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   b4c62:	139b      	asrs	r3, r3, #14
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   b4c64:	4353      	muls	r3, r2

    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   b4c66:	13da      	asrs	r2, r3, #15
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
   b4c68:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   b4c6c:	4352      	muls	r2, r2
   b4c6e:	11d2      	asrs	r2, r2, #7
   b4c70:	434a      	muls	r2, r1
   b4c72:	eba3 1322 	sub.w	r3, r3, r2, asr #4

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
   b4c76:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
   b4c7a:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   b4c7e:	bfa8      	it	ge
   b4c80:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
    float h = (v_x1_u32r>>12);
   b4c84:	131b      	asrs	r3, r3, #12
   b4c86:	ee00 3a10 	vmov	s0, r3
    return  h / 1024.0;
   b4c8a:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
}
   b4c8e:	bd38      	pop	{r3, r4, r5, pc}
        return NAN;
   b4c90:	ed9f 0a01 	vldr	s0, [pc, #4]	; b4c98 <_ZN15Adafruit_BME28012readHumidityEv+0x90>
   b4c94:	e7fb      	b.n	b4c8e <_ZN15Adafruit_BME28012readHumidityEv+0x86>
   b4c96:	bf00      	nop
   b4c98:	7fc00000 	.word	0x7fc00000

000b4c9c <_ZN15Adafruit_BME28012readPressureEv>:
float Adafruit_BME280::readPressure(void) {
   b4c9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b4ca0:	4605      	mov	r5, r0
    readTemperature(); // must be done first to get t_fine
   b4ca2:	f7ff ff81 	bl	b4ba8 <_ZN15Adafruit_BME28015readTemperatureEv>
    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   b4ca6:	21f7      	movs	r1, #247	; 0xf7
   b4ca8:	4628      	mov	r0, r5
   b4caa:	f7ff ff13 	bl	b4ad4 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   b4cae:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b4cb2:	f000 80b6 	beq.w	b4e22 <_ZN15Adafruit_BME28012readPressureEv+0x186>
    var1 = ((int64_t)t_fine) - 128000;
   b4cb6:	68e9      	ldr	r1, [r5, #12]
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b4cb8:	f9b5 301c 	ldrsh.w	r3, [r5, #28]
    var1 = ((int64_t)t_fine) - 128000;
   b4cbc:	ea4f 7ee1 	mov.w	lr, r1, asr #31
   b4cc0:	f5b1 31fa 	subs.w	r1, r1, #128000	; 0x1f400
   b4cc4:	f14e 3eff 	adc.w	lr, lr, #4294967295	; 0xffffffff
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b4cc8:	17dc      	asrs	r4, r3, #31
   b4cca:	fb03 f20e 	mul.w	r2, r3, lr
   b4cce:	fb01 2204 	mla	r2, r1, r4, r2
   b4cd2:	fba3 3401 	umull	r3, r4, r3, r1
   b4cd6:	4422      	add	r2, r4
   b4cd8:	0312      	lsls	r2, r2, #12
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b4cda:	fba1 7801 	umull	r7, r8, r1, r1
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b4cde:	031c      	lsls	r4, r3, #12
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b4ce0:	fb01 f60e 	mul.w	r6, r1, lr
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   b4ce4:	ea42 5213 	orr.w	r2, r2, r3, lsr #20
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   b4ce8:	f9b5 301e 	ldrsh.w	r3, [r5, #30]
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b4cec:	eb08 0846 	add.w	r8, r8, r6, lsl #1
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   b4cf0:	ea4f 7ce3 	mov.w	ip, r3, asr #31
   b4cf4:	fb03 f608 	mul.w	r6, r3, r8
   b4cf8:	fb07 660c 	mla	r6, r7, ip, r6
   b4cfc:	fba3 3c07 	umull	r3, ip, r3, r7
   b4d00:	4466      	add	r6, ip
   b4d02:	0a1b      	lsrs	r3, r3, #8
   b4d04:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
   b4d08:	191b      	adds	r3, r3, r4
   b4d0a:	eb42 2226 	adc.w	r2, r2, r6, asr #8
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   b4d0e:	8b6e      	ldrh	r6, [r5, #26]
   b4d10:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
   b4d14:	fba3 3406 	umull	r3, r4, r3, r6
   b4d18:	fb06 4402 	mla	r4, r6, r2, r4
   b4d1c:	17e3      	asrs	r3, r4, #31
   b4d1e:	1062      	asrs	r2, r4, #1
    if (var1 == 0) {
   b4d20:	ea53 0464 	orrs.w	r4, r3, r4, asr #1
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   b4d24:	f04f 0c00 	mov.w	ip, #0
    if (var1 == 0) {
   b4d28:	d07e      	beq.n	b4e28 <_ZN15Adafruit_BME28012readPressureEv+0x18c>
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   b4d2a:	f9b5 4024 	ldrsh.w	r4, [r5, #36]	; 0x24
   b4d2e:	fb04 f608 	mul.w	r6, r4, r8
   b4d32:	ea4f 79e4 	mov.w	r9, r4, asr #31
   b4d36:	fb07 6609 	mla	r6, r7, r9, r6
   b4d3a:	fba4 4707 	umull	r4, r7, r4, r7
   b4d3e:	443e      	add	r6, r7
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   b4d40:	f9b5 7022 	ldrsh.w	r7, [r5, #34]	; 0x22
   b4d44:	ea4f 78e7 	mov.w	r8, r7, asr #31
   b4d48:	fb07 fe0e 	mul.w	lr, r7, lr
   b4d4c:	fb01 ee08 	mla	lr, r1, r8, lr
   b4d50:	fba7 7101 	umull	r7, r1, r7, r1
   b4d54:	4471      	add	r1, lr
   b4d56:	0449      	lsls	r1, r1, #17
   b4d58:	ea41 31d7 	orr.w	r1, r1, r7, lsr #15
    adc_P >>= 4;
   b4d5c:	1100      	asrs	r0, r0, #4
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   b4d5e:	047f      	lsls	r7, r7, #17
   b4d60:	193f      	adds	r7, r7, r4
    p = 1048576 - adc_P;
   b4d62:	f5c0 1480 	rsb	r4, r0, #1048576	; 0x100000
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   b4d66:	eb46 0601 	adc.w	r6, r6, r1
    p = (((p<<31) - var2)*3125) / var1;
   b4d6a:	f004 4000 	and.w	r0, r4, #2147483648	; 0x80000000
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   b4d6e:	f9b5 1020 	ldrsh.w	r1, [r5, #32]
   b4d72:	eb1c 0707 	adds.w	r7, ip, r7
    p = (((p<<31) - var2)*3125) / var1;
   b4d76:	ea40 0054 	orr.w	r0, r0, r4, lsr #1
   b4d7a:	07e4      	lsls	r4, r4, #31
   b4d7c:	1be4      	subs	r4, r4, r7
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   b4d7e:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
    p = (((p<<31) - var2)*3125) / var1;
   b4d82:	f640 4135 	movw	r1, #3125	; 0xc35
   b4d86:	eb60 0606 	sbc.w	r6, r0, r6
   b4d8a:	fba4 0401 	umull	r0, r4, r4, r1
   b4d8e:	fb01 4106 	mla	r1, r1, r6, r4
   b4d92:	f003 fce1 	bl	b8758 <__aeabi_ldivmod>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   b4d96:	f9b5 202a 	ldrsh.w	r2, [r5, #42]	; 0x2a
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b4d9a:	f9b5 6028 	ldrsh.w	r6, [r5, #40]	; 0x28
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   b4d9e:	ea4f 3c61 	mov.w	ip, r1, asr #13
   b4da2:	0b43      	lsrs	r3, r0, #13
   b4da4:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
   b4da8:	fb02 f70c 	mul.w	r7, r2, ip
   b4dac:	17d4      	asrs	r4, r2, #31
   b4dae:	fb03 7704 	mla	r7, r3, r4, r7
   b4db2:	fba2 2403 	umull	r2, r4, r2, r3
   b4db6:	443c      	add	r4, r7
   b4db8:	fb02 f70c 	mul.w	r7, r2, ip
   b4dbc:	fb03 7704 	mla	r7, r3, r4, r7
   b4dc0:	fba2 2303 	umull	r2, r3, r2, r3
   b4dc4:	441f      	add	r7, r3
   b4dc6:	0e53      	lsrs	r3, r2, #25
   b4dc8:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b4dcc:	181b      	adds	r3, r3, r0
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b4dce:	ea4f 72e6 	mov.w	r2, r6, asr #31
   b4dd2:	fb06 f401 	mul.w	r4, r6, r1
    p = (((p<<31) - var2)*3125) / var1;
   b4dd6:	4686      	mov	lr, r0
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b4dd8:	eb41 6767 	adc.w	r7, r1, r7, asr #25
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b4ddc:	fb02 4100 	mla	r1, r2, r0, r4
   b4de0:	fba6 060e 	umull	r0, r6, r6, lr
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b4de4:	f9b5 4026 	ldrsh.w	r4, [r5, #38]	; 0x26
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   b4de8:	4431      	add	r1, r6
   b4dea:	0cc0      	lsrs	r0, r0, #19
   b4dec:	ea40 3041 	orr.w	r0, r0, r1, lsl #13
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   b4df0:	1818      	adds	r0, r3, r0
   b4df2:	ea4f 75e4 	mov.w	r5, r4, asr #31
   b4df6:	eb47 41e1 	adc.w	r1, r7, r1, asr #19
   b4dfa:	0a00      	lsrs	r0, r0, #8
   b4dfc:	012d      	lsls	r5, r5, #4
   b4dfe:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
   b4e02:	ea45 7514 	orr.w	r5, r5, r4, lsr #28
   b4e06:	0124      	lsls	r4, r4, #4
   b4e08:	1820      	adds	r0, r4, r0
    return (float)p/256;
   b4e0a:	eb45 2121 	adc.w	r1, r5, r1, asr #8
   b4e0e:	f003 fc65 	bl	b86dc <__aeabi_l2f>
   b4e12:	ed9f 0a07 	vldr	s0, [pc, #28]	; b4e30 <_ZN15Adafruit_BME28012readPressureEv+0x194>
   b4e16:	ee07 0a90 	vmov	s15, r0
   b4e1a:	ee27 0a80 	vmul.f32	s0, s15, s0
}
   b4e1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return NAN;
   b4e22:	ed9f 0a04 	vldr	s0, [pc, #16]	; b4e34 <_ZN15Adafruit_BME28012readPressureEv+0x198>
   b4e26:	e7fa      	b.n	b4e1e <_ZN15Adafruit_BME28012readPressureEv+0x182>
        return 0; // avoid exception caused by division by zero
   b4e28:	ed9f 0a03 	vldr	s0, [pc, #12]	; b4e38 <_ZN15Adafruit_BME28012readPressureEv+0x19c>
   b4e2c:	e7f7      	b.n	b4e1e <_ZN15Adafruit_BME28012readPressureEv+0x182>
   b4e2e:	bf00      	nop
   b4e30:	3b800000 	.word	0x3b800000
   b4e34:	7fc00000 	.word	0x7fc00000
	...

000b4e40 <_ZN15Adafruit_BME28012readAltitudeEf>:
    @param  seaLevel      Sea-level pressure in hPa
    @returns the altitude value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readAltitude(float seaLevel)
{
   b4e40:	b508      	push	{r3, lr}
   b4e42:	ed2d 8b02 	vpush	{d8}
   b4e46:	eeb0 8a40 	vmov.f32	s16, s0

    // Note that using the equation from wikipedia can give bad results
    // at high altitude. See this thread for more information:
    //  http://forums.adafruit.com/viewtopic.php?f=22&t=58064

    float atmospheric = readPressure() / 100.0F;
   b4e4a:	f7ff ff27 	bl	b4c9c <_ZN15Adafruit_BME28012readPressureEv>
   b4e4e:	ed9f 7a16 	vldr	s14, [pc, #88]	; b4ea8 <_ZN15Adafruit_BME28012readAltitudeEf+0x68>
   b4e52:	eec0 7a07 	vdiv.f32	s15, s0, s14
   b4e56:	eec7 7a88 	vdiv.f32	s15, s15, s16
   b4e5a:	ee17 0a90 	vmov	r0, s15
   b4e5e:	f003 f815 	bl	b7e8c <__aeabi_f2d>
   b4e62:	ed9f 1b0d 	vldr	d1, [pc, #52]	; b4e98 <_ZN15Adafruit_BME28012readAltitudeEf+0x58>
   b4e66:	ec41 0b10 	vmov	d0, r0, r1
   b4e6a:	f001 fe25 	bl	b6ab8 <pow>
    return 44330.0 * (1.0 - pow(atmospheric / seaLevel, 0.1903));
   b4e6e:	490f      	ldr	r1, [pc, #60]	; (b4eac <_ZN15Adafruit_BME28012readAltitudeEf+0x6c>)
   b4e70:	ec53 2b10 	vmov	r2, r3, d0
   b4e74:	2000      	movs	r0, #0
   b4e76:	f002 fea9 	bl	b7bcc <__aeabi_dsub>
   b4e7a:	a309      	add	r3, pc, #36	; (adr r3, b4ea0 <_ZN15Adafruit_BME28012readAltitudeEf+0x60>)
   b4e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4e80:	f003 f85c 	bl	b7f3c <__aeabi_dmul>
   b4e84:	f003 fb0a 	bl	b849c <__aeabi_d2f>
}
   b4e88:	ecbd 8b02 	vpop	{d8}
   b4e8c:	ee00 0a10 	vmov	s0, r0
   b4e90:	bd08      	pop	{r3, pc}
   b4e92:	bf00      	nop
   b4e94:	f3af 8000 	nop.w
   b4e98:	1a36e2eb 	.word	0x1a36e2eb
   b4e9c:	3fc85bc0 	.word	0x3fc85bc0
   b4ea0:	00000000 	.word	0x00000000
   b4ea4:	40e5a540 	.word	0x40e5a540
   b4ea8:	42c80000 	.word	0x42c80000
   b4eac:	3ff00000 	.word	0x3ff00000

000b4eb0 <_ZN15Adafruit_BME2804initEv>:
{
   b4eb0:	b530      	push	{r4, r5, lr}
   b4eb2:	4604      	mov	r4, r0
    if (_cs == -1) {
   b4eb4:	f990 0010 	ldrsb.w	r0, [r0, #16]
   b4eb8:	1c42      	adds	r2, r0, #1
{
   b4eba:	b085      	sub	sp, #20
    if (_cs == -1) {
   b4ebc:	d119      	bne.n	b4ef2 <_ZN15Adafruit_BME2804initEv+0x42>
        _wire -> begin();
   b4ebe:	6820      	ldr	r0, [r4, #0]
   b4ec0:	f000 ffd6 	bl	b5e70 <_ZN7TwoWire5beginEv>
    _sensorID = read8(BME280_REGISTER_CHIPID);
   b4ec4:	21d0      	movs	r1, #208	; 0xd0
   b4ec6:	4620      	mov	r0, r4
   b4ec8:	f7ff fcce 	bl	b4868 <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   b4ecc:	2860      	cmp	r0, #96	; 0x60
    _sensorID = read8(BME280_REGISTER_CHIPID);
   b4ece:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   b4ed0:	d145      	bne.n	b4f5e <_ZN15Adafruit_BME2804initEv+0xae>
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   b4ed2:	4620      	mov	r0, r4
   b4ed4:	22b6      	movs	r2, #182	; 0xb6
   b4ed6:	21e0      	movs	r1, #224	; 0xe0
   b4ed8:	f7ff fc2a 	bl	b4730 <_ZN15Adafruit_BME2806write8Ehh>
    delay(300);
   b4edc:	f44f 7096 	mov.w	r0, #300	; 0x12c
   b4ee0:	f000 fc6c 	bl	b57bc <delay>
    while (isReadingCalibration())
   b4ee4:	4620      	mov	r0, r4
   b4ee6:	f7ff fd13 	bl	b4910 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   b4eea:	4605      	mov	r5, r0
   b4eec:	b328      	cbz	r0, b4f3a <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   b4eee:	2064      	movs	r0, #100	; 0x64
   b4ef0:	e7f6      	b.n	b4ee0 <_ZN15Adafruit_BME2804initEv+0x30>
        digitalWrite(_cs, HIGH);
   b4ef2:	2101      	movs	r1, #1
   b4ef4:	b280      	uxth	r0, r0
   b4ef6:	f001 fd14 	bl	b6922 <digitalWrite>
        pinMode(_cs, OUTPUT);
   b4efa:	f994 0010 	ldrsb.w	r0, [r4, #16]
   b4efe:	2101      	movs	r1, #1
   b4f00:	b280      	uxth	r0, r0
   b4f02:	f001 fcfd 	bl	b6900 <pinMode>
        if (_sck == -1) {
   b4f06:	f994 0013 	ldrsb.w	r0, [r4, #19]
   b4f0a:	1c43      	adds	r3, r0, #1
   b4f0c:	d104      	bne.n	b4f18 <_ZN15Adafruit_BME2804initEv+0x68>
        instance().begin();
   b4f0e:	f7ff fbab 	bl	b4668 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4f12:	f001 f9bd 	bl	b6290 <_ZN8SPIClass5beginEv>
    }
   b4f16:	e7d5      	b.n	b4ec4 <_ZN15Adafruit_BME2804initEv+0x14>
            pinMode(_sck, OUTPUT);
   b4f18:	2101      	movs	r1, #1
   b4f1a:	b280      	uxth	r0, r0
   b4f1c:	f001 fcf0 	bl	b6900 <pinMode>
            pinMode(_mosi, OUTPUT);
   b4f20:	f994 0011 	ldrsb.w	r0, [r4, #17]
   b4f24:	2101      	movs	r1, #1
   b4f26:	b280      	uxth	r0, r0
   b4f28:	f001 fcea 	bl	b6900 <pinMode>
            pinMode(_miso, INPUT);
   b4f2c:	f994 0012 	ldrsb.w	r0, [r4, #18]
   b4f30:	2100      	movs	r1, #0
   b4f32:	b280      	uxth	r0, r0
   b4f34:	f001 fce4 	bl	b6900 <pinMode>
   b4f38:	e7c4      	b.n	b4ec4 <_ZN15Adafruit_BME2804initEv+0x14>
    readCoefficients(); // read trimming parameters, see DS 4.2.2
   b4f3a:	4620      	mov	r0, r4
   b4f3c:	f7ff fd58 	bl	b49f0 <_ZN15Adafruit_BME28016readCoefficientsEv>
    setSampling(); // use defaults
   b4f40:	2305      	movs	r3, #5
   b4f42:	9300      	str	r3, [sp, #0]
   b4f44:	461a      	mov	r2, r3
   b4f46:	2103      	movs	r1, #3
   b4f48:	4620      	mov	r0, r4
   b4f4a:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b4f4e:	f7ff fc41 	bl	b47d4 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
    delay(100);
   b4f52:	2064      	movs	r0, #100	; 0x64
   b4f54:	f000 fc32 	bl	b57bc <delay>
    return true;
   b4f58:	2001      	movs	r0, #1
}
   b4f5a:	b005      	add	sp, #20
   b4f5c:	bd30      	pop	{r4, r5, pc}
        return false;
   b4f5e:	2000      	movs	r0, #0
   b4f60:	e7fb      	b.n	b4f5a <_ZN15Adafruit_BME2804initEv+0xaa>

000b4f62 <_ZN15Adafruit_BME2805beginEv>:
    _i2caddr = BME280_ADDRESS;
   b4f62:	2377      	movs	r3, #119	; 0x77
{
   b4f64:	b510      	push	{r4, lr}
    _i2caddr = BME280_ADDRESS;
   b4f66:	7103      	strb	r3, [r0, #4]
{
   b4f68:	4604      	mov	r4, r0
	_wire = &Wire;
   b4f6a:	f001 fd3b 	bl	b69e4 <_Z19__fetch_global_Wirev>
   b4f6e:	6020      	str	r0, [r4, #0]
	status = init();
   b4f70:	4620      	mov	r0, r4
   b4f72:	f7ff ff9d 	bl	b4eb0 <_ZN15Adafruit_BME2804initEv>
 	if(!status){
   b4f76:	b930      	cbnz	r0, b4f86 <_ZN15Adafruit_BME2805beginEv+0x24>
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
   b4f78:	2376      	movs	r3, #118	; 0x76
   b4f7a:	7123      	strb	r3, [r4, #4]
 		status = init();
   b4f7c:	4620      	mov	r0, r4
}
   b4f7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 		status = init();
   b4f82:	f7ff bf95 	b.w	b4eb0 <_ZN15Adafruit_BME2804initEv>
}
   b4f86:	bd10      	pop	{r4, pc}

000b4f88 <_ZN16AirQualitySensorC1Ei>:
const int AirQualitySensor::HIGH_POLLUTION = 1;
const int AirQualitySensor::LOW_POLLUTION  = 2;
const int AirQualitySensor::FRESH_AIR      = 3;

AirQualitySensor::AirQualitySensor(int pin) 
: _pin(pin), _voltageSum(0), _volSumCount(0) {
   b4f88:	2200      	movs	r2, #0
   b4f8a:	e9c0 2204 	strd	r2, r2, [r0, #16]
   b4f8e:	6001      	str	r1, [r0, #0]
    // do nothing
}
   b4f90:	4770      	bx	lr
	...

000b4f94 <_ZN16AirQualitySensor21updateStandardVoltageEv>:

int AirQualitySensor::getValue(void) {
    return _currentVoltage;
}

void AirQualitySensor::updateStandardVoltage(void) {
   b4f94:	b510      	push	{r4, lr}
   b4f96:	4604      	mov	r4, r0
   b4f98:	f000 f9b4 	bl	b5304 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - _lastStdVolUpdated > 500000) {
   b4f9c:	69a3      	ldr	r3, [r4, #24]
   b4f9e:	1ac0      	subs	r0, r0, r3
   b4fa0:	4b07      	ldr	r3, [pc, #28]	; (b4fc0 <_ZN16AirQualitySensor21updateStandardVoltageEv+0x2c>)
   b4fa2:	4298      	cmp	r0, r3
   b4fa4:	d90a      	bls.n	b4fbc <_ZN16AirQualitySensor21updateStandardVoltageEv+0x28>
        _standardVoltage = _voltageSum / _volSumCount;
   b4fa6:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   b4faa:	fb93 f3f2 	sdiv	r3, r3, r2
   b4fae:	60e3      	str	r3, [r4, #12]
   b4fb0:	f000 f9a8 	bl	b5304 <HAL_Timer_Get_Milli_Seconds>
        _lastStdVolUpdated = millis();

        _voltageSum = 0;
   b4fb4:	2300      	movs	r3, #0
        _volSumCount = 0;
   b4fb6:	e9c4 3304 	strd	r3, r3, [r4, #16]
        _lastStdVolUpdated = millis();
   b4fba:	61a0      	str	r0, [r4, #24]
    }
}
   b4fbc:	bd10      	pop	{r4, pc}
   b4fbe:	bf00      	nop
   b4fc0:	0007a120 	.word	0x0007a120

000b4fc4 <_ZN16AirQualitySensor5slopeEv>:
int AirQualitySensor::slope(void) {
   b4fc4:	b510      	push	{r4, lr}
    _lastVoltage = _currentVoltage;
   b4fc6:	6883      	ldr	r3, [r0, #8]
   b4fc8:	6043      	str	r3, [r0, #4]
int AirQualitySensor::slope(void) {
   b4fca:	4604      	mov	r4, r0
    _currentVoltage = analogRead(_pin);
   b4fcc:	8800      	ldrh	r0, [r0, #0]
   b4fce:	f001 fcd4 	bl	b697a <analogRead>
    _voltageSum += _currentVoltage;
   b4fd2:	6923      	ldr	r3, [r4, #16]
    _currentVoltage = analogRead(_pin);
   b4fd4:	60a0      	str	r0, [r4, #8]
    _voltageSum += _currentVoltage;
   b4fd6:	4418      	add	r0, r3
    _volSumCount += 1;
   b4fd8:	6963      	ldr	r3, [r4, #20]
    _voltageSum += _currentVoltage;
   b4fda:	6120      	str	r0, [r4, #16]
    _volSumCount += 1;
   b4fdc:	3301      	adds	r3, #1
   b4fde:	6163      	str	r3, [r4, #20]
    updateStandardVoltage();
   b4fe0:	4620      	mov	r0, r4
   b4fe2:	f7ff ffd7 	bl	b4f94 <_ZN16AirQualitySensor21updateStandardVoltageEv>
    if (_currentVoltage - _lastVoltage > 400 || _currentVoltage > 700) {
   b4fe6:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   b4fea:	1a51      	subs	r1, r2, r1
   b4fec:	f5b1 7fc8 	cmp.w	r1, #400	; 0x190
   b4ff0:	dc10      	bgt.n	b5014 <_ZN16AirQualitySensor5slopeEv+0x50>
   b4ff2:	f5b2 7f2f 	cmp.w	r2, #700	; 0x2bc
   b4ff6:	dc0d      	bgt.n	b5014 <_ZN16AirQualitySensor5slopeEv+0x50>
             || _currentVoltage - _standardVoltage > 150) {
   b4ff8:	68e3      	ldr	r3, [r4, #12]
   b4ffa:	1ad3      	subs	r3, r2, r3
   b4ffc:	2b96      	cmp	r3, #150	; 0x96
   b4ffe:	dc0b      	bgt.n	b5018 <_ZN16AirQualitySensor5slopeEv+0x54>
    else if ((_currentVoltage - _lastVoltage > 200 && _currentVoltage < 700)
   b5000:	29c8      	cmp	r1, #200	; 0xc8
   b5002:	dd02      	ble.n	b500a <_ZN16AirQualitySensor5slopeEv+0x46>
   b5004:	f5b2 7f2f 	cmp.w	r2, #700	; 0x2bc
   b5008:	d108      	bne.n	b501c <_ZN16AirQualitySensor5slopeEv+0x58>
        return AirQualitySensor::FRESH_AIR;
   b500a:	2b32      	cmp	r3, #50	; 0x32
   b500c:	bfcc      	ite	gt
   b500e:	2002      	movgt	r0, #2
   b5010:	2003      	movle	r0, #3
}
   b5012:	bd10      	pop	{r4, pc}
        return AirQualitySensor::FORCE_SIGNAL;
   b5014:	2000      	movs	r0, #0
   b5016:	e7fc      	b.n	b5012 <_ZN16AirQualitySensor5slopeEv+0x4e>
        return AirQualitySensor::HIGH_POLLUTION;
   b5018:	2001      	movs	r0, #1
   b501a:	e7fa      	b.n	b5012 <_ZN16AirQualitySensor5slopeEv+0x4e>
        return AirQualitySensor::LOW_POLLUTION;
   b501c:	2002      	movs	r0, #2
   b501e:	e7f8      	b.n	b5012 <_ZN16AirQualitySensor5slopeEv+0x4e>

000b5020 <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   b5020:	b510      	push	{r4, lr}
   b5022:	4b05      	ldr	r3, [pc, #20]	; (b5038 <_ZN10JsonBufferD1Ev+0x18>)
   b5024:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   b5026:	7c03      	ldrb	r3, [r0, #16]
JsonBuffer::~JsonBuffer() {
   b5028:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   b502a:	b91b      	cbnz	r3, b5034 <_ZN10JsonBufferD1Ev+0x14>
   b502c:	6840      	ldr	r0, [r0, #4]
   b502e:	b108      	cbz	r0, b5034 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   b5030:	f000 fb84 	bl	b573c <free>
	}
}
   b5034:	4620      	mov	r0, r4
   b5036:	bd10      	pop	{r4, pc}
   b5038:	000b8e08 	.word	0x000b8e08

000b503c <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
   b503c:	b510      	push	{r4, lr}
   b503e:	4604      	mov	r4, r0
}
   b5040:	f7ff ffee 	bl	b5020 <_ZN10JsonBufferD1Ev>
   b5044:	4620      	mov	r0, r4
   b5046:	2114      	movs	r1, #20
   b5048:	f7ff f829 	bl	b409e <_ZdlPvj>
   b504c:	4620      	mov	r0, r4
   b504e:	bd10      	pop	{r4, pc}

000b5050 <_ZN10JsonWriterD1Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   b5050:	b510      	push	{r4, lr}
   b5052:	4b03      	ldr	r3, [pc, #12]	; (b5060 <_ZN10JsonWriterD1Ev+0x10>)
   b5054:	6003      	str	r3, [r0, #0]
   b5056:	4604      	mov	r4, r0
   b5058:	f7ff ffe2 	bl	b5020 <_ZN10JsonBufferD1Ev>

}
   b505c:	4620      	mov	r0, r4
   b505e:	bd10      	pop	{r4, pc}
   b5060:	000b8e18 	.word	0x000b8e18

000b5064 <_ZN10JsonWriterD0Ev>:
JsonWriter::~JsonWriter() {
   b5064:	b510      	push	{r4, lr}
   b5066:	4604      	mov	r4, r0
}
   b5068:	f7ff fff2 	bl	b5050 <_ZN10JsonWriterD1Ev>
   b506c:	4620      	mov	r0, r4
   b506e:	2130      	movs	r1, #48	; 0x30
   b5070:	f7ff f815 	bl	b409e <_ZdlPvj>
   b5074:	4620      	mov	r0, r4
   b5076:	bd10      	pop	{r4, pc}

000b5078 <_ZN10JsonWriter4initEv>:
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
   b5078:	2300      	movs	r3, #0

	contextIndex = 0;
	context[contextIndex].isFirst = true;
   b507a:	2201      	movs	r2, #1
	offset = 0;
   b507c:	60c3      	str	r3, [r0, #12]
	contextIndex = 0;
   b507e:	6143      	str	r3, [r0, #20]
	context[contextIndex].isFirst = true;
   b5080:	8302      	strh	r2, [r0, #24]
	context[contextIndex].terminator = 0;

	truncated = false;
   b5082:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a

}
   b5086:	4770      	bx	lr

000b5088 <_ZN10JsonWriterC1EPcj>:
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   b5088:	e9c0 1201 	strd	r1, r2, [r0, #4]
JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   b508c:	b508      	push	{r3, lr}
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   b508e:	2200      	movs	r2, #0
   b5090:	60c2      	str	r2, [r0, #12]
   b5092:	2201      	movs	r2, #1
   b5094:	7402      	strb	r2, [r0, #16]
JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   b5096:	4a04      	ldr	r2, [pc, #16]	; (b50a8 <_ZN10JsonWriterC1EPcj+0x20>)
   b5098:	6002      	str	r2, [r0, #0]
   b509a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b509e:	62c2      	str	r2, [r0, #44]	; 0x2c
	init();
   b50a0:	f7ff ffea 	bl	b5078 <_ZN10JsonWriter4initEv>
}
   b50a4:	bd08      	pop	{r3, pc}
   b50a6:	bf00      	nop
   b50a8:	000b8e18 	.word	0x000b8e18

000b50ac <_ZN10JsonWriter10insertCharEc>:
	}
}


void JsonWriter::insertChar(char ch) {
	if (offset < bufferLen) {
   b50ac:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
void JsonWriter::insertChar(char ch) {
   b50b0:	b510      	push	{r4, lr}
	if (offset < bufferLen) {
   b50b2:	4293      	cmp	r3, r2
		buffer[offset++] = ch;
   b50b4:	bf3f      	itttt	cc
   b50b6:	6842      	ldrcc	r2, [r0, #4]
   b50b8:	1c5c      	addcc	r4, r3, #1
   b50ba:	60c4      	strcc	r4, [r0, #12]
   b50bc:	54d1      	strbcc	r1, [r2, r3]
	}
	else {
		truncated = true;
   b50be:	bf24      	itt	cs
   b50c0:	2301      	movcs	r3, #1
   b50c2:	f880 302a 	strbcs.w	r3, [r0, #42]	; 0x2a
	}
}
   b50c6:	bd10      	pop	{r4, pc}

000b50c8 <_ZN10JsonWriter19finishObjectOrArrayEv>:
void JsonWriter::finishObjectOrArray() {
   b50c8:	b510      	push	{r4, lr}
	if (contextIndex > 0) {
   b50ca:	6943      	ldr	r3, [r0, #20]
void JsonWriter::finishObjectOrArray() {
   b50cc:	4604      	mov	r4, r0
	if (contextIndex > 0) {
   b50ce:	b143      	cbz	r3, b50e2 <_ZN10JsonWriter19finishObjectOrArrayEv+0x1a>
		if (context[contextIndex].terminator != 0) {
   b50d0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   b50d4:	7e59      	ldrb	r1, [r3, #25]
   b50d6:	b109      	cbz	r1, b50dc <_ZN10JsonWriter19finishObjectOrArrayEv+0x14>
			insertChar(context[contextIndex].terminator);
   b50d8:	f7ff ffe8 	bl	b50ac <_ZN10JsonWriter10insertCharEc>
		contextIndex--;
   b50dc:	6963      	ldr	r3, [r4, #20]
   b50de:	3b01      	subs	r3, #1
   b50e0:	6163      	str	r3, [r4, #20]
	if (offset < bufferLen) {
   b50e2:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
		buffer[offset] = 0;
   b50e6:	6863      	ldr	r3, [r4, #4]
	if (offset < bufferLen) {
   b50e8:	4288      	cmp	r0, r1
   b50ea:	f04f 0200 	mov.w	r2, #0
		buffer[bufferLen - 1] = 0;
   b50ee:	bf2a      	itet	cs
   b50f0:	185b      	addcs	r3, r3, r1
		buffer[offset] = 0;
   b50f2:	541a      	strbcc	r2, [r3, r0]
		buffer[bufferLen - 1] = 0;
   b50f4:	f803 2c01 	strbcs.w	r2, [r3, #-1]
}
   b50f8:	bd10      	pop	{r4, pc}

000b50fa <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>:
	va_start(ap, fmt);
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   b50fa:	b570      	push	{r4, r5, r6, lr}
   b50fc:	4604      	mov	r4, r0
	size_t spaceAvailable = bufferLen - offset;
   b50fe:	e9d0 5002 	ldrd	r5, r0, [r0, #8]

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   b5102:	6866      	ldr	r6, [r4, #4]
	size_t spaceAvailable = bufferLen - offset;
   b5104:	1a2d      	subs	r5, r5, r0
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   b5106:	4613      	mov	r3, r2
	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   b5108:	4430      	add	r0, r6
   b510a:	460a      	mov	r2, r1
   b510c:	4629      	mov	r1, r5
   b510e:	f000 fb25 	bl	b575c <vsnprintf>
	if (count <= spaceAvailable) {
   b5112:	4285      	cmp	r5, r0
		offset += count;
   b5114:	bf2d      	iteet	cs
   b5116:	68e3      	ldrcs	r3, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
   b5118:	68a3      	ldrcc	r3, [r4, #8]
   b511a:	60e3      	strcc	r3, [r4, #12]
		offset += count;
   b511c:	18c0      	addcs	r0, r0, r3
		truncated = true;
   b511e:	bf36      	itet	cc
   b5120:	2301      	movcc	r3, #1
		offset += count;
   b5122:	60e0      	strcs	r0, [r4, #12]
		truncated = true;
   b5124:	f884 302a 	strbcc.w	r3, [r4, #42]	; 0x2a
	}
}
   b5128:	bd70      	pop	{r4, r5, r6, pc}

000b512a <_ZN10JsonWriter13insertsprintfEPKcz>:
void JsonWriter::insertsprintf(const char *fmt, ...) {
   b512a:	b40e      	push	{r1, r2, r3}
   b512c:	b503      	push	{r0, r1, lr}
   b512e:	aa03      	add	r2, sp, #12
   b5130:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, fmt);
   b5134:	9201      	str	r2, [sp, #4]
	insertvsprintf(fmt, ap);
   b5136:	f7ff ffe0 	bl	b50fa <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>
}
   b513a:	b002      	add	sp, #8
   b513c:	f85d eb04 	ldr.w	lr, [sp], #4
   b5140:	b003      	add	sp, #12
   b5142:	4770      	bx	lr

000b5144 <_ZN10JsonWriter12insertStringEPKcb>:
void JsonWriter::insertString(const char *s, bool quoted) {
   b5144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5148:	4604      	mov	r4, r0
   b514a:	460e      	mov	r6, r1
	if (quoted) {
   b514c:	4617      	mov	r7, r2
   b514e:	b112      	cbz	r2, b5156 <_ZN10JsonWriter12insertStringEPKcb+0x12>
		insertChar('"');
   b5150:	2122      	movs	r1, #34	; 0x22
   b5152:	f7ff ffab 	bl	b50ac <_ZN10JsonWriter10insertCharEc>
				insertsprintf("\\u%04X", utf16);
   b5156:	f8df 810c 	ldr.w	r8, [pc, #268]	; b5264 <_ZN10JsonWriter12insertStringEPKcb+0x120>
void JsonWriter::insertString(const char *s, bool quoted) {
   b515a:	2500      	movs	r5, #0
	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   b515c:	5d71      	ldrb	r1, [r6, r5]
   b515e:	eb06 0905 	add.w	r9, r6, r5
   b5162:	2900      	cmp	r1, #0
   b5164:	d074      	beq.n	b5250 <_ZN10JsonWriter12insertStringEPKcb+0x10c>
   b5166:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   b516a:	429a      	cmp	r2, r3
   b516c:	d270      	bcs.n	b5250 <_ZN10JsonWriter12insertStringEPKcb+0x10c>
		if (s[ii] & 0x80) {
   b516e:	060b      	lsls	r3, r1, #24
   b5170:	d534      	bpl.n	b51dc <_ZN10JsonWriter12insertStringEPKcb+0x98>
			if (((s[ii] & 0b11110000) == 0b11100000) && ((s[ii+1] & 0b11000000) == 0b10000000) && ((s[ii+2] & 0b11000000) == 0b10000000)) {
   b5172:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
   b5176:	2be0      	cmp	r3, #224	; 0xe0
   b5178:	f105 0901 	add.w	r9, r5, #1
   b517c:	d11d      	bne.n	b51ba <_ZN10JsonWriter12insertStringEPKcb+0x76>
   b517e:	f816 2009 	ldrb.w	r2, [r6, r9]
   b5182:	f002 03c0 	and.w	r3, r2, #192	; 0xc0
   b5186:	2b80      	cmp	r3, #128	; 0x80
   b5188:	d139      	bne.n	b51fe <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b518a:	f105 0902 	add.w	r9, r5, #2
   b518e:	f816 3009 	ldrb.w	r3, [r6, r9]
   b5192:	f003 00c0 	and.w	r0, r3, #192	; 0xc0
   b5196:	2880      	cmp	r0, #128	; 0x80
   b5198:	d131      	bne.n	b51fe <_ZN10JsonWriter12insertStringEPKcb+0xba>
				uint16_t utf16 = ((s[ii] & 0b1111) << 12) | ((s[ii+1] & 0b111111) << 6) | (s[ii+2] & 0b111111);
   b519a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   b519e:	0192      	lsls	r2, r2, #6
   b51a0:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
   b51a4:	f402 627c 	and.w	r2, r2, #4032	; 0xfc0
   b51a8:	431a      	orrs	r2, r3
				insertsprintf("\\u%04X", utf16);
   b51aa:	b292      	uxth	r2, r2
				insertsprintf("\\u%04X", utf16);
   b51ac:	4641      	mov	r1, r8
   b51ae:	4620      	mov	r0, r4
   b51b0:	f7ff ffbb 	bl	b512a <_ZN10JsonWriter13insertsprintfEPKcz>
				ii++; // plus one more in loop increment
   b51b4:	464d      	mov	r5, r9
	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   b51b6:	3501      	adds	r5, #1
   b51b8:	e7d0      	b.n	b515c <_ZN10JsonWriter12insertStringEPKcb+0x18>
			if (((s[ii] & 0b11100000) == 0b11000000) && ((s[ii+1] & 0b11000000) == 0b10000000)) {
   b51ba:	f001 03e0 	and.w	r3, r1, #224	; 0xe0
   b51be:	2bc0      	cmp	r3, #192	; 0xc0
   b51c0:	d11d      	bne.n	b51fe <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b51c2:	f816 3009 	ldrb.w	r3, [r6, r9]
   b51c6:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   b51ca:	2a80      	cmp	r2, #128	; 0x80
   b51cc:	d117      	bne.n	b51fe <_ZN10JsonWriter12insertStringEPKcb+0xba>
				uint16_t utf16 = ((s[ii] & 0b11111) << 6) | (s[ii+1] & 0b111111);
   b51ce:	0189      	lsls	r1, r1, #6
   b51d0:	f401 62f8 	and.w	r2, r1, #1984	; 0x7c0
   b51d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
				insertsprintf("\\u%04X", utf16);
   b51d8:	431a      	orrs	r2, r3
   b51da:	e7e7      	b.n	b51ac <_ZN10JsonWriter12insertStringEPKcb+0x68>
			switch(s[ii]) {
   b51dc:	290d      	cmp	r1, #13
   b51de:	d80a      	bhi.n	b51f6 <_ZN10JsonWriter12insertStringEPKcb+0xb2>
   b51e0:	2907      	cmp	r1, #7
   b51e2:	d90c      	bls.n	b51fe <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b51e4:	f1a1 0308 	sub.w	r3, r1, #8
   b51e8:	2b05      	cmp	r3, #5
   b51ea:	d808      	bhi.n	b51fe <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b51ec:	e8df f003 	tbb	[pc, r3]
   b51f0:	07172309 	.word	0x07172309
   b51f4:	1d11      	.short	0x1d11
   b51f6:	2922      	cmp	r1, #34	; 0x22
   b51f8:	d023      	beq.n	b5242 <_ZN10JsonWriter12insertStringEPKcb+0xfe>
   b51fa:	295c      	cmp	r1, #92	; 0x5c
   b51fc:	d021      	beq.n	b5242 <_ZN10JsonWriter12insertStringEPKcb+0xfe>
				insertChar(s[ii]);
   b51fe:	4620      	mov	r0, r4
   b5200:	e004      	b.n	b520c <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b5202:	215c      	movs	r1, #92	; 0x5c
   b5204:	4620      	mov	r0, r4
   b5206:	f7ff ff51 	bl	b50ac <_ZN10JsonWriter10insertCharEc>
				insertChar('b');
   b520a:	2162      	movs	r1, #98	; 0x62
				insertChar(s[ii]);
   b520c:	f7ff ff4e 	bl	b50ac <_ZN10JsonWriter10insertCharEc>
				break;
   b5210:	e7d1      	b.n	b51b6 <_ZN10JsonWriter12insertStringEPKcb+0x72>
				insertChar('\\');
   b5212:	215c      	movs	r1, #92	; 0x5c
   b5214:	4620      	mov	r0, r4
   b5216:	f7ff ff49 	bl	b50ac <_ZN10JsonWriter10insertCharEc>
				insertChar('f');
   b521a:	2166      	movs	r1, #102	; 0x66
   b521c:	e7f6      	b.n	b520c <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b521e:	215c      	movs	r1, #92	; 0x5c
   b5220:	4620      	mov	r0, r4
   b5222:	f7ff ff43 	bl	b50ac <_ZN10JsonWriter10insertCharEc>
				insertChar('n');
   b5226:	216e      	movs	r1, #110	; 0x6e
   b5228:	e7f0      	b.n	b520c <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b522a:	215c      	movs	r1, #92	; 0x5c
   b522c:	4620      	mov	r0, r4
   b522e:	f7ff ff3d 	bl	b50ac <_ZN10JsonWriter10insertCharEc>
				insertChar('r');
   b5232:	2172      	movs	r1, #114	; 0x72
   b5234:	e7ea      	b.n	b520c <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b5236:	215c      	movs	r1, #92	; 0x5c
   b5238:	4620      	mov	r0, r4
   b523a:	f7ff ff37 	bl	b50ac <_ZN10JsonWriter10insertCharEc>
				insertChar('t');
   b523e:	2174      	movs	r1, #116	; 0x74
   b5240:	e7e4      	b.n	b520c <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b5242:	215c      	movs	r1, #92	; 0x5c
   b5244:	4620      	mov	r0, r4
   b5246:	f7ff ff31 	bl	b50ac <_ZN10JsonWriter10insertCharEc>
				insertChar(s[ii]);
   b524a:	f899 1000 	ldrb.w	r1, [r9]
   b524e:	e7dd      	b.n	b520c <_ZN10JsonWriter12insertStringEPKcb+0xc8>
	if (quoted) {
   b5250:	b12f      	cbz	r7, b525e <_ZN10JsonWriter12insertStringEPKcb+0x11a>
		insertChar('"');
   b5252:	4620      	mov	r0, r4
   b5254:	2122      	movs	r1, #34	; 0x22
}
   b5256:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		insertChar('"');
   b525a:	f7ff bf27 	b.w	b50ac <_ZN10JsonWriter10insertCharEc>
}
   b525e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b5262:	bf00      	nop
   b5264:	000b8dec 	.word	0x000b8dec

000b5268 <_ZN10JsonWriter20insertCheckSeparatorEv>:

void JsonWriter::insertCheckSeparator() {
	if (context[contextIndex].isFirst) {
   b5268:	6942      	ldr	r2, [r0, #20]
   b526a:	eb00 0342 	add.w	r3, r0, r2, lsl #1
   b526e:	7e1a      	ldrb	r2, [r3, #24]
   b5270:	b112      	cbz	r2, b5278 <_ZN10JsonWriter20insertCheckSeparatorEv+0x10>
		context[contextIndex].isFirst = false;
   b5272:	2200      	movs	r2, #0
   b5274:	761a      	strb	r2, [r3, #24]
	}
	else {
		insertChar(',');
	}
}
   b5276:	4770      	bx	lr
		insertChar(',');
   b5278:	212c      	movs	r1, #44	; 0x2c
   b527a:	f7ff bf17 	b.w	b50ac <_ZN10JsonWriter10insertCharEc>

000b527e <_ZN10JsonWriter18startObjectOrArrayEcc>:
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   b527e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   b5280:	6943      	ldr	r3, [r0, #20]
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   b5282:	9101      	str	r1, [sp, #4]
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   b5284:	3301      	adds	r3, #1
   b5286:	2b08      	cmp	r3, #8
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   b5288:	4616      	mov	r6, r2
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   b528a:	d80f      	bhi.n	b52ac <_ZN10JsonWriter18startObjectOrArrayEcc+0x2e>
	insertCheckSeparator();
   b528c:	f7ff ffec 	bl	b5268 <_ZN10JsonWriter20insertCheckSeparatorEv>
	contextIndex++;
   b5290:	6943      	ldr	r3, [r0, #20]
	insertChar(startChar);
   b5292:	9901      	ldr	r1, [sp, #4]
   b5294:	eb00 0443 	add.w	r4, r0, r3, lsl #1
	contextIndex++;
   b5298:	1c5a      	adds	r2, r3, #1
	context[contextIndex].isFirst = true;
   b529a:	2501      	movs	r5, #1
	contextIndex++;
   b529c:	6142      	str	r2, [r0, #20]
	context[contextIndex].isFirst = true;
   b529e:	76a5      	strb	r5, [r4, #26]
	context[contextIndex].terminator = endChar;
   b52a0:	76e6      	strb	r6, [r4, #27]
	insertChar(startChar);
   b52a2:	f7ff ff03 	bl	b50ac <_ZN10JsonWriter10insertCharEc>
   b52a6:	4628      	mov	r0, r5
}
   b52a8:	b002      	add	sp, #8
   b52aa:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   b52ac:	2000      	movs	r0, #0
   b52ae:	e7fb      	b.n	b52a8 <_ZN10JsonWriter18startObjectOrArrayEcc+0x2a>

000b52b0 <_ZN10JsonWriter11insertValueEd>:
	}
	else {
		insertsprintf("%f", value);
	}
}
void JsonWriter::insertValue(double value) {
   b52b0:	b507      	push	{r0, r1, r2, lr}
	if (floatPlaces >= 0) {
   b52b2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   b52b4:	2900      	cmp	r1, #0
void JsonWriter::insertValue(double value) {
   b52b6:	ec53 2b10 	vmov	r2, r3, d0
	if (floatPlaces >= 0) {
   b52ba:	db08      	blt.n	b52ce <_ZN10JsonWriter11insertValueEd+0x1e>
		insertsprintf("%.*lf", floatPlaces, value);
   b52bc:	460a      	mov	r2, r1
   b52be:	ed8d 0b00 	vstr	d0, [sp]
   b52c2:	4906      	ldr	r1, [pc, #24]	; (b52dc <_ZN10JsonWriter11insertValueEd+0x2c>)
   b52c4:	f7ff ff31 	bl	b512a <_ZN10JsonWriter13insertsprintfEPKcz>
	}
	else {
		insertsprintf("%lf", value);
	}
}
   b52c8:	b003      	add	sp, #12
   b52ca:	f85d fb04 	ldr.w	pc, [sp], #4
		insertsprintf("%lf", value);
   b52ce:	4904      	ldr	r1, [pc, #16]	; (b52e0 <_ZN10JsonWriter11insertValueEd+0x30>)
}
   b52d0:	b003      	add	sp, #12
   b52d2:	f85d eb04 	ldr.w	lr, [sp], #4
		insertsprintf("%lf", value);
   b52d6:	f7ff bf28 	b.w	b512a <_ZN10JsonWriter13insertsprintfEPKcz>
   b52da:	bf00      	nop
   b52dc:	000b8df3 	.word	0x000b8df3
   b52e0:	000b8df9 	.word	0x000b8df9

000b52e4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b52e4:	b508      	push	{r3, lr}
   b52e6:	4b02      	ldr	r3, [pc, #8]	; (b52f0 <os_mutex_recursive_create+0xc>)
   b52e8:	681b      	ldr	r3, [r3, #0]
   b52ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b52ec:	9301      	str	r3, [sp, #4]
   b52ee:	bd08      	pop	{r3, pc}
   b52f0:	00030248 	.word	0x00030248

000b52f4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b52f4:	b508      	push	{r3, lr}
   b52f6:	4b02      	ldr	r3, [pc, #8]	; (b5300 <HAL_RNG_GetRandomNumber+0xc>)
   b52f8:	681b      	ldr	r3, [r3, #0]
   b52fa:	685b      	ldr	r3, [r3, #4]
   b52fc:	9301      	str	r3, [sp, #4]
   b52fe:	bd08      	pop	{r3, pc}
   b5300:	00030218 	.word	0x00030218

000b5304 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5304:	b508      	push	{r3, lr}
   b5306:	4b02      	ldr	r3, [pc, #8]	; (b5310 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5308:	681b      	ldr	r3, [r3, #0]
   b530a:	695b      	ldr	r3, [r3, #20]
   b530c:	9301      	str	r3, [sp, #4]
   b530e:	bd08      	pop	{r3, pc}
   b5310:	00030218 	.word	0x00030218

000b5314 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b5314:	b508      	push	{r3, lr}
   b5316:	4b02      	ldr	r3, [pc, #8]	; (b5320 <HAL_Validate_Pin_Function+0xc>)
   b5318:	681b      	ldr	r3, [r3, #0]
   b531a:	685b      	ldr	r3, [r3, #4]
   b531c:	9301      	str	r3, [sp, #4]
   b531e:	bd08      	pop	{r3, pc}
   b5320:	0003022c 	.word	0x0003022c

000b5324 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b5324:	b508      	push	{r3, lr}
   b5326:	4b02      	ldr	r3, [pc, #8]	; (b5330 <HAL_Pin_Mode+0xc>)
   b5328:	681b      	ldr	r3, [r3, #0]
   b532a:	689b      	ldr	r3, [r3, #8]
   b532c:	9301      	str	r3, [sp, #4]
   b532e:	bd08      	pop	{r3, pc}
   b5330:	0003022c 	.word	0x0003022c

000b5334 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b5334:	b508      	push	{r3, lr}
   b5336:	4b02      	ldr	r3, [pc, #8]	; (b5340 <HAL_Get_Pin_Mode+0xc>)
   b5338:	681b      	ldr	r3, [r3, #0]
   b533a:	68db      	ldr	r3, [r3, #12]
   b533c:	9301      	str	r3, [sp, #4]
   b533e:	bd08      	pop	{r3, pc}
   b5340:	0003022c 	.word	0x0003022c

000b5344 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b5344:	b508      	push	{r3, lr}
   b5346:	4b02      	ldr	r3, [pc, #8]	; (b5350 <HAL_GPIO_Write+0xc>)
   b5348:	681b      	ldr	r3, [r3, #0]
   b534a:	691b      	ldr	r3, [r3, #16]
   b534c:	9301      	str	r3, [sp, #4]
   b534e:	bd08      	pop	{r3, pc}
   b5350:	0003022c 	.word	0x0003022c

000b5354 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b5354:	b508      	push	{r3, lr}
   b5356:	4b02      	ldr	r3, [pc, #8]	; (b5360 <HAL_GPIO_Read+0xc>)
   b5358:	681b      	ldr	r3, [r3, #0]
   b535a:	695b      	ldr	r3, [r3, #20]
   b535c:	9301      	str	r3, [sp, #4]
   b535e:	bd08      	pop	{r3, pc}
   b5360:	0003022c 	.word	0x0003022c

000b5364 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b5364:	b508      	push	{r3, lr}
   b5366:	4b02      	ldr	r3, [pc, #8]	; (b5370 <hal_adc_read+0xc>)
   b5368:	681b      	ldr	r3, [r3, #0]
   b536a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b536c:	9301      	str	r3, [sp, #4]
   b536e:	bd08      	pop	{r3, pc}
   b5370:	0003022c 	.word	0x0003022c

000b5374 <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
   b5374:	b508      	push	{r3, lr}
   b5376:	4b02      	ldr	r3, [pc, #8]	; (b5380 <HAL_Pulse_In+0xc>)
   b5378:	681b      	ldr	r3, [r3, #0]
   b537a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b537c:	9301      	str	r3, [sp, #4]
   b537e:	bd08      	pop	{r3, pc}
   b5380:	0003022c 	.word	0x0003022c

000b5384 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b5384:	b508      	push	{r3, lr}
   b5386:	4b02      	ldr	r3, [pc, #8]	; (b5390 <hal_i2c_begin+0xc>)
   b5388:	681b      	ldr	r3, [r3, #0]
   b538a:	68db      	ldr	r3, [r3, #12]
   b538c:	9301      	str	r3, [sp, #4]
   b538e:	bd08      	pop	{r3, pc}
   b5390:	00030228 	.word	0x00030228

000b5394 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b5394:	b508      	push	{r3, lr}
   b5396:	4b02      	ldr	r3, [pc, #8]	; (b53a0 <hal_i2c_begin_transmission+0xc>)
   b5398:	681b      	ldr	r3, [r3, #0]
   b539a:	699b      	ldr	r3, [r3, #24]
   b539c:	9301      	str	r3, [sp, #4]
   b539e:	bd08      	pop	{r3, pc}
   b53a0:	00030228 	.word	0x00030228

000b53a4 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b53a4:	b508      	push	{r3, lr}
   b53a6:	4b02      	ldr	r3, [pc, #8]	; (b53b0 <hal_i2c_end_transmission+0xc>)
   b53a8:	681b      	ldr	r3, [r3, #0]
   b53aa:	69db      	ldr	r3, [r3, #28]
   b53ac:	9301      	str	r3, [sp, #4]
   b53ae:	bd08      	pop	{r3, pc}
   b53b0:	00030228 	.word	0x00030228

000b53b4 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b53b4:	b508      	push	{r3, lr}
   b53b6:	4b02      	ldr	r3, [pc, #8]	; (b53c0 <hal_i2c_write+0xc>)
   b53b8:	681b      	ldr	r3, [r3, #0]
   b53ba:	6a1b      	ldr	r3, [r3, #32]
   b53bc:	9301      	str	r3, [sp, #4]
   b53be:	bd08      	pop	{r3, pc}
   b53c0:	00030228 	.word	0x00030228

000b53c4 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b53c4:	b508      	push	{r3, lr}
   b53c6:	4b02      	ldr	r3, [pc, #8]	; (b53d0 <hal_i2c_available+0xc>)
   b53c8:	681b      	ldr	r3, [r3, #0]
   b53ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b53cc:	9301      	str	r3, [sp, #4]
   b53ce:	bd08      	pop	{r3, pc}
   b53d0:	00030228 	.word	0x00030228

000b53d4 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b53d4:	b508      	push	{r3, lr}
   b53d6:	4b02      	ldr	r3, [pc, #8]	; (b53e0 <hal_i2c_read+0xc>)
   b53d8:	681b      	ldr	r3, [r3, #0]
   b53da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b53dc:	9301      	str	r3, [sp, #4]
   b53de:	bd08      	pop	{r3, pc}
   b53e0:	00030228 	.word	0x00030228

000b53e4 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b53e4:	b508      	push	{r3, lr}
   b53e6:	4b02      	ldr	r3, [pc, #8]	; (b53f0 <hal_i2c_peek+0xc>)
   b53e8:	681b      	ldr	r3, [r3, #0]
   b53ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b53ec:	9301      	str	r3, [sp, #4]
   b53ee:	bd08      	pop	{r3, pc}
   b53f0:	00030228 	.word	0x00030228

000b53f4 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b53f4:	b508      	push	{r3, lr}
   b53f6:	4b02      	ldr	r3, [pc, #8]	; (b5400 <hal_i2c_flush+0xc>)
   b53f8:	681b      	ldr	r3, [r3, #0]
   b53fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b53fc:	9301      	str	r3, [sp, #4]
   b53fe:	bd08      	pop	{r3, pc}
   b5400:	00030228 	.word	0x00030228

000b5404 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b5404:	b508      	push	{r3, lr}
   b5406:	4b02      	ldr	r3, [pc, #8]	; (b5410 <hal_i2c_is_enabled+0xc>)
   b5408:	681b      	ldr	r3, [r3, #0]
   b540a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b540c:	9301      	str	r3, [sp, #4]
   b540e:	bd08      	pop	{r3, pc}
   b5410:	00030228 	.word	0x00030228

000b5414 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b5414:	b508      	push	{r3, lr}
   b5416:	4b02      	ldr	r3, [pc, #8]	; (b5420 <hal_i2c_init+0xc>)
   b5418:	681b      	ldr	r3, [r3, #0]
   b541a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b541c:	9301      	str	r3, [sp, #4]
   b541e:	bd08      	pop	{r3, pc}
   b5420:	00030228 	.word	0x00030228

000b5424 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b5424:	b508      	push	{r3, lr}
   b5426:	4b02      	ldr	r3, [pc, #8]	; (b5430 <hal_i2c_request_ex+0xc>)
   b5428:	681b      	ldr	r3, [r3, #0]
   b542a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b542c:	9301      	str	r3, [sp, #4]
   b542e:	bd08      	pop	{r3, pc}
   b5430:	00030228 	.word	0x00030228

000b5434 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5434:	b508      	push	{r3, lr}
   b5436:	4b02      	ldr	r3, [pc, #8]	; (b5440 <inet_inet_ntop+0xc>)
   b5438:	681b      	ldr	r3, [r3, #0]
   b543a:	695b      	ldr	r3, [r3, #20]
   b543c:	9301      	str	r3, [sp, #4]
   b543e:	bd08      	pop	{r3, pc}
   b5440:	00030264 	.word	0x00030264

000b5444 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5444:	b508      	push	{r3, lr}
   b5446:	4b02      	ldr	r3, [pc, #8]	; (b5450 <netdb_freeaddrinfo+0xc>)
   b5448:	681b      	ldr	r3, [r3, #0]
   b544a:	689b      	ldr	r3, [r3, #8]
   b544c:	9301      	str	r3, [sp, #4]
   b544e:	bd08      	pop	{r3, pc}
   b5450:	00030268 	.word	0x00030268

000b5454 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5454:	b508      	push	{r3, lr}
   b5456:	4b02      	ldr	r3, [pc, #8]	; (b5460 <netdb_getaddrinfo+0xc>)
   b5458:	681b      	ldr	r3, [r3, #0]
   b545a:	68db      	ldr	r3, [r3, #12]
   b545c:	9301      	str	r3, [sp, #4]
   b545e:	bd08      	pop	{r3, pc}
   b5460:	00030268 	.word	0x00030268

000b5464 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b5464:	b508      	push	{r3, lr}
   b5466:	4b02      	ldr	r3, [pc, #8]	; (b5470 <hal_spi_begin+0xc>)
   b5468:	681b      	ldr	r3, [r3, #0]
   b546a:	681b      	ldr	r3, [r3, #0]
   b546c:	9301      	str	r3, [sp, #4]
   b546e:	bd08      	pop	{r3, pc}
   b5470:	00030230 	.word	0x00030230

000b5474 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b5474:	b508      	push	{r3, lr}
   b5476:	4b02      	ldr	r3, [pc, #8]	; (b5480 <hal_spi_transfer+0xc>)
   b5478:	681b      	ldr	r3, [r3, #0]
   b547a:	695b      	ldr	r3, [r3, #20]
   b547c:	9301      	str	r3, [sp, #4]
   b547e:	bd08      	pop	{r3, pc}
   b5480:	00030230 	.word	0x00030230

000b5484 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b5484:	b508      	push	{r3, lr}
   b5486:	4b02      	ldr	r3, [pc, #8]	; (b5490 <hal_spi_init+0xc>)
   b5488:	681b      	ldr	r3, [r3, #0]
   b548a:	69db      	ldr	r3, [r3, #28]
   b548c:	9301      	str	r3, [sp, #4]
   b548e:	bd08      	pop	{r3, pc}
   b5490:	00030230 	.word	0x00030230

000b5494 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b5494:	b508      	push	{r3, lr}
   b5496:	4b02      	ldr	r3, [pc, #8]	; (b54a0 <hal_spi_is_enabled+0xc>)
   b5498:	681b      	ldr	r3, [r3, #0]
   b549a:	6a1b      	ldr	r3, [r3, #32]
   b549c:	9301      	str	r3, [sp, #4]
   b549e:	bd08      	pop	{r3, pc}
   b54a0:	00030230 	.word	0x00030230

000b54a4 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b54a4:	b508      	push	{r3, lr}
   b54a6:	4b02      	ldr	r3, [pc, #8]	; (b54b0 <hal_spi_info+0xc>)
   b54a8:	681b      	ldr	r3, [r3, #0]
   b54aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b54ac:	9301      	str	r3, [sp, #4]
   b54ae:	bd08      	pop	{r3, pc}
   b54b0:	00030230 	.word	0x00030230

000b54b4 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b54b4:	b508      	push	{r3, lr}
   b54b6:	4b02      	ldr	r3, [pc, #8]	; (b54c0 <hal_spi_set_settings+0xc>)
   b54b8:	681b      	ldr	r3, [r3, #0]
   b54ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b54bc:	9301      	str	r3, [sp, #4]
   b54be:	bd08      	pop	{r3, pc}
   b54c0:	00030230 	.word	0x00030230

000b54c4 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b54c4:	b508      	push	{r3, lr}
   b54c6:	4b02      	ldr	r3, [pc, #8]	; (b54d0 <hal_spi_acquire+0xc>)
   b54c8:	681b      	ldr	r3, [r3, #0]
   b54ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b54cc:	9301      	str	r3, [sp, #4]
   b54ce:	bd08      	pop	{r3, pc}
   b54d0:	00030230 	.word	0x00030230

000b54d4 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b54d4:	b508      	push	{r3, lr}
   b54d6:	4b02      	ldr	r3, [pc, #8]	; (b54e0 <hal_spi_release+0xc>)
   b54d8:	681b      	ldr	r3, [r3, #0]
   b54da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b54dc:	9301      	str	r3, [sp, #4]
   b54de:	bd08      	pop	{r3, pc}
   b54e0:	00030230 	.word	0x00030230

000b54e4 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b54e4:	b508      	push	{r3, lr}
   b54e6:	4b02      	ldr	r3, [pc, #8]	; (b54f0 <hal_usart_write+0xc>)
   b54e8:	681b      	ldr	r3, [r3, #0]
   b54ea:	68db      	ldr	r3, [r3, #12]
   b54ec:	9301      	str	r3, [sp, #4]
   b54ee:	bd08      	pop	{r3, pc}
   b54f0:	0003023c 	.word	0x0003023c

000b54f4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b54f4:	b508      	push	{r3, lr}
   b54f6:	4b02      	ldr	r3, [pc, #8]	; (b5500 <hal_usart_available+0xc>)
   b54f8:	681b      	ldr	r3, [r3, #0]
   b54fa:	691b      	ldr	r3, [r3, #16]
   b54fc:	9301      	str	r3, [sp, #4]
   b54fe:	bd08      	pop	{r3, pc}
   b5500:	0003023c 	.word	0x0003023c

000b5504 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5504:	b508      	push	{r3, lr}
   b5506:	4b02      	ldr	r3, [pc, #8]	; (b5510 <hal_usart_read+0xc>)
   b5508:	681b      	ldr	r3, [r3, #0]
   b550a:	695b      	ldr	r3, [r3, #20]
   b550c:	9301      	str	r3, [sp, #4]
   b550e:	bd08      	pop	{r3, pc}
   b5510:	0003023c 	.word	0x0003023c

000b5514 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5514:	b508      	push	{r3, lr}
   b5516:	4b02      	ldr	r3, [pc, #8]	; (b5520 <hal_usart_peek+0xc>)
   b5518:	681b      	ldr	r3, [r3, #0]
   b551a:	699b      	ldr	r3, [r3, #24]
   b551c:	9301      	str	r3, [sp, #4]
   b551e:	bd08      	pop	{r3, pc}
   b5520:	0003023c 	.word	0x0003023c

000b5524 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5524:	b508      	push	{r3, lr}
   b5526:	4b02      	ldr	r3, [pc, #8]	; (b5530 <hal_usart_flush+0xc>)
   b5528:	681b      	ldr	r3, [r3, #0]
   b552a:	69db      	ldr	r3, [r3, #28]
   b552c:	9301      	str	r3, [sp, #4]
   b552e:	bd08      	pop	{r3, pc}
   b5530:	0003023c 	.word	0x0003023c

000b5534 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b5534:	b508      	push	{r3, lr}
   b5536:	4b02      	ldr	r3, [pc, #8]	; (b5540 <hal_usart_is_enabled+0xc>)
   b5538:	681b      	ldr	r3, [r3, #0]
   b553a:	6a1b      	ldr	r3, [r3, #32]
   b553c:	9301      	str	r3, [sp, #4]
   b553e:	bd08      	pop	{r3, pc}
   b5540:	0003023c 	.word	0x0003023c

000b5544 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5544:	b508      	push	{r3, lr}
   b5546:	4b02      	ldr	r3, [pc, #8]	; (b5550 <hal_usart_available_data_for_write+0xc>)
   b5548:	681b      	ldr	r3, [r3, #0]
   b554a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b554c:	9301      	str	r3, [sp, #4]
   b554e:	bd08      	pop	{r3, pc}
   b5550:	0003023c 	.word	0x0003023c

000b5554 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5554:	b508      	push	{r3, lr}
   b5556:	4b02      	ldr	r3, [pc, #8]	; (b5560 <hal_usart_init_ex+0xc>)
   b5558:	681b      	ldr	r3, [r3, #0]
   b555a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b555c:	9301      	str	r3, [sp, #4]
   b555e:	bd08      	pop	{r3, pc}
   b5560:	0003023c 	.word	0x0003023c

000b5564 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b5564:	b508      	push	{r3, lr}
   b5566:	4b02      	ldr	r3, [pc, #8]	; (b5570 <HAL_USB_USART_Init+0xc>)
   b5568:	681b      	ldr	r3, [r3, #0]
   b556a:	681b      	ldr	r3, [r3, #0]
   b556c:	9301      	str	r3, [sp, #4]
   b556e:	bd08      	pop	{r3, pc}
   b5570:	0003024c 	.word	0x0003024c

000b5574 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b5574:	b508      	push	{r3, lr}
   b5576:	4b02      	ldr	r3, [pc, #8]	; (b5580 <HAL_USB_USART_Begin+0xc>)
   b5578:	681b      	ldr	r3, [r3, #0]
   b557a:	685b      	ldr	r3, [r3, #4]
   b557c:	9301      	str	r3, [sp, #4]
   b557e:	bd08      	pop	{r3, pc}
   b5580:	0003024c 	.word	0x0003024c

000b5584 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b5584:	b508      	push	{r3, lr}
   b5586:	4b02      	ldr	r3, [pc, #8]	; (b5590 <HAL_USB_USART_Available_Data+0xc>)
   b5588:	681b      	ldr	r3, [r3, #0]
   b558a:	691b      	ldr	r3, [r3, #16]
   b558c:	9301      	str	r3, [sp, #4]
   b558e:	bd08      	pop	{r3, pc}
   b5590:	0003024c 	.word	0x0003024c

000b5594 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b5594:	b508      	push	{r3, lr}
   b5596:	4b02      	ldr	r3, [pc, #8]	; (b55a0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b5598:	681b      	ldr	r3, [r3, #0]
   b559a:	695b      	ldr	r3, [r3, #20]
   b559c:	9301      	str	r3, [sp, #4]
   b559e:	bd08      	pop	{r3, pc}
   b55a0:	0003024c 	.word	0x0003024c

000b55a4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b55a4:	b508      	push	{r3, lr}
   b55a6:	4b02      	ldr	r3, [pc, #8]	; (b55b0 <HAL_USB_USART_Receive_Data+0xc>)
   b55a8:	681b      	ldr	r3, [r3, #0]
   b55aa:	699b      	ldr	r3, [r3, #24]
   b55ac:	9301      	str	r3, [sp, #4]
   b55ae:	bd08      	pop	{r3, pc}
   b55b0:	0003024c 	.word	0x0003024c

000b55b4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b55b4:	b508      	push	{r3, lr}
   b55b6:	4b02      	ldr	r3, [pc, #8]	; (b55c0 <HAL_USB_USART_Send_Data+0xc>)
   b55b8:	681b      	ldr	r3, [r3, #0]
   b55ba:	69db      	ldr	r3, [r3, #28]
   b55bc:	9301      	str	r3, [sp, #4]
   b55be:	bd08      	pop	{r3, pc}
   b55c0:	0003024c 	.word	0x0003024c

000b55c4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b55c4:	b508      	push	{r3, lr}
   b55c6:	4b02      	ldr	r3, [pc, #8]	; (b55d0 <HAL_USB_USART_Flush_Data+0xc>)
   b55c8:	681b      	ldr	r3, [r3, #0]
   b55ca:	6a1b      	ldr	r3, [r3, #32]
   b55cc:	9301      	str	r3, [sp, #4]
   b55ce:	bd08      	pop	{r3, pc}
   b55d0:	0003024c 	.word	0x0003024c

000b55d4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b55d4:	b508      	push	{r3, lr}
   b55d6:	4b02      	ldr	r3, [pc, #8]	; (b55e0 <set_system_mode+0xc>)
   b55d8:	681b      	ldr	r3, [r3, #0]
   b55da:	685b      	ldr	r3, [r3, #4]
   b55dc:	9301      	str	r3, [sp, #4]
   b55de:	bd08      	pop	{r3, pc}
   b55e0:	00030220 	.word	0x00030220

000b55e4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b55e4:	b508      	push	{r3, lr}
   b55e6:	4b02      	ldr	r3, [pc, #8]	; (b55f0 <system_delay_ms+0xc>)
   b55e8:	681b      	ldr	r3, [r3, #0]
   b55ea:	695b      	ldr	r3, [r3, #20]
   b55ec:	9301      	str	r3, [sp, #4]
   b55ee:	bd08      	pop	{r3, pc}
   b55f0:	00030220 	.word	0x00030220

000b55f4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b55f4:	b508      	push	{r3, lr}
   b55f6:	4b02      	ldr	r3, [pc, #8]	; (b5600 <application_thread_current+0xc>)
   b55f8:	681b      	ldr	r3, [r3, #0]
   b55fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b55fc:	9301      	str	r3, [sp, #4]
   b55fe:	bd08      	pop	{r3, pc}
   b5600:	00030220 	.word	0x00030220

000b5604 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b5604:	b508      	push	{r3, lr}
   b5606:	4b02      	ldr	r3, [pc, #8]	; (b5610 <application_thread_invoke+0xc>)
   b5608:	681b      	ldr	r3, [r3, #0]
   b560a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b560c:	9301      	str	r3, [sp, #4]
   b560e:	bd08      	pop	{r3, pc}
   b5610:	00030220 	.word	0x00030220

000b5614 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b5614:	b508      	push	{r3, lr}
   b5616:	4b03      	ldr	r3, [pc, #12]	; (b5624 <system_ctrl_set_app_request_handler+0x10>)
   b5618:	681b      	ldr	r3, [r3, #0]
   b561a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b561e:	9301      	str	r3, [sp, #4]
   b5620:	bd08      	pop	{r3, pc}
   b5622:	0000      	.short	0x0000
   b5624:	00030220 	.word	0x00030220

000b5628 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b5628:	b508      	push	{r3, lr}
   b562a:	4b03      	ldr	r3, [pc, #12]	; (b5638 <system_ctrl_set_result+0x10>)
   b562c:	681b      	ldr	r3, [r3, #0]
   b562e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b5632:	9301      	str	r3, [sp, #4]
   b5634:	bd08      	pop	{r3, pc}
   b5636:	0000      	.short	0x0000
   b5638:	00030220 	.word	0x00030220

000b563c <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b563c:	b508      	push	{r3, lr}
   b563e:	4b02      	ldr	r3, [pc, #8]	; (b5648 <spark_cloud_flag_connected+0xc>)
   b5640:	681b      	ldr	r3, [r3, #0]
   b5642:	695b      	ldr	r3, [r3, #20]
   b5644:	9301      	str	r3, [sp, #4]
   b5646:	bd08      	pop	{r3, pc}
   b5648:	00030244 	.word	0x00030244

000b564c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b564c:	b508      	push	{r3, lr}
   b564e:	4b02      	ldr	r3, [pc, #8]	; (b5658 <spark_send_event+0xc>)
   b5650:	681b      	ldr	r3, [r3, #0]
   b5652:	6a1b      	ldr	r3, [r3, #32]
   b5654:	9301      	str	r3, [sp, #4]
   b5656:	bd08      	pop	{r3, pc}
   b5658:	00030244 	.word	0x00030244

000b565c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b565c:	b508      	push	{r3, lr}
   b565e:	4b02      	ldr	r3, [pc, #8]	; (b5668 <spark_set_random_seed_from_cloud_handler+0xc>)
   b5660:	681b      	ldr	r3, [r3, #0]
   b5662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5664:	9301      	str	r3, [sp, #4]
   b5666:	bd08      	pop	{r3, pc}
   b5668:	00030244 	.word	0x00030244

000b566c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b566c:	b508      	push	{r3, lr}
   b566e:	4b02      	ldr	r3, [pc, #8]	; (b5678 <network_connect+0xc>)
   b5670:	681b      	ldr	r3, [r3, #0]
   b5672:	685b      	ldr	r3, [r3, #4]
   b5674:	9301      	str	r3, [sp, #4]
   b5676:	bd08      	pop	{r3, pc}
   b5678:	00030240 	.word	0x00030240

000b567c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b567c:	b508      	push	{r3, lr}
   b567e:	4b02      	ldr	r3, [pc, #8]	; (b5688 <network_connecting+0xc>)
   b5680:	681b      	ldr	r3, [r3, #0]
   b5682:	689b      	ldr	r3, [r3, #8]
   b5684:	9301      	str	r3, [sp, #4]
   b5686:	bd08      	pop	{r3, pc}
   b5688:	00030240 	.word	0x00030240

000b568c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b568c:	b508      	push	{r3, lr}
   b568e:	4b02      	ldr	r3, [pc, #8]	; (b5698 <network_disconnect+0xc>)
   b5690:	681b      	ldr	r3, [r3, #0]
   b5692:	68db      	ldr	r3, [r3, #12]
   b5694:	9301      	str	r3, [sp, #4]
   b5696:	bd08      	pop	{r3, pc}
   b5698:	00030240 	.word	0x00030240

000b569c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b569c:	b508      	push	{r3, lr}
   b569e:	4b02      	ldr	r3, [pc, #8]	; (b56a8 <network_ready+0xc>)
   b56a0:	681b      	ldr	r3, [r3, #0]
   b56a2:	691b      	ldr	r3, [r3, #16]
   b56a4:	9301      	str	r3, [sp, #4]
   b56a6:	bd08      	pop	{r3, pc}
   b56a8:	00030240 	.word	0x00030240

000b56ac <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b56ac:	b508      	push	{r3, lr}
   b56ae:	4b02      	ldr	r3, [pc, #8]	; (b56b8 <network_on+0xc>)
   b56b0:	681b      	ldr	r3, [r3, #0]
   b56b2:	695b      	ldr	r3, [r3, #20]
   b56b4:	9301      	str	r3, [sp, #4]
   b56b6:	bd08      	pop	{r3, pc}
   b56b8:	00030240 	.word	0x00030240

000b56bc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b56bc:	b508      	push	{r3, lr}
   b56be:	4b02      	ldr	r3, [pc, #8]	; (b56c8 <network_off+0xc>)
   b56c0:	681b      	ldr	r3, [r3, #0]
   b56c2:	699b      	ldr	r3, [r3, #24]
   b56c4:	9301      	str	r3, [sp, #4]
   b56c6:	bd08      	pop	{r3, pc}
   b56c8:	00030240 	.word	0x00030240

000b56cc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b56cc:	b508      	push	{r3, lr}
   b56ce:	4b02      	ldr	r3, [pc, #8]	; (b56d8 <network_listen+0xc>)
   b56d0:	681b      	ldr	r3, [r3, #0]
   b56d2:	69db      	ldr	r3, [r3, #28]
   b56d4:	9301      	str	r3, [sp, #4]
   b56d6:	bd08      	pop	{r3, pc}
   b56d8:	00030240 	.word	0x00030240

000b56dc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b56dc:	b508      	push	{r3, lr}
   b56de:	4b02      	ldr	r3, [pc, #8]	; (b56e8 <network_listening+0xc>)
   b56e0:	681b      	ldr	r3, [r3, #0]
   b56e2:	6a1b      	ldr	r3, [r3, #32]
   b56e4:	9301      	str	r3, [sp, #4]
   b56e6:	bd08      	pop	{r3, pc}
   b56e8:	00030240 	.word	0x00030240

000b56ec <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b56ec:	b508      	push	{r3, lr}
   b56ee:	4b02      	ldr	r3, [pc, #8]	; (b56f8 <network_set_listen_timeout+0xc>)
   b56f0:	681b      	ldr	r3, [r3, #0]
   b56f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b56f4:	9301      	str	r3, [sp, #4]
   b56f6:	bd08      	pop	{r3, pc}
   b56f8:	00030240 	.word	0x00030240

000b56fc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b56fc:	b508      	push	{r3, lr}
   b56fe:	4b02      	ldr	r3, [pc, #8]	; (b5708 <network_get_listen_timeout+0xc>)
   b5700:	681b      	ldr	r3, [r3, #0]
   b5702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5704:	9301      	str	r3, [sp, #4]
   b5706:	bd08      	pop	{r3, pc}
   b5708:	00030240 	.word	0x00030240

000b570c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b570c:	b508      	push	{r3, lr}
   b570e:	4b02      	ldr	r3, [pc, #8]	; (b5718 <network_is_on+0xc>)
   b5710:	681b      	ldr	r3, [r3, #0]
   b5712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5714:	9301      	str	r3, [sp, #4]
   b5716:	bd08      	pop	{r3, pc}
   b5718:	00030240 	.word	0x00030240

000b571c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b571c:	b508      	push	{r3, lr}
   b571e:	4b02      	ldr	r3, [pc, #8]	; (b5728 <network_is_off+0xc>)
   b5720:	681b      	ldr	r3, [r3, #0]
   b5722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5724:	9301      	str	r3, [sp, #4]
   b5726:	bd08      	pop	{r3, pc}
   b5728:	00030240 	.word	0x00030240

000b572c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b572c:	b508      	push	{r3, lr}
   b572e:	4b02      	ldr	r3, [pc, #8]	; (b5738 <malloc+0xc>)
   b5730:	681b      	ldr	r3, [r3, #0]
   b5732:	681b      	ldr	r3, [r3, #0]
   b5734:	9301      	str	r3, [sp, #4]
   b5736:	bd08      	pop	{r3, pc}
   b5738:	0003021c 	.word	0x0003021c

000b573c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b573c:	b508      	push	{r3, lr}
   b573e:	4b02      	ldr	r3, [pc, #8]	; (b5748 <free+0xc>)
   b5740:	681b      	ldr	r3, [r3, #0]
   b5742:	685b      	ldr	r3, [r3, #4]
   b5744:	9301      	str	r3, [sp, #4]
   b5746:	bd08      	pop	{r3, pc}
   b5748:	0003021c 	.word	0x0003021c

000b574c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b574c:	b508      	push	{r3, lr}
   b574e:	4b02      	ldr	r3, [pc, #8]	; (b5758 <realloc+0xc>)
   b5750:	681b      	ldr	r3, [r3, #0]
   b5752:	689b      	ldr	r3, [r3, #8]
   b5754:	9301      	str	r3, [sp, #4]
   b5756:	bd08      	pop	{r3, pc}
   b5758:	0003021c 	.word	0x0003021c

000b575c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b575c:	b508      	push	{r3, lr}
   b575e:	4b02      	ldr	r3, [pc, #8]	; (b5768 <vsnprintf+0xc>)
   b5760:	681b      	ldr	r3, [r3, #0]
   b5762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5764:	9301      	str	r3, [sp, #4]
   b5766:	bd08      	pop	{r3, pc}
   b5768:	0003021c 	.word	0x0003021c

000b576c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b576c:	b508      	push	{r3, lr}
   b576e:	4b02      	ldr	r3, [pc, #8]	; (b5778 <abort+0xc>)
   b5770:	681b      	ldr	r3, [r3, #0]
   b5772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5774:	9301      	str	r3, [sp, #4]
   b5776:	bd08      	pop	{r3, pc}
   b5778:	0003021c 	.word	0x0003021c

000b577c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b577c:	b508      	push	{r3, lr}
   b577e:	4b02      	ldr	r3, [pc, #8]	; (b5788 <_malloc_r+0xc>)
   b5780:	681b      	ldr	r3, [r3, #0]
   b5782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5784:	9301      	str	r3, [sp, #4]
   b5786:	bd08      	pop	{r3, pc}
   b5788:	0003021c 	.word	0x0003021c

000b578c <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b578c:	b508      	push	{r3, lr}
   b578e:	4b02      	ldr	r3, [pc, #8]	; (b5798 <__errno+0xc>)
   b5790:	681b      	ldr	r3, [r3, #0]
   b5792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5794:	9301      	str	r3, [sp, #4]
   b5796:	bd08      	pop	{r3, pc}
   b5798:	0003021c 	.word	0x0003021c

000b579c <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b579c:	b508      	push	{r3, lr}
   b579e:	4b02      	ldr	r3, [pc, #8]	; (b57a8 <__assert_func+0xc>)
   b57a0:	681b      	ldr	r3, [r3, #0]
   b57a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b57a4:	9301      	str	r3, [sp, #4]
   b57a6:	bd08      	pop	{r3, pc}
   b57a8:	0003021c 	.word	0x0003021c

000b57ac <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b57ac:	b508      	push	{r3, lr}
   b57ae:	4b02      	ldr	r3, [pc, #8]	; (b57b8 <newlib_impure_ptr_callback+0xc>)
   b57b0:	681b      	ldr	r3, [r3, #0]
   b57b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b57b4:	9301      	str	r3, [sp, #4]
   b57b6:	bd08      	pop	{r3, pc}
   b57b8:	0003021c 	.word	0x0003021c

000b57bc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b57bc:	2100      	movs	r1, #0
   b57be:	f7ff bf11 	b.w	b55e4 <system_delay_ms>

000b57c2 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b57c2:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b57c4:	6883      	ldr	r3, [r0, #8]
   b57c6:	4604      	mov	r4, r0
   b57c8:	b90b      	cbnz	r3, b57ce <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b57ca:	f001 f971 	bl	b6ab0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b57ce:	68c3      	ldr	r3, [r0, #12]
   b57d0:	4798      	blx	r3
      if (_M_manager)
   b57d2:	68a3      	ldr	r3, [r4, #8]
   b57d4:	b11b      	cbz	r3, b57de <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b57d6:	2203      	movs	r2, #3
   b57d8:	4621      	mov	r1, r4
   b57da:	4620      	mov	r0, r4
   b57dc:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b57de:	4620      	mov	r0, r4
   b57e0:	2110      	movs	r1, #16
}
   b57e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b57e6:	f7fe bc5a 	b.w	b409e <_ZdlPvj>

000b57ea <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b57ea:	b510      	push	{r4, lr}
      if (_M_manager)
   b57ec:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b57ee:	4604      	mov	r4, r0
      if (_M_manager)
   b57f0:	b113      	cbz	r3, b57f8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b57f2:	2203      	movs	r2, #3
   b57f4:	4601      	mov	r1, r0
   b57f6:	4798      	blx	r3
    }
   b57f8:	4620      	mov	r0, r4
   b57fa:	bd10      	pop	{r4, pc}

000b57fc <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b57fc:	b513      	push	{r0, r1, r4, lr}
   b57fe:	460b      	mov	r3, r1
   b5800:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5802:	e9d0 0100 	ldrd	r0, r1, [r0]
   b5806:	466c      	mov	r4, sp
   b5808:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b580c:	e893 0003 	ldmia.w	r3, {r0, r1}
   b5810:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b5814:	e894 0003 	ldmia.w	r4, {r0, r1}
   b5818:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b581c:	b002      	add	sp, #8
   b581e:	bd10      	pop	{r4, pc}

000b5820 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b5820:	4802      	ldr	r0, [pc, #8]	; (b582c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b5822:	2300      	movs	r3, #0
   b5824:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b5826:	f7ff bd5d 	b.w	b52e4 <os_mutex_recursive_create>
   b582a:	bf00      	nop
   b582c:	2003e6c4 	.word	0x2003e6c4

000b5830 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b5830:	4770      	bx	lr

000b5832 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b5832:	2000      	movs	r0, #0
   b5834:	4770      	bx	lr

000b5836 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b5836:	b510      	push	{r4, lr}
   b5838:	2110      	movs	r1, #16
   b583a:	4604      	mov	r4, r0
   b583c:	f7fe fc2f 	bl	b409e <_ZdlPvj>
   b5840:	4620      	mov	r0, r4
   b5842:	bd10      	pop	{r4, pc}

000b5844 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b5844:	b508      	push	{r3, lr}
      { delete this; }
   b5846:	f7ff fff6 	bl	b5836 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b584a:	bd08      	pop	{r3, pc}

000b584c <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b584c:	b530      	push	{r4, r5, lr}
        type_(type) {
   b584e:	2200      	movs	r2, #0
   b5850:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b5854:	6002      	str	r2, [r0, #0]
   b5856:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5858:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b585a:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b585c:	680c      	ldr	r4, [r1, #0]
   b585e:	8085      	strh	r5, [r0, #4]
   b5860:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b5862:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b5864:	bd30      	pop	{r4, r5, pc}

000b5866 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b5866:	b510      	push	{r4, lr}
   b5868:	4604      	mov	r4, r0
    free((void*)msg_);
   b586a:	6800      	ldr	r0, [r0, #0]
   b586c:	f7ff ff66 	bl	b573c <free>
}
   b5870:	4620      	mov	r0, r4
   b5872:	bd10      	pop	{r4, pc}

000b5874 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b5874:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b5876:	68c4      	ldr	r4, [r0, #12]
   b5878:	b1f4      	cbz	r4, b58b8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b587a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b587c:	2b02      	cmp	r3, #2
   b587e:	d103      	bne.n	b5888 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b5880:	f104 000c 	add.w	r0, r4, #12
   b5884:	f7ff ffef 	bl	b5866 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b5888:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b588a:	b135      	cbz	r5, b589a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b588c:	4628      	mov	r0, r5
   b588e:	f7ff ffac 	bl	b57ea <_ZNSt14_Function_baseD1Ev>
   b5892:	2110      	movs	r1, #16
   b5894:	4628      	mov	r0, r5
   b5896:	f7fe fc02 	bl	b409e <_ZdlPvj>
   b589a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b589c:	b135      	cbz	r5, b58ac <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b589e:	4628      	mov	r0, r5
   b58a0:	f7ff ffa3 	bl	b57ea <_ZNSt14_Function_baseD1Ev>
   b58a4:	2110      	movs	r1, #16
   b58a6:	4628      	mov	r0, r5
   b58a8:	f7fe fbf9 	bl	b409e <_ZdlPvj>
   b58ac:	4620      	mov	r0, r4
   b58ae:	2114      	movs	r1, #20
   b58b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b58b4:	f7fe bbf3 	b.w	b409e <_ZdlPvj>
   b58b8:	bd38      	pop	{r3, r4, r5, pc}

000b58ba <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b58ba:	680b      	ldr	r3, [r1, #0]
   b58bc:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b58be:	684b      	ldr	r3, [r1, #4]
   b58c0:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b58c2:	b113      	cbz	r3, b58ca <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b58c4:	685a      	ldr	r2, [r3, #4]
   b58c6:	3201      	adds	r2, #1
   b58c8:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b58ca:	4770      	bx	lr

000b58cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b58cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b58ce:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b58d0:	4668      	mov	r0, sp
   b58d2:	460d      	mov	r5, r1
   b58d4:	f7ff fff1 	bl	b58ba <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b58d8:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b58da:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b58dc:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b58de:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b58e0:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b58e2:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b58e4:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b58e6:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b58e8:	f7fe fce8 	bl	b42bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b58ec:	b135      	cbz	r5, b58fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b58ee:	1d28      	adds	r0, r5, #4
   b58f0:	f7fe fce4 	bl	b42bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b58f4:	2108      	movs	r1, #8
   b58f6:	4628      	mov	r0, r5
   b58f8:	f7fe fbd1 	bl	b409e <_ZdlPvj>
        return p;
    }
   b58fc:	4620      	mov	r0, r4
   b58fe:	b003      	add	sp, #12
   b5900:	bd30      	pop	{r4, r5, pc}

000b5902 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b5902:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b5904:	b510      	push	{r4, lr}
      if (_M_empty())
   b5906:	b90a      	cbnz	r2, b590c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b5908:	f001 f8d2 	bl	b6ab0 <_ZSt25__throw_bad_function_callv>
    }
   b590c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5910:	68c3      	ldr	r3, [r0, #12]
   b5912:	4718      	bx	r3

000b5914 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b5914:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b5916:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b5918:	f100 0110 	add.w	r1, r0, #16
   b591c:	f7ff fff1 	bl	b5902 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b5920:	bd08      	pop	{r3, pc}

000b5922 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b5922:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b5924:	b510      	push	{r4, lr}
      if (_M_empty())
   b5926:	b90a      	cbnz	r2, b592c <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b5928:	f001 f8c2 	bl	b6ab0 <_ZSt25__throw_bad_function_callv>
    }
   b592c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5930:	68c3      	ldr	r3, [r0, #12]
   b5932:	4718      	bx	r3

000b5934 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b5934:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b5936:	6800      	ldr	r0, [r0, #0]
   b5938:	f100 0110 	add.w	r1, r0, #16
   b593c:	f7ff fff1 	bl	b5922 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b5940:	bd08      	pop	{r3, pc}
	...

000b5944 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b5944:	b538      	push	{r3, r4, r5, lr}
   b5946:	2300      	movs	r3, #0
   b5948:	4604      	mov	r4, r0
   b594a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b594c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b594e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b5950:	f7fe fba1 	bl	b4096 <_Znwj>
   b5954:	b128      	cbz	r0, b5962 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b5956:	2301      	movs	r3, #1
   b5958:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b595c:	4b02      	ldr	r3, [pc, #8]	; (b5968 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b595e:	6003      	str	r3, [r0, #0]
   b5960:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b5962:	6020      	str	r0, [r4, #0]
	}
   b5964:	4620      	mov	r0, r4
   b5966:	bd38      	pop	{r3, r4, r5, pc}
   b5968:	000b8e28 	.word	0x000b8e28

000b596c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b596c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b596e:	2300      	movs	r3, #0
   b5970:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b5972:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b5974:	4604      	mov	r4, r0
   b5976:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b5978:	b12b      	cbz	r3, b5986 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b597a:	2202      	movs	r2, #2
   b597c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b597e:	68eb      	ldr	r3, [r5, #12]
   b5980:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b5982:	68ab      	ldr	r3, [r5, #8]
   b5984:	60a3      	str	r3, [r4, #8]
    }
   b5986:	4620      	mov	r0, r4
   b5988:	bd38      	pop	{r3, r4, r5, pc}
	...

000b598c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b598c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b598e:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b5990:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b5992:	4668      	mov	r0, sp
   b5994:	f7ff ff5a 	bl	b584c <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b5998:	f04f 0302 	mov.w	r3, #2
   b599c:	e8d4 2f4f 	ldrexb	r2, [r4]
   b59a0:	2a00      	cmp	r2, #0
   b59a2:	d103      	bne.n	b59ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b59a4:	e8c4 3f41 	strexb	r1, r3, [r4]
   b59a8:	2900      	cmp	r1, #0
   b59aa:	d1f7      	bne.n	b599c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b59ac:	d125      	bne.n	b59fa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b59ae:	f104 050c 	add.w	r5, r4, #12
   b59b2:	4669      	mov	r1, sp
   b59b4:	4628      	mov	r0, r5
   b59b6:	f7ff ff49 	bl	b584c <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b59ba:	f3bf 8f5b 	dmb	ish
   b59be:	2301      	movs	r3, #1
   b59c0:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b59c2:	2000      	movs	r0, #0
   b59c4:	f104 0308 	add.w	r3, r4, #8
   b59c8:	f3bf 8f5b 	dmb	ish
   b59cc:	e853 6f00 	ldrex	r6, [r3]
   b59d0:	e843 0200 	strex	r2, r0, [r3]
   b59d4:	2a00      	cmp	r2, #0
   b59d6:	d1f9      	bne.n	b59cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b59d8:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b59dc:	b16e      	cbz	r6, b59fa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b59de:	f7ff fe09 	bl	b55f4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b59e2:	b178      	cbz	r0, b5a04 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b59e4:	4629      	mov	r1, r5
   b59e6:	4630      	mov	r0, r6
   b59e8:	f7ff ff8b 	bl	b5902 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b59ec:	4630      	mov	r0, r6
   b59ee:	f7ff fefc 	bl	b57ea <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b59f2:	2110      	movs	r1, #16
   b59f4:	4630      	mov	r0, r6
   b59f6:	f7fe fb52 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   b59fa:	4668      	mov	r0, sp
   b59fc:	f7ff ff33 	bl	b5866 <_ZN8particle5ErrorD1Ev>
    }
   b5a00:	b009      	add	sp, #36	; 0x24
   b5a02:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b5a04:	4631      	mov	r1, r6
   b5a06:	a802      	add	r0, sp, #8
   b5a08:	f7ff ffb0 	bl	b596c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b5a0c:	68e0      	ldr	r0, [r4, #12]
   b5a0e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b5a12:	b108      	cbz	r0, b5a18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b5a14:	f003 f8a4 	bl	b8b60 <strdup>
        type_(type) {
   b5a18:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b5a1a:	2010      	movs	r0, #16
   b5a1c:	f8ad 501c 	strh.w	r5, [sp, #28]
   b5a20:	f7fe fb39 	bl	b4096 <_Znwj>
   b5a24:	4605      	mov	r5, r0
   b5a26:	b1e8      	cbz	r0, b5a64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b5a28:	2700      	movs	r7, #0
   b5a2a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5a2c:	2018      	movs	r0, #24
   b5a2e:	f7fe fb32 	bl	b4096 <_Znwj>
   b5a32:	4604      	mov	r4, r0
   b5a34:	b188      	cbz	r0, b5a5a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b5a36:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b5a38:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b5a3a:	a802      	add	r0, sp, #8
   b5a3c:	f7ff fede 	bl	b57fc <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5a40:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b5a42:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5a44:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5a46:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5a48:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b5a4a:	a906      	add	r1, sp, #24
   b5a4c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b5a4e:	60e3      	str	r3, [r4, #12]
   b5a50:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b5a54:	9205      	str	r2, [sp, #20]
   b5a56:	f7ff fef9 	bl	b584c <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b5a5a:	4b08      	ldr	r3, [pc, #32]	; (b5a7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b5a5c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b5a5e:	4b08      	ldr	r3, [pc, #32]	; (b5a80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5a60:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b5a62:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b5a64:	a806      	add	r0, sp, #24
   b5a66:	f7ff fefe 	bl	b5866 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b5a6a:	a802      	add	r0, sp, #8
   b5a6c:	f7ff febd 	bl	b57ea <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b5a70:	2200      	movs	r2, #0
   b5a72:	4629      	mov	r1, r5
   b5a74:	4803      	ldr	r0, [pc, #12]	; (b5a84 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b5a76:	f7ff fdc5 	bl	b5604 <application_thread_invoke>
   b5a7a:	e7b7      	b.n	b59ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b5a7c:	000b5915 	.word	0x000b5915
   b5a80:	000b5b99 	.word	0x000b5b99
   b5a84:	000b57c3 	.word	0x000b57c3

000b5a88 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b5a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5a8c:	b08b      	sub	sp, #44	; 0x2c
   b5a8e:	4605      	mov	r5, r0
   b5a90:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b5a94:	460f      	mov	r7, r1
   b5a96:	4690      	mov	r8, r2
   b5a98:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5a9a:	f7ff fdcf 	bl	b563c <spark_cloud_flag_connected>
   b5a9e:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b5aa0:	4683      	mov	fp, r0
   b5aa2:	bb38      	cbnz	r0, b5af4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b5aa4:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b5aa8:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b5aaa:	a905      	add	r1, sp, #20
   b5aac:	4630      	mov	r0, r6
   b5aae:	f8ad 3018 	strh.w	r3, [sp, #24]
   b5ab2:	f7ff fecb 	bl	b584c <_ZN8particle5ErrorC1EOS0_>
   b5ab6:	2014      	movs	r0, #20
   b5ab8:	f7fe faed 	bl	b4096 <_Znwj>
   b5abc:	4604      	mov	r4, r0
   b5abe:	b148      	cbz	r0, b5ad4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b5ac0:	2302      	movs	r3, #2
   b5ac2:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b5ac4:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b5ac6:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b5aca:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b5acc:	4631      	mov	r1, r6
   b5ace:	300c      	adds	r0, #12
   b5ad0:	f7ff febc 	bl	b584c <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b5ad4:	4628      	mov	r0, r5
	: __shared_count(__p)
   b5ad6:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b5ad8:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b5adc:	f7ff ff32 	bl	b5944 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b5ae0:	4630      	mov	r0, r6
   b5ae2:	f7ff fec0 	bl	b5866 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b5ae6:	a805      	add	r0, sp, #20
   b5ae8:	f7ff febd 	bl	b5866 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b5aec:	4628      	mov	r0, r5
   b5aee:	b00b      	add	sp, #44	; 0x2c
   b5af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b5af4:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b5af6:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b5af8:	2014      	movs	r0, #20
   b5afa:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b5afe:	9307      	str	r3, [sp, #28]
   b5b00:	f7fe fac9 	bl	b4096 <_Znwj>
   b5b04:	4601      	mov	r1, r0
   b5b06:	b118      	cbz	r0, b5b10 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b5b08:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b5b0c:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b5b0e:	7044      	strb	r4, [r0, #1]
   b5b10:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b5b12:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b5b14:	f7ff ff16 	bl	b5944 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b5b18:	4b1e      	ldr	r3, [pc, #120]	; (b5b94 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b5b1a:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b5b1c:	2008      	movs	r0, #8
   b5b1e:	f7fe faba 	bl	b4096 <_Znwj>
   b5b22:	4604      	mov	r4, r0
   b5b24:	b110      	cbz	r0, b5b2c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b5b26:	a903      	add	r1, sp, #12
   b5b28:	f7ff fec7 	bl	b58ba <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b5b2c:	9600      	str	r6, [sp, #0]
   b5b2e:	fa5f f38a 	uxtb.w	r3, sl
   b5b32:	464a      	mov	r2, r9
   b5b34:	4641      	mov	r1, r8
   b5b36:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b5b38:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b5b3a:	f7ff fd87 	bl	b564c <spark_send_event>
   b5b3e:	b9b8      	cbnz	r0, b5b70 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b5b40:	9b03      	ldr	r3, [sp, #12]
   b5b42:	785b      	ldrb	r3, [r3, #1]
   b5b44:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b5b48:	b993      	cbnz	r3, b5b70 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b5b4a:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b5b4e:	a905      	add	r1, sp, #20
   b5b50:	a803      	add	r0, sp, #12
   b5b52:	9205      	str	r2, [sp, #20]
   b5b54:	f8ad 3018 	strh.w	r3, [sp, #24]
   b5b58:	f7ff ff18 	bl	b598c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b5b5c:	a805      	add	r0, sp, #20
   b5b5e:	f7ff fe82 	bl	b5866 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b5b62:	a805      	add	r0, sp, #20
   b5b64:	9909      	ldr	r1, [sp, #36]	; 0x24
   b5b66:	f7ff feb1 	bl	b58cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b5b6a:	a806      	add	r0, sp, #24
   b5b6c:	f7fe fba6 	bl	b42bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5b70:	a903      	add	r1, sp, #12
   b5b72:	a805      	add	r0, sp, #20
   b5b74:	f7ff fea1 	bl	b58ba <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5b78:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b5b7a:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5b7c:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b5b7e:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b5b80:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b5b82:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b5b84:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b5b86:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b5b88:	f7fe fb98 	bl	b42bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5b8c:	a804      	add	r0, sp, #16
   b5b8e:	f7fe fb95 	bl	b42bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b5b92:	e7ab      	b.n	b5aec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b5b94:	000b5c15 	.word	0x000b5c15

000b5b98 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b5b98:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b5b9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5b9c:	4605      	mov	r5, r0
	switch (__op)
   b5b9e:	d103      	bne.n	b5ba8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b5ba0:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b5ba2:	6003      	str	r3, [r0, #0]
      }
   b5ba4:	2000      	movs	r0, #0
   b5ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b5ba8:	2a02      	cmp	r2, #2
   b5baa:	d010      	beq.n	b5bce <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b5bac:	2a03      	cmp	r2, #3
   b5bae:	d1f9      	bne.n	b5ba4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b5bb0:	6804      	ldr	r4, [r0, #0]
   b5bb2:	2c00      	cmp	r4, #0
   b5bb4:	d0f6      	beq.n	b5ba4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b5bb6:	f104 0010 	add.w	r0, r4, #16
   b5bba:	f7ff fe54 	bl	b5866 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b5bbe:	4620      	mov	r0, r4
   b5bc0:	f7ff fe13 	bl	b57ea <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b5bc4:	2118      	movs	r1, #24
   b5bc6:	4620      	mov	r0, r4
   b5bc8:	f7fe fa69 	bl	b409e <_ZdlPvj>
   b5bcc:	e7ea      	b.n	b5ba4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b5bce:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b5bd0:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b5bd2:	f7fe fa60 	bl	b4096 <_Znwj>
   b5bd6:	4604      	mov	r4, r0
   b5bd8:	b150      	cbz	r0, b5bf0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b5bda:	4631      	mov	r1, r6
   b5bdc:	f7ff fec6 	bl	b596c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b5be0:	6930      	ldr	r0, [r6, #16]
   b5be2:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b5be6:	b108      	cbz	r0, b5bec <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b5be8:	f002 ffba 	bl	b8b60 <strdup>
        type_(type) {
   b5bec:	6120      	str	r0, [r4, #16]
   b5bee:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b5bf0:	602c      	str	r4, [r5, #0]
	}
   b5bf2:	e7d7      	b.n	b5ba4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b5bf4 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b5bf4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b5bf6:	2300      	movs	r3, #0
   b5bf8:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b5bfa:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b5bfc:	4604      	mov	r4, r0
   b5bfe:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b5c00:	b12b      	cbz	r3, b5c0e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b5c02:	2202      	movs	r2, #2
   b5c04:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b5c06:	68eb      	ldr	r3, [r5, #12]
   b5c08:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b5c0a:	68ab      	ldr	r3, [r5, #8]
   b5c0c:	60a3      	str	r3, [r4, #8]
    }
   b5c0e:	4620      	mov	r0, r4
   b5c10:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5c14 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b5c14:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5c16:	b089      	sub	sp, #36	; 0x24
   b5c18:	4604      	mov	r4, r0
   b5c1a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b5c1c:	a801      	add	r0, sp, #4
   b5c1e:	4611      	mov	r1, r2
   b5c20:	f7ff fe54 	bl	b58cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b5c24:	b1a4      	cbz	r4, b5c50 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b5c26:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b5c28:	b11d      	cbz	r5, b5c32 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b5c2a:	4628      	mov	r0, r5
   b5c2c:	f002 ff98 	bl	b8b60 <strdup>
   b5c30:	4605      	mov	r5, r0
   b5c32:	a801      	add	r0, sp, #4
   b5c34:	a903      	add	r1, sp, #12
        type_(type) {
   b5c36:	9503      	str	r5, [sp, #12]
   b5c38:	f8ad 4010 	strh.w	r4, [sp, #16]
   b5c3c:	f7ff fea6 	bl	b598c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b5c40:	a803      	add	r0, sp, #12
   b5c42:	f7ff fe10 	bl	b5866 <_ZN8particle5ErrorD1Ev>
   b5c46:	a802      	add	r0, sp, #8
   b5c48:	f7fe fb38 	bl	b42bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5c4c:	b009      	add	sp, #36	; 0x24
   b5c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b5c50:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b5c52:	2301      	movs	r3, #1
   b5c54:	e8d5 2f4f 	ldrexb	r2, [r5]
   b5c58:	2a00      	cmp	r2, #0
   b5c5a:	d103      	bne.n	b5c64 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b5c5c:	e8c5 3f41 	strexb	r1, r3, [r5]
   b5c60:	2900      	cmp	r1, #0
   b5c62:	d1f7      	bne.n	b5c54 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b5c64:	d1ef      	bne.n	b5c46 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b5c66:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b5c68:	f3bf 8f5b 	dmb	ish
   b5c6c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b5c6e:	1d2b      	adds	r3, r5, #4
   b5c70:	f3bf 8f5b 	dmb	ish
   b5c74:	e853 6f00 	ldrex	r6, [r3]
   b5c78:	e843 4200 	strex	r2, r4, [r3]
   b5c7c:	2a00      	cmp	r2, #0
   b5c7e:	d1f9      	bne.n	b5c74 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b5c80:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b5c84:	2e00      	cmp	r6, #0
   b5c86:	d0de      	beq.n	b5c46 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b5c88:	4620      	mov	r0, r4
   b5c8a:	f7ff fcb3 	bl	b55f4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b5c8e:	4607      	mov	r7, r0
   b5c90:	b160      	cbz	r0, b5cac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b5c92:	f105 010c 	add.w	r1, r5, #12
   b5c96:	4630      	mov	r0, r6
   b5c98:	f7ff fe43 	bl	b5922 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b5c9c:	4630      	mov	r0, r6
   b5c9e:	f7ff fda4 	bl	b57ea <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b5ca2:	2110      	movs	r1, #16
   b5ca4:	4630      	mov	r0, r6
   b5ca6:	f7fe f9fa 	bl	b409e <_ZdlPvj>
   b5caa:	e7cc      	b.n	b5c46 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b5cac:	4631      	mov	r1, r6
   b5cae:	a803      	add	r0, sp, #12
   b5cb0:	f7ff ffa0 	bl	b5bf4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b5cb4:	7b2b      	ldrb	r3, [r5, #12]
   b5cb6:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b5cba:	2010      	movs	r0, #16
   b5cbc:	f7fe f9eb 	bl	b4096 <_Znwj>
   b5cc0:	4605      	mov	r5, r0
   b5cc2:	b1d0      	cbz	r0, b5cfa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b5cc4:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5cc6:	2014      	movs	r0, #20
   b5cc8:	f7fe f9e5 	bl	b4096 <_Znwj>
   b5ccc:	4604      	mov	r4, r0
   b5cce:	b178      	cbz	r0, b5cf0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b5cd0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b5cd2:	4601      	mov	r1, r0
   b5cd4:	a803      	add	r0, sp, #12
   b5cd6:	f7ff fd91 	bl	b57fc <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5cda:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5cdc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5cde:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5ce0:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b5ce2:	9205      	str	r2, [sp, #20]
   b5ce4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b5ce6:	60e3      	str	r3, [r4, #12]
   b5ce8:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b5cec:	9206      	str	r2, [sp, #24]
   b5cee:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b5cf0:	4b06      	ldr	r3, [pc, #24]	; (b5d0c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b5cf2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b5cf4:	4b06      	ldr	r3, [pc, #24]	; (b5d10 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5cf6:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b5cf8:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b5cfa:	a803      	add	r0, sp, #12
   b5cfc:	f7ff fd75 	bl	b57ea <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b5d00:	2200      	movs	r2, #0
   b5d02:	4629      	mov	r1, r5
   b5d04:	4803      	ldr	r0, [pc, #12]	; (b5d14 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b5d06:	f7ff fc7d 	bl	b5604 <application_thread_invoke>
   b5d0a:	e7c7      	b.n	b5c9c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b5d0c:	000b5935 	.word	0x000b5935
   b5d10:	000b5d19 	.word	0x000b5d19
   b5d14:	000b57c3 	.word	0x000b57c3

000b5d18 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b5d18:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b5d1a:	b570      	push	{r4, r5, r6, lr}
   b5d1c:	4604      	mov	r4, r0
	switch (__op)
   b5d1e:	d103      	bne.n	b5d28 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b5d20:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b5d22:	6003      	str	r3, [r0, #0]
      }
   b5d24:	2000      	movs	r0, #0
   b5d26:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b5d28:	2a02      	cmp	r2, #2
   b5d2a:	d00c      	beq.n	b5d46 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b5d2c:	2a03      	cmp	r2, #3
   b5d2e:	d1f9      	bne.n	b5d24 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b5d30:	6804      	ldr	r4, [r0, #0]
   b5d32:	2c00      	cmp	r4, #0
   b5d34:	d0f6      	beq.n	b5d24 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b5d36:	4620      	mov	r0, r4
   b5d38:	f7ff fd57 	bl	b57ea <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b5d3c:	2114      	movs	r1, #20
   b5d3e:	4620      	mov	r0, r4
   b5d40:	f7fe f9ad 	bl	b409e <_ZdlPvj>
   b5d44:	e7ee      	b.n	b5d24 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b5d46:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b5d48:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b5d4a:	f7fe f9a4 	bl	b4096 <_Znwj>
   b5d4e:	4605      	mov	r5, r0
   b5d50:	b120      	cbz	r0, b5d5c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b5d52:	4631      	mov	r1, r6
   b5d54:	f7ff ff4e 	bl	b5bf4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b5d58:	7c33      	ldrb	r3, [r6, #16]
   b5d5a:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b5d5c:	6025      	str	r5, [r4, #0]
	}
   b5d5e:	e7e1      	b.n	b5d24 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b5d60 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5d60:	2200      	movs	r2, #0
   b5d62:	6840      	ldr	r0, [r0, #4]
   b5d64:	4611      	mov	r1, r2
   b5d66:	f7ff bcb9 	b.w	b56dc <network_listening>

000b5d6a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5d6a:	2200      	movs	r2, #0
   b5d6c:	6840      	ldr	r0, [r0, #4]
   b5d6e:	4611      	mov	r1, r2
   b5d70:	f7ff bcc4 	b.w	b56fc <network_get_listen_timeout>

000b5d74 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5d74:	6840      	ldr	r0, [r0, #4]
   b5d76:	2200      	movs	r2, #0
   b5d78:	f7ff bcb8 	b.w	b56ec <network_set_listen_timeout>

000b5d7c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5d7c:	6840      	ldr	r0, [r0, #4]
   b5d7e:	2200      	movs	r2, #0
   b5d80:	f081 0101 	eor.w	r1, r1, #1
   b5d84:	f7ff bca2 	b.w	b56cc <network_listen>

000b5d88 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5d88:	2300      	movs	r3, #0
   b5d8a:	6840      	ldr	r0, [r0, #4]
   b5d8c:	461a      	mov	r2, r3
   b5d8e:	4619      	mov	r1, r3
   b5d90:	f7ff bc94 	b.w	b56bc <network_off>

000b5d94 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5d94:	2300      	movs	r3, #0
   b5d96:	6840      	ldr	r0, [r0, #4]
   b5d98:	461a      	mov	r2, r3
   b5d9a:	4619      	mov	r1, r3
   b5d9c:	f7ff bc86 	b.w	b56ac <network_on>

000b5da0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b5da0:	2200      	movs	r2, #0
   b5da2:	6840      	ldr	r0, [r0, #4]
   b5da4:	4611      	mov	r1, r2
   b5da6:	f7ff bc79 	b.w	b569c <network_ready>

000b5daa <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5daa:	2200      	movs	r2, #0
   b5dac:	6840      	ldr	r0, [r0, #4]
   b5dae:	4611      	mov	r1, r2
   b5db0:	f7ff bc64 	b.w	b567c <network_connecting>

000b5db4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5db4:	6840      	ldr	r0, [r0, #4]
   b5db6:	2200      	movs	r2, #0
   b5db8:	2102      	movs	r1, #2
   b5dba:	f7ff bc67 	b.w	b568c <network_disconnect>

000b5dbe <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5dbe:	2300      	movs	r3, #0
   b5dc0:	6840      	ldr	r0, [r0, #4]
   b5dc2:	461a      	mov	r2, r3
   b5dc4:	f7ff bc52 	b.w	b566c <network_connect>

000b5dc8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5dc8:	4b02      	ldr	r3, [pc, #8]	; (b5dd4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b5dca:	2203      	movs	r2, #3
   b5dcc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b5dce:	4a02      	ldr	r2, [pc, #8]	; (b5dd8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b5dd0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b5dd2:	4770      	bx	lr
   b5dd4:	2003e6c8 	.word	0x2003e6c8
   b5dd8:	000b8e44 	.word	0x000b8e44

000b5ddc <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b5ddc:	4770      	bx	lr

000b5dde <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b5dde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5de0:	4606      	mov	r6, r0
   b5de2:	4615      	mov	r5, r2
   b5de4:	460c      	mov	r4, r1
   b5de6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b5de8:	42bc      	cmp	r4, r7
   b5dea:	d006      	beq.n	b5dfa <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b5dec:	6833      	ldr	r3, [r6, #0]
   b5dee:	f814 1b01 	ldrb.w	r1, [r4], #1
   b5df2:	689b      	ldr	r3, [r3, #8]
   b5df4:	4630      	mov	r0, r6
   b5df6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b5df8:	e7f6      	b.n	b5de8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b5dfa:	4628      	mov	r0, r5
   b5dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5dfe <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b5dfe:	7c00      	ldrb	r0, [r0, #16]
   b5e00:	2200      	movs	r2, #0
   b5e02:	f7ff bad7 	b.w	b53b4 <hal_i2c_write>

000b5e06 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b5e06:	7c00      	ldrb	r0, [r0, #16]
   b5e08:	2100      	movs	r1, #0
   b5e0a:	f7ff badb 	b.w	b53c4 <hal_i2c_available>

000b5e0e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b5e0e:	7c00      	ldrb	r0, [r0, #16]
   b5e10:	2100      	movs	r1, #0
   b5e12:	f7ff badf 	b.w	b53d4 <hal_i2c_read>

000b5e16 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b5e16:	7c00      	ldrb	r0, [r0, #16]
   b5e18:	2100      	movs	r1, #0
   b5e1a:	f7ff bae3 	b.w	b53e4 <hal_i2c_peek>

000b5e1e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b5e1e:	7c00      	ldrb	r0, [r0, #16]
   b5e20:	2100      	movs	r1, #0
   b5e22:	f7ff bae7 	b.w	b53f4 <hal_i2c_flush>

000b5e26 <_ZN7TwoWireD0Ev>:
   b5e26:	b510      	push	{r4, lr}
   b5e28:	2114      	movs	r1, #20
   b5e2a:	4604      	mov	r4, r0
   b5e2c:	f7fe f937 	bl	b409e <_ZdlPvj>
   b5e30:	4620      	mov	r0, r4
   b5e32:	bd10      	pop	{r4, pc}

000b5e34 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5e34:	b538      	push	{r3, r4, r5, lr}
   b5e36:	4604      	mov	r4, r0
   b5e38:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b5e3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5e3e:	2200      	movs	r2, #0
   b5e40:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5e44:	4b09      	ldr	r3, [pc, #36]	; (b5e6c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b5e46:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5e48:	4608      	mov	r0, r1
   b5e4a:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b5e4c:	4629      	mov	r1, r5
   b5e4e:	f7ff fae1 	bl	b5414 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b5e52:	30bf      	adds	r0, #191	; 0xbf
   b5e54:	d108      	bne.n	b5e68 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b5e56:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b5e58:	07db      	lsls	r3, r3, #31
   b5e5a:	d505      	bpl.n	b5e68 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b5e5c:	6868      	ldr	r0, [r5, #4]
   b5e5e:	f7ff fc6d 	bl	b573c <free>
    free(conf.tx_buffer);
   b5e62:	68e8      	ldr	r0, [r5, #12]
   b5e64:	f7ff fc6a 	bl	b573c <free>
}
   b5e68:	4620      	mov	r0, r4
   b5e6a:	bd38      	pop	{r3, r4, r5, pc}
   b5e6c:	000b8e80 	.word	0x000b8e80

000b5e70 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b5e70:	2300      	movs	r3, #0
   b5e72:	7c00      	ldrb	r0, [r0, #16]
   b5e74:	461a      	mov	r2, r3
   b5e76:	4619      	mov	r1, r3
   b5e78:	f7ff ba84 	b.w	b5384 <hal_i2c_begin>

000b5e7c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b5e7c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b5e7e:	2200      	movs	r2, #0
   b5e80:	2314      	movs	r3, #20
   b5e82:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b5e86:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b5e8a:	780b      	ldrb	r3, [r1, #0]
   b5e8c:	f88d 3008 	strb.w	r3, [sp, #8]
   b5e90:	684b      	ldr	r3, [r1, #4]
   b5e92:	9303      	str	r3, [sp, #12]
   b5e94:	68cb      	ldr	r3, [r1, #12]
   b5e96:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b5e98:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b5e9a:	7a0b      	ldrb	r3, [r1, #8]
   b5e9c:	9305      	str	r3, [sp, #20]
   b5e9e:	a901      	add	r1, sp, #4
   b5ea0:	f7ff fac0 	bl	b5424 <hal_i2c_request_ex>
}
   b5ea4:	b007      	add	sp, #28
   b5ea6:	f85d fb04 	ldr.w	pc, [sp], #4

000b5eaa <_ZN7TwoWire11requestFromEhjh>:
{
   b5eaa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b5eac:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b5eae:	f88d 1000 	strb.w	r1, [sp]
   b5eb2:	f04f 0164 	mov.w	r1, #100	; 0x64
   b5eb6:	9103      	str	r1, [sp, #12]
   b5eb8:	bf18      	it	ne
   b5eba:	2301      	movne	r3, #1
   b5ebc:	4669      	mov	r1, sp
    size_ = size;
   b5ebe:	9201      	str	r2, [sp, #4]
   b5ec0:	f88d 3008 	strb.w	r3, [sp, #8]
   b5ec4:	f7ff ffda 	bl	b5e7c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b5ec8:	b005      	add	sp, #20
   b5eca:	f85d fb04 	ldr.w	pc, [sp], #4

000b5ece <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b5ece:	2301      	movs	r3, #1
   b5ed0:	f7ff bfeb 	b.w	b5eaa <_ZN7TwoWire11requestFromEhjh>

000b5ed4 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b5ed4:	7c00      	ldrb	r0, [r0, #16]
   b5ed6:	2200      	movs	r2, #0
   b5ed8:	f7ff ba5c 	b.w	b5394 <hal_i2c_begin_transmission>

000b5edc <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b5edc:	7c00      	ldrb	r0, [r0, #16]
   b5ede:	2200      	movs	r2, #0
   b5ee0:	f7ff ba60 	b.w	b53a4 <hal_i2c_end_transmission>

000b5ee4 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b5ee4:	2101      	movs	r1, #1
   b5ee6:	f7ff bff9 	b.w	b5edc <_ZN7TwoWire15endTransmissionEh>

000b5eea <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b5eea:	4770      	bx	lr

000b5eec <_ZN9IPAddressD0Ev>:
   b5eec:	b510      	push	{r4, lr}
   b5eee:	2118      	movs	r1, #24
   b5ef0:	4604      	mov	r4, r0
   b5ef2:	f7fe f8d4 	bl	b409e <_ZdlPvj>
   b5ef6:	4620      	mov	r0, r4
   b5ef8:	bd10      	pop	{r4, pc}

000b5efa <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b5efa:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b5efc:	7d03      	ldrb	r3, [r0, #20]
   b5efe:	2b06      	cmp	r3, #6
{
   b5f00:	b08d      	sub	sp, #52	; 0x34
   b5f02:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5f04:	f100 0704 	add.w	r7, r0, #4
   b5f08:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b5f0c:	d012      	beq.n	b5f34 <_ZNK9IPAddress7printToER5Print+0x3a>
   b5f0e:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5f12:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b5f16:	220a      	movs	r2, #10
   b5f18:	4630      	mov	r0, r6
   b5f1a:	f000 f954 	bl	b61c6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b5f1e:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b5f20:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b5f22:	d019      	beq.n	b5f58 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b5f24:	2c00      	cmp	r4, #0
   b5f26:	d0f4      	beq.n	b5f12 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b5f28:	212e      	movs	r1, #46	; 0x2e
   b5f2a:	4630      	mov	r0, r6
   b5f2c:	f000 f93c 	bl	b61a8 <_ZN5Print5printEc>
   b5f30:	4404      	add	r4, r0
   b5f32:	e7ee      	b.n	b5f12 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5f34:	232f      	movs	r3, #47	; 0x2f
   b5f36:	466a      	mov	r2, sp
   b5f38:	4639      	mov	r1, r7
   b5f3a:	200a      	movs	r0, #10
		buf[0] = 0;
   b5f3c:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5f40:	f7ff fa78 	bl	b5434 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b5f44:	4668      	mov	r0, sp
   b5f46:	f002 fe28 	bl	b8b9a <strlen>
   b5f4a:	6833      	ldr	r3, [r6, #0]
   b5f4c:	4602      	mov	r2, r0
   b5f4e:	68db      	ldr	r3, [r3, #12]
   b5f50:	4669      	mov	r1, sp
   b5f52:	4630      	mov	r0, r6
   b5f54:	4798      	blx	r3
   b5f56:	4604      	mov	r4, r0
    }
    return n;
}
   b5f58:	4620      	mov	r0, r4
   b5f5a:	b00d      	add	sp, #52	; 0x34
   b5f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b5f60 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b5f60:	b510      	push	{r4, lr}
   b5f62:	4b05      	ldr	r3, [pc, #20]	; (b5f78 <_ZN9IPAddressC1Ev+0x18>)
   b5f64:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b5f66:	2211      	movs	r2, #17
   b5f68:	f840 3b04 	str.w	r3, [r0], #4
   b5f6c:	2100      	movs	r1, #0
   b5f6e:	f002 fdc1 	bl	b8af4 <memset>
}
   b5f72:	4620      	mov	r0, r4
   b5f74:	bd10      	pop	{r4, pc}
   b5f76:	bf00      	nop
   b5f78:	000b8ea8 	.word	0x000b8ea8

000b5f7c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b5f7c:	4603      	mov	r3, r0
   b5f7e:	4a07      	ldr	r2, [pc, #28]	; (b5f9c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b5f80:	b510      	push	{r4, lr}
   b5f82:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b5f86:	f101 0210 	add.w	r2, r1, #16
   b5f8a:	f851 4b04 	ldr.w	r4, [r1], #4
   b5f8e:	f843 4b04 	str.w	r4, [r3], #4
   b5f92:	4291      	cmp	r1, r2
   b5f94:	d1f9      	bne.n	b5f8a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b5f96:	780a      	ldrb	r2, [r1, #0]
   b5f98:	701a      	strb	r2, [r3, #0]
}
   b5f9a:	bd10      	pop	{r4, pc}
   b5f9c:	000b8ea8 	.word	0x000b8ea8

000b5fa0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b5fa0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b5fa2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b5fa6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b5faa:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b5fae:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b5fb2:	2304      	movs	r3, #4
   b5fb4:	6041      	str	r1, [r0, #4]
   b5fb6:	7503      	strb	r3, [r0, #20]
}
   b5fb8:	bd10      	pop	{r4, pc}
	...

000b5fbc <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5fbc:	b507      	push	{r0, r1, r2, lr}
   b5fbe:	4b06      	ldr	r3, [pc, #24]	; (b5fd8 <_ZN9IPAddressC1EPKh+0x1c>)
   b5fc0:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b5fc2:	78cb      	ldrb	r3, [r1, #3]
   b5fc4:	9300      	str	r3, [sp, #0]
   b5fc6:	788b      	ldrb	r3, [r1, #2]
   b5fc8:	784a      	ldrb	r2, [r1, #1]
   b5fca:	7809      	ldrb	r1, [r1, #0]
   b5fcc:	f7ff ffe8 	bl	b5fa0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b5fd0:	b003      	add	sp, #12
   b5fd2:	f85d fb04 	ldr.w	pc, [sp], #4
   b5fd6:	bf00      	nop
   b5fd8:	000b8ea8 	.word	0x000b8ea8

000b5fdc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b5fdc:	4b01      	ldr	r3, [pc, #4]	; (b5fe4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b5fde:	4a02      	ldr	r2, [pc, #8]	; (b5fe8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b5fe0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b5fe2:	4770      	bx	lr
   b5fe4:	2003e6d0 	.word	0x2003e6d0
   b5fe8:	000b8eb4 	.word	0x000b8eb4

000b5fec <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b5fec:	2300      	movs	r3, #0
   b5fee:	6840      	ldr	r0, [r0, #4]
   b5ff0:	461a      	mov	r2, r3
   b5ff2:	f7ff bb3b 	b.w	b566c <network_connect>

000b5ff6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b5ff6:	6840      	ldr	r0, [r0, #4]
   b5ff8:	2200      	movs	r2, #0
   b5ffa:	2102      	movs	r1, #2
   b5ffc:	f7ff bb46 	b.w	b568c <network_disconnect>

000b6000 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b6000:	2200      	movs	r2, #0
   b6002:	6840      	ldr	r0, [r0, #4]
   b6004:	4611      	mov	r1, r2
   b6006:	f7ff bb39 	b.w	b567c <network_connecting>

000b600a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b600a:	2200      	movs	r2, #0
   b600c:	6840      	ldr	r0, [r0, #4]
   b600e:	4611      	mov	r1, r2
   b6010:	f7ff bb44 	b.w	b569c <network_ready>

000b6014 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b6014:	2300      	movs	r3, #0
   b6016:	6840      	ldr	r0, [r0, #4]
   b6018:	461a      	mov	r2, r3
   b601a:	4619      	mov	r1, r3
   b601c:	f7ff bb46 	b.w	b56ac <network_on>

000b6020 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b6020:	2300      	movs	r3, #0
   b6022:	6840      	ldr	r0, [r0, #4]
   b6024:	461a      	mov	r2, r3
   b6026:	4619      	mov	r1, r3
   b6028:	f7ff bb48 	b.w	b56bc <network_off>

000b602c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b602c:	6840      	ldr	r0, [r0, #4]
   b602e:	2100      	movs	r1, #0
   b6030:	f7ff bb6c 	b.w	b570c <network_is_on>

000b6034 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b6034:	6840      	ldr	r0, [r0, #4]
   b6036:	2100      	movs	r1, #0
   b6038:	f7ff bb70 	b.w	b571c <network_is_off>

000b603c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b603c:	6840      	ldr	r0, [r0, #4]
   b603e:	2200      	movs	r2, #0
   b6040:	f081 0101 	eor.w	r1, r1, #1
   b6044:	f7ff bb42 	b.w	b56cc <network_listen>

000b6048 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b6048:	6840      	ldr	r0, [r0, #4]
   b604a:	2200      	movs	r2, #0
   b604c:	f7ff bb4e 	b.w	b56ec <network_set_listen_timeout>

000b6050 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b6050:	2200      	movs	r2, #0
   b6052:	6840      	ldr	r0, [r0, #4]
   b6054:	4611      	mov	r1, r2
   b6056:	f7ff bb51 	b.w	b56fc <network_get_listen_timeout>

000b605a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b605a:	2200      	movs	r2, #0
   b605c:	6840      	ldr	r0, [r0, #4]
   b605e:	4611      	mov	r1, r2
   b6060:	f7ff bb3c 	b.w	b56dc <network_listening>

000b6064 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6064:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6068:	b095      	sub	sp, #84	; 0x54
   b606a:	4614      	mov	r4, r2
   b606c:	460d      	mov	r5, r1
   b606e:	4607      	mov	r7, r0
    IPAddress addr;
   b6070:	f7ff ff76 	bl	b5f60 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6074:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b6076:	221c      	movs	r2, #28
   b6078:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b607a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b607c:	f002 fd3a 	bl	b8af4 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b6080:	2340      	movs	r3, #64	; 0x40
   b6082:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6084:	4620      	mov	r0, r4
   b6086:	466b      	mov	r3, sp
   b6088:	aa0c      	add	r2, sp, #48	; 0x30
   b608a:	2100      	movs	r1, #0
   b608c:	f7ff f9e2 	bl	b5454 <netdb_getaddrinfo>
    if (!r) {
   b6090:	4604      	mov	r4, r0
   b6092:	2800      	cmp	r0, #0
   b6094:	d14b      	bne.n	b612e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6096:	4602      	mov	r2, r0
   b6098:	2101      	movs	r1, #1
   b609a:	6868      	ldr	r0, [r5, #4]
   b609c:	f7ff fafe 	bl	b569c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b60a0:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b60a2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b60a4:	4622      	mov	r2, r4
   b60a6:	6868      	ldr	r0, [r5, #4]
   b60a8:	f7ff faf8 	bl	b569c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b60ac:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b60ae:	4681      	mov	r9, r0
        bool ok = false;
   b60b0:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b60b2:	2e00      	cmp	r6, #0
   b60b4:	d03b      	beq.n	b612e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b60b6:	2900      	cmp	r1, #0
   b60b8:	d139      	bne.n	b612e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b60ba:	6873      	ldr	r3, [r6, #4]
   b60bc:	2b02      	cmp	r3, #2
   b60be:	d003      	beq.n	b60c8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b60c0:	2b0a      	cmp	r3, #10
   b60c2:	d011      	beq.n	b60e8 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b60c4:	69f6      	ldr	r6, [r6, #28]
   b60c6:	e7f4      	b.n	b60b2 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b60c8:	f1b8 0f00 	cmp.w	r8, #0
   b60cc:	d0fa      	beq.n	b60c4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b60ce:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b60d0:	a806      	add	r0, sp, #24
   b60d2:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b60d4:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b60d6:	f7ff ff71 	bl	b5fbc <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b60da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b60dc:	1d3c      	adds	r4, r7, #4
   b60de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b60e0:	682b      	ldr	r3, [r5, #0]
   b60e2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b60e4:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b60e6:	e7ed      	b.n	b60c4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b60e8:	f1b9 0f00 	cmp.w	r9, #0
   b60ec:	d0ea      	beq.n	b60c4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b60ee:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b60f0:	2210      	movs	r2, #16
   b60f2:	a801      	add	r0, sp, #4
   b60f4:	f002 fcfe 	bl	b8af4 <memset>
                    a.v = 6;
   b60f8:	2306      	movs	r3, #6
   b60fa:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b60fe:	ad01      	add	r5, sp, #4
   b6100:	f104 0308 	add.w	r3, r4, #8
   b6104:	3418      	adds	r4, #24
   b6106:	6818      	ldr	r0, [r3, #0]
   b6108:	6859      	ldr	r1, [r3, #4]
   b610a:	462a      	mov	r2, r5
   b610c:	c203      	stmia	r2!, {r0, r1}
   b610e:	3308      	adds	r3, #8
   b6110:	42a3      	cmp	r3, r4
   b6112:	4615      	mov	r5, r2
   b6114:	d1f7      	bne.n	b6106 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b6116:	a901      	add	r1, sp, #4
   b6118:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b611a:	ad07      	add	r5, sp, #28
   b611c:	f7ff ff2e 	bl	b5f7c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6120:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6122:	1d3c      	adds	r4, r7, #4
   b6124:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6126:	682b      	ldr	r3, [r5, #0]
   b6128:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b612a:	4649      	mov	r1, r9
   b612c:	e7ca      	b.n	b60c4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b612e:	9800      	ldr	r0, [sp, #0]
   b6130:	f7ff f988 	bl	b5444 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b6134:	4638      	mov	r0, r7
   b6136:	b015      	add	sp, #84	; 0x54
   b6138:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b613c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b613c:	4b02      	ldr	r3, [pc, #8]	; (b6148 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b613e:	4a03      	ldr	r2, [pc, #12]	; (b614c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b6140:	601a      	str	r2, [r3, #0]
   b6142:	2200      	movs	r2, #0
   b6144:	605a      	str	r2, [r3, #4]

} // spark
   b6146:	4770      	bx	lr
   b6148:	2003e6d4 	.word	0x2003e6d4
   b614c:	000b8ec0 	.word	0x000b8ec0

000b6150 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b6150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6152:	4606      	mov	r6, r0
   b6154:	460d      	mov	r5, r1
  size_t n = 0;
   b6156:	188f      	adds	r7, r1, r2
   b6158:	2400      	movs	r4, #0
  while (size--) {
   b615a:	42bd      	cmp	r5, r7
   b615c:	d00c      	beq.n	b6178 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b615e:	6833      	ldr	r3, [r6, #0]
   b6160:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6164:	689b      	ldr	r3, [r3, #8]
   b6166:	4630      	mov	r0, r6
   b6168:	4798      	blx	r3
     if (chunk>=0)
   b616a:	1e03      	subs	r3, r0, #0
   b616c:	db01      	blt.n	b6172 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b616e:	441c      	add	r4, r3
  while (size--) {
   b6170:	e7f3      	b.n	b615a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b6172:	2c00      	cmp	r4, #0
   b6174:	bf08      	it	eq
   b6176:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b6178:	4620      	mov	r0, r4
   b617a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b617c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b617c:	b513      	push	{r0, r1, r4, lr}
   b617e:	4604      	mov	r4, r0
    }
   b6180:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b6182:	b159      	cbz	r1, b619c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b6184:	9101      	str	r1, [sp, #4]
   b6186:	f002 fd08 	bl	b8b9a <strlen>
   b618a:	6823      	ldr	r3, [r4, #0]
   b618c:	9901      	ldr	r1, [sp, #4]
   b618e:	68db      	ldr	r3, [r3, #12]
   b6190:	4602      	mov	r2, r0
   b6192:	4620      	mov	r0, r4
    }
   b6194:	b002      	add	sp, #8
   b6196:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b619a:	4718      	bx	r3
    }
   b619c:	b002      	add	sp, #8
   b619e:	bd10      	pop	{r4, pc}

000b61a0 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b61a0:	b508      	push	{r3, lr}
  return write(str);
   b61a2:	f7ff ffeb 	bl	b617c <_ZN5Print5writeEPKc>
}
   b61a6:	bd08      	pop	{r3, pc}

000b61a8 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b61a8:	6803      	ldr	r3, [r0, #0]
   b61aa:	689b      	ldr	r3, [r3, #8]
   b61ac:	4718      	bx	r3

000b61ae <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b61ae:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b61b0:	210d      	movs	r1, #13
{
   b61b2:	4605      	mov	r5, r0
  size_t n = print('\r');
   b61b4:	f7ff fff8 	bl	b61a8 <_ZN5Print5printEc>
  n += print('\n');
   b61b8:	210a      	movs	r1, #10
  size_t n = print('\r');
   b61ba:	4604      	mov	r4, r0
  n += print('\n');
   b61bc:	4628      	mov	r0, r5
   b61be:	f7ff fff3 	bl	b61a8 <_ZN5Print5printEc>
  return n;
}
   b61c2:	4420      	add	r0, r4
   b61c4:	bd38      	pop	{r3, r4, r5, pc}

000b61c6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b61c6:	b530      	push	{r4, r5, lr}
   b61c8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b61ca:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b61cc:	2a01      	cmp	r2, #1
  *str = '\0';
   b61ce:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b61d2:	bf98      	it	ls
   b61d4:	220a      	movls	r2, #10
   b61d6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b61d8:	460d      	mov	r5, r1
   b61da:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b61de:	fb01 5312 	mls	r3, r1, r2, r5
   b61e2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b61e6:	2b09      	cmp	r3, #9
   b61e8:	bf94      	ite	ls
   b61ea:	3330      	addls	r3, #48	; 0x30
   b61ec:	3337      	addhi	r3, #55	; 0x37
   b61ee:	b2db      	uxtb	r3, r3
  } while(n);
   b61f0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b61f2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b61f6:	d9ef      	bls.n	b61d8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b61f8:	4621      	mov	r1, r4
   b61fa:	f7ff ffbf 	bl	b617c <_ZN5Print5writeEPKc>
}
   b61fe:	b00b      	add	sp, #44	; 0x2c
   b6200:	bd30      	pop	{r4, r5, pc}

000b6202 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b6202:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6206:	b086      	sub	sp, #24
   b6208:	af00      	add	r7, sp, #0
   b620a:	4605      	mov	r5, r0
   b620c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b620e:	1d38      	adds	r0, r7, #4
   b6210:	2114      	movs	r1, #20
{
   b6212:	4614      	mov	r4, r2
    va_copy(args2, args);
   b6214:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b6216:	f7ff faa1 	bl	b575c <vsnprintf>

    if (n<bufsize)
   b621a:	2813      	cmp	r0, #19
   b621c:	d80e      	bhi.n	b623c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b621e:	1d39      	adds	r1, r7, #4
   b6220:	4628      	mov	r0, r5
   b6222:	f7ff ffab 	bl	b617c <_ZN5Print5writeEPKc>
   b6226:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b6228:	b11e      	cbz	r6, b6232 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b622a:	4628      	mov	r0, r5
   b622c:	f7ff ffbf 	bl	b61ae <_ZN5Print7printlnEv>
   b6230:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b6232:	4620      	mov	r0, r4
   b6234:	3718      	adds	r7, #24
   b6236:	46bd      	mov	sp, r7
   b6238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b623c:	f100 0308 	add.w	r3, r0, #8
   b6240:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b6244:	46e8      	mov	r8, sp
        char bigger[n+1];
   b6246:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b624a:	4622      	mov	r2, r4
   b624c:	1c41      	adds	r1, r0, #1
   b624e:	683b      	ldr	r3, [r7, #0]
   b6250:	4668      	mov	r0, sp
   b6252:	f7ff fa83 	bl	b575c <vsnprintf>
  return write(str);
   b6256:	4669      	mov	r1, sp
   b6258:	4628      	mov	r0, r5
   b625a:	f7ff ff8f 	bl	b617c <_ZN5Print5writeEPKc>
   b625e:	4604      	mov	r4, r0
   b6260:	46c5      	mov	sp, r8
   b6262:	e7e1      	b.n	b6228 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b6264 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b6264:	4b01      	ldr	r3, [pc, #4]	; (b626c <_GLOBAL__sub_I_RGB+0x8>)
   b6266:	2200      	movs	r2, #0
   b6268:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b626a:	4770      	bx	lr
   b626c:	2003e6dc 	.word	0x2003e6dc

000b6270 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b6270:	2100      	movs	r1, #0
   b6272:	f7ff b92f 	b.w	b54d4 <hal_spi_release>

000b6276 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b6276:	2100      	movs	r1, #0
   b6278:	f7ff b924 	b.w	b54c4 <hal_spi_acquire>

000b627c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b627c:	b510      	push	{r4, lr}
   b627e:	4604      	mov	r4, r0
   b6280:	4608      	mov	r0, r1
{
    _spi = spi;
   b6282:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b6284:	f7ff f8fe 	bl	b5484 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b6288:	2300      	movs	r3, #0
   b628a:	6063      	str	r3, [r4, #4]
}
   b628c:	4620      	mov	r0, r4
   b628e:	bd10      	pop	{r4, pc}

000b6290 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b6290:	b513      	push	{r0, r1, r4, lr}
   b6292:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b6294:	7800      	ldrb	r0, [r0, #0]
   b6296:	f7ff ffee 	bl	b6276 <_ZN8SPIClass4lockEv.isra.0>
   b629a:	b958      	cbnz	r0, b62b4 <_ZN8SPIClass5beginEv+0x24>
   b629c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b629e:	9001      	str	r0, [sp, #4]
   b62a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b62a4:	f7ff f8de 	bl	b5464 <hal_spi_begin>
        unlock();
   b62a8:	9801      	ldr	r0, [sp, #4]
    }
}
   b62aa:	b002      	add	sp, #8
   b62ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b62b0:	f7ff bfde 	b.w	b6270 <_ZN8SPIClass6unlockEv.isra.0>
   b62b4:	b002      	add	sp, #8
   b62b6:	bd10      	pop	{r4, pc}

000b62b8 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b62b8:	7800      	ldrb	r0, [r0, #0]
   b62ba:	f7ff bfd9 	b.w	b6270 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b62c0 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b62c0:	0840      	lsrs	r0, r0, #1
{
   b62c2:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b62c4:	6018      	str	r0, [r3, #0]
   b62c6:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b62c8:	6818      	ldr	r0, [r3, #0]
   b62ca:	4288      	cmp	r0, r1
   b62cc:	b2e5      	uxtb	r5, r4
   b62ce:	d906      	bls.n	b62de <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b62d0:	3401      	adds	r4, #1
   b62d2:	2c08      	cmp	r4, #8
   b62d4:	d002      	beq.n	b62dc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b62d6:	0840      	lsrs	r0, r0, #1
   b62d8:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b62da:	e7f5      	b.n	b62c8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b62dc:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b62de:	4b02      	ldr	r3, [pc, #8]	; (b62e8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b62e0:	5d5b      	ldrb	r3, [r3, r5]
   b62e2:	7013      	strb	r3, [r2, #0]
}
   b62e4:	bd30      	pop	{r4, r5, pc}
   b62e6:	bf00      	nop
   b62e8:	000b8ef4 	.word	0x000b8ef4

000b62ec <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b62ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b62f0:	4606      	mov	r6, r0
   b62f2:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b62f4:	7800      	ldrb	r0, [r0, #0]
{
   b62f6:	460c      	mov	r4, r1
    CHECK(lock());
   b62f8:	f7ff ffbd 	bl	b6276 <_ZN8SPIClass4lockEv.isra.0>
   b62fc:	2800      	cmp	r0, #0
   b62fe:	db1b      	blt.n	b6338 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b6300:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b6302:	2214      	movs	r2, #20
   b6304:	2100      	movs	r1, #0
   b6306:	a809      	add	r0, sp, #36	; 0x24
   b6308:	f002 fbf4 	bl	b8af4 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b630c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b630e:	2200      	movs	r2, #0
   b6310:	a909      	add	r1, sp, #36	; 0x24
   b6312:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b6314:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b6318:	f7ff f8c4 	bl	b54a4 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b631c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b6320:	b113      	cbz	r3, b6328 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b6322:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b6326:	b155      	cbz	r5, b633e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b6328:	2700      	movs	r7, #0
   b632a:	46b9      	mov	r9, r7
   b632c:	46b8      	mov	r8, r7
   b632e:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b6330:	7923      	ldrb	r3, [r4, #4]
   b6332:	b15d      	cbz	r5, b634c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b6334:	b1c3      	cbz	r3, b6368 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b6336:	2000      	movs	r0, #0
}
   b6338:	b00f      	add	sp, #60	; 0x3c
   b633a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b633e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b6342:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b6346:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b634a:	e7f1      	b.n	b6330 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b634c:	2b00      	cmp	r3, #0
   b634e:	d135      	bne.n	b63bc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b6350:	68a3      	ldr	r3, [r4, #8]
   b6352:	4543      	cmp	r3, r8
   b6354:	d108      	bne.n	b6368 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b6356:	f88d 9020 	strb.w	r9, [sp, #32]
   b635a:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b635e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b6362:	89a3      	ldrh	r3, [r4, #12]
   b6364:	429a      	cmp	r2, r3
   b6366:	d0e6      	beq.n	b6336 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b6368:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b636a:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b636c:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b6370:	980a      	ldr	r0, [sp, #40]	; 0x28
   b6372:	ab04      	add	r3, sp, #16
   b6374:	f10d 020f 	add.w	r2, sp, #15
   b6378:	f7ff ffa2 	bl	b62c0 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b637c:	7921      	ldrb	r1, [r4, #4]
   b637e:	b985      	cbnz	r5, b63a2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b6380:	b989      	cbnz	r1, b63a6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b6382:	68a3      	ldr	r3, [r4, #8]
   b6384:	4543      	cmp	r3, r8
   b6386:	d30e      	bcc.n	b63a6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b6388:	f88d 9020 	strb.w	r9, [sp, #32]
   b638c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b6390:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b6394:	89a3      	ldrh	r3, [r4, #12]
   b6396:	429a      	cmp	r2, r3
   b6398:	d105      	bne.n	b63a6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b639a:	9b04      	ldr	r3, [sp, #16]
   b639c:	4543      	cmp	r3, r8
   b639e:	d102      	bne.n	b63a6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b63a0:	e7c9      	b.n	b6336 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b63a2:	2900      	cmp	r1, #0
   b63a4:	d1f9      	bne.n	b639a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b63a6:	2300      	movs	r3, #0
   b63a8:	9301      	str	r3, [sp, #4]
   b63aa:	7b63      	ldrb	r3, [r4, #13]
   b63ac:	9300      	str	r3, [sp, #0]
   b63ae:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b63b2:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b63b4:	7830      	ldrb	r0, [r6, #0]
   b63b6:	f7ff f87d 	bl	b54b4 <hal_spi_set_settings>
   b63ba:	e7bc      	b.n	b6336 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b63bc:	e9cd 5500 	strd	r5, r5, [sp]
   b63c0:	462b      	mov	r3, r5
   b63c2:	462a      	mov	r2, r5
   b63c4:	2101      	movs	r1, #1
   b63c6:	e7f5      	b.n	b63b4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b63c8 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b63c8:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b63ca:	7800      	ldrb	r0, [r0, #0]
   b63cc:	f7ff f852 	bl	b5474 <hal_spi_transfer>
}
   b63d0:	b2c0      	uxtb	r0, r0
   b63d2:	bd08      	pop	{r3, pc}

000b63d4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b63d4:	b510      	push	{r4, lr}
   b63d6:	4604      	mov	r4, r0
{
	free(buffer);
   b63d8:	6800      	ldr	r0, [r0, #0]
   b63da:	f7ff f9af 	bl	b573c <free>
}
   b63de:	4620      	mov	r0, r4
   b63e0:	bd10      	pop	{r4, pc}

000b63e2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b63e2:	b510      	push	{r4, lr}
   b63e4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b63e6:	6800      	ldr	r0, [r0, #0]
   b63e8:	b108      	cbz	r0, b63ee <_ZN6String10invalidateEv+0xc>
   b63ea:	f7ff f9a7 	bl	b573c <free>
	buffer = NULL;
   b63ee:	2300      	movs	r3, #0
	capacity = len = 0;
   b63f0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b63f4:	6023      	str	r3, [r4, #0]
}
   b63f6:	bd10      	pop	{r4, pc}

000b63f8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b63f8:	b538      	push	{r3, r4, r5, lr}
   b63fa:	4604      	mov	r4, r0
   b63fc:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b63fe:	6800      	ldr	r0, [r0, #0]
   b6400:	3101      	adds	r1, #1
   b6402:	f7ff f9a3 	bl	b574c <realloc>
	if (newbuffer) {
   b6406:	b110      	cbz	r0, b640e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b6408:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b640c:	2001      	movs	r0, #1
	}
	return 0;
}
   b640e:	bd38      	pop	{r3, r4, r5, pc}

000b6410 <_ZN6String7reserveEj>:
{
   b6410:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b6412:	6803      	ldr	r3, [r0, #0]
{
   b6414:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b6416:	b123      	cbz	r3, b6422 <_ZN6String7reserveEj+0x12>
   b6418:	6843      	ldr	r3, [r0, #4]
   b641a:	428b      	cmp	r3, r1
   b641c:	d301      	bcc.n	b6422 <_ZN6String7reserveEj+0x12>
   b641e:	2001      	movs	r0, #1
}
   b6420:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b6422:	4620      	mov	r0, r4
   b6424:	f7ff ffe8 	bl	b63f8 <_ZN6String12changeBufferEj>
   b6428:	2800      	cmp	r0, #0
   b642a:	d0f9      	beq.n	b6420 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b642c:	68a3      	ldr	r3, [r4, #8]
   b642e:	2b00      	cmp	r3, #0
   b6430:	d1f5      	bne.n	b641e <_ZN6String7reserveEj+0xe>
   b6432:	6822      	ldr	r2, [r4, #0]
   b6434:	7013      	strb	r3, [r2, #0]
   b6436:	e7f2      	b.n	b641e <_ZN6String7reserveEj+0xe>

000b6438 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b6438:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b643a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b643c:	4611      	mov	r1, r2
   b643e:	9201      	str	r2, [sp, #4]
{
   b6440:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b6442:	f7ff ffe5 	bl	b6410 <_ZN6String7reserveEj>
   b6446:	9a01      	ldr	r2, [sp, #4]
   b6448:	b928      	cbnz	r0, b6456 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b644a:	4620      	mov	r0, r4
   b644c:	f7ff ffc9 	bl	b63e2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b6450:	4620      	mov	r0, r4
   b6452:	b003      	add	sp, #12
   b6454:	bd30      	pop	{r4, r5, pc}
	len = length;
   b6456:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b6458:	4629      	mov	r1, r5
   b645a:	6820      	ldr	r0, [r4, #0]
   b645c:	f002 fb3c 	bl	b8ad8 <memcpy>
	buffer[len] = 0;
   b6460:	6822      	ldr	r2, [r4, #0]
   b6462:	68a3      	ldr	r3, [r4, #8]
   b6464:	2100      	movs	r1, #0
   b6466:	54d1      	strb	r1, [r2, r3]
	return *this;
   b6468:	e7f2      	b.n	b6450 <_ZN6String4copyEPKcj+0x18>

000b646a <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b646a:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b646c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b646e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b6472:	4604      	mov	r4, r0
	len = 0;
   b6474:	6083      	str	r3, [r0, #8]
	flags = 0;
   b6476:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b6478:	b141      	cbz	r1, b648c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b647a:	4608      	mov	r0, r1
   b647c:	9101      	str	r1, [sp, #4]
   b647e:	f002 fb8c 	bl	b8b9a <strlen>
   b6482:	9901      	ldr	r1, [sp, #4]
   b6484:	4602      	mov	r2, r0
   b6486:	4620      	mov	r0, r4
   b6488:	f7ff ffd6 	bl	b6438 <_ZN6String4copyEPKcj>
}
   b648c:	4620      	mov	r0, r4
   b648e:	b002      	add	sp, #8
   b6490:	bd10      	pop	{r4, pc}

000b6492 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b6492:	4288      	cmp	r0, r1
{
   b6494:	b510      	push	{r4, lr}
   b6496:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b6498:	d005      	beq.n	b64a6 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b649a:	680b      	ldr	r3, [r1, #0]
   b649c:	b12b      	cbz	r3, b64aa <_ZN6StringaSERKS_+0x18>
   b649e:	688a      	ldr	r2, [r1, #8]
   b64a0:	4619      	mov	r1, r3
   b64a2:	f7ff ffc9 	bl	b6438 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b64a6:	4620      	mov	r0, r4
   b64a8:	bd10      	pop	{r4, pc}
	else invalidate();
   b64aa:	f7ff ff9a 	bl	b63e2 <_ZN6String10invalidateEv>
   b64ae:	e7fa      	b.n	b64a6 <_ZN6StringaSERKS_+0x14>

000b64b0 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b64b0:	b510      	push	{r4, lr}
	buffer = NULL;
   b64b2:	2300      	movs	r3, #0
String::String(const String &value)
   b64b4:	4604      	mov	r4, r0
	capacity = 0;
   b64b6:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b64ba:	6083      	str	r3, [r0, #8]
	flags = 0;
   b64bc:	7303      	strb	r3, [r0, #12]
	*this = value;
   b64be:	f7ff ffe8 	bl	b6492 <_ZN6StringaSERKS_>
}
   b64c2:	4620      	mov	r0, r4
   b64c4:	bd10      	pop	{r4, pc}

000b64c6 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b64c6:	b513      	push	{r0, r1, r4, lr}
   b64c8:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b64ca:	b159      	cbz	r1, b64e4 <_ZN6StringaSEPKc+0x1e>
   b64cc:	4608      	mov	r0, r1
   b64ce:	9101      	str	r1, [sp, #4]
   b64d0:	f002 fb63 	bl	b8b9a <strlen>
   b64d4:	9901      	ldr	r1, [sp, #4]
   b64d6:	4602      	mov	r2, r0
   b64d8:	4620      	mov	r0, r4
   b64da:	f7ff ffad 	bl	b6438 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b64de:	4620      	mov	r0, r4
   b64e0:	b002      	add	sp, #8
   b64e2:	bd10      	pop	{r4, pc}
	else invalidate();
   b64e4:	f7ff ff7d 	bl	b63e2 <_ZN6String10invalidateEv>
   b64e8:	e7f9      	b.n	b64de <_ZN6StringaSEPKc+0x18>
	...

000b64ec <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b64ec:	4b05      	ldr	r3, [pc, #20]	; (b6504 <_GLOBAL__sub_I_System+0x18>)
   b64ee:	2202      	movs	r2, #2
   b64f0:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b64f2:	4b05      	ldr	r3, [pc, #20]	; (b6508 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b64f4:	4a05      	ldr	r2, [pc, #20]	; (b650c <_GLOBAL__sub_I_System+0x20>)
   b64f6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b64f8:	2000      	movs	r0, #0
   b64fa:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b64fe:	f7ff b869 	b.w	b55d4 <set_system_mode>
   b6502:	bf00      	nop
   b6504:	2003e6f8 	.word	0x2003e6f8
   b6508:	2003e6ec 	.word	0x2003e6ec
   b650c:	ffff0000 	.word	0xffff0000

000b6510 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b6510:	4b02      	ldr	r3, [pc, #8]	; (b651c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b6512:	681a      	ldr	r2, [r3, #0]
   b6514:	4b02      	ldr	r3, [pc, #8]	; (b6520 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b6516:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b6518:	4770      	bx	lr
   b651a:	bf00      	nop
   b651c:	2003e598 	.word	0x2003e598
   b6520:	2003e6fc 	.word	0x2003e6fc

000b6524 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b6524:	4770      	bx	lr

000b6526 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6526:	7441      	strb	r1, [r0, #17]
}
   b6528:	4770      	bx	lr

000b652a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b652a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b652c:	7c00      	ldrb	r0, [r0, #16]
   b652e:	f7ff f809 	bl	b5544 <hal_usart_available_data_for_write>
}
   b6532:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6536:	bd08      	pop	{r3, pc}

000b6538 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b6538:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b653a:	7c00      	ldrb	r0, [r0, #16]
   b653c:	f7fe ffda 	bl	b54f4 <hal_usart_available>
}
   b6540:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6544:	bd08      	pop	{r3, pc}

000b6546 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b6546:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b6548:	7c00      	ldrb	r0, [r0, #16]
   b654a:	f7fe ffe3 	bl	b5514 <hal_usart_peek>
}
   b654e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6552:	bd08      	pop	{r3, pc}

000b6554 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b6554:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b6556:	7c00      	ldrb	r0, [r0, #16]
   b6558:	f7fe ffd4 	bl	b5504 <hal_usart_read>
}
   b655c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6560:	bd08      	pop	{r3, pc}

000b6562 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b6562:	7c00      	ldrb	r0, [r0, #16]
   b6564:	f7fe bfde 	b.w	b5524 <hal_usart_flush>

000b6568 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b6568:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b656a:	7c45      	ldrb	r5, [r0, #17]
{
   b656c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b656e:	b12d      	cbz	r5, b657c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b6570:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b6572:	b003      	add	sp, #12
   b6574:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b6578:	f7fe bfb4 	b.w	b54e4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b657c:	7c00      	ldrb	r0, [r0, #16]
   b657e:	9101      	str	r1, [sp, #4]
   b6580:	f7fe ffe0 	bl	b5544 <hal_usart_available_data_for_write>
   b6584:	2800      	cmp	r0, #0
   b6586:	9901      	ldr	r1, [sp, #4]
   b6588:	dcf2      	bgt.n	b6570 <_ZN11USARTSerial5writeEh+0x8>
}
   b658a:	4628      	mov	r0, r5
   b658c:	b003      	add	sp, #12
   b658e:	bd30      	pop	{r4, r5, pc}

000b6590 <_ZN11USARTSerialD0Ev>:
   b6590:	b510      	push	{r4, lr}
   b6592:	2114      	movs	r1, #20
   b6594:	4604      	mov	r4, r0
   b6596:	f7fd fd82 	bl	b409e <_ZdlPvj>
   b659a:	4620      	mov	r0, r4
   b659c:	bd10      	pop	{r4, pc}
	...

000b65a0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b65a0:	b510      	push	{r4, lr}
   b65a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b65a6:	4604      	mov	r4, r0
   b65a8:	4608      	mov	r0, r1
   b65aa:	4611      	mov	r1, r2
   b65ac:	2200      	movs	r2, #0
   b65ae:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b65b2:	4b04      	ldr	r3, [pc, #16]	; (b65c4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b65b4:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b65b6:	2301      	movs	r3, #1
  _serial = serial;
   b65b8:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b65ba:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b65bc:	f7fe ffca 	bl	b5554 <hal_usart_init_ex>
}
   b65c0:	4620      	mov	r0, r4
   b65c2:	bd10      	pop	{r4, pc}
   b65c4:	000b8f20 	.word	0x000b8f20

000b65c8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b65c8:	7441      	strb	r1, [r0, #17]
}
   b65ca:	4770      	bx	lr

000b65cc <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b65cc:	4770      	bx	lr

000b65ce <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b65ce:	4770      	bx	lr

000b65d0 <_ZN9USBSerial4readEv>:
{
   b65d0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b65d2:	2100      	movs	r1, #0
   b65d4:	7c00      	ldrb	r0, [r0, #16]
   b65d6:	f7fe ffe5 	bl	b55a4 <HAL_USB_USART_Receive_Data>
}
   b65da:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b65de:	bd08      	pop	{r3, pc}

000b65e0 <_ZN9USBSerial4peekEv>:
{
   b65e0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b65e2:	2101      	movs	r1, #1
   b65e4:	7c00      	ldrb	r0, [r0, #16]
   b65e6:	f7fe ffdd 	bl	b55a4 <HAL_USB_USART_Receive_Data>
}
   b65ea:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b65ee:	bd08      	pop	{r3, pc}

000b65f0 <_ZN9USBSerial17availableForWriteEv>:
{
   b65f0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b65f2:	7c00      	ldrb	r0, [r0, #16]
   b65f4:	f7fe ffce 	bl	b5594 <HAL_USB_USART_Available_Data_For_Write>
}
   b65f8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b65fc:	bd08      	pop	{r3, pc}

000b65fe <_ZN9USBSerial9availableEv>:
{
   b65fe:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b6600:	7c00      	ldrb	r0, [r0, #16]
   b6602:	f7fe ffbf 	bl	b5584 <HAL_USB_USART_Available_Data>
}
   b6606:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b660a:	bd08      	pop	{r3, pc}

000b660c <_ZN9USBSerial5writeEh>:
{
   b660c:	b513      	push	{r0, r1, r4, lr}
   b660e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6610:	7c00      	ldrb	r0, [r0, #16]
{
   b6612:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6614:	f7fe ffbe 	bl	b5594 <HAL_USB_USART_Available_Data_For_Write>
   b6618:	2800      	cmp	r0, #0
   b661a:	9901      	ldr	r1, [sp, #4]
   b661c:	dc01      	bgt.n	b6622 <_ZN9USBSerial5writeEh+0x16>
   b661e:	7c60      	ldrb	r0, [r4, #17]
   b6620:	b120      	cbz	r0, b662c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b6622:	7c20      	ldrb	r0, [r4, #16]
   b6624:	f7fe ffc6 	bl	b55b4 <HAL_USB_USART_Send_Data>
   b6628:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b662c:	b002      	add	sp, #8
   b662e:	bd10      	pop	{r4, pc}

000b6630 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b6630:	7c00      	ldrb	r0, [r0, #16]
   b6632:	f7fe bfc7 	b.w	b55c4 <HAL_USB_USART_Flush_Data>

000b6636 <_ZN9USBSerialD0Ev>:
   b6636:	b510      	push	{r4, lr}
   b6638:	2114      	movs	r1, #20
   b663a:	4604      	mov	r4, r0
   b663c:	f7fd fd2f 	bl	b409e <_ZdlPvj>
   b6640:	4620      	mov	r0, r4
   b6642:	bd10      	pop	{r4, pc}

000b6644 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b6644:	b510      	push	{r4, lr}
   b6646:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b664a:	4604      	mov	r4, r0
   b664c:	4608      	mov	r0, r1
   b664e:	2100      	movs	r1, #0
   b6650:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6654:	4b04      	ldr	r3, [pc, #16]	; (b6668 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b6656:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6658:	2301      	movs	r3, #1
  _serial = serial;
   b665a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b665c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b665e:	4611      	mov	r1, r2
   b6660:	f7fe ff80 	bl	b5564 <HAL_USB_USART_Init>
}
   b6664:	4620      	mov	r0, r4
   b6666:	bd10      	pop	{r4, pc}
   b6668:	000b8f50 	.word	0x000b8f50

000b666c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b666c:	7c00      	ldrb	r0, [r0, #16]
   b666e:	2200      	movs	r2, #0
   b6670:	f7fe bf80 	b.w	b5574 <HAL_USB_USART_Begin>

000b6674 <_Z19acquireSerialBufferv>:
{
   b6674:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b6676:	2214      	movs	r2, #20
{
   b6678:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b667a:	2100      	movs	r1, #0
   b667c:	f002 fa3a 	bl	b8af4 <memset>
}
   b6680:	4620      	mov	r0, r4
   b6682:	bd10      	pop	{r4, pc}

000b6684 <_Z16_fetch_usbserialv>:
{
   b6684:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6686:	4c0f      	ldr	r4, [pc, #60]	; (b66c4 <_Z16_fetch_usbserialv+0x40>)
{
   b6688:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b668a:	a803      	add	r0, sp, #12
   b668c:	f7ff fff2 	bl	b6674 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6690:	7821      	ldrb	r1, [r4, #0]
   b6692:	f3bf 8f5b 	dmb	ish
   b6696:	f011 0101 	ands.w	r1, r1, #1
   b669a:	d10f      	bne.n	b66bc <_Z16_fetch_usbserialv+0x38>
   b669c:	4620      	mov	r0, r4
   b669e:	9101      	str	r1, [sp, #4]
   b66a0:	f7fd fcff 	bl	b40a2 <__cxa_guard_acquire>
   b66a4:	9901      	ldr	r1, [sp, #4]
   b66a6:	b148      	cbz	r0, b66bc <_Z16_fetch_usbserialv+0x38>
   b66a8:	aa03      	add	r2, sp, #12
   b66aa:	4807      	ldr	r0, [pc, #28]	; (b66c8 <_Z16_fetch_usbserialv+0x44>)
   b66ac:	f7ff ffca 	bl	b6644 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b66b0:	4620      	mov	r0, r4
   b66b2:	f7fd fcfb 	bl	b40ac <__cxa_guard_release>
   b66b6:	4805      	ldr	r0, [pc, #20]	; (b66cc <_Z16_fetch_usbserialv+0x48>)
   b66b8:	f002 fa08 	bl	b8acc <atexit>
	return _usbserial;
}
   b66bc:	4802      	ldr	r0, [pc, #8]	; (b66c8 <_Z16_fetch_usbserialv+0x44>)
   b66be:	b008      	add	sp, #32
   b66c0:	bd10      	pop	{r4, pc}
   b66c2:	bf00      	nop
   b66c4:	2003e700 	.word	0x2003e700
   b66c8:	2003e704 	.word	0x2003e704
   b66cc:	000b65cd 	.word	0x000b65cd

000b66d0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b66d0:	2200      	movs	r2, #0
   b66d2:	6840      	ldr	r0, [r0, #4]
   b66d4:	4611      	mov	r1, r2
   b66d6:	f7fe bfe1 	b.w	b569c <network_ready>

000b66da <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b66da:	2200      	movs	r2, #0
   b66dc:	6840      	ldr	r0, [r0, #4]
   b66de:	4611      	mov	r1, r2
   b66e0:	f7fe bffc 	b.w	b56dc <network_listening>

000b66e4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b66e4:	2200      	movs	r2, #0
   b66e6:	6840      	ldr	r0, [r0, #4]
   b66e8:	4611      	mov	r1, r2
   b66ea:	f7ff b807 	b.w	b56fc <network_get_listen_timeout>

000b66ee <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b66ee:	6840      	ldr	r0, [r0, #4]
   b66f0:	2200      	movs	r2, #0
   b66f2:	f7fe bffb 	b.w	b56ec <network_set_listen_timeout>

000b66f6 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b66f6:	6840      	ldr	r0, [r0, #4]
   b66f8:	2200      	movs	r2, #0
   b66fa:	f081 0101 	eor.w	r1, r1, #1
   b66fe:	f7fe bfe5 	b.w	b56cc <network_listen>

000b6702 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6702:	2300      	movs	r3, #0
   b6704:	6840      	ldr	r0, [r0, #4]
   b6706:	461a      	mov	r2, r3
   b6708:	4619      	mov	r1, r3
   b670a:	f7fe bfd7 	b.w	b56bc <network_off>

000b670e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b670e:	2300      	movs	r3, #0
   b6710:	6840      	ldr	r0, [r0, #4]
   b6712:	461a      	mov	r2, r3
   b6714:	4619      	mov	r1, r3
   b6716:	f7fe bfc9 	b.w	b56ac <network_on>

000b671a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b671a:	2200      	movs	r2, #0
   b671c:	6840      	ldr	r0, [r0, #4]
   b671e:	4611      	mov	r1, r2
   b6720:	f7fe bfac 	b.w	b567c <network_connecting>

000b6724 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6724:	6840      	ldr	r0, [r0, #4]
   b6726:	2200      	movs	r2, #0
   b6728:	2102      	movs	r1, #2
   b672a:	f7fe bfaf 	b.w	b568c <network_disconnect>

000b672e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b672e:	2300      	movs	r3, #0
   b6730:	6840      	ldr	r0, [r0, #4]
   b6732:	461a      	mov	r2, r3
   b6734:	f7fe bf9a 	b.w	b566c <network_connect>

000b6738 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b6738:	4b02      	ldr	r3, [pc, #8]	; (b6744 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b673a:	2204      	movs	r2, #4
   b673c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b673e:	4a02      	ldr	r2, [pc, #8]	; (b6748 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b6740:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b6742:	4770      	bx	lr
   b6744:	2003e718 	.word	0x2003e718
   b6748:	000b8f80 	.word	0x000b8f80

000b674c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b674c:	4b01      	ldr	r3, [pc, #4]	; (b6754 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b674e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b6750:	4770      	bx	lr
   b6752:	bf00      	nop
   b6754:	2003e5a0 	.word	0x2003e5a0

000b6758 <serialEventRun>:
{
   b6758:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b675a:	4b0b      	ldr	r3, [pc, #44]	; (b6788 <serialEventRun+0x30>)
   b675c:	b143      	cbz	r3, b6770 <serialEventRun+0x18>
   b675e:	f7ff ff91 	bl	b6684 <_Z16_fetch_usbserialv>
   b6762:	6803      	ldr	r3, [r0, #0]
   b6764:	691b      	ldr	r3, [r3, #16]
   b6766:	4798      	blx	r3
   b6768:	2800      	cmp	r0, #0
   b676a:	dd01      	ble.n	b6770 <serialEventRun+0x18>
        serialEvent();
   b676c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b6770:	4b06      	ldr	r3, [pc, #24]	; (b678c <serialEventRun+0x34>)
   b6772:	b143      	cbz	r3, b6786 <serialEventRun+0x2e>
   b6774:	f000 f976 	bl	b6a64 <_Z22__fetch_global_Serial1v>
   b6778:	6803      	ldr	r3, [r0, #0]
   b677a:	691b      	ldr	r3, [r3, #16]
   b677c:	4798      	blx	r3
   b677e:	2800      	cmp	r0, #0
   b6780:	dd01      	ble.n	b6786 <serialEventRun+0x2e>
        serialEvent1();
   b6782:	f3af 8000 	nop.w
}
   b6786:	bd08      	pop	{r3, pc}
	...

000b6790 <_post_loop>:
{
   b6790:	b508      	push	{r3, lr}
	serialEventRun();
   b6792:	f7ff ffe1 	bl	b6758 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b6796:	f7fe fdb5 	bl	b5304 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b679a:	4b01      	ldr	r3, [pc, #4]	; (b67a0 <_post_loop+0x10>)
   b679c:	6018      	str	r0, [r3, #0]
}
   b679e:	bd08      	pop	{r3, pc}
   b67a0:	2003e728 	.word	0x2003e728

000b67a4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b67a4:	4805      	ldr	r0, [pc, #20]	; (b67bc <_Z33system_initialize_user_backup_ramv+0x18>)
   b67a6:	4a06      	ldr	r2, [pc, #24]	; (b67c0 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b67a8:	4906      	ldr	r1, [pc, #24]	; (b67c4 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b67aa:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b67ac:	1a12      	subs	r2, r2, r0
   b67ae:	f002 f993 	bl	b8ad8 <memcpy>
    __backup_sram_signature = signature;
   b67b2:	4b05      	ldr	r3, [pc, #20]	; (b67c8 <_Z33system_initialize_user_backup_ramv+0x24>)
   b67b4:	4a05      	ldr	r2, [pc, #20]	; (b67cc <_Z33system_initialize_user_backup_ramv+0x28>)
   b67b6:	601a      	str	r2, [r3, #0]
}
   b67b8:	bd08      	pop	{r3, pc}
   b67ba:	bf00      	nop
   b67bc:	2003f400 	.word	0x2003f400
   b67c0:	2003f404 	.word	0x2003f404
   b67c4:	000b909c 	.word	0x000b909c
   b67c8:	2003f400 	.word	0x2003f400
   b67cc:	9a271c1e 	.word	0x9a271c1e

000b67d0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b67d0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b67d2:	2300      	movs	r3, #0
   b67d4:	9300      	str	r3, [sp, #0]
   b67d6:	461a      	mov	r2, r3
   b67d8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b67dc:	f7fe ff24 	bl	b5628 <system_ctrl_set_result>
}
   b67e0:	b003      	add	sp, #12
   b67e2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b67e8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b67e8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b67ea:	8843      	ldrh	r3, [r0, #2]
   b67ec:	2b0a      	cmp	r3, #10
   b67ee:	d008      	beq.n	b6802 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b67f0:	2b50      	cmp	r3, #80	; 0x50
   b67f2:	d10b      	bne.n	b680c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b67f4:	4b09      	ldr	r3, [pc, #36]	; (b681c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b67f6:	681b      	ldr	r3, [r3, #0]
   b67f8:	b14b      	cbz	r3, b680e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b67fa:	b003      	add	sp, #12
   b67fc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b6800:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b6802:	f7ff ffe5 	bl	b67d0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b6806:	b003      	add	sp, #12
   b6808:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b680c:	2300      	movs	r3, #0
   b680e:	9300      	str	r3, [sp, #0]
   b6810:	461a      	mov	r2, r3
   b6812:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6816:	f7fe ff07 	bl	b5628 <system_ctrl_set_result>
}
   b681a:	e7f4      	b.n	b6806 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b681c:	2003e724 	.word	0x2003e724

000b6820 <module_user_init_hook>:
{
   b6820:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b6822:	4812      	ldr	r0, [pc, #72]	; (b686c <module_user_init_hook+0x4c>)
   b6824:	2100      	movs	r1, #0
   b6826:	f7fe ffc1 	bl	b57ac <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b682a:	4b11      	ldr	r3, [pc, #68]	; (b6870 <module_user_init_hook+0x50>)
   b682c:	681a      	ldr	r2, [r3, #0]
   b682e:	4b11      	ldr	r3, [pc, #68]	; (b6874 <module_user_init_hook+0x54>)
   b6830:	429a      	cmp	r2, r3
   b6832:	4b11      	ldr	r3, [pc, #68]	; (b6878 <module_user_init_hook+0x58>)
   b6834:	bf0c      	ite	eq
   b6836:	2201      	moveq	r2, #1
   b6838:	2200      	movne	r2, #0
   b683a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b683c:	d001      	beq.n	b6842 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b683e:	f7ff ffb1 	bl	b67a4 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b6842:	f7fe fd57 	bl	b52f4 <HAL_RNG_GetRandomNumber>
   b6846:	4604      	mov	r4, r0
    srand(seed);
   b6848:	f002 f95c 	bl	b8b04 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b684c:	4b0b      	ldr	r3, [pc, #44]	; (b687c <module_user_init_hook+0x5c>)
   b684e:	b113      	cbz	r3, b6856 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b6850:	4620      	mov	r0, r4
   b6852:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b6856:	2100      	movs	r1, #0
   b6858:	4808      	ldr	r0, [pc, #32]	; (b687c <module_user_init_hook+0x5c>)
   b685a:	f7fe feff 	bl	b565c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b685e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b6862:	4807      	ldr	r0, [pc, #28]	; (b6880 <module_user_init_hook+0x60>)
   b6864:	2100      	movs	r1, #0
   b6866:	f7fe bed5 	b.w	b5614 <system_ctrl_set_app_request_handler>
   b686a:	bf00      	nop
   b686c:	000b674d 	.word	0x000b674d
   b6870:	2003f400 	.word	0x2003f400
   b6874:	9a271c1e 	.word	0x9a271c1e
   b6878:	2003e720 	.word	0x2003e720
   b687c:	00000000 	.word	0x00000000
   b6880:	000b67e9 	.word	0x000b67e9

000b6884 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b6884:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b6886:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b6888:	d902      	bls.n	b6890 <pinAvailable+0xc>
    return false;
   b688a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b688c:	b002      	add	sp, #8
   b688e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b6890:	f1a0 030b 	sub.w	r3, r0, #11
   b6894:	2b02      	cmp	r3, #2
   b6896:	d81a      	bhi.n	b68ce <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b6898:	4c17      	ldr	r4, [pc, #92]	; (b68f8 <pinAvailable+0x74>)
   b689a:	7821      	ldrb	r1, [r4, #0]
   b689c:	f3bf 8f5b 	dmb	ish
   b68a0:	f011 0101 	ands.w	r1, r1, #1
   b68a4:	d10b      	bne.n	b68be <pinAvailable+0x3a>
   b68a6:	4620      	mov	r0, r4
   b68a8:	9101      	str	r1, [sp, #4]
   b68aa:	f7fd fbfa 	bl	b40a2 <__cxa_guard_acquire>
   b68ae:	9901      	ldr	r1, [sp, #4]
   b68b0:	b128      	cbz	r0, b68be <pinAvailable+0x3a>
   b68b2:	4812      	ldr	r0, [pc, #72]	; (b68fc <pinAvailable+0x78>)
   b68b4:	f7ff fce2 	bl	b627c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b68b8:	4620      	mov	r0, r4
   b68ba:	f7fd fbf7 	bl	b40ac <__cxa_guard_release>
   b68be:	4b0f      	ldr	r3, [pc, #60]	; (b68fc <pinAvailable+0x78>)
   b68c0:	7818      	ldrb	r0, [r3, #0]
   b68c2:	f7fe fde7 	bl	b5494 <hal_spi_is_enabled>
   b68c6:	2800      	cmp	r0, #0
   b68c8:	d1df      	bne.n	b688a <pinAvailable+0x6>
  return true; // 'pin' is available
   b68ca:	2001      	movs	r0, #1
   b68cc:	e7de      	b.n	b688c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b68ce:	2801      	cmp	r0, #1
   b68d0:	d809      	bhi.n	b68e6 <pinAvailable+0x62>
   b68d2:	f000 f887 	bl	b69e4 <_Z19__fetch_global_Wirev>
   b68d6:	2100      	movs	r1, #0
   b68d8:	7c00      	ldrb	r0, [r0, #16]
   b68da:	f7fe fd93 	bl	b5404 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b68de:	f080 0001 	eor.w	r0, r0, #1
   b68e2:	b2c0      	uxtb	r0, r0
   b68e4:	e7d2      	b.n	b688c <pinAvailable+0x8>
   b68e6:	3809      	subs	r0, #9
   b68e8:	2801      	cmp	r0, #1
   b68ea:	d8ee      	bhi.n	b68ca <pinAvailable+0x46>
   b68ec:	f000 f8ba 	bl	b6a64 <_Z22__fetch_global_Serial1v>
   b68f0:	7c00      	ldrb	r0, [r0, #16]
   b68f2:	f7fe fe1f 	bl	b5534 <hal_usart_is_enabled>
   b68f6:	e7f2      	b.n	b68de <pinAvailable+0x5a>
   b68f8:	2003e6b8 	.word	0x2003e6b8
   b68fc:	2003e6bc 	.word	0x2003e6bc

000b6900 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6900:	2823      	cmp	r0, #35	; 0x23
{
   b6902:	b538      	push	{r3, r4, r5, lr}
   b6904:	4604      	mov	r4, r0
   b6906:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6908:	d80a      	bhi.n	b6920 <pinMode+0x20>
   b690a:	29ff      	cmp	r1, #255	; 0xff
   b690c:	d008      	beq.n	b6920 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b690e:	f7ff ffb9 	bl	b6884 <pinAvailable>
   b6912:	b128      	cbz	r0, b6920 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b6914:	4629      	mov	r1, r5
   b6916:	4620      	mov	r0, r4
}
   b6918:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b691c:	f7fe bd02 	b.w	b5324 <HAL_Pin_Mode>
}
   b6920:	bd38      	pop	{r3, r4, r5, pc}

000b6922 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b6922:	b538      	push	{r3, r4, r5, lr}
   b6924:	4604      	mov	r4, r0
   b6926:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b6928:	f7fe fd04 	bl	b5334 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b692c:	28ff      	cmp	r0, #255	; 0xff
   b692e:	d010      	beq.n	b6952 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b6930:	2806      	cmp	r0, #6
   b6932:	d804      	bhi.n	b693e <digitalWrite+0x1c>
   b6934:	234d      	movs	r3, #77	; 0x4d
   b6936:	fa23 f000 	lsr.w	r0, r3, r0
   b693a:	07c3      	lsls	r3, r0, #31
   b693c:	d409      	bmi.n	b6952 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b693e:	4620      	mov	r0, r4
   b6940:	f7ff ffa0 	bl	b6884 <pinAvailable>
   b6944:	b128      	cbz	r0, b6952 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b6946:	4629      	mov	r1, r5
   b6948:	4620      	mov	r0, r4
}
   b694a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b694e:	f7fe bcf9 	b.w	b5344 <HAL_GPIO_Write>
}
   b6952:	bd38      	pop	{r3, r4, r5, pc}

000b6954 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b6954:	b510      	push	{r4, lr}
   b6956:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b6958:	f7fe fcec 	bl	b5334 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b695c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b695e:	b2db      	uxtb	r3, r3
   b6960:	2b01      	cmp	r3, #1
   b6962:	d908      	bls.n	b6976 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b6964:	4620      	mov	r0, r4
   b6966:	f7ff ff8d 	bl	b6884 <pinAvailable>
   b696a:	b120      	cbz	r0, b6976 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b696c:	4620      	mov	r0, r4
}
   b696e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b6972:	f7fe bcef 	b.w	b5354 <HAL_GPIO_Read>
}
   b6976:	2000      	movs	r0, #0
   b6978:	bd10      	pop	{r4, pc}

000b697a <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b697a:	280d      	cmp	r0, #13
{
   b697c:	b510      	push	{r4, lr}
   b697e:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b6980:	bf9c      	itt	ls
   b6982:	340e      	addls	r4, #14
   b6984:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b6986:	4620      	mov	r0, r4
   b6988:	f7ff ff7c 	bl	b6884 <pinAvailable>
   b698c:	b150      	cbz	r0, b69a4 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b698e:	2103      	movs	r1, #3
   b6990:	4620      	mov	r0, r4
   b6992:	f7fe fcbf 	bl	b5314 <HAL_Validate_Pin_Function>
   b6996:	2803      	cmp	r0, #3
   b6998:	d104      	bne.n	b69a4 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b699a:	4620      	mov	r0, r4
}
   b699c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b69a0:	f7fe bce0 	b.w	b5364 <hal_adc_read>
}
   b69a4:	2000      	movs	r0, #0
   b69a6:	bd10      	pop	{r4, pc}

000b69a8 <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
   b69a8:	f7fe bce4 	b.w	b5374 <HAL_Pulse_In>

000b69ac <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b69ac:	4770      	bx	lr
	...

000b69b0 <_Z17acquireWireBufferv>:
{
   b69b0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b69b2:	4b0a      	ldr	r3, [pc, #40]	; (b69dc <_Z17acquireWireBufferv+0x2c>)
   b69b4:	6003      	str	r3, [r0, #0]
   b69b6:	2301      	movs	r3, #1
{
   b69b8:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b69ba:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b69bc:	4908      	ldr	r1, [pc, #32]	; (b69e0 <_Z17acquireWireBufferv+0x30>)
   b69be:	2020      	movs	r0, #32
   b69c0:	f000 f874 	bl	b6aac <_ZnajRKSt9nothrow_t>
	};
   b69c4:	2520      	movs	r5, #32
   b69c6:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b69c8:	4905      	ldr	r1, [pc, #20]	; (b69e0 <_Z17acquireWireBufferv+0x30>)
	};
   b69ca:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b69cc:	4628      	mov	r0, r5
   b69ce:	f000 f86d 	bl	b6aac <_ZnajRKSt9nothrow_t>
	};
   b69d2:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b69d6:	4620      	mov	r0, r4
   b69d8:	bd38      	pop	{r3, r4, r5, pc}
   b69da:	bf00      	nop
   b69dc:	00010018 	.word	0x00010018
   b69e0:	000b8fb4 	.word	0x000b8fb4

000b69e4 <_Z19__fetch_global_Wirev>:
{
   b69e4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b69e6:	4d0e      	ldr	r5, [pc, #56]	; (b6a20 <_Z19__fetch_global_Wirev+0x3c>)
   b69e8:	7829      	ldrb	r1, [r5, #0]
   b69ea:	f3bf 8f5b 	dmb	ish
   b69ee:	f011 0401 	ands.w	r4, r1, #1
{
   b69f2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b69f4:	d111      	bne.n	b6a1a <_Z19__fetch_global_Wirev+0x36>
   b69f6:	4628      	mov	r0, r5
   b69f8:	f7fd fb53 	bl	b40a2 <__cxa_guard_acquire>
   b69fc:	b168      	cbz	r0, b6a1a <_Z19__fetch_global_Wirev+0x36>
   b69fe:	4668      	mov	r0, sp
   b6a00:	f7ff ffd6 	bl	b69b0 <_Z17acquireWireBufferv>
   b6a04:	466a      	mov	r2, sp
   b6a06:	4621      	mov	r1, r4
   b6a08:	4806      	ldr	r0, [pc, #24]	; (b6a24 <_Z19__fetch_global_Wirev+0x40>)
   b6a0a:	f7ff fa13 	bl	b5e34 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b6a0e:	4628      	mov	r0, r5
   b6a10:	f7fd fb4c 	bl	b40ac <__cxa_guard_release>
   b6a14:	4804      	ldr	r0, [pc, #16]	; (b6a28 <_Z19__fetch_global_Wirev+0x44>)
   b6a16:	f002 f859 	bl	b8acc <atexit>
	return wire;
}
   b6a1a:	4802      	ldr	r0, [pc, #8]	; (b6a24 <_Z19__fetch_global_Wirev+0x40>)
   b6a1c:	b007      	add	sp, #28
   b6a1e:	bd30      	pop	{r4, r5, pc}
   b6a20:	2003e72c 	.word	0x2003e72c
   b6a24:	2003e730 	.word	0x2003e730
   b6a28:	000b69ad 	.word	0x000b69ad

000b6a2c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6a2c:	4770      	bx	lr
	...

000b6a30 <_Z20acquireSerial1Bufferv>:
{
   b6a30:	b538      	push	{r3, r4, r5, lr}
   b6a32:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b6a34:	2514      	movs	r5, #20
   b6a36:	462a      	mov	r2, r5
   b6a38:	2100      	movs	r1, #0
   b6a3a:	f002 f85b 	bl	b8af4 <memset>
   b6a3e:	8025      	strh	r5, [r4, #0]
   b6a40:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6a42:	4907      	ldr	r1, [pc, #28]	; (b6a60 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b6a44:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6a46:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b6a48:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6a4a:	f000 f82f 	bl	b6aac <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6a4e:	4904      	ldr	r1, [pc, #16]	; (b6a60 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b6a50:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6a52:	4628      	mov	r0, r5
   b6a54:	f000 f82a 	bl	b6aac <_ZnajRKSt9nothrow_t>
    };
   b6a58:	60e0      	str	r0, [r4, #12]
}
   b6a5a:	4620      	mov	r0, r4
   b6a5c:	bd38      	pop	{r3, r4, r5, pc}
   b6a5e:	bf00      	nop
   b6a60:	000b8fb4 	.word	0x000b8fb4

000b6a64 <_Z22__fetch_global_Serial1v>:
{
   b6a64:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6a66:	4d0e      	ldr	r5, [pc, #56]	; (b6aa0 <_Z22__fetch_global_Serial1v+0x3c>)
   b6a68:	7829      	ldrb	r1, [r5, #0]
   b6a6a:	f3bf 8f5b 	dmb	ish
   b6a6e:	f011 0401 	ands.w	r4, r1, #1
{
   b6a72:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6a74:	d111      	bne.n	b6a9a <_Z22__fetch_global_Serial1v+0x36>
   b6a76:	4628      	mov	r0, r5
   b6a78:	f7fd fb13 	bl	b40a2 <__cxa_guard_acquire>
   b6a7c:	b168      	cbz	r0, b6a9a <_Z22__fetch_global_Serial1v+0x36>
   b6a7e:	a801      	add	r0, sp, #4
   b6a80:	f7ff ffd6 	bl	b6a30 <_Z20acquireSerial1Bufferv>
   b6a84:	aa01      	add	r2, sp, #4
   b6a86:	4621      	mov	r1, r4
   b6a88:	4806      	ldr	r0, [pc, #24]	; (b6aa4 <_Z22__fetch_global_Serial1v+0x40>)
   b6a8a:	f7ff fd89 	bl	b65a0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b6a8e:	4628      	mov	r0, r5
   b6a90:	f7fd fb0c 	bl	b40ac <__cxa_guard_release>
   b6a94:	4804      	ldr	r0, [pc, #16]	; (b6aa8 <_Z22__fetch_global_Serial1v+0x44>)
   b6a96:	f002 f819 	bl	b8acc <atexit>
    return serial1;
}
   b6a9a:	4802      	ldr	r0, [pc, #8]	; (b6aa4 <_Z22__fetch_global_Serial1v+0x40>)
   b6a9c:	b007      	add	sp, #28
   b6a9e:	bd30      	pop	{r4, r5, pc}
   b6aa0:	2003e744 	.word	0x2003e744
   b6aa4:	2003e748 	.word	0x2003e748
   b6aa8:	000b6a2d 	.word	0x000b6a2d

000b6aac <_ZnajRKSt9nothrow_t>:
   b6aac:	f7fd baf5 	b.w	b409a <_Znaj>

000b6ab0 <_ZSt25__throw_bad_function_callv>:
   b6ab0:	b508      	push	{r3, lr}
   b6ab2:	f7fe fe5b 	bl	b576c <abort>
	...

000b6ab8 <pow>:
   b6ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6aba:	ed2d 8b02 	vpush	{d8}
   b6abe:	ec57 6b10 	vmov	r6, r7, d0
   b6ac2:	ec55 4b11 	vmov	r4, r5, d1
   b6ac6:	f000 f8cb 	bl	b6c60 <__ieee754_pow>
   b6aca:	4b63      	ldr	r3, [pc, #396]	; (b6c58 <pow+0x1a0>)
   b6acc:	eeb0 8a40 	vmov.f32	s16, s0
   b6ad0:	eef0 8a60 	vmov.f32	s17, s1
   b6ad4:	f993 3000 	ldrsb.w	r3, [r3]
   b6ad8:	3301      	adds	r3, #1
   b6ada:	d02a      	beq.n	b6b32 <pow+0x7a>
   b6adc:	4622      	mov	r2, r4
   b6ade:	462b      	mov	r3, r5
   b6ae0:	4620      	mov	r0, r4
   b6ae2:	4629      	mov	r1, r5
   b6ae4:	f001 fcc4 	bl	b8470 <__aeabi_dcmpun>
   b6ae8:	bb18      	cbnz	r0, b6b32 <pow+0x7a>
   b6aea:	4632      	mov	r2, r6
   b6aec:	463b      	mov	r3, r7
   b6aee:	4630      	mov	r0, r6
   b6af0:	4639      	mov	r1, r7
   b6af2:	f001 fcbd 	bl	b8470 <__aeabi_dcmpun>
   b6af6:	2800      	cmp	r0, #0
   b6af8:	d144      	bne.n	b6b84 <pow+0xcc>
   b6afa:	2200      	movs	r2, #0
   b6afc:	2300      	movs	r3, #0
   b6afe:	4630      	mov	r0, r6
   b6b00:	4639      	mov	r1, r7
   b6b02:	f001 fc83 	bl	b840c <__aeabi_dcmpeq>
   b6b06:	b1d8      	cbz	r0, b6b40 <pow+0x88>
   b6b08:	2200      	movs	r2, #0
   b6b0a:	2300      	movs	r3, #0
   b6b0c:	4620      	mov	r0, r4
   b6b0e:	4629      	mov	r1, r5
   b6b10:	f001 fc7c 	bl	b840c <__aeabi_dcmpeq>
   b6b14:	2800      	cmp	r0, #0
   b6b16:	d13d      	bne.n	b6b94 <pow+0xdc>
   b6b18:	ec45 4b10 	vmov	d0, r4, r5
   b6b1c:	f000 ff10 	bl	b7940 <finite>
   b6b20:	b138      	cbz	r0, b6b32 <pow+0x7a>
   b6b22:	4620      	mov	r0, r4
   b6b24:	4629      	mov	r1, r5
   b6b26:	2200      	movs	r2, #0
   b6b28:	2300      	movs	r3, #0
   b6b2a:	f001 fc79 	bl	b8420 <__aeabi_dcmplt>
   b6b2e:	2800      	cmp	r0, #0
   b6b30:	d15c      	bne.n	b6bec <pow+0x134>
   b6b32:	eeb0 0a48 	vmov.f32	s0, s16
   b6b36:	eef0 0a68 	vmov.f32	s1, s17
   b6b3a:	ecbd 8b02 	vpop	{d8}
   b6b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b6b40:	eeb0 0a48 	vmov.f32	s0, s16
   b6b44:	eef0 0a68 	vmov.f32	s1, s17
   b6b48:	f000 fefa 	bl	b7940 <finite>
   b6b4c:	b358      	cbz	r0, b6ba6 <pow+0xee>
   b6b4e:	ec51 0b18 	vmov	r0, r1, d8
   b6b52:	2200      	movs	r2, #0
   b6b54:	2300      	movs	r3, #0
   b6b56:	f001 fc59 	bl	b840c <__aeabi_dcmpeq>
   b6b5a:	2800      	cmp	r0, #0
   b6b5c:	d0e9      	beq.n	b6b32 <pow+0x7a>
   b6b5e:	ec47 6b10 	vmov	d0, r6, r7
   b6b62:	f000 feed 	bl	b7940 <finite>
   b6b66:	2800      	cmp	r0, #0
   b6b68:	d0e3      	beq.n	b6b32 <pow+0x7a>
   b6b6a:	ec45 4b10 	vmov	d0, r4, r5
   b6b6e:	f000 fee7 	bl	b7940 <finite>
   b6b72:	2800      	cmp	r0, #0
   b6b74:	d0dd      	beq.n	b6b32 <pow+0x7a>
   b6b76:	f7fe fe09 	bl	b578c <__errno>
   b6b7a:	2322      	movs	r3, #34	; 0x22
   b6b7c:	ed9f 8b2e 	vldr	d8, [pc, #184]	; b6c38 <pow+0x180>
   b6b80:	6003      	str	r3, [r0, #0]
   b6b82:	e7d6      	b.n	b6b32 <pow+0x7a>
   b6b84:	4620      	mov	r0, r4
   b6b86:	4629      	mov	r1, r5
   b6b88:	2200      	movs	r2, #0
   b6b8a:	2300      	movs	r3, #0
   b6b8c:	f001 fc3e 	bl	b840c <__aeabi_dcmpeq>
   b6b90:	2800      	cmp	r0, #0
   b6b92:	d0ce      	beq.n	b6b32 <pow+0x7a>
   b6b94:	ed9f 8b2a 	vldr	d8, [pc, #168]	; b6c40 <pow+0x188>
   b6b98:	eeb0 0a48 	vmov.f32	s0, s16
   b6b9c:	eef0 0a68 	vmov.f32	s1, s17
   b6ba0:	ecbd 8b02 	vpop	{d8}
   b6ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b6ba6:	ec47 6b10 	vmov	d0, r6, r7
   b6baa:	f000 fec9 	bl	b7940 <finite>
   b6bae:	2800      	cmp	r0, #0
   b6bb0:	d0cd      	beq.n	b6b4e <pow+0x96>
   b6bb2:	ec45 4b10 	vmov	d0, r4, r5
   b6bb6:	f000 fec3 	bl	b7940 <finite>
   b6bba:	2800      	cmp	r0, #0
   b6bbc:	d0c7      	beq.n	b6b4e <pow+0x96>
   b6bbe:	ec53 2b18 	vmov	r2, r3, d8
   b6bc2:	ee18 0a10 	vmov	r0, s16
   b6bc6:	4619      	mov	r1, r3
   b6bc8:	f001 fc52 	bl	b8470 <__aeabi_dcmpun>
   b6bcc:	bb20      	cbnz	r0, b6c18 <pow+0x160>
   b6bce:	f7fe fddd 	bl	b578c <__errno>
   b6bd2:	4603      	mov	r3, r0
   b6bd4:	2222      	movs	r2, #34	; 0x22
   b6bd6:	601a      	str	r2, [r3, #0]
   b6bd8:	4630      	mov	r0, r6
   b6bda:	4639      	mov	r1, r7
   b6bdc:	2200      	movs	r2, #0
   b6bde:	2300      	movs	r3, #0
   b6be0:	f001 fc1e 	bl	b8420 <__aeabi_dcmplt>
   b6be4:	b948      	cbnz	r0, b6bfa <pow+0x142>
   b6be6:	ed9f 8b18 	vldr	d8, [pc, #96]	; b6c48 <pow+0x190>
   b6bea:	e7a2      	b.n	b6b32 <pow+0x7a>
   b6bec:	f7fe fdce 	bl	b578c <__errno>
   b6bf0:	2321      	movs	r3, #33	; 0x21
   b6bf2:	ed9f 8b17 	vldr	d8, [pc, #92]	; b6c50 <pow+0x198>
   b6bf6:	6003      	str	r3, [r0, #0]
   b6bf8:	e79b      	b.n	b6b32 <pow+0x7a>
   b6bfa:	ec45 4b10 	vmov	d0, r4, r5
   b6bfe:	f000 feb3 	bl	b7968 <rint>
   b6c02:	4622      	mov	r2, r4
   b6c04:	ec51 0b10 	vmov	r0, r1, d0
   b6c08:	462b      	mov	r3, r5
   b6c0a:	f001 fbff 	bl	b840c <__aeabi_dcmpeq>
   b6c0e:	2800      	cmp	r0, #0
   b6c10:	d1e9      	bne.n	b6be6 <pow+0x12e>
   b6c12:	ed9f 8b0f 	vldr	d8, [pc, #60]	; b6c50 <pow+0x198>
   b6c16:	e78c      	b.n	b6b32 <pow+0x7a>
   b6c18:	f7fe fdb8 	bl	b578c <__errno>
   b6c1c:	2200      	movs	r2, #0
   b6c1e:	2300      	movs	r3, #0
   b6c20:	2121      	movs	r1, #33	; 0x21
   b6c22:	6001      	str	r1, [r0, #0]
   b6c24:	4610      	mov	r0, r2
   b6c26:	4619      	mov	r1, r3
   b6c28:	f001 fab2 	bl	b8190 <__aeabi_ddiv>
   b6c2c:	ec41 0b18 	vmov	d8, r0, r1
   b6c30:	e77f      	b.n	b6b32 <pow+0x7a>
   b6c32:	bf00      	nop
   b6c34:	f3af 8000 	nop.w
	...
   b6c44:	3ff00000 	.word	0x3ff00000
   b6c48:	00000000 	.word	0x00000000
   b6c4c:	7ff00000 	.word	0x7ff00000
   b6c50:	00000000 	.word	0x00000000
   b6c54:	fff00000 	.word	0xfff00000
   b6c58:	2003e59c 	.word	0x2003e59c
   b6c5c:	00000000 	.word	0x00000000

000b6c60 <__ieee754_pow>:
   b6c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6c64:	ec57 6b11 	vmov	r6, r7, d1
   b6c68:	ed2d 8b0c 	vpush	{d8-d13}
   b6c6c:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   b6c70:	ea5a 0206 	orrs.w	r2, sl, r6
   b6c74:	b087      	sub	sp, #28
   b6c76:	d03d      	beq.n	b6cf4 <__ieee754_pow+0x94>
   b6c78:	ec55 4b10 	vmov	r4, r5, d0
   b6c7c:	4972      	ldr	r1, [pc, #456]	; (b6e48 <__ieee754_pow+0x1e8>)
   b6c7e:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
   b6c82:	4588      	cmp	r8, r1
   b6c84:	ee10 2a10 	vmov	r2, s0
   b6c88:	46a9      	mov	r9, r5
   b6c8a:	dc2c      	bgt.n	b6ce6 <__ieee754_pow+0x86>
   b6c8c:	ee11 3a10 	vmov	r3, s2
   b6c90:	46bb      	mov	fp, r7
   b6c92:	d036      	beq.n	b6d02 <__ieee754_pow+0xa2>
   b6c94:	458a      	cmp	sl, r1
   b6c96:	dc26      	bgt.n	b6ce6 <__ieee754_pow+0x86>
   b6c98:	496b      	ldr	r1, [pc, #428]	; (b6e48 <__ieee754_pow+0x1e8>)
   b6c9a:	458a      	cmp	sl, r1
   b6c9c:	d021      	beq.n	b6ce2 <__ieee754_pow+0x82>
   b6c9e:	f1b9 0f00 	cmp.w	r9, #0
   b6ca2:	db39      	blt.n	b6d18 <__ieee754_pow+0xb8>
   b6ca4:	2100      	movs	r1, #0
   b6ca6:	9100      	str	r1, [sp, #0]
   b6ca8:	2b00      	cmp	r3, #0
   b6caa:	d151      	bne.n	b6d50 <__ieee754_pow+0xf0>
   b6cac:	4b66      	ldr	r3, [pc, #408]	; (b6e48 <__ieee754_pow+0x1e8>)
   b6cae:	459a      	cmp	sl, r3
   b6cb0:	f000 80a2 	beq.w	b6df8 <__ieee754_pow+0x198>
   b6cb4:	4b65      	ldr	r3, [pc, #404]	; (b6e4c <__ieee754_pow+0x1ec>)
   b6cb6:	459a      	cmp	sl, r3
   b6cb8:	f000 80b0 	beq.w	b6e1c <__ieee754_pow+0x1bc>
   b6cbc:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
   b6cc0:	f000 84c0 	beq.w	b7644 <__ieee754_pow+0x9e4>
   b6cc4:	4b62      	ldr	r3, [pc, #392]	; (b6e50 <__ieee754_pow+0x1f0>)
   b6cc6:	459b      	cmp	fp, r3
   b6cc8:	d142      	bne.n	b6d50 <__ieee754_pow+0xf0>
   b6cca:	f1b9 0f00 	cmp.w	r9, #0
   b6cce:	db3f      	blt.n	b6d50 <__ieee754_pow+0xf0>
   b6cd0:	ec45 4b10 	vmov	d0, r4, r5
   b6cd4:	b007      	add	sp, #28
   b6cd6:	ecbd 8b0c 	vpop	{d8-d13}
   b6cda:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6cde:	f000 bd59 	b.w	b7794 <__ieee754_sqrt>
   b6ce2:	2b00      	cmp	r3, #0
   b6ce4:	d0db      	beq.n	b6c9e <__ieee754_pow+0x3e>
   b6ce6:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   b6cea:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   b6cee:	ea58 0302 	orrs.w	r3, r8, r2
   b6cf2:	d109      	bne.n	b6d08 <__ieee754_pow+0xa8>
   b6cf4:	ed9f 0b50 	vldr	d0, [pc, #320]	; b6e38 <__ieee754_pow+0x1d8>
   b6cf8:	b007      	add	sp, #28
   b6cfa:	ecbd 8b0c 	vpop	{d8-d13}
   b6cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6d02:	b90c      	cbnz	r4, b6d08 <__ieee754_pow+0xa8>
   b6d04:	45c2      	cmp	sl, r8
   b6d06:	ddc7      	ble.n	b6c98 <__ieee754_pow+0x38>
   b6d08:	4852      	ldr	r0, [pc, #328]	; (b6e54 <__ieee754_pow+0x1f4>)
   b6d0a:	b007      	add	sp, #28
   b6d0c:	ecbd 8b0c 	vpop	{d8-d13}
   b6d10:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6d14:	f000 be20 	b.w	b7958 <nan>
   b6d18:	494f      	ldr	r1, [pc, #316]	; (b6e58 <__ieee754_pow+0x1f8>)
   b6d1a:	458a      	cmp	sl, r1
   b6d1c:	f300 8085 	bgt.w	b6e2a <__ieee754_pow+0x1ca>
   b6d20:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
   b6d24:	458a      	cmp	sl, r1
   b6d26:	dd0f      	ble.n	b6d48 <__ieee754_pow+0xe8>
   b6d28:	ea4f 512a 	mov.w	r1, sl, asr #20
   b6d2c:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   b6d30:	2914      	cmp	r1, #20
   b6d32:	f340 849b 	ble.w	b766c <__ieee754_pow+0xa0c>
   b6d36:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
   b6d3a:	fa23 f001 	lsr.w	r0, r3, r1
   b6d3e:	fa00 f101 	lsl.w	r1, r0, r1
   b6d42:	4299      	cmp	r1, r3
   b6d44:	f000 84ed 	beq.w	b7722 <__ieee754_pow+0xac2>
   b6d48:	2100      	movs	r1, #0
   b6d4a:	9100      	str	r1, [sp, #0]
   b6d4c:	2b00      	cmp	r3, #0
   b6d4e:	d0b1      	beq.n	b6cb4 <__ieee754_pow+0x54>
   b6d50:	ec45 4b10 	vmov	d0, r4, r5
   b6d54:	9202      	str	r2, [sp, #8]
   b6d56:	f000 fde9 	bl	b792c <fabs>
   b6d5a:	9a02      	ldr	r2, [sp, #8]
   b6d5c:	bb5a      	cbnz	r2, b6db6 <__ieee754_pow+0x156>
   b6d5e:	f1b8 0f00 	cmp.w	r8, #0
   b6d62:	d004      	beq.n	b6d6e <__ieee754_pow+0x10e>
   b6d64:	4b39      	ldr	r3, [pc, #228]	; (b6e4c <__ieee754_pow+0x1ec>)
   b6d66:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
   b6d6a:	429a      	cmp	r2, r3
   b6d6c:	d123      	bne.n	b6db6 <__ieee754_pow+0x156>
   b6d6e:	f1bb 0f00 	cmp.w	fp, #0
   b6d72:	da07      	bge.n	b6d84 <__ieee754_pow+0x124>
   b6d74:	ec53 2b10 	vmov	r2, r3, d0
   b6d78:	4934      	ldr	r1, [pc, #208]	; (b6e4c <__ieee754_pow+0x1ec>)
   b6d7a:	2000      	movs	r0, #0
   b6d7c:	f001 fa08 	bl	b8190 <__aeabi_ddiv>
   b6d80:	ec41 0b10 	vmov	d0, r0, r1
   b6d84:	f1b9 0f00 	cmp.w	r9, #0
   b6d88:	dab6      	bge.n	b6cf8 <__ieee754_pow+0x98>
   b6d8a:	9b00      	ldr	r3, [sp, #0]
   b6d8c:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   b6d90:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   b6d94:	ea58 0303 	orrs.w	r3, r8, r3
   b6d98:	f040 848d 	bne.w	b76b6 <__ieee754_pow+0xa56>
   b6d9c:	ec53 2b10 	vmov	r2, r3, d0
   b6da0:	4610      	mov	r0, r2
   b6da2:	4619      	mov	r1, r3
   b6da4:	f000 ff12 	bl	b7bcc <__aeabi_dsub>
   b6da8:	4602      	mov	r2, r0
   b6daa:	460b      	mov	r3, r1
   b6dac:	f001 f9f0 	bl	b8190 <__aeabi_ddiv>
   b6db0:	ec41 0b10 	vmov	d0, r0, r1
   b6db4:	e7a0      	b.n	b6cf8 <__ieee754_pow+0x98>
   b6db6:	9a00      	ldr	r2, [sp, #0]
   b6db8:	ea4f 73d9 	mov.w	r3, r9, lsr #31
   b6dbc:	3b01      	subs	r3, #1
   b6dbe:	9304      	str	r3, [sp, #16]
   b6dc0:	4313      	orrs	r3, r2
   b6dc2:	d035      	beq.n	b6e30 <__ieee754_pow+0x1d0>
   b6dc4:	4b25      	ldr	r3, [pc, #148]	; (b6e5c <__ieee754_pow+0x1fc>)
   b6dc6:	459a      	cmp	sl, r3
   b6dc8:	dd4c      	ble.n	b6e64 <__ieee754_pow+0x204>
   b6dca:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   b6dce:	459a      	cmp	sl, r3
   b6dd0:	4b23      	ldr	r3, [pc, #140]	; (b6e60 <__ieee754_pow+0x200>)
   b6dd2:	f340 83db 	ble.w	b758c <__ieee754_pow+0x92c>
   b6dd6:	4598      	cmp	r8, r3
   b6dd8:	f340 8360 	ble.w	b749c <__ieee754_pow+0x83c>
   b6ddc:	f1bb 0f00 	cmp.w	fp, #0
   b6de0:	f340 8360 	ble.w	b74a4 <__ieee754_pow+0x844>
   b6de4:	a316      	add	r3, pc, #88	; (adr r3, b6e40 <__ieee754_pow+0x1e0>)
   b6de6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6dea:	4610      	mov	r0, r2
   b6dec:	4619      	mov	r1, r3
   b6dee:	f001 f8a5 	bl	b7f3c <__aeabi_dmul>
   b6df2:	ec41 0b10 	vmov	d0, r0, r1
   b6df6:	e77f      	b.n	b6cf8 <__ieee754_pow+0x98>
   b6df8:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
   b6dfc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   b6e00:	4313      	orrs	r3, r2
   b6e02:	f43f af77 	beq.w	b6cf4 <__ieee754_pow+0x94>
   b6e06:	4b16      	ldr	r3, [pc, #88]	; (b6e60 <__ieee754_pow+0x200>)
   b6e08:	4598      	cmp	r8, r3
   b6e0a:	f340 837a 	ble.w	b7502 <__ieee754_pow+0x8a2>
   b6e0e:	f1bb 0f00 	cmp.w	fp, #0
   b6e12:	f2c0 8347 	blt.w	b74a4 <__ieee754_pow+0x844>
   b6e16:	ec47 6b10 	vmov	d0, r6, r7
   b6e1a:	e76d      	b.n	b6cf8 <__ieee754_pow+0x98>
   b6e1c:	f1bb 0f00 	cmp.w	fp, #0
   b6e20:	f2c0 841a 	blt.w	b7658 <__ieee754_pow+0x9f8>
   b6e24:	ec45 4b10 	vmov	d0, r4, r5
   b6e28:	e766      	b.n	b6cf8 <__ieee754_pow+0x98>
   b6e2a:	2102      	movs	r1, #2
   b6e2c:	9100      	str	r1, [sp, #0]
   b6e2e:	e73b      	b.n	b6ca8 <__ieee754_pow+0x48>
   b6e30:	4622      	mov	r2, r4
   b6e32:	462b      	mov	r3, r5
   b6e34:	e7b4      	b.n	b6da0 <__ieee754_pow+0x140>
   b6e36:	bf00      	nop
   b6e38:	00000000 	.word	0x00000000
   b6e3c:	3ff00000 	.word	0x3ff00000
   b6e40:	8800759c 	.word	0x8800759c
   b6e44:	7e37e43c 	.word	0x7e37e43c
   b6e48:	7ff00000 	.word	0x7ff00000
   b6e4c:	3ff00000 	.word	0x3ff00000
   b6e50:	3fe00000 	.word	0x3fe00000
   b6e54:	000b8fb8 	.word	0x000b8fb8
   b6e58:	433fffff 	.word	0x433fffff
   b6e5c:	41e00000 	.word	0x41e00000
   b6e60:	3fefffff 	.word	0x3fefffff
   b6e64:	4be4      	ldr	r3, [pc, #912]	; (b71f8 <__ieee754_pow+0x598>)
   b6e66:	ea09 0303 	and.w	r3, r9, r3
   b6e6a:	2200      	movs	r2, #0
   b6e6c:	b953      	cbnz	r3, b6e84 <__ieee754_pow+0x224>
   b6e6e:	ec51 0b10 	vmov	r0, r1, d0
   b6e72:	4be2      	ldr	r3, [pc, #904]	; (b71fc <__ieee754_pow+0x59c>)
   b6e74:	f001 f862 	bl	b7f3c <__aeabi_dmul>
   b6e78:	ec41 0b10 	vmov	d0, r0, r1
   b6e7c:	ee10 8a90 	vmov	r8, s1
   b6e80:	f06f 0234 	mvn.w	r2, #52	; 0x34
   b6e84:	ea4f 5328 	mov.w	r3, r8, asr #20
   b6e88:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   b6e8c:	189a      	adds	r2, r3, r2
   b6e8e:	4bdc      	ldr	r3, [pc, #880]	; (b7200 <__ieee754_pow+0x5a0>)
   b6e90:	9205      	str	r2, [sp, #20]
   b6e92:	f3c8 0813 	ubfx	r8, r8, #0, #20
   b6e96:	f048 547f 	orr.w	r4, r8, #1069547520	; 0x3fc00000
   b6e9a:	4598      	cmp	r8, r3
   b6e9c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   b6ea0:	dd07      	ble.n	b6eb2 <__ieee754_pow+0x252>
   b6ea2:	4bd8      	ldr	r3, [pc, #864]	; (b7204 <__ieee754_pow+0x5a4>)
   b6ea4:	4598      	cmp	r8, r3
   b6ea6:	f340 8414 	ble.w	b76d2 <__ieee754_pow+0xa72>
   b6eaa:	3201      	adds	r2, #1
   b6eac:	9205      	str	r2, [sp, #20]
   b6eae:	f5a4 1480 	sub.w	r4, r4, #1048576	; 0x100000
   b6eb2:	ed9f 6bb9 	vldr	d6, [pc, #740]	; b7198 <__ieee754_pow+0x538>
   b6eb6:	ed9f 7bba 	vldr	d7, [pc, #744]	; b71a0 <__ieee754_pow+0x540>
   b6eba:	ec53 2b16 	vmov	r2, r3, d6
   b6ebe:	eeb0 ca47 	vmov.f32	s24, s14
   b6ec2:	eef0 ca67 	vmov.f32	s25, s15
   b6ec6:	2500      	movs	r5, #0
   b6ec8:	eeb0 da47 	vmov.f32	s26, s14
   b6ecc:	eef0 da67 	vmov.f32	s27, s15
   b6ed0:	ec5b ab10 	vmov	sl, fp, d0
   b6ed4:	46a3      	mov	fp, r4
   b6ed6:	4650      	mov	r0, sl
   b6ed8:	4659      	mov	r1, fp
   b6eda:	ec43 2b1a 	vmov	d10, r2, r3
   b6ede:	f000 fe75 	bl	b7bcc <__aeabi_dsub>
   b6ee2:	ec53 2b1a 	vmov	r2, r3, d10
   b6ee6:	4680      	mov	r8, r0
   b6ee8:	4689      	mov	r9, r1
   b6eea:	4650      	mov	r0, sl
   b6eec:	4659      	mov	r1, fp
   b6eee:	f000 fe6f 	bl	b7bd0 <__adddf3>
   b6ef2:	4602      	mov	r2, r0
   b6ef4:	460b      	mov	r3, r1
   b6ef6:	2000      	movs	r0, #0
   b6ef8:	49c3      	ldr	r1, [pc, #780]	; (b7208 <__ieee754_pow+0x5a8>)
   b6efa:	f001 f949 	bl	b8190 <__aeabi_ddiv>
   b6efe:	ec41 0b1b 	vmov	d11, r0, r1
   b6f02:	4640      	mov	r0, r8
   b6f04:	ec53 2b1b 	vmov	r2, r3, d11
   b6f08:	4649      	mov	r1, r9
   b6f0a:	f001 f817 	bl	b7f3c <__aeabi_dmul>
   b6f0e:	ec41 0b18 	vmov	d8, r0, r1
   b6f12:	460a      	mov	r2, r1
   b6f14:	4601      	mov	r1, r0
   b6f16:	e9cd 1202 	strd	r1, r2, [sp, #8]
   b6f1a:	2100      	movs	r1, #0
   b6f1c:	9102      	str	r1, [sp, #8]
   b6f1e:	1064      	asrs	r4, r4, #1
   b6f20:	ec4b ab19 	vmov	d9, sl, fp
   b6f24:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
   b6f28:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   b6f2c:	f504 2300 	add.w	r3, r4, #524288	; 0x80000
   b6f30:	2000      	movs	r0, #0
   b6f32:	1959      	adds	r1, r3, r5
   b6f34:	4604      	mov	r4, r0
   b6f36:	460d      	mov	r5, r1
   b6f38:	4602      	mov	r2, r0
   b6f3a:	460b      	mov	r3, r1
   b6f3c:	4650      	mov	r0, sl
   b6f3e:	4659      	mov	r1, fp
   b6f40:	f000 fffc 	bl	b7f3c <__aeabi_dmul>
   b6f44:	4602      	mov	r2, r0
   b6f46:	460b      	mov	r3, r1
   b6f48:	4640      	mov	r0, r8
   b6f4a:	4649      	mov	r1, r9
   b6f4c:	f000 fe3e 	bl	b7bcc <__aeabi_dsub>
   b6f50:	ec53 2b1a 	vmov	r2, r3, d10
   b6f54:	4680      	mov	r8, r0
   b6f56:	4689      	mov	r9, r1
   b6f58:	4620      	mov	r0, r4
   b6f5a:	4629      	mov	r1, r5
   b6f5c:	f000 fe36 	bl	b7bcc <__aeabi_dsub>
   b6f60:	4602      	mov	r2, r0
   b6f62:	460b      	mov	r3, r1
   b6f64:	ec51 0b19 	vmov	r0, r1, d9
   b6f68:	f000 fe30 	bl	b7bcc <__aeabi_dsub>
   b6f6c:	4652      	mov	r2, sl
   b6f6e:	465b      	mov	r3, fp
   b6f70:	f000 ffe4 	bl	b7f3c <__aeabi_dmul>
   b6f74:	4602      	mov	r2, r0
   b6f76:	460b      	mov	r3, r1
   b6f78:	4640      	mov	r0, r8
   b6f7a:	4649      	mov	r1, r9
   b6f7c:	f000 fe26 	bl	b7bcc <__aeabi_dsub>
   b6f80:	ec53 2b1b 	vmov	r2, r3, d11
   b6f84:	f000 ffda 	bl	b7f3c <__aeabi_dmul>
   b6f88:	ec53 2b18 	vmov	r2, r3, d8
   b6f8c:	ec41 0b19 	vmov	d9, r0, r1
   b6f90:	ec51 0b18 	vmov	r0, r1, d8
   b6f94:	f000 ffd2 	bl	b7f3c <__aeabi_dmul>
   b6f98:	a383      	add	r3, pc, #524	; (adr r3, b71a8 <__ieee754_pow+0x548>)
   b6f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6f9e:	4604      	mov	r4, r0
   b6fa0:	460d      	mov	r5, r1
   b6fa2:	f000 ffcb 	bl	b7f3c <__aeabi_dmul>
   b6fa6:	a382      	add	r3, pc, #520	; (adr r3, b71b0 <__ieee754_pow+0x550>)
   b6fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6fac:	f000 fe10 	bl	b7bd0 <__adddf3>
   b6fb0:	4622      	mov	r2, r4
   b6fb2:	462b      	mov	r3, r5
   b6fb4:	f000 ffc2 	bl	b7f3c <__aeabi_dmul>
   b6fb8:	a37f      	add	r3, pc, #508	; (adr r3, b71b8 <__ieee754_pow+0x558>)
   b6fba:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6fbe:	f000 fe07 	bl	b7bd0 <__adddf3>
   b6fc2:	4622      	mov	r2, r4
   b6fc4:	462b      	mov	r3, r5
   b6fc6:	f000 ffb9 	bl	b7f3c <__aeabi_dmul>
   b6fca:	a37d      	add	r3, pc, #500	; (adr r3, b71c0 <__ieee754_pow+0x560>)
   b6fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6fd0:	f000 fdfe 	bl	b7bd0 <__adddf3>
   b6fd4:	4622      	mov	r2, r4
   b6fd6:	462b      	mov	r3, r5
   b6fd8:	f000 ffb0 	bl	b7f3c <__aeabi_dmul>
   b6fdc:	a37a      	add	r3, pc, #488	; (adr r3, b71c8 <__ieee754_pow+0x568>)
   b6fde:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6fe2:	f000 fdf5 	bl	b7bd0 <__adddf3>
   b6fe6:	4622      	mov	r2, r4
   b6fe8:	462b      	mov	r3, r5
   b6fea:	f000 ffa7 	bl	b7f3c <__aeabi_dmul>
   b6fee:	a378      	add	r3, pc, #480	; (adr r3, b71d0 <__ieee754_pow+0x570>)
   b6ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6ff4:	f000 fdec 	bl	b7bd0 <__adddf3>
   b6ff8:	4622      	mov	r2, r4
   b6ffa:	4680      	mov	r8, r0
   b6ffc:	4689      	mov	r9, r1
   b6ffe:	462b      	mov	r3, r5
   b7000:	4620      	mov	r0, r4
   b7002:	4629      	mov	r1, r5
   b7004:	f000 ff9a 	bl	b7f3c <__aeabi_dmul>
   b7008:	4602      	mov	r2, r0
   b700a:	460b      	mov	r3, r1
   b700c:	4640      	mov	r0, r8
   b700e:	4649      	mov	r1, r9
   b7010:	f000 ff94 	bl	b7f3c <__aeabi_dmul>
   b7014:	4652      	mov	r2, sl
   b7016:	4604      	mov	r4, r0
   b7018:	460d      	mov	r5, r1
   b701a:	465b      	mov	r3, fp
   b701c:	ec51 0b18 	vmov	r0, r1, d8
   b7020:	f000 fdd6 	bl	b7bd0 <__adddf3>
   b7024:	ec53 2b19 	vmov	r2, r3, d9
   b7028:	f000 ff88 	bl	b7f3c <__aeabi_dmul>
   b702c:	4622      	mov	r2, r4
   b702e:	462b      	mov	r3, r5
   b7030:	f000 fdce 	bl	b7bd0 <__adddf3>
   b7034:	4652      	mov	r2, sl
   b7036:	4680      	mov	r8, r0
   b7038:	4689      	mov	r9, r1
   b703a:	465b      	mov	r3, fp
   b703c:	4650      	mov	r0, sl
   b703e:	4659      	mov	r1, fp
   b7040:	f000 ff7c 	bl	b7f3c <__aeabi_dmul>
   b7044:	4602      	mov	r2, r0
   b7046:	460b      	mov	r3, r1
   b7048:	ec43 2b1a 	vmov	d10, r2, r3
   b704c:	4b6f      	ldr	r3, [pc, #444]	; (b720c <__ieee754_pow+0x5ac>)
   b704e:	2200      	movs	r2, #0
   b7050:	f000 fdbe 	bl	b7bd0 <__adddf3>
   b7054:	4642      	mov	r2, r8
   b7056:	464b      	mov	r3, r9
   b7058:	f000 fdba 	bl	b7bd0 <__adddf3>
   b705c:	2400      	movs	r4, #0
   b705e:	460d      	mov	r5, r1
   b7060:	4622      	mov	r2, r4
   b7062:	462b      	mov	r3, r5
   b7064:	4650      	mov	r0, sl
   b7066:	4659      	mov	r1, fp
   b7068:	f000 ff68 	bl	b7f3c <__aeabi_dmul>
   b706c:	4b67      	ldr	r3, [pc, #412]	; (b720c <__ieee754_pow+0x5ac>)
   b706e:	4682      	mov	sl, r0
   b7070:	468b      	mov	fp, r1
   b7072:	2200      	movs	r2, #0
   b7074:	4620      	mov	r0, r4
   b7076:	4629      	mov	r1, r5
   b7078:	f000 fda8 	bl	b7bcc <__aeabi_dsub>
   b707c:	ec53 2b1a 	vmov	r2, r3, d10
   b7080:	f000 fda4 	bl	b7bcc <__aeabi_dsub>
   b7084:	4602      	mov	r2, r0
   b7086:	460b      	mov	r3, r1
   b7088:	4640      	mov	r0, r8
   b708a:	4649      	mov	r1, r9
   b708c:	f000 fd9e 	bl	b7bcc <__aeabi_dsub>
   b7090:	ec53 2b18 	vmov	r2, r3, d8
   b7094:	f000 ff52 	bl	b7f3c <__aeabi_dmul>
   b7098:	4622      	mov	r2, r4
   b709a:	462b      	mov	r3, r5
   b709c:	4604      	mov	r4, r0
   b709e:	460d      	mov	r5, r1
   b70a0:	ec51 0b19 	vmov	r0, r1, d9
   b70a4:	f000 ff4a 	bl	b7f3c <__aeabi_dmul>
   b70a8:	4602      	mov	r2, r0
   b70aa:	460b      	mov	r3, r1
   b70ac:	4620      	mov	r0, r4
   b70ae:	4629      	mov	r1, r5
   b70b0:	f000 fd8e 	bl	b7bd0 <__adddf3>
   b70b4:	4680      	mov	r8, r0
   b70b6:	4689      	mov	r9, r1
   b70b8:	4642      	mov	r2, r8
   b70ba:	464b      	mov	r3, r9
   b70bc:	4650      	mov	r0, sl
   b70be:	4659      	mov	r1, fp
   b70c0:	f000 fd86 	bl	b7bd0 <__adddf3>
   b70c4:	a344      	add	r3, pc, #272	; (adr r3, b71d8 <__ieee754_pow+0x578>)
   b70c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b70ca:	2000      	movs	r0, #0
   b70cc:	4604      	mov	r4, r0
   b70ce:	460d      	mov	r5, r1
   b70d0:	f000 ff34 	bl	b7f3c <__aeabi_dmul>
   b70d4:	4652      	mov	r2, sl
   b70d6:	ec41 0b19 	vmov	d9, r0, r1
   b70da:	465b      	mov	r3, fp
   b70dc:	4620      	mov	r0, r4
   b70de:	4629      	mov	r1, r5
   b70e0:	f000 fd74 	bl	b7bcc <__aeabi_dsub>
   b70e4:	4602      	mov	r2, r0
   b70e6:	460b      	mov	r3, r1
   b70e8:	4640      	mov	r0, r8
   b70ea:	4649      	mov	r1, r9
   b70ec:	f000 fd6e 	bl	b7bcc <__aeabi_dsub>
   b70f0:	a33b      	add	r3, pc, #236	; (adr r3, b71e0 <__ieee754_pow+0x580>)
   b70f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b70f6:	f000 ff21 	bl	b7f3c <__aeabi_dmul>
   b70fa:	4602      	mov	r2, r0
   b70fc:	460b      	mov	r3, r1
   b70fe:	4620      	mov	r0, r4
   b7100:	4629      	mov	r1, r5
   b7102:	4614      	mov	r4, r2
   b7104:	461d      	mov	r5, r3
   b7106:	a338      	add	r3, pc, #224	; (adr r3, b71e8 <__ieee754_pow+0x588>)
   b7108:	e9d3 2300 	ldrd	r2, r3, [r3]
   b710c:	f000 ff16 	bl	b7f3c <__aeabi_dmul>
   b7110:	4602      	mov	r2, r0
   b7112:	460b      	mov	r3, r1
   b7114:	4620      	mov	r0, r4
   b7116:	4629      	mov	r1, r5
   b7118:	f000 fd5a 	bl	b7bd0 <__adddf3>
   b711c:	ec53 2b1d 	vmov	r2, r3, d13
   b7120:	f000 fd56 	bl	b7bd0 <__adddf3>
   b7124:	4680      	mov	r8, r0
   b7126:	9805      	ldr	r0, [sp, #20]
   b7128:	4689      	mov	r9, r1
   b712a:	f000 fe9d 	bl	b7e68 <__aeabi_i2d>
   b712e:	4642      	mov	r2, r8
   b7130:	4682      	mov	sl, r0
   b7132:	468b      	mov	fp, r1
   b7134:	464b      	mov	r3, r9
   b7136:	ec51 0b19 	vmov	r0, r1, d9
   b713a:	f000 fd49 	bl	b7bd0 <__adddf3>
   b713e:	ec53 2b1c 	vmov	r2, r3, d12
   b7142:	f000 fd45 	bl	b7bd0 <__adddf3>
   b7146:	4652      	mov	r2, sl
   b7148:	465b      	mov	r3, fp
   b714a:	f000 fd41 	bl	b7bd0 <__adddf3>
   b714e:	4652      	mov	r2, sl
   b7150:	465b      	mov	r3, fp
   b7152:	2000      	movs	r0, #0
   b7154:	4604      	mov	r4, r0
   b7156:	460d      	mov	r5, r1
   b7158:	f000 fd38 	bl	b7bcc <__aeabi_dsub>
   b715c:	ec53 2b1c 	vmov	r2, r3, d12
   b7160:	f000 fd34 	bl	b7bcc <__aeabi_dsub>
   b7164:	ec53 2b19 	vmov	r2, r3, d9
   b7168:	f000 fd30 	bl	b7bcc <__aeabi_dsub>
   b716c:	4602      	mov	r2, r0
   b716e:	460b      	mov	r3, r1
   b7170:	4640      	mov	r0, r8
   b7172:	4649      	mov	r1, r9
   b7174:	f000 fd2a 	bl	b7bcc <__aeabi_dsub>
   b7178:	9b00      	ldr	r3, [sp, #0]
   b717a:	9a04      	ldr	r2, [sp, #16]
   b717c:	3b01      	subs	r3, #1
   b717e:	4313      	orrs	r3, r2
   b7180:	4682      	mov	sl, r0
   b7182:	468b      	mov	fp, r1
   b7184:	f040 81b6 	bne.w	b74f4 <__ieee754_pow+0x894>
   b7188:	ed9f 7b19 	vldr	d7, [pc, #100]	; b71f0 <__ieee754_pow+0x590>
   b718c:	eeb0 8a47 	vmov.f32	s16, s14
   b7190:	eef0 8a67 	vmov.f32	s17, s15
   b7194:	e03c      	b.n	b7210 <__ieee754_pow+0x5b0>
   b7196:	bf00      	nop
   b7198:	00000000 	.word	0x00000000
   b719c:	3ff00000 	.word	0x3ff00000
	...
   b71a8:	4a454eef 	.word	0x4a454eef
   b71ac:	3fca7e28 	.word	0x3fca7e28
   b71b0:	93c9db65 	.word	0x93c9db65
   b71b4:	3fcd864a 	.word	0x3fcd864a
   b71b8:	a91d4101 	.word	0xa91d4101
   b71bc:	3fd17460 	.word	0x3fd17460
   b71c0:	518f264d 	.word	0x518f264d
   b71c4:	3fd55555 	.word	0x3fd55555
   b71c8:	db6fabff 	.word	0xdb6fabff
   b71cc:	3fdb6db6 	.word	0x3fdb6db6
   b71d0:	33333303 	.word	0x33333303
   b71d4:	3fe33333 	.word	0x3fe33333
   b71d8:	e0000000 	.word	0xe0000000
   b71dc:	3feec709 	.word	0x3feec709
   b71e0:	dc3a03fd 	.word	0xdc3a03fd
   b71e4:	3feec709 	.word	0x3feec709
   b71e8:	145b01f5 	.word	0x145b01f5
   b71ec:	be3e2fe0 	.word	0xbe3e2fe0
   b71f0:	00000000 	.word	0x00000000
   b71f4:	bff00000 	.word	0xbff00000
   b71f8:	7ff00000 	.word	0x7ff00000
   b71fc:	43400000 	.word	0x43400000
   b7200:	0003988e 	.word	0x0003988e
   b7204:	000bb679 	.word	0x000bb679
   b7208:	3ff00000 	.word	0x3ff00000
   b720c:	40080000 	.word	0x40080000
   b7210:	2300      	movs	r3, #0
   b7212:	e9cd 6700 	strd	r6, r7, [sp]
   b7216:	9300      	str	r3, [sp, #0]
   b7218:	e9dd 8900 	ldrd	r8, r9, [sp]
   b721c:	4630      	mov	r0, r6
   b721e:	4642      	mov	r2, r8
   b7220:	464b      	mov	r3, r9
   b7222:	4639      	mov	r1, r7
   b7224:	f000 fcd2 	bl	b7bcc <__aeabi_dsub>
   b7228:	4622      	mov	r2, r4
   b722a:	462b      	mov	r3, r5
   b722c:	f000 fe86 	bl	b7f3c <__aeabi_dmul>
   b7230:	4632      	mov	r2, r6
   b7232:	463b      	mov	r3, r7
   b7234:	4606      	mov	r6, r0
   b7236:	460f      	mov	r7, r1
   b7238:	4650      	mov	r0, sl
   b723a:	4659      	mov	r1, fp
   b723c:	f000 fe7e 	bl	b7f3c <__aeabi_dmul>
   b7240:	4602      	mov	r2, r0
   b7242:	460b      	mov	r3, r1
   b7244:	4630      	mov	r0, r6
   b7246:	4639      	mov	r1, r7
   b7248:	f000 fcc2 	bl	b7bd0 <__adddf3>
   b724c:	4642      	mov	r2, r8
   b724e:	464b      	mov	r3, r9
   b7250:	4606      	mov	r6, r0
   b7252:	460f      	mov	r7, r1
   b7254:	4620      	mov	r0, r4
   b7256:	4629      	mov	r1, r5
   b7258:	f000 fe70 	bl	b7f3c <__aeabi_dmul>
   b725c:	4604      	mov	r4, r0
   b725e:	460d      	mov	r5, r1
   b7260:	462b      	mov	r3, r5
   b7262:	4630      	mov	r0, r6
   b7264:	4639      	mov	r1, r7
   b7266:	4622      	mov	r2, r4
   b7268:	f000 fcb2 	bl	b7bd0 <__adddf3>
   b726c:	4bc2      	ldr	r3, [pc, #776]	; (b7578 <__ieee754_pow+0x918>)
   b726e:	4299      	cmp	r1, r3
   b7270:	4680      	mov	r8, r0
   b7272:	4689      	mov	r9, r1
   b7274:	468a      	mov	sl, r1
   b7276:	f340 8118 	ble.w	b74aa <__ieee754_pow+0x84a>
   b727a:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   b727e:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   b7282:	4303      	orrs	r3, r0
   b7284:	f040 8207 	bne.w	b7696 <__ieee754_pow+0xa36>
   b7288:	a3a3      	add	r3, pc, #652	; (adr r3, b7518 <__ieee754_pow+0x8b8>)
   b728a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b728e:	4630      	mov	r0, r6
   b7290:	4639      	mov	r1, r7
   b7292:	f000 fc9d 	bl	b7bd0 <__adddf3>
   b7296:	4602      	mov	r2, r0
   b7298:	460b      	mov	r3, r1
   b729a:	4640      	mov	r0, r8
   b729c:	4649      	mov	r1, r9
   b729e:	4690      	mov	r8, r2
   b72a0:	4699      	mov	r9, r3
   b72a2:	4622      	mov	r2, r4
   b72a4:	462b      	mov	r3, r5
   b72a6:	f000 fc91 	bl	b7bcc <__aeabi_dsub>
   b72aa:	4602      	mov	r2, r0
   b72ac:	460b      	mov	r3, r1
   b72ae:	4640      	mov	r0, r8
   b72b0:	4649      	mov	r1, r9
   b72b2:	f001 f8d3 	bl	b845c <__aeabi_dcmpgt>
   b72b6:	2800      	cmp	r0, #0
   b72b8:	f040 81ed 	bne.w	b7696 <__ieee754_pow+0xa36>
   b72bc:	f3ca 530a 	ubfx	r3, sl, #20, #11
   b72c0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   b72c4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   b72c8:	fa42 f303 	asr.w	r3, r2, r3
   b72cc:	4453      	add	r3, sl
   b72ce:	49ab      	ldr	r1, [pc, #684]	; (b757c <__ieee754_pow+0x91c>)
   b72d0:	f3c3 520a 	ubfx	r2, r3, #20, #11
   b72d4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   b72d8:	fa41 fc02 	asr.w	ip, r1, r2
   b72dc:	f3c3 0113 	ubfx	r1, r3, #0, #20
   b72e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b72e4:	f1c2 0214 	rsb	r2, r2, #20
   b72e8:	fa41 f202 	asr.w	r2, r1, r2
   b72ec:	2000      	movs	r0, #0
   b72ee:	ea23 010c 	bic.w	r1, r3, ip
   b72f2:	f1ba 0f00 	cmp.w	sl, #0
   b72f6:	9200      	str	r2, [sp, #0]
   b72f8:	460b      	mov	r3, r1
   b72fa:	4602      	mov	r2, r0
   b72fc:	da02      	bge.n	b7304 <__ieee754_pow+0x6a4>
   b72fe:	9900      	ldr	r1, [sp, #0]
   b7300:	4249      	negs	r1, r1
   b7302:	9100      	str	r1, [sp, #0]
   b7304:	4620      	mov	r0, r4
   b7306:	4629      	mov	r1, r5
   b7308:	f000 fc60 	bl	b7bcc <__aeabi_dsub>
   b730c:	9b00      	ldr	r3, [sp, #0]
   b730e:	051b      	lsls	r3, r3, #20
   b7310:	9302      	str	r3, [sp, #8]
   b7312:	4602      	mov	r2, r0
   b7314:	460b      	mov	r3, r1
   b7316:	4604      	mov	r4, r0
   b7318:	460d      	mov	r5, r1
   b731a:	4630      	mov	r0, r6
   b731c:	4639      	mov	r1, r7
   b731e:	f000 fc57 	bl	b7bd0 <__adddf3>
   b7322:	4689      	mov	r9, r1
   b7324:	f04f 0800 	mov.w	r8, #0
   b7328:	a37d      	add	r3, pc, #500	; (adr r3, b7520 <__ieee754_pow+0x8c0>)
   b732a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b732e:	4640      	mov	r0, r8
   b7330:	4649      	mov	r1, r9
   b7332:	f000 fe03 	bl	b7f3c <__aeabi_dmul>
   b7336:	4622      	mov	r2, r4
   b7338:	462b      	mov	r3, r5
   b733a:	4682      	mov	sl, r0
   b733c:	468b      	mov	fp, r1
   b733e:	4640      	mov	r0, r8
   b7340:	4649      	mov	r1, r9
   b7342:	f000 fc43 	bl	b7bcc <__aeabi_dsub>
   b7346:	4602      	mov	r2, r0
   b7348:	460b      	mov	r3, r1
   b734a:	4630      	mov	r0, r6
   b734c:	4639      	mov	r1, r7
   b734e:	f000 fc3d 	bl	b7bcc <__aeabi_dsub>
   b7352:	a375      	add	r3, pc, #468	; (adr r3, b7528 <__ieee754_pow+0x8c8>)
   b7354:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7358:	f000 fdf0 	bl	b7f3c <__aeabi_dmul>
   b735c:	a374      	add	r3, pc, #464	; (adr r3, b7530 <__ieee754_pow+0x8d0>)
   b735e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7362:	4604      	mov	r4, r0
   b7364:	460d      	mov	r5, r1
   b7366:	4640      	mov	r0, r8
   b7368:	4649      	mov	r1, r9
   b736a:	f000 fde7 	bl	b7f3c <__aeabi_dmul>
   b736e:	4602      	mov	r2, r0
   b7370:	460b      	mov	r3, r1
   b7372:	4620      	mov	r0, r4
   b7374:	4629      	mov	r1, r5
   b7376:	f000 fc2b 	bl	b7bd0 <__adddf3>
   b737a:	4606      	mov	r6, r0
   b737c:	460f      	mov	r7, r1
   b737e:	4632      	mov	r2, r6
   b7380:	463b      	mov	r3, r7
   b7382:	4650      	mov	r0, sl
   b7384:	4659      	mov	r1, fp
   b7386:	f000 fc23 	bl	b7bd0 <__adddf3>
   b738a:	4652      	mov	r2, sl
   b738c:	465b      	mov	r3, fp
   b738e:	4604      	mov	r4, r0
   b7390:	460d      	mov	r5, r1
   b7392:	f000 fc1b 	bl	b7bcc <__aeabi_dsub>
   b7396:	4602      	mov	r2, r0
   b7398:	460b      	mov	r3, r1
   b739a:	4630      	mov	r0, r6
   b739c:	4639      	mov	r1, r7
   b739e:	f000 fc15 	bl	b7bcc <__aeabi_dsub>
   b73a2:	4622      	mov	r2, r4
   b73a4:	4680      	mov	r8, r0
   b73a6:	4689      	mov	r9, r1
   b73a8:	462b      	mov	r3, r5
   b73aa:	4620      	mov	r0, r4
   b73ac:	4629      	mov	r1, r5
   b73ae:	f000 fdc5 	bl	b7f3c <__aeabi_dmul>
   b73b2:	a361      	add	r3, pc, #388	; (adr r3, b7538 <__ieee754_pow+0x8d8>)
   b73b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   b73b8:	4606      	mov	r6, r0
   b73ba:	460f      	mov	r7, r1
   b73bc:	f000 fdbe 	bl	b7f3c <__aeabi_dmul>
   b73c0:	a35f      	add	r3, pc, #380	; (adr r3, b7540 <__ieee754_pow+0x8e0>)
   b73c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b73c6:	f000 fc01 	bl	b7bcc <__aeabi_dsub>
   b73ca:	4632      	mov	r2, r6
   b73cc:	463b      	mov	r3, r7
   b73ce:	f000 fdb5 	bl	b7f3c <__aeabi_dmul>
   b73d2:	a35d      	add	r3, pc, #372	; (adr r3, b7548 <__ieee754_pow+0x8e8>)
   b73d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   b73d8:	f000 fbfa 	bl	b7bd0 <__adddf3>
   b73dc:	4632      	mov	r2, r6
   b73de:	463b      	mov	r3, r7
   b73e0:	f000 fdac 	bl	b7f3c <__aeabi_dmul>
   b73e4:	a35a      	add	r3, pc, #360	; (adr r3, b7550 <__ieee754_pow+0x8f0>)
   b73e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b73ea:	f000 fbef 	bl	b7bcc <__aeabi_dsub>
   b73ee:	4632      	mov	r2, r6
   b73f0:	463b      	mov	r3, r7
   b73f2:	f000 fda3 	bl	b7f3c <__aeabi_dmul>
   b73f6:	a358      	add	r3, pc, #352	; (adr r3, b7558 <__ieee754_pow+0x8f8>)
   b73f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b73fc:	f000 fbe8 	bl	b7bd0 <__adddf3>
   b7400:	4632      	mov	r2, r6
   b7402:	463b      	mov	r3, r7
   b7404:	f000 fd9a 	bl	b7f3c <__aeabi_dmul>
   b7408:	4602      	mov	r2, r0
   b740a:	460b      	mov	r3, r1
   b740c:	4620      	mov	r0, r4
   b740e:	4629      	mov	r1, r5
   b7410:	f000 fbdc 	bl	b7bcc <__aeabi_dsub>
   b7414:	4606      	mov	r6, r0
   b7416:	460f      	mov	r7, r1
   b7418:	4632      	mov	r2, r6
   b741a:	463b      	mov	r3, r7
   b741c:	4620      	mov	r0, r4
   b741e:	4629      	mov	r1, r5
   b7420:	f000 fd8c 	bl	b7f3c <__aeabi_dmul>
   b7424:	4602      	mov	r2, r0
   b7426:	460b      	mov	r3, r1
   b7428:	4630      	mov	r0, r6
   b742a:	4639      	mov	r1, r7
   b742c:	4616      	mov	r6, r2
   b742e:	461f      	mov	r7, r3
   b7430:	2200      	movs	r2, #0
   b7432:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b7436:	f000 fbc9 	bl	b7bcc <__aeabi_dsub>
   b743a:	4602      	mov	r2, r0
   b743c:	460b      	mov	r3, r1
   b743e:	4630      	mov	r0, r6
   b7440:	4639      	mov	r1, r7
   b7442:	f000 fea5 	bl	b8190 <__aeabi_ddiv>
   b7446:	4642      	mov	r2, r8
   b7448:	4606      	mov	r6, r0
   b744a:	460f      	mov	r7, r1
   b744c:	464b      	mov	r3, r9
   b744e:	4620      	mov	r0, r4
   b7450:	4629      	mov	r1, r5
   b7452:	f000 fd73 	bl	b7f3c <__aeabi_dmul>
   b7456:	4642      	mov	r2, r8
   b7458:	464b      	mov	r3, r9
   b745a:	f000 fbb9 	bl	b7bd0 <__adddf3>
   b745e:	4602      	mov	r2, r0
   b7460:	460b      	mov	r3, r1
   b7462:	4630      	mov	r0, r6
   b7464:	4639      	mov	r1, r7
   b7466:	f000 fbb1 	bl	b7bcc <__aeabi_dsub>
   b746a:	4622      	mov	r2, r4
   b746c:	462b      	mov	r3, r5
   b746e:	f000 fbad 	bl	b7bcc <__aeabi_dsub>
   b7472:	4602      	mov	r2, r0
   b7474:	460b      	mov	r3, r1
   b7476:	2000      	movs	r0, #0
   b7478:	4941      	ldr	r1, [pc, #260]	; (b7580 <__ieee754_pow+0x920>)
   b747a:	f000 fba7 	bl	b7bcc <__aeabi_dsub>
   b747e:	9a02      	ldr	r2, [sp, #8]
   b7480:	460b      	mov	r3, r1
   b7482:	4413      	add	r3, r2
   b7484:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   b7488:	f2c0 8143 	blt.w	b7712 <__ieee754_pow+0xab2>
   b748c:	4619      	mov	r1, r3
   b748e:	ec53 2b18 	vmov	r2, r3, d8
   b7492:	f000 fd53 	bl	b7f3c <__aeabi_dmul>
   b7496:	ec41 0b10 	vmov	d0, r0, r1
   b749a:	e42d      	b.n	b6cf8 <__ieee754_pow+0x98>
   b749c:	f1bb 0f00 	cmp.w	fp, #0
   b74a0:	f6ff aca0 	blt.w	b6de4 <__ieee754_pow+0x184>
   b74a4:	ed9f 0b2e 	vldr	d0, [pc, #184]	; b7560 <__ieee754_pow+0x900>
   b74a8:	e426      	b.n	b6cf8 <__ieee754_pow+0x98>
   b74aa:	f8df c0dc 	ldr.w	ip, [pc, #220]	; b7588 <__ieee754_pow+0x928>
   b74ae:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   b74b2:	4563      	cmp	r3, ip
   b74b4:	f340 80e7 	ble.w	b7686 <__ieee754_pow+0xa26>
   b74b8:	4b32      	ldr	r3, [pc, #200]	; (b7584 <__ieee754_pow+0x924>)
   b74ba:	440b      	add	r3, r1
   b74bc:	4303      	orrs	r3, r0
   b74be:	d10a      	bne.n	b74d6 <__ieee754_pow+0x876>
   b74c0:	4622      	mov	r2, r4
   b74c2:	462b      	mov	r3, r5
   b74c4:	f000 fb82 	bl	b7bcc <__aeabi_dsub>
   b74c8:	4632      	mov	r2, r6
   b74ca:	463b      	mov	r3, r7
   b74cc:	f000 ffbc 	bl	b8448 <__aeabi_dcmpge>
   b74d0:	2800      	cmp	r0, #0
   b74d2:	f43f aef3 	beq.w	b72bc <__ieee754_pow+0x65c>
   b74d6:	a324      	add	r3, pc, #144	; (adr r3, b7568 <__ieee754_pow+0x908>)
   b74d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b74dc:	ec51 0b18 	vmov	r0, r1, d8
   b74e0:	f000 fd2c 	bl	b7f3c <__aeabi_dmul>
   b74e4:	a320      	add	r3, pc, #128	; (adr r3, b7568 <__ieee754_pow+0x908>)
   b74e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b74ea:	f000 fd27 	bl	b7f3c <__aeabi_dmul>
   b74ee:	ec41 0b10 	vmov	d0, r0, r1
   b74f2:	e401      	b.n	b6cf8 <__ieee754_pow+0x98>
   b74f4:	ed9f 7b1e 	vldr	d7, [pc, #120]	; b7570 <__ieee754_pow+0x910>
   b74f8:	eeb0 8a47 	vmov.f32	s16, s14
   b74fc:	eef0 8a67 	vmov.f32	s17, s15
   b7500:	e686      	b.n	b7210 <__ieee754_pow+0x5b0>
   b7502:	f1bb 0f00 	cmp.w	fp, #0
   b7506:	dacd      	bge.n	b74a4 <__ieee754_pow+0x844>
   b7508:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   b750c:	ee00 6a10 	vmov	s0, r6
   b7510:	ee00 3a90 	vmov	s1, r3
   b7514:	f7ff bbf0 	b.w	b6cf8 <__ieee754_pow+0x98>
   b7518:	652b82fe 	.word	0x652b82fe
   b751c:	3c971547 	.word	0x3c971547
   b7520:	00000000 	.word	0x00000000
   b7524:	3fe62e43 	.word	0x3fe62e43
   b7528:	fefa39ef 	.word	0xfefa39ef
   b752c:	3fe62e42 	.word	0x3fe62e42
   b7530:	0ca86c39 	.word	0x0ca86c39
   b7534:	be205c61 	.word	0xbe205c61
   b7538:	72bea4d0 	.word	0x72bea4d0
   b753c:	3e663769 	.word	0x3e663769
   b7540:	c5d26bf1 	.word	0xc5d26bf1
   b7544:	3ebbbd41 	.word	0x3ebbbd41
   b7548:	af25de2c 	.word	0xaf25de2c
   b754c:	3f11566a 	.word	0x3f11566a
   b7550:	16bebd93 	.word	0x16bebd93
   b7554:	3f66c16c 	.word	0x3f66c16c
   b7558:	5555553e 	.word	0x5555553e
   b755c:	3fc55555 	.word	0x3fc55555
	...
   b7568:	c2f8f359 	.word	0xc2f8f359
   b756c:	01a56e1f 	.word	0x01a56e1f
   b7570:	00000000 	.word	0x00000000
   b7574:	3ff00000 	.word	0x3ff00000
   b7578:	408fffff 	.word	0x408fffff
   b757c:	000fffff 	.word	0x000fffff
   b7580:	3ff00000 	.word	0x3ff00000
   b7584:	3f6f3400 	.word	0x3f6f3400
   b7588:	4090cbff 	.word	0x4090cbff
   b758c:	4598      	cmp	r8, r3
   b758e:	db85      	blt.n	b749c <__ieee754_pow+0x83c>
   b7590:	4b7d      	ldr	r3, [pc, #500]	; (b7788 <__ieee754_pow+0xb28>)
   b7592:	4598      	cmp	r8, r3
   b7594:	f73f ac22 	bgt.w	b6ddc <__ieee754_pow+0x17c>
   b7598:	ec51 0b10 	vmov	r0, r1, d0
   b759c:	4b7a      	ldr	r3, [pc, #488]	; (b7788 <__ieee754_pow+0xb28>)
   b759e:	2200      	movs	r2, #0
   b75a0:	f000 fb14 	bl	b7bcc <__aeabi_dsub>
   b75a4:	a368      	add	r3, pc, #416	; (adr r3, b7748 <__ieee754_pow+0xae8>)
   b75a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b75aa:	4604      	mov	r4, r0
   b75ac:	460d      	mov	r5, r1
   b75ae:	f000 fcc5 	bl	b7f3c <__aeabi_dmul>
   b75b2:	a367      	add	r3, pc, #412	; (adr r3, b7750 <__ieee754_pow+0xaf0>)
   b75b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   b75b8:	4682      	mov	sl, r0
   b75ba:	468b      	mov	fp, r1
   b75bc:	4620      	mov	r0, r4
   b75be:	4629      	mov	r1, r5
   b75c0:	f000 fcbc 	bl	b7f3c <__aeabi_dmul>
   b75c4:	4b71      	ldr	r3, [pc, #452]	; (b778c <__ieee754_pow+0xb2c>)
   b75c6:	ec41 0b18 	vmov	d8, r0, r1
   b75ca:	2200      	movs	r2, #0
   b75cc:	4620      	mov	r0, r4
   b75ce:	4629      	mov	r1, r5
   b75d0:	f000 fcb4 	bl	b7f3c <__aeabi_dmul>
   b75d4:	4602      	mov	r2, r0
   b75d6:	460b      	mov	r3, r1
   b75d8:	a15f      	add	r1, pc, #380	; (adr r1, b7758 <__ieee754_pow+0xaf8>)
   b75da:	e9d1 0100 	ldrd	r0, r1, [r1]
   b75de:	f000 faf5 	bl	b7bcc <__aeabi_dsub>
   b75e2:	4622      	mov	r2, r4
   b75e4:	462b      	mov	r3, r5
   b75e6:	f000 fca9 	bl	b7f3c <__aeabi_dmul>
   b75ea:	4602      	mov	r2, r0
   b75ec:	460b      	mov	r3, r1
   b75ee:	2000      	movs	r0, #0
   b75f0:	4967      	ldr	r1, [pc, #412]	; (b7790 <__ieee754_pow+0xb30>)
   b75f2:	f000 faeb 	bl	b7bcc <__aeabi_dsub>
   b75f6:	4622      	mov	r2, r4
   b75f8:	4680      	mov	r8, r0
   b75fa:	4689      	mov	r9, r1
   b75fc:	462b      	mov	r3, r5
   b75fe:	4620      	mov	r0, r4
   b7600:	4629      	mov	r1, r5
   b7602:	f000 fc9b 	bl	b7f3c <__aeabi_dmul>
   b7606:	4602      	mov	r2, r0
   b7608:	460b      	mov	r3, r1
   b760a:	4640      	mov	r0, r8
   b760c:	4649      	mov	r1, r9
   b760e:	f000 fc95 	bl	b7f3c <__aeabi_dmul>
   b7612:	a353      	add	r3, pc, #332	; (adr r3, b7760 <__ieee754_pow+0xb00>)
   b7614:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7618:	f000 fc90 	bl	b7f3c <__aeabi_dmul>
   b761c:	4602      	mov	r2, r0
   b761e:	460b      	mov	r3, r1
   b7620:	ec51 0b18 	vmov	r0, r1, d8
   b7624:	f000 fad2 	bl	b7bcc <__aeabi_dsub>
   b7628:	4680      	mov	r8, r0
   b762a:	4689      	mov	r9, r1
   b762c:	4642      	mov	r2, r8
   b762e:	464b      	mov	r3, r9
   b7630:	4650      	mov	r0, sl
   b7632:	4659      	mov	r1, fp
   b7634:	f000 facc 	bl	b7bd0 <__adddf3>
   b7638:	2000      	movs	r0, #0
   b763a:	4652      	mov	r2, sl
   b763c:	465b      	mov	r3, fp
   b763e:	4604      	mov	r4, r0
   b7640:	460d      	mov	r5, r1
   b7642:	e591      	b.n	b7168 <__ieee754_pow+0x508>
   b7644:	4622      	mov	r2, r4
   b7646:	462b      	mov	r3, r5
   b7648:	4620      	mov	r0, r4
   b764a:	4629      	mov	r1, r5
   b764c:	f000 fc76 	bl	b7f3c <__aeabi_dmul>
   b7650:	ec41 0b10 	vmov	d0, r0, r1
   b7654:	f7ff bb50 	b.w	b6cf8 <__ieee754_pow+0x98>
   b7658:	494b      	ldr	r1, [pc, #300]	; (b7788 <__ieee754_pow+0xb28>)
   b765a:	2000      	movs	r0, #0
   b765c:	4622      	mov	r2, r4
   b765e:	462b      	mov	r3, r5
   b7660:	f000 fd96 	bl	b8190 <__aeabi_ddiv>
   b7664:	ec41 0b10 	vmov	d0, r0, r1
   b7668:	f7ff bb46 	b.w	b6cf8 <__ieee754_pow+0x98>
   b766c:	2b00      	cmp	r3, #0
   b766e:	d144      	bne.n	b76fa <__ieee754_pow+0xa9a>
   b7670:	f1c1 0114 	rsb	r1, r1, #20
   b7674:	fa4a f001 	asr.w	r0, sl, r1
   b7678:	fa00 f101 	lsl.w	r1, r0, r1
   b767c:	4551      	cmp	r1, sl
   b767e:	d05a      	beq.n	b7736 <__ieee754_pow+0xad6>
   b7680:	9300      	str	r3, [sp, #0]
   b7682:	f7ff bb17 	b.w	b6cb4 <__ieee754_pow+0x54>
   b7686:	4a42      	ldr	r2, [pc, #264]	; (b7790 <__ieee754_pow+0xb30>)
   b7688:	4293      	cmp	r3, r2
   b768a:	dc5b      	bgt.n	b7744 <__ieee754_pow+0xae4>
   b768c:	e9dd 1200 	ldrd	r1, r2, [sp]
   b7690:	9102      	str	r1, [sp, #8]
   b7692:	9100      	str	r1, [sp, #0]
   b7694:	e646      	b.n	b7324 <__ieee754_pow+0x6c4>
   b7696:	a334      	add	r3, pc, #208	; (adr r3, b7768 <__ieee754_pow+0xb08>)
   b7698:	e9d3 2300 	ldrd	r2, r3, [r3]
   b769c:	ec51 0b18 	vmov	r0, r1, d8
   b76a0:	f000 fc4c 	bl	b7f3c <__aeabi_dmul>
   b76a4:	a330      	add	r3, pc, #192	; (adr r3, b7768 <__ieee754_pow+0xb08>)
   b76a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b76aa:	f000 fc47 	bl	b7f3c <__aeabi_dmul>
   b76ae:	ec41 0b10 	vmov	d0, r0, r1
   b76b2:	f7ff bb21 	b.w	b6cf8 <__ieee754_pow+0x98>
   b76b6:	9b00      	ldr	r3, [sp, #0]
   b76b8:	2b01      	cmp	r3, #1
   b76ba:	f47f ab1d 	bne.w	b6cf8 <__ieee754_pow+0x98>
   b76be:	ee10 1a90 	vmov	r1, s1
   b76c2:	ee10 2a10 	vmov	r2, s0
   b76c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b76ca:	ec43 2b10 	vmov	d0, r2, r3
   b76ce:	f7ff bb13 	b.w	b6cf8 <__ieee754_pow+0x98>
   b76d2:	ed9f 7b27 	vldr	d7, [pc, #156]	; b7770 <__ieee754_pow+0xb10>
   b76d6:	eeb0 ca47 	vmov.f32	s24, s14
   b76da:	eef0 ca67 	vmov.f32	s25, s15
   b76de:	ed9f 7b26 	vldr	d7, [pc, #152]	; b7778 <__ieee754_pow+0xb18>
   b76e2:	eeb0 da47 	vmov.f32	s26, s14
   b76e6:	eef0 da67 	vmov.f32	s27, s15
   b76ea:	ed9f 7b25 	vldr	d7, [pc, #148]	; b7780 <__ieee754_pow+0xb20>
   b76ee:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   b76f2:	ec53 2b17 	vmov	r2, r3, d7
   b76f6:	f7ff bbeb 	b.w	b6ed0 <__ieee754_pow+0x270>
   b76fa:	ec45 4b10 	vmov	d0, r4, r5
   b76fe:	9200      	str	r2, [sp, #0]
   b7700:	f000 f914 	bl	b792c <fabs>
   b7704:	9a00      	ldr	r2, [sp, #0]
   b7706:	2a00      	cmp	r2, #0
   b7708:	f47f ab92 	bne.w	b6e30 <__ieee754_pow+0x1d0>
   b770c:	9200      	str	r2, [sp, #0]
   b770e:	f7ff bb26 	b.w	b6d5e <__ieee754_pow+0xfe>
   b7712:	ec41 0b10 	vmov	d0, r0, r1
   b7716:	9800      	ldr	r0, [sp, #0]
   b7718:	f000 f9c2 	bl	b7aa0 <scalbn>
   b771c:	ec51 0b10 	vmov	r0, r1, d0
   b7720:	e6b5      	b.n	b748e <__ieee754_pow+0x82e>
   b7722:	f000 0001 	and.w	r0, r0, #1
   b7726:	f1c0 0102 	rsb	r1, r0, #2
   b772a:	9100      	str	r1, [sp, #0]
   b772c:	2b00      	cmp	r3, #0
   b772e:	f43f aac1 	beq.w	b6cb4 <__ieee754_pow+0x54>
   b7732:	f7ff bb0d 	b.w	b6d50 <__ieee754_pow+0xf0>
   b7736:	f000 0001 	and.w	r0, r0, #1
   b773a:	f1c0 0302 	rsb	r3, r0, #2
   b773e:	9300      	str	r3, [sp, #0]
   b7740:	f7ff bab8 	b.w	b6cb4 <__ieee754_pow+0x54>
   b7744:	151b      	asrs	r3, r3, #20
   b7746:	e5bb      	b.n	b72c0 <__ieee754_pow+0x660>
   b7748:	60000000 	.word	0x60000000
   b774c:	3ff71547 	.word	0x3ff71547
   b7750:	f85ddf44 	.word	0xf85ddf44
   b7754:	3e54ae0b 	.word	0x3e54ae0b
   b7758:	55555555 	.word	0x55555555
   b775c:	3fd55555 	.word	0x3fd55555
   b7760:	652b82fe 	.word	0x652b82fe
   b7764:	3ff71547 	.word	0x3ff71547
   b7768:	8800759c 	.word	0x8800759c
   b776c:	7e37e43c 	.word	0x7e37e43c
   b7770:	40000000 	.word	0x40000000
   b7774:	3fe2b803 	.word	0x3fe2b803
   b7778:	43cfd006 	.word	0x43cfd006
   b777c:	3e4cfdeb 	.word	0x3e4cfdeb
   b7780:	00000000 	.word	0x00000000
   b7784:	3ff80000 	.word	0x3ff80000
   b7788:	3ff00000 	.word	0x3ff00000
   b778c:	3fd00000 	.word	0x3fd00000
   b7790:	3fe00000 	.word	0x3fe00000

000b7794 <__ieee754_sqrt>:
   b7794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7798:	4a63      	ldr	r2, [pc, #396]	; (b7928 <__ieee754_sqrt+0x194>)
   b779a:	ec55 4b10 	vmov	r4, r5, d0
   b779e:	43aa      	bics	r2, r5
   b77a0:	f000 809f 	beq.w	b78e2 <__ieee754_sqrt+0x14e>
   b77a4:	2d00      	cmp	r5, #0
   b77a6:	ee10 ca10 	vmov	ip, s0
   b77aa:	462b      	mov	r3, r5
   b77ac:	dd54      	ble.n	b7858 <__ieee754_sqrt+0xc4>
   b77ae:	1529      	asrs	r1, r5, #20
   b77b0:	d063      	beq.n	b787a <__ieee754_sqrt+0xe6>
   b77b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
   b77b6:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   b77ba:	07c9      	lsls	r1, r1, #31
   b77bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b77c0:	d404      	bmi.n	b77cc <__ieee754_sqrt+0x38>
   b77c2:	005b      	lsls	r3, r3, #1
   b77c4:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   b77c8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b77cc:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   b77d0:	2600      	movs	r6, #0
   b77d2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   b77d6:	107f      	asrs	r7, r7, #1
   b77d8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b77dc:	f04f 0e16 	mov.w	lr, #22
   b77e0:	4634      	mov	r4, r6
   b77e2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   b77e6:	18a1      	adds	r1, r4, r2
   b77e8:	4299      	cmp	r1, r3
   b77ea:	dc02      	bgt.n	b77f2 <__ieee754_sqrt+0x5e>
   b77ec:	1a5b      	subs	r3, r3, r1
   b77ee:	188c      	adds	r4, r1, r2
   b77f0:	4416      	add	r6, r2
   b77f2:	005b      	lsls	r3, r3, #1
   b77f4:	f1be 0e01 	subs.w	lr, lr, #1
   b77f8:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   b77fc:	ea4f 0252 	mov.w	r2, r2, lsr #1
   b7800:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b7804:	d1ef      	bne.n	b77e6 <__ieee754_sqrt+0x52>
   b7806:	4675      	mov	r5, lr
   b7808:	2020      	movs	r0, #32
   b780a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   b780e:	e00a      	b.n	b7826 <__ieee754_sqrt+0x92>
   b7810:	d044      	beq.n	b789c <__ieee754_sqrt+0x108>
   b7812:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   b7816:	3801      	subs	r0, #1
   b7818:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   b781c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b7820:	ea4f 0252 	mov.w	r2, r2, lsr #1
   b7824:	d043      	beq.n	b78ae <__ieee754_sqrt+0x11a>
   b7826:	42a3      	cmp	r3, r4
   b7828:	eb02 010e 	add.w	r1, r2, lr
   b782c:	ddf0      	ble.n	b7810 <__ieee754_sqrt+0x7c>
   b782e:	2900      	cmp	r1, #0
   b7830:	eb01 0e02 	add.w	lr, r1, r2
   b7834:	db0a      	blt.n	b784c <__ieee754_sqrt+0xb8>
   b7836:	46a0      	mov	r8, r4
   b7838:	1b1b      	subs	r3, r3, r4
   b783a:	4561      	cmp	r1, ip
   b783c:	bf88      	it	hi
   b783e:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   b7842:	ebac 0c01 	sub.w	ip, ip, r1
   b7846:	4415      	add	r5, r2
   b7848:	4644      	mov	r4, r8
   b784a:	e7e2      	b.n	b7812 <__ieee754_sqrt+0x7e>
   b784c:	f1be 0f00 	cmp.w	lr, #0
   b7850:	dbf1      	blt.n	b7836 <__ieee754_sqrt+0xa2>
   b7852:	f104 0801 	add.w	r8, r4, #1
   b7856:	e7ef      	b.n	b7838 <__ieee754_sqrt+0xa4>
   b7858:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   b785c:	4322      	orrs	r2, r4
   b785e:	d038      	beq.n	b78d2 <__ieee754_sqrt+0x13e>
   b7860:	2d00      	cmp	r5, #0
   b7862:	d14e      	bne.n	b7902 <__ieee754_sqrt+0x16e>
   b7864:	4629      	mov	r1, r5
   b7866:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   b786a:	3915      	subs	r1, #21
   b786c:	4613      	mov	r3, r2
   b786e:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   b7872:	2a00      	cmp	r2, #0
   b7874:	d0f7      	beq.n	b7866 <__ieee754_sqrt+0xd2>
   b7876:	02d6      	lsls	r6, r2, #11
   b7878:	d450      	bmi.n	b791c <__ieee754_sqrt+0x188>
   b787a:	2000      	movs	r0, #0
   b787c:	005b      	lsls	r3, r3, #1
   b787e:	02dd      	lsls	r5, r3, #11
   b7880:	4604      	mov	r4, r0
   b7882:	f100 0001 	add.w	r0, r0, #1
   b7886:	d5f9      	bpl.n	b787c <__ieee754_sqrt+0xe8>
   b7888:	461a      	mov	r2, r3
   b788a:	4663      	mov	r3, ip
   b788c:	fa0c fc00 	lsl.w	ip, ip, r0
   b7890:	f1c0 0020 	rsb	r0, r0, #32
   b7894:	40c3      	lsrs	r3, r0
   b7896:	1b09      	subs	r1, r1, r4
   b7898:	4313      	orrs	r3, r2
   b789a:	e78a      	b.n	b77b2 <__ieee754_sqrt+0x1e>
   b789c:	4561      	cmp	r1, ip
   b789e:	d8b8      	bhi.n	b7812 <__ieee754_sqrt+0x7e>
   b78a0:	2900      	cmp	r1, #0
   b78a2:	eb01 0e02 	add.w	lr, r1, r2
   b78a6:	dbd1      	blt.n	b784c <__ieee754_sqrt+0xb8>
   b78a8:	4698      	mov	r8, r3
   b78aa:	2300      	movs	r3, #0
   b78ac:	e7c9      	b.n	b7842 <__ieee754_sqrt+0xae>
   b78ae:	ea53 030c 	orrs.w	r3, r3, ip
   b78b2:	d110      	bne.n	b78d6 <__ieee754_sqrt+0x142>
   b78b4:	0868      	lsrs	r0, r5, #1
   b78b6:	1071      	asrs	r1, r6, #1
   b78b8:	07f3      	lsls	r3, r6, #31
   b78ba:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   b78be:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   b78c2:	bf48      	it	mi
   b78c4:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   b78c8:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   b78cc:	4602      	mov	r2, r0
   b78ce:	ec43 2b10 	vmov	d0, r2, r3
   b78d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b78d6:	1c6a      	adds	r2, r5, #1
   b78d8:	bf16      	itet	ne
   b78da:	1c68      	addne	r0, r5, #1
   b78dc:	3601      	addeq	r6, #1
   b78de:	0840      	lsrne	r0, r0, #1
   b78e0:	e7e9      	b.n	b78b6 <__ieee754_sqrt+0x122>
   b78e2:	ee10 2a10 	vmov	r2, s0
   b78e6:	ee10 0a10 	vmov	r0, s0
   b78ea:	462b      	mov	r3, r5
   b78ec:	4629      	mov	r1, r5
   b78ee:	f000 fb25 	bl	b7f3c <__aeabi_dmul>
   b78f2:	4622      	mov	r2, r4
   b78f4:	462b      	mov	r3, r5
   b78f6:	f000 f96b 	bl	b7bd0 <__adddf3>
   b78fa:	ec41 0b10 	vmov	d0, r0, r1
   b78fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7902:	ee10 2a10 	vmov	r2, s0
   b7906:	4620      	mov	r0, r4
   b7908:	4629      	mov	r1, r5
   b790a:	f000 f95f 	bl	b7bcc <__aeabi_dsub>
   b790e:	4602      	mov	r2, r0
   b7910:	460b      	mov	r3, r1
   b7912:	f000 fc3d 	bl	b8190 <__aeabi_ddiv>
   b7916:	ec41 0b10 	vmov	d0, r0, r1
   b791a:	e7da      	b.n	b78d2 <__ieee754_sqrt+0x13e>
   b791c:	4663      	mov	r3, ip
   b791e:	2020      	movs	r0, #32
   b7920:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b7924:	e7b6      	b.n	b7894 <__ieee754_sqrt+0x100>
   b7926:	bf00      	nop
   b7928:	7ff00000 	.word	0x7ff00000

000b792c <fabs>:
   b792c:	ec51 0b10 	vmov	r0, r1, d0
   b7930:	ee10 2a10 	vmov	r2, s0
   b7934:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   b7938:	ec43 2b10 	vmov	d0, r2, r3
   b793c:	4770      	bx	lr
   b793e:	bf00      	nop

000b7940 <finite>:
   b7940:	b082      	sub	sp, #8
   b7942:	ed8d 0b00 	vstr	d0, [sp]
   b7946:	9801      	ldr	r0, [sp, #4]
   b7948:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   b794c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   b7950:	0fc0      	lsrs	r0, r0, #31
   b7952:	b002      	add	sp, #8
   b7954:	4770      	bx	lr
   b7956:	bf00      	nop

000b7958 <nan>:
   b7958:	ed9f 0b01 	vldr	d0, [pc, #4]	; b7960 <nan+0x8>
   b795c:	4770      	bx	lr
   b795e:	bf00      	nop
   b7960:	00000000 	.word	0x00000000
   b7964:	7ff80000 	.word	0x7ff80000

000b7968 <rint>:
   b7968:	b5f0      	push	{r4, r5, r6, r7, lr}
   b796a:	ec53 2b10 	vmov	r2, r3, d0
   b796e:	f3c3 5c0a 	ubfx	ip, r3, #20, #11
   b7972:	f2ac 31ff 	subw	r1, ip, #1023	; 0x3ff
   b7976:	2913      	cmp	r1, #19
   b7978:	ee10 0a10 	vmov	r0, s0
   b797c:	b083      	sub	sp, #12
   b797e:	461c      	mov	r4, r3
   b7980:	ea4f 7ed3 	mov.w	lr, r3, lsr #31
   b7984:	dc3a      	bgt.n	b79fc <rint+0x94>
   b7986:	2900      	cmp	r1, #0
   b7988:	db30      	blt.n	b79ec <rint+0x84>
   b798a:	4d42      	ldr	r5, [pc, #264]	; (b7a94 <rint+0x12c>)
   b798c:	fa45 fc01 	asr.w	ip, r5, r1
   b7990:	ea03 050c 	and.w	r5, r3, ip
   b7994:	4315      	orrs	r5, r2
   b7996:	d02d      	beq.n	b79f4 <rint+0x8c>
   b7998:	ea03 035c 	and.w	r3, r3, ip, lsr #1
   b799c:	4318      	orrs	r0, r3
   b799e:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   b79a2:	d00c      	beq.n	b79be <rint+0x56>
   b79a4:	ea24 0c0c 	bic.w	ip, r4, ip
   b79a8:	f44f 2480 	mov.w	r4, #262144	; 0x40000
   b79ac:	2913      	cmp	r1, #19
   b79ae:	fa44 f101 	asr.w	r1, r4, r1
   b79b2:	bf0c      	ite	eq
   b79b4:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
   b79b8:	2000      	movne	r0, #0
   b79ba:	ea4c 0401 	orr.w	r4, ip, r1
   b79be:	4936      	ldr	r1, [pc, #216]	; (b7a98 <rint+0x130>)
   b79c0:	eb01 0ece 	add.w	lr, r1, lr, lsl #3
   b79c4:	4623      	mov	r3, r4
   b79c6:	e9de 4500 	ldrd	r4, r5, [lr]
   b79ca:	4602      	mov	r2, r0
   b79cc:	4629      	mov	r1, r5
   b79ce:	4620      	mov	r0, r4
   b79d0:	f000 f8fe 	bl	b7bd0 <__adddf3>
   b79d4:	e9cd 0100 	strd	r0, r1, [sp]
   b79d8:	e9dd 0100 	ldrd	r0, r1, [sp]
   b79dc:	4622      	mov	r2, r4
   b79de:	462b      	mov	r3, r5
   b79e0:	f000 f8f4 	bl	b7bcc <__aeabi_dsub>
   b79e4:	ec41 0b10 	vmov	d0, r0, r1
   b79e8:	b003      	add	sp, #12
   b79ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b79ec:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   b79f0:	4311      	orrs	r1, r2
   b79f2:	d124      	bne.n	b7a3e <rint+0xd6>
   b79f4:	ec43 2b10 	vmov	d0, r2, r3
   b79f8:	b003      	add	sp, #12
   b79fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b79fc:	2933      	cmp	r1, #51	; 0x33
   b79fe:	dd08      	ble.n	b7a12 <rint+0xaa>
   b7a00:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   b7a04:	d1f6      	bne.n	b79f4 <rint+0x8c>
   b7a06:	4619      	mov	r1, r3
   b7a08:	f000 f8e2 	bl	b7bd0 <__adddf3>
   b7a0c:	ec41 0b10 	vmov	d0, r0, r1
   b7a10:	e7f2      	b.n	b79f8 <rint+0x90>
   b7a12:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
   b7a16:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b7a1a:	fa21 f10c 	lsr.w	r1, r1, ip
   b7a1e:	420a      	tst	r2, r1
   b7a20:	d0e8      	beq.n	b79f4 <rint+0x8c>
   b7a22:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
   b7a26:	ea4f 0351 	mov.w	r3, r1, lsr #1
   b7a2a:	d0c8      	beq.n	b79be <rint+0x56>
   b7a2c:	ea20 0303 	bic.w	r3, r0, r3
   b7a30:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   b7a34:	fa40 fc0c 	asr.w	ip, r0, ip
   b7a38:	ea43 000c 	orr.w	r0, r3, ip
   b7a3c:	e7bf      	b.n	b79be <rint+0x56>
   b7a3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
   b7a42:	4318      	orrs	r0, r3
   b7a44:	4a14      	ldr	r2, [pc, #80]	; (b7a98 <rint+0x130>)
   b7a46:	4243      	negs	r3, r0
   b7a48:	4303      	orrs	r3, r0
   b7a4a:	eb02 0ece 	add.w	lr, r2, lr, lsl #3
   b7a4e:	0b1b      	lsrs	r3, r3, #12
   b7a50:	0c62      	lsrs	r2, r4, #17
   b7a52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
   b7a56:	0452      	lsls	r2, r2, #17
   b7a58:	ea43 0702 	orr.w	r7, r3, r2
   b7a5c:	463b      	mov	r3, r7
   b7a5e:	e9de 6700 	ldrd	r6, r7, [lr]
   b7a62:	ee10 2a10 	vmov	r2, s0
   b7a66:	4630      	mov	r0, r6
   b7a68:	4639      	mov	r1, r7
   b7a6a:	f000 f8b1 	bl	b7bd0 <__adddf3>
   b7a6e:	e9cd 0100 	strd	r0, r1, [sp]
   b7a72:	4632      	mov	r2, r6
   b7a74:	463b      	mov	r3, r7
   b7a76:	e9dd 0100 	ldrd	r0, r1, [sp]
   b7a7a:	f000 f8a7 	bl	b7bcc <__aeabi_dsub>
   b7a7e:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
   b7a82:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b7a86:	4602      	mov	r2, r0
   b7a88:	ea41 0304 	orr.w	r3, r1, r4
   b7a8c:	ec43 2b10 	vmov	d0, r2, r3
   b7a90:	b003      	add	sp, #12
   b7a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b7a94:	000fffff 	.word	0x000fffff
   b7a98:	000b8fc0 	.word	0x000b8fc0
   b7a9c:	00000000 	.word	0x00000000

000b7aa0 <scalbn>:
   b7aa0:	b538      	push	{r3, r4, r5, lr}
   b7aa2:	ec53 2b10 	vmov	r2, r3, d0
   b7aa6:	f3c3 510a 	ubfx	r1, r3, #20, #11
   b7aaa:	4604      	mov	r4, r0
   b7aac:	469c      	mov	ip, r3
   b7aae:	bb89      	cbnz	r1, b7b14 <scalbn+0x74>
   b7ab0:	ee10 1a10 	vmov	r1, s0
   b7ab4:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
   b7ab8:	ea5c 0101 	orrs.w	r1, ip, r1
   b7abc:	d029      	beq.n	b7b12 <scalbn+0x72>
   b7abe:	4619      	mov	r1, r3
   b7ac0:	2200      	movs	r2, #0
   b7ac2:	4b3d      	ldr	r3, [pc, #244]	; (b7bb8 <scalbn+0x118>)
   b7ac4:	4d3d      	ldr	r5, [pc, #244]	; (b7bbc <scalbn+0x11c>)
   b7ac6:	ee10 0a10 	vmov	r0, s0
   b7aca:	f000 fa37 	bl	b7f3c <__aeabi_dmul>
   b7ace:	42ac      	cmp	r4, r5
   b7ad0:	4602      	mov	r2, r0
   b7ad2:	460b      	mov	r3, r1
   b7ad4:	db16      	blt.n	b7b04 <scalbn+0x64>
   b7ad6:	468c      	mov	ip, r1
   b7ad8:	f3c1 510a 	ubfx	r1, r1, #20, #11
   b7adc:	3936      	subs	r1, #54	; 0x36
   b7ade:	4421      	add	r1, r4
   b7ae0:	f240 70fe 	movw	r0, #2046	; 0x7fe
   b7ae4:	4281      	cmp	r1, r0
   b7ae6:	dc21      	bgt.n	b7b2c <scalbn+0x8c>
   b7ae8:	2900      	cmp	r1, #0
   b7aea:	dc47      	bgt.n	b7b7c <scalbn+0xdc>
   b7aec:	f111 0f35 	cmn.w	r1, #53	; 0x35
   b7af0:	da34      	bge.n	b7b5c <scalbn+0xbc>
   b7af2:	f24c 3150 	movw	r1, #50000	; 0xc350
   b7af6:	428c      	cmp	r4, r1
   b7af8:	dc18      	bgt.n	b7b2c <scalbn+0x8c>
   b7afa:	2b00      	cmp	r3, #0
   b7afc:	a126      	add	r1, pc, #152	; (adr r1, b7b98 <scalbn+0xf8>)
   b7afe:	e9d1 0100 	ldrd	r0, r1, [r1]
   b7b02:	db44      	blt.n	b7b8e <scalbn+0xee>
   b7b04:	a324      	add	r3, pc, #144	; (adr r3, b7b98 <scalbn+0xf8>)
   b7b06:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7b0a:	f000 fa17 	bl	b7f3c <__aeabi_dmul>
   b7b0e:	ec41 0b10 	vmov	d0, r0, r1
   b7b12:	bd38      	pop	{r3, r4, r5, pc}
   b7b14:	f240 70ff 	movw	r0, #2047	; 0x7ff
   b7b18:	4281      	cmp	r1, r0
   b7b1a:	d1e0      	bne.n	b7ade <scalbn+0x3e>
   b7b1c:	ee10 0a10 	vmov	r0, s0
   b7b20:	4619      	mov	r1, r3
   b7b22:	f000 f855 	bl	b7bd0 <__adddf3>
   b7b26:	ec41 0b10 	vmov	d0, r0, r1
   b7b2a:	bd38      	pop	{r3, r4, r5, pc}
   b7b2c:	2b00      	cmp	r3, #0
   b7b2e:	a11c      	add	r1, pc, #112	; (adr r1, b7ba0 <scalbn+0x100>)
   b7b30:	e9d1 0100 	ldrd	r0, r1, [r1]
   b7b34:	db07      	blt.n	b7b46 <scalbn+0xa6>
   b7b36:	a31a      	add	r3, pc, #104	; (adr r3, b7ba0 <scalbn+0x100>)
   b7b38:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7b3c:	f000 f9fe 	bl	b7f3c <__aeabi_dmul>
   b7b40:	ec41 0b10 	vmov	d0, r0, r1
   b7b44:	bd38      	pop	{r3, r4, r5, pc}
   b7b46:	a118      	add	r1, pc, #96	; (adr r1, b7ba8 <scalbn+0x108>)
   b7b48:	e9d1 0100 	ldrd	r0, r1, [r1]
   b7b4c:	a314      	add	r3, pc, #80	; (adr r3, b7ba0 <scalbn+0x100>)
   b7b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7b52:	f000 f9f3 	bl	b7f3c <__aeabi_dmul>
   b7b56:	ec41 0b10 	vmov	d0, r0, r1
   b7b5a:	e7f3      	b.n	b7b44 <scalbn+0xa4>
   b7b5c:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   b7b60:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   b7b64:	3136      	adds	r1, #54	; 0x36
   b7b66:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   b7b6a:	4610      	mov	r0, r2
   b7b6c:	4619      	mov	r1, r3
   b7b6e:	2200      	movs	r2, #0
   b7b70:	4b13      	ldr	r3, [pc, #76]	; (b7bc0 <scalbn+0x120>)
   b7b72:	f000 f9e3 	bl	b7f3c <__aeabi_dmul>
   b7b76:	ec41 0b10 	vmov	d0, r0, r1
   b7b7a:	bd38      	pop	{r3, r4, r5, pc}
   b7b7c:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   b7b80:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   b7b84:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   b7b88:	ec43 2b10 	vmov	d0, r2, r3
   b7b8c:	bd38      	pop	{r3, r4, r5, pc}
   b7b8e:	a108      	add	r1, pc, #32	; (adr r1, b7bb0 <scalbn+0x110>)
   b7b90:	e9d1 0100 	ldrd	r0, r1, [r1]
   b7b94:	e7b6      	b.n	b7b04 <scalbn+0x64>
   b7b96:	bf00      	nop
   b7b98:	c2f8f359 	.word	0xc2f8f359
   b7b9c:	01a56e1f 	.word	0x01a56e1f
   b7ba0:	8800759c 	.word	0x8800759c
   b7ba4:	7e37e43c 	.word	0x7e37e43c
   b7ba8:	8800759c 	.word	0x8800759c
   b7bac:	fe37e43c 	.word	0xfe37e43c
   b7bb0:	c2f8f359 	.word	0xc2f8f359
   b7bb4:	81a56e1f 	.word	0x81a56e1f
   b7bb8:	43500000 	.word	0x43500000
   b7bbc:	ffff3cb0 	.word	0xffff3cb0
   b7bc0:	3c900000 	.word	0x3c900000

000b7bc4 <__aeabi_drsub>:
   b7bc4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b7bc8:	e002      	b.n	b7bd0 <__adddf3>
   b7bca:	bf00      	nop

000b7bcc <__aeabi_dsub>:
   b7bcc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b7bd0 <__adddf3>:
   b7bd0:	b530      	push	{r4, r5, lr}
   b7bd2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b7bd6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b7bda:	ea94 0f05 	teq	r4, r5
   b7bde:	bf08      	it	eq
   b7be0:	ea90 0f02 	teqeq	r0, r2
   b7be4:	bf1f      	itttt	ne
   b7be6:	ea54 0c00 	orrsne.w	ip, r4, r0
   b7bea:	ea55 0c02 	orrsne.w	ip, r5, r2
   b7bee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b7bf2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b7bf6:	f000 80e2 	beq.w	b7dbe <__adddf3+0x1ee>
   b7bfa:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b7bfe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b7c02:	bfb8      	it	lt
   b7c04:	426d      	neglt	r5, r5
   b7c06:	dd0c      	ble.n	b7c22 <__adddf3+0x52>
   b7c08:	442c      	add	r4, r5
   b7c0a:	ea80 0202 	eor.w	r2, r0, r2
   b7c0e:	ea81 0303 	eor.w	r3, r1, r3
   b7c12:	ea82 0000 	eor.w	r0, r2, r0
   b7c16:	ea83 0101 	eor.w	r1, r3, r1
   b7c1a:	ea80 0202 	eor.w	r2, r0, r2
   b7c1e:	ea81 0303 	eor.w	r3, r1, r3
   b7c22:	2d36      	cmp	r5, #54	; 0x36
   b7c24:	bf88      	it	hi
   b7c26:	bd30      	pophi	{r4, r5, pc}
   b7c28:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b7c2c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b7c30:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b7c34:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b7c38:	d002      	beq.n	b7c40 <__adddf3+0x70>
   b7c3a:	4240      	negs	r0, r0
   b7c3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7c40:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b7c44:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b7c48:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b7c4c:	d002      	beq.n	b7c54 <__adddf3+0x84>
   b7c4e:	4252      	negs	r2, r2
   b7c50:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b7c54:	ea94 0f05 	teq	r4, r5
   b7c58:	f000 80a7 	beq.w	b7daa <__adddf3+0x1da>
   b7c5c:	f1a4 0401 	sub.w	r4, r4, #1
   b7c60:	f1d5 0e20 	rsbs	lr, r5, #32
   b7c64:	db0d      	blt.n	b7c82 <__adddf3+0xb2>
   b7c66:	fa02 fc0e 	lsl.w	ip, r2, lr
   b7c6a:	fa22 f205 	lsr.w	r2, r2, r5
   b7c6e:	1880      	adds	r0, r0, r2
   b7c70:	f141 0100 	adc.w	r1, r1, #0
   b7c74:	fa03 f20e 	lsl.w	r2, r3, lr
   b7c78:	1880      	adds	r0, r0, r2
   b7c7a:	fa43 f305 	asr.w	r3, r3, r5
   b7c7e:	4159      	adcs	r1, r3
   b7c80:	e00e      	b.n	b7ca0 <__adddf3+0xd0>
   b7c82:	f1a5 0520 	sub.w	r5, r5, #32
   b7c86:	f10e 0e20 	add.w	lr, lr, #32
   b7c8a:	2a01      	cmp	r2, #1
   b7c8c:	fa03 fc0e 	lsl.w	ip, r3, lr
   b7c90:	bf28      	it	cs
   b7c92:	f04c 0c02 	orrcs.w	ip, ip, #2
   b7c96:	fa43 f305 	asr.w	r3, r3, r5
   b7c9a:	18c0      	adds	r0, r0, r3
   b7c9c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b7ca0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7ca4:	d507      	bpl.n	b7cb6 <__adddf3+0xe6>
   b7ca6:	f04f 0e00 	mov.w	lr, #0
   b7caa:	f1dc 0c00 	rsbs	ip, ip, #0
   b7cae:	eb7e 0000 	sbcs.w	r0, lr, r0
   b7cb2:	eb6e 0101 	sbc.w	r1, lr, r1
   b7cb6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b7cba:	d31b      	bcc.n	b7cf4 <__adddf3+0x124>
   b7cbc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b7cc0:	d30c      	bcc.n	b7cdc <__adddf3+0x10c>
   b7cc2:	0849      	lsrs	r1, r1, #1
   b7cc4:	ea5f 0030 	movs.w	r0, r0, rrx
   b7cc8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b7ccc:	f104 0401 	add.w	r4, r4, #1
   b7cd0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b7cd4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b7cd8:	f080 809a 	bcs.w	b7e10 <__adddf3+0x240>
   b7cdc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b7ce0:	bf08      	it	eq
   b7ce2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b7ce6:	f150 0000 	adcs.w	r0, r0, #0
   b7cea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b7cee:	ea41 0105 	orr.w	r1, r1, r5
   b7cf2:	bd30      	pop	{r4, r5, pc}
   b7cf4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b7cf8:	4140      	adcs	r0, r0
   b7cfa:	eb41 0101 	adc.w	r1, r1, r1
   b7cfe:	3c01      	subs	r4, #1
   b7d00:	bf28      	it	cs
   b7d02:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b7d06:	d2e9      	bcs.n	b7cdc <__adddf3+0x10c>
   b7d08:	f091 0f00 	teq	r1, #0
   b7d0c:	bf04      	itt	eq
   b7d0e:	4601      	moveq	r1, r0
   b7d10:	2000      	moveq	r0, #0
   b7d12:	fab1 f381 	clz	r3, r1
   b7d16:	bf08      	it	eq
   b7d18:	3320      	addeq	r3, #32
   b7d1a:	f1a3 030b 	sub.w	r3, r3, #11
   b7d1e:	f1b3 0220 	subs.w	r2, r3, #32
   b7d22:	da0c      	bge.n	b7d3e <__adddf3+0x16e>
   b7d24:	320c      	adds	r2, #12
   b7d26:	dd08      	ble.n	b7d3a <__adddf3+0x16a>
   b7d28:	f102 0c14 	add.w	ip, r2, #20
   b7d2c:	f1c2 020c 	rsb	r2, r2, #12
   b7d30:	fa01 f00c 	lsl.w	r0, r1, ip
   b7d34:	fa21 f102 	lsr.w	r1, r1, r2
   b7d38:	e00c      	b.n	b7d54 <__adddf3+0x184>
   b7d3a:	f102 0214 	add.w	r2, r2, #20
   b7d3e:	bfd8      	it	le
   b7d40:	f1c2 0c20 	rsble	ip, r2, #32
   b7d44:	fa01 f102 	lsl.w	r1, r1, r2
   b7d48:	fa20 fc0c 	lsr.w	ip, r0, ip
   b7d4c:	bfdc      	itt	le
   b7d4e:	ea41 010c 	orrle.w	r1, r1, ip
   b7d52:	4090      	lslle	r0, r2
   b7d54:	1ae4      	subs	r4, r4, r3
   b7d56:	bfa2      	ittt	ge
   b7d58:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b7d5c:	4329      	orrge	r1, r5
   b7d5e:	bd30      	popge	{r4, r5, pc}
   b7d60:	ea6f 0404 	mvn.w	r4, r4
   b7d64:	3c1f      	subs	r4, #31
   b7d66:	da1c      	bge.n	b7da2 <__adddf3+0x1d2>
   b7d68:	340c      	adds	r4, #12
   b7d6a:	dc0e      	bgt.n	b7d8a <__adddf3+0x1ba>
   b7d6c:	f104 0414 	add.w	r4, r4, #20
   b7d70:	f1c4 0220 	rsb	r2, r4, #32
   b7d74:	fa20 f004 	lsr.w	r0, r0, r4
   b7d78:	fa01 f302 	lsl.w	r3, r1, r2
   b7d7c:	ea40 0003 	orr.w	r0, r0, r3
   b7d80:	fa21 f304 	lsr.w	r3, r1, r4
   b7d84:	ea45 0103 	orr.w	r1, r5, r3
   b7d88:	bd30      	pop	{r4, r5, pc}
   b7d8a:	f1c4 040c 	rsb	r4, r4, #12
   b7d8e:	f1c4 0220 	rsb	r2, r4, #32
   b7d92:	fa20 f002 	lsr.w	r0, r0, r2
   b7d96:	fa01 f304 	lsl.w	r3, r1, r4
   b7d9a:	ea40 0003 	orr.w	r0, r0, r3
   b7d9e:	4629      	mov	r1, r5
   b7da0:	bd30      	pop	{r4, r5, pc}
   b7da2:	fa21 f004 	lsr.w	r0, r1, r4
   b7da6:	4629      	mov	r1, r5
   b7da8:	bd30      	pop	{r4, r5, pc}
   b7daa:	f094 0f00 	teq	r4, #0
   b7dae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b7db2:	bf06      	itte	eq
   b7db4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b7db8:	3401      	addeq	r4, #1
   b7dba:	3d01      	subne	r5, #1
   b7dbc:	e74e      	b.n	b7c5c <__adddf3+0x8c>
   b7dbe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b7dc2:	bf18      	it	ne
   b7dc4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b7dc8:	d029      	beq.n	b7e1e <__adddf3+0x24e>
   b7dca:	ea94 0f05 	teq	r4, r5
   b7dce:	bf08      	it	eq
   b7dd0:	ea90 0f02 	teqeq	r0, r2
   b7dd4:	d005      	beq.n	b7de2 <__adddf3+0x212>
   b7dd6:	ea54 0c00 	orrs.w	ip, r4, r0
   b7dda:	bf04      	itt	eq
   b7ddc:	4619      	moveq	r1, r3
   b7dde:	4610      	moveq	r0, r2
   b7de0:	bd30      	pop	{r4, r5, pc}
   b7de2:	ea91 0f03 	teq	r1, r3
   b7de6:	bf1e      	ittt	ne
   b7de8:	2100      	movne	r1, #0
   b7dea:	2000      	movne	r0, #0
   b7dec:	bd30      	popne	{r4, r5, pc}
   b7dee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b7df2:	d105      	bne.n	b7e00 <__adddf3+0x230>
   b7df4:	0040      	lsls	r0, r0, #1
   b7df6:	4149      	adcs	r1, r1
   b7df8:	bf28      	it	cs
   b7dfa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b7dfe:	bd30      	pop	{r4, r5, pc}
   b7e00:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b7e04:	bf3c      	itt	cc
   b7e06:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b7e0a:	bd30      	popcc	{r4, r5, pc}
   b7e0c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7e10:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b7e14:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b7e18:	f04f 0000 	mov.w	r0, #0
   b7e1c:	bd30      	pop	{r4, r5, pc}
   b7e1e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b7e22:	bf1a      	itte	ne
   b7e24:	4619      	movne	r1, r3
   b7e26:	4610      	movne	r0, r2
   b7e28:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b7e2c:	bf1c      	itt	ne
   b7e2e:	460b      	movne	r3, r1
   b7e30:	4602      	movne	r2, r0
   b7e32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b7e36:	bf06      	itte	eq
   b7e38:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b7e3c:	ea91 0f03 	teqeq	r1, r3
   b7e40:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b7e44:	bd30      	pop	{r4, r5, pc}
   b7e46:	bf00      	nop

000b7e48 <__aeabi_ui2d>:
   b7e48:	f090 0f00 	teq	r0, #0
   b7e4c:	bf04      	itt	eq
   b7e4e:	2100      	moveq	r1, #0
   b7e50:	4770      	bxeq	lr
   b7e52:	b530      	push	{r4, r5, lr}
   b7e54:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7e58:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7e5c:	f04f 0500 	mov.w	r5, #0
   b7e60:	f04f 0100 	mov.w	r1, #0
   b7e64:	e750      	b.n	b7d08 <__adddf3+0x138>
   b7e66:	bf00      	nop

000b7e68 <__aeabi_i2d>:
   b7e68:	f090 0f00 	teq	r0, #0
   b7e6c:	bf04      	itt	eq
   b7e6e:	2100      	moveq	r1, #0
   b7e70:	4770      	bxeq	lr
   b7e72:	b530      	push	{r4, r5, lr}
   b7e74:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7e78:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7e7c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b7e80:	bf48      	it	mi
   b7e82:	4240      	negmi	r0, r0
   b7e84:	f04f 0100 	mov.w	r1, #0
   b7e88:	e73e      	b.n	b7d08 <__adddf3+0x138>
   b7e8a:	bf00      	nop

000b7e8c <__aeabi_f2d>:
   b7e8c:	0042      	lsls	r2, r0, #1
   b7e8e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b7e92:	ea4f 0131 	mov.w	r1, r1, rrx
   b7e96:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b7e9a:	bf1f      	itttt	ne
   b7e9c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b7ea0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b7ea4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b7ea8:	4770      	bxne	lr
   b7eaa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b7eae:	bf08      	it	eq
   b7eb0:	4770      	bxeq	lr
   b7eb2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b7eb6:	bf04      	itt	eq
   b7eb8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b7ebc:	4770      	bxeq	lr
   b7ebe:	b530      	push	{r4, r5, lr}
   b7ec0:	f44f 7460 	mov.w	r4, #896	; 0x380
   b7ec4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7ec8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b7ecc:	e71c      	b.n	b7d08 <__adddf3+0x138>
   b7ece:	bf00      	nop

000b7ed0 <__aeabi_ul2d>:
   b7ed0:	ea50 0201 	orrs.w	r2, r0, r1
   b7ed4:	bf08      	it	eq
   b7ed6:	4770      	bxeq	lr
   b7ed8:	b530      	push	{r4, r5, lr}
   b7eda:	f04f 0500 	mov.w	r5, #0
   b7ede:	e00a      	b.n	b7ef6 <__aeabi_l2d+0x16>

000b7ee0 <__aeabi_l2d>:
   b7ee0:	ea50 0201 	orrs.w	r2, r0, r1
   b7ee4:	bf08      	it	eq
   b7ee6:	4770      	bxeq	lr
   b7ee8:	b530      	push	{r4, r5, lr}
   b7eea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b7eee:	d502      	bpl.n	b7ef6 <__aeabi_l2d+0x16>
   b7ef0:	4240      	negs	r0, r0
   b7ef2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7ef6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7efa:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7efe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b7f02:	f43f aed8 	beq.w	b7cb6 <__adddf3+0xe6>
   b7f06:	f04f 0203 	mov.w	r2, #3
   b7f0a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b7f0e:	bf18      	it	ne
   b7f10:	3203      	addne	r2, #3
   b7f12:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b7f16:	bf18      	it	ne
   b7f18:	3203      	addne	r2, #3
   b7f1a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b7f1e:	f1c2 0320 	rsb	r3, r2, #32
   b7f22:	fa00 fc03 	lsl.w	ip, r0, r3
   b7f26:	fa20 f002 	lsr.w	r0, r0, r2
   b7f2a:	fa01 fe03 	lsl.w	lr, r1, r3
   b7f2e:	ea40 000e 	orr.w	r0, r0, lr
   b7f32:	fa21 f102 	lsr.w	r1, r1, r2
   b7f36:	4414      	add	r4, r2
   b7f38:	e6bd      	b.n	b7cb6 <__adddf3+0xe6>
   b7f3a:	bf00      	nop

000b7f3c <__aeabi_dmul>:
   b7f3c:	b570      	push	{r4, r5, r6, lr}
   b7f3e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b7f42:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b7f46:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b7f4a:	bf1d      	ittte	ne
   b7f4c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b7f50:	ea94 0f0c 	teqne	r4, ip
   b7f54:	ea95 0f0c 	teqne	r5, ip
   b7f58:	f000 f8de 	bleq	b8118 <__aeabi_dmul+0x1dc>
   b7f5c:	442c      	add	r4, r5
   b7f5e:	ea81 0603 	eor.w	r6, r1, r3
   b7f62:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b7f66:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b7f6a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b7f6e:	bf18      	it	ne
   b7f70:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b7f74:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7f78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b7f7c:	d038      	beq.n	b7ff0 <__aeabi_dmul+0xb4>
   b7f7e:	fba0 ce02 	umull	ip, lr, r0, r2
   b7f82:	f04f 0500 	mov.w	r5, #0
   b7f86:	fbe1 e502 	umlal	lr, r5, r1, r2
   b7f8a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b7f8e:	fbe0 e503 	umlal	lr, r5, r0, r3
   b7f92:	f04f 0600 	mov.w	r6, #0
   b7f96:	fbe1 5603 	umlal	r5, r6, r1, r3
   b7f9a:	f09c 0f00 	teq	ip, #0
   b7f9e:	bf18      	it	ne
   b7fa0:	f04e 0e01 	orrne.w	lr, lr, #1
   b7fa4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b7fa8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b7fac:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b7fb0:	d204      	bcs.n	b7fbc <__aeabi_dmul+0x80>
   b7fb2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b7fb6:	416d      	adcs	r5, r5
   b7fb8:	eb46 0606 	adc.w	r6, r6, r6
   b7fbc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b7fc0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b7fc4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b7fc8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b7fcc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b7fd0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b7fd4:	bf88      	it	hi
   b7fd6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b7fda:	d81e      	bhi.n	b801a <__aeabi_dmul+0xde>
   b7fdc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b7fe0:	bf08      	it	eq
   b7fe2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b7fe6:	f150 0000 	adcs.w	r0, r0, #0
   b7fea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b7fee:	bd70      	pop	{r4, r5, r6, pc}
   b7ff0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b7ff4:	ea46 0101 	orr.w	r1, r6, r1
   b7ff8:	ea40 0002 	orr.w	r0, r0, r2
   b7ffc:	ea81 0103 	eor.w	r1, r1, r3
   b8000:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b8004:	bfc2      	ittt	gt
   b8006:	ebd4 050c 	rsbsgt	r5, r4, ip
   b800a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b800e:	bd70      	popgt	{r4, r5, r6, pc}
   b8010:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b8014:	f04f 0e00 	mov.w	lr, #0
   b8018:	3c01      	subs	r4, #1
   b801a:	f300 80ab 	bgt.w	b8174 <__aeabi_dmul+0x238>
   b801e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b8022:	bfde      	ittt	le
   b8024:	2000      	movle	r0, #0
   b8026:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b802a:	bd70      	pople	{r4, r5, r6, pc}
   b802c:	f1c4 0400 	rsb	r4, r4, #0
   b8030:	3c20      	subs	r4, #32
   b8032:	da35      	bge.n	b80a0 <__aeabi_dmul+0x164>
   b8034:	340c      	adds	r4, #12
   b8036:	dc1b      	bgt.n	b8070 <__aeabi_dmul+0x134>
   b8038:	f104 0414 	add.w	r4, r4, #20
   b803c:	f1c4 0520 	rsb	r5, r4, #32
   b8040:	fa00 f305 	lsl.w	r3, r0, r5
   b8044:	fa20 f004 	lsr.w	r0, r0, r4
   b8048:	fa01 f205 	lsl.w	r2, r1, r5
   b804c:	ea40 0002 	orr.w	r0, r0, r2
   b8050:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b8054:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b8058:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b805c:	fa21 f604 	lsr.w	r6, r1, r4
   b8060:	eb42 0106 	adc.w	r1, r2, r6
   b8064:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b8068:	bf08      	it	eq
   b806a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b806e:	bd70      	pop	{r4, r5, r6, pc}
   b8070:	f1c4 040c 	rsb	r4, r4, #12
   b8074:	f1c4 0520 	rsb	r5, r4, #32
   b8078:	fa00 f304 	lsl.w	r3, r0, r4
   b807c:	fa20 f005 	lsr.w	r0, r0, r5
   b8080:	fa01 f204 	lsl.w	r2, r1, r4
   b8084:	ea40 0002 	orr.w	r0, r0, r2
   b8088:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b808c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b8090:	f141 0100 	adc.w	r1, r1, #0
   b8094:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b8098:	bf08      	it	eq
   b809a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b809e:	bd70      	pop	{r4, r5, r6, pc}
   b80a0:	f1c4 0520 	rsb	r5, r4, #32
   b80a4:	fa00 f205 	lsl.w	r2, r0, r5
   b80a8:	ea4e 0e02 	orr.w	lr, lr, r2
   b80ac:	fa20 f304 	lsr.w	r3, r0, r4
   b80b0:	fa01 f205 	lsl.w	r2, r1, r5
   b80b4:	ea43 0302 	orr.w	r3, r3, r2
   b80b8:	fa21 f004 	lsr.w	r0, r1, r4
   b80bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b80c0:	fa21 f204 	lsr.w	r2, r1, r4
   b80c4:	ea20 0002 	bic.w	r0, r0, r2
   b80c8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b80cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b80d0:	bf08      	it	eq
   b80d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b80d6:	bd70      	pop	{r4, r5, r6, pc}
   b80d8:	f094 0f00 	teq	r4, #0
   b80dc:	d10f      	bne.n	b80fe <__aeabi_dmul+0x1c2>
   b80de:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b80e2:	0040      	lsls	r0, r0, #1
   b80e4:	eb41 0101 	adc.w	r1, r1, r1
   b80e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b80ec:	bf08      	it	eq
   b80ee:	3c01      	subeq	r4, #1
   b80f0:	d0f7      	beq.n	b80e2 <__aeabi_dmul+0x1a6>
   b80f2:	ea41 0106 	orr.w	r1, r1, r6
   b80f6:	f095 0f00 	teq	r5, #0
   b80fa:	bf18      	it	ne
   b80fc:	4770      	bxne	lr
   b80fe:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b8102:	0052      	lsls	r2, r2, #1
   b8104:	eb43 0303 	adc.w	r3, r3, r3
   b8108:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b810c:	bf08      	it	eq
   b810e:	3d01      	subeq	r5, #1
   b8110:	d0f7      	beq.n	b8102 <__aeabi_dmul+0x1c6>
   b8112:	ea43 0306 	orr.w	r3, r3, r6
   b8116:	4770      	bx	lr
   b8118:	ea94 0f0c 	teq	r4, ip
   b811c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b8120:	bf18      	it	ne
   b8122:	ea95 0f0c 	teqne	r5, ip
   b8126:	d00c      	beq.n	b8142 <__aeabi_dmul+0x206>
   b8128:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b812c:	bf18      	it	ne
   b812e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b8132:	d1d1      	bne.n	b80d8 <__aeabi_dmul+0x19c>
   b8134:	ea81 0103 	eor.w	r1, r1, r3
   b8138:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b813c:	f04f 0000 	mov.w	r0, #0
   b8140:	bd70      	pop	{r4, r5, r6, pc}
   b8142:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b8146:	bf06      	itte	eq
   b8148:	4610      	moveq	r0, r2
   b814a:	4619      	moveq	r1, r3
   b814c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b8150:	d019      	beq.n	b8186 <__aeabi_dmul+0x24a>
   b8152:	ea94 0f0c 	teq	r4, ip
   b8156:	d102      	bne.n	b815e <__aeabi_dmul+0x222>
   b8158:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b815c:	d113      	bne.n	b8186 <__aeabi_dmul+0x24a>
   b815e:	ea95 0f0c 	teq	r5, ip
   b8162:	d105      	bne.n	b8170 <__aeabi_dmul+0x234>
   b8164:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b8168:	bf1c      	itt	ne
   b816a:	4610      	movne	r0, r2
   b816c:	4619      	movne	r1, r3
   b816e:	d10a      	bne.n	b8186 <__aeabi_dmul+0x24a>
   b8170:	ea81 0103 	eor.w	r1, r1, r3
   b8174:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b8178:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b817c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b8180:	f04f 0000 	mov.w	r0, #0
   b8184:	bd70      	pop	{r4, r5, r6, pc}
   b8186:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b818a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b818e:	bd70      	pop	{r4, r5, r6, pc}

000b8190 <__aeabi_ddiv>:
   b8190:	b570      	push	{r4, r5, r6, lr}
   b8192:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b8196:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b819a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b819e:	bf1d      	ittte	ne
   b81a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b81a4:	ea94 0f0c 	teqne	r4, ip
   b81a8:	ea95 0f0c 	teqne	r5, ip
   b81ac:	f000 f8a7 	bleq	b82fe <__aeabi_ddiv+0x16e>
   b81b0:	eba4 0405 	sub.w	r4, r4, r5
   b81b4:	ea81 0e03 	eor.w	lr, r1, r3
   b81b8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b81bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b81c0:	f000 8088 	beq.w	b82d4 <__aeabi_ddiv+0x144>
   b81c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b81c8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b81cc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b81d0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b81d4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b81d8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b81dc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b81e0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b81e4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b81e8:	429d      	cmp	r5, r3
   b81ea:	bf08      	it	eq
   b81ec:	4296      	cmpeq	r6, r2
   b81ee:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b81f2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b81f6:	d202      	bcs.n	b81fe <__aeabi_ddiv+0x6e>
   b81f8:	085b      	lsrs	r3, r3, #1
   b81fa:	ea4f 0232 	mov.w	r2, r2, rrx
   b81fe:	1ab6      	subs	r6, r6, r2
   b8200:	eb65 0503 	sbc.w	r5, r5, r3
   b8204:	085b      	lsrs	r3, r3, #1
   b8206:	ea4f 0232 	mov.w	r2, r2, rrx
   b820a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b820e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b8212:	ebb6 0e02 	subs.w	lr, r6, r2
   b8216:	eb75 0e03 	sbcs.w	lr, r5, r3
   b821a:	bf22      	ittt	cs
   b821c:	1ab6      	subcs	r6, r6, r2
   b821e:	4675      	movcs	r5, lr
   b8220:	ea40 000c 	orrcs.w	r0, r0, ip
   b8224:	085b      	lsrs	r3, r3, #1
   b8226:	ea4f 0232 	mov.w	r2, r2, rrx
   b822a:	ebb6 0e02 	subs.w	lr, r6, r2
   b822e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b8232:	bf22      	ittt	cs
   b8234:	1ab6      	subcs	r6, r6, r2
   b8236:	4675      	movcs	r5, lr
   b8238:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b823c:	085b      	lsrs	r3, r3, #1
   b823e:	ea4f 0232 	mov.w	r2, r2, rrx
   b8242:	ebb6 0e02 	subs.w	lr, r6, r2
   b8246:	eb75 0e03 	sbcs.w	lr, r5, r3
   b824a:	bf22      	ittt	cs
   b824c:	1ab6      	subcs	r6, r6, r2
   b824e:	4675      	movcs	r5, lr
   b8250:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b8254:	085b      	lsrs	r3, r3, #1
   b8256:	ea4f 0232 	mov.w	r2, r2, rrx
   b825a:	ebb6 0e02 	subs.w	lr, r6, r2
   b825e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b8262:	bf22      	ittt	cs
   b8264:	1ab6      	subcs	r6, r6, r2
   b8266:	4675      	movcs	r5, lr
   b8268:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b826c:	ea55 0e06 	orrs.w	lr, r5, r6
   b8270:	d018      	beq.n	b82a4 <__aeabi_ddiv+0x114>
   b8272:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b8276:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b827a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b827e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b8282:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b8286:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b828a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b828e:	d1c0      	bne.n	b8212 <__aeabi_ddiv+0x82>
   b8290:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b8294:	d10b      	bne.n	b82ae <__aeabi_ddiv+0x11e>
   b8296:	ea41 0100 	orr.w	r1, r1, r0
   b829a:	f04f 0000 	mov.w	r0, #0
   b829e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b82a2:	e7b6      	b.n	b8212 <__aeabi_ddiv+0x82>
   b82a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b82a8:	bf04      	itt	eq
   b82aa:	4301      	orreq	r1, r0
   b82ac:	2000      	moveq	r0, #0
   b82ae:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b82b2:	bf88      	it	hi
   b82b4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b82b8:	f63f aeaf 	bhi.w	b801a <__aeabi_dmul+0xde>
   b82bc:	ebb5 0c03 	subs.w	ip, r5, r3
   b82c0:	bf04      	itt	eq
   b82c2:	ebb6 0c02 	subseq.w	ip, r6, r2
   b82c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b82ca:	f150 0000 	adcs.w	r0, r0, #0
   b82ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b82d2:	bd70      	pop	{r4, r5, r6, pc}
   b82d4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b82d8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b82dc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b82e0:	bfc2      	ittt	gt
   b82e2:	ebd4 050c 	rsbsgt	r5, r4, ip
   b82e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b82ea:	bd70      	popgt	{r4, r5, r6, pc}
   b82ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b82f0:	f04f 0e00 	mov.w	lr, #0
   b82f4:	3c01      	subs	r4, #1
   b82f6:	e690      	b.n	b801a <__aeabi_dmul+0xde>
   b82f8:	ea45 0e06 	orr.w	lr, r5, r6
   b82fc:	e68d      	b.n	b801a <__aeabi_dmul+0xde>
   b82fe:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b8302:	ea94 0f0c 	teq	r4, ip
   b8306:	bf08      	it	eq
   b8308:	ea95 0f0c 	teqeq	r5, ip
   b830c:	f43f af3b 	beq.w	b8186 <__aeabi_dmul+0x24a>
   b8310:	ea94 0f0c 	teq	r4, ip
   b8314:	d10a      	bne.n	b832c <__aeabi_ddiv+0x19c>
   b8316:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b831a:	f47f af34 	bne.w	b8186 <__aeabi_dmul+0x24a>
   b831e:	ea95 0f0c 	teq	r5, ip
   b8322:	f47f af25 	bne.w	b8170 <__aeabi_dmul+0x234>
   b8326:	4610      	mov	r0, r2
   b8328:	4619      	mov	r1, r3
   b832a:	e72c      	b.n	b8186 <__aeabi_dmul+0x24a>
   b832c:	ea95 0f0c 	teq	r5, ip
   b8330:	d106      	bne.n	b8340 <__aeabi_ddiv+0x1b0>
   b8332:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b8336:	f43f aefd 	beq.w	b8134 <__aeabi_dmul+0x1f8>
   b833a:	4610      	mov	r0, r2
   b833c:	4619      	mov	r1, r3
   b833e:	e722      	b.n	b8186 <__aeabi_dmul+0x24a>
   b8340:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b8344:	bf18      	it	ne
   b8346:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b834a:	f47f aec5 	bne.w	b80d8 <__aeabi_dmul+0x19c>
   b834e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b8352:	f47f af0d 	bne.w	b8170 <__aeabi_dmul+0x234>
   b8356:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b835a:	f47f aeeb 	bne.w	b8134 <__aeabi_dmul+0x1f8>
   b835e:	e712      	b.n	b8186 <__aeabi_dmul+0x24a>

000b8360 <__gedf2>:
   b8360:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b8364:	e006      	b.n	b8374 <__cmpdf2+0x4>
   b8366:	bf00      	nop

000b8368 <__ledf2>:
   b8368:	f04f 0c01 	mov.w	ip, #1
   b836c:	e002      	b.n	b8374 <__cmpdf2+0x4>
   b836e:	bf00      	nop

000b8370 <__cmpdf2>:
   b8370:	f04f 0c01 	mov.w	ip, #1
   b8374:	f84d cd04 	str.w	ip, [sp, #-4]!
   b8378:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b837c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b8380:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b8384:	bf18      	it	ne
   b8386:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b838a:	d01b      	beq.n	b83c4 <__cmpdf2+0x54>
   b838c:	b001      	add	sp, #4
   b838e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b8392:	bf0c      	ite	eq
   b8394:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b8398:	ea91 0f03 	teqne	r1, r3
   b839c:	bf02      	ittt	eq
   b839e:	ea90 0f02 	teqeq	r0, r2
   b83a2:	2000      	moveq	r0, #0
   b83a4:	4770      	bxeq	lr
   b83a6:	f110 0f00 	cmn.w	r0, #0
   b83aa:	ea91 0f03 	teq	r1, r3
   b83ae:	bf58      	it	pl
   b83b0:	4299      	cmppl	r1, r3
   b83b2:	bf08      	it	eq
   b83b4:	4290      	cmpeq	r0, r2
   b83b6:	bf2c      	ite	cs
   b83b8:	17d8      	asrcs	r0, r3, #31
   b83ba:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b83be:	f040 0001 	orr.w	r0, r0, #1
   b83c2:	4770      	bx	lr
   b83c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b83c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b83cc:	d102      	bne.n	b83d4 <__cmpdf2+0x64>
   b83ce:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b83d2:	d107      	bne.n	b83e4 <__cmpdf2+0x74>
   b83d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b83d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b83dc:	d1d6      	bne.n	b838c <__cmpdf2+0x1c>
   b83de:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b83e2:	d0d3      	beq.n	b838c <__cmpdf2+0x1c>
   b83e4:	f85d 0b04 	ldr.w	r0, [sp], #4
   b83e8:	4770      	bx	lr
   b83ea:	bf00      	nop

000b83ec <__aeabi_cdrcmple>:
   b83ec:	4684      	mov	ip, r0
   b83ee:	4610      	mov	r0, r2
   b83f0:	4662      	mov	r2, ip
   b83f2:	468c      	mov	ip, r1
   b83f4:	4619      	mov	r1, r3
   b83f6:	4663      	mov	r3, ip
   b83f8:	e000      	b.n	b83fc <__aeabi_cdcmpeq>
   b83fa:	bf00      	nop

000b83fc <__aeabi_cdcmpeq>:
   b83fc:	b501      	push	{r0, lr}
   b83fe:	f7ff ffb7 	bl	b8370 <__cmpdf2>
   b8402:	2800      	cmp	r0, #0
   b8404:	bf48      	it	mi
   b8406:	f110 0f00 	cmnmi.w	r0, #0
   b840a:	bd01      	pop	{r0, pc}

000b840c <__aeabi_dcmpeq>:
   b840c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8410:	f7ff fff4 	bl	b83fc <__aeabi_cdcmpeq>
   b8414:	bf0c      	ite	eq
   b8416:	2001      	moveq	r0, #1
   b8418:	2000      	movne	r0, #0
   b841a:	f85d fb08 	ldr.w	pc, [sp], #8
   b841e:	bf00      	nop

000b8420 <__aeabi_dcmplt>:
   b8420:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8424:	f7ff ffea 	bl	b83fc <__aeabi_cdcmpeq>
   b8428:	bf34      	ite	cc
   b842a:	2001      	movcc	r0, #1
   b842c:	2000      	movcs	r0, #0
   b842e:	f85d fb08 	ldr.w	pc, [sp], #8
   b8432:	bf00      	nop

000b8434 <__aeabi_dcmple>:
   b8434:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8438:	f7ff ffe0 	bl	b83fc <__aeabi_cdcmpeq>
   b843c:	bf94      	ite	ls
   b843e:	2001      	movls	r0, #1
   b8440:	2000      	movhi	r0, #0
   b8442:	f85d fb08 	ldr.w	pc, [sp], #8
   b8446:	bf00      	nop

000b8448 <__aeabi_dcmpge>:
   b8448:	f84d ed08 	str.w	lr, [sp, #-8]!
   b844c:	f7ff ffce 	bl	b83ec <__aeabi_cdrcmple>
   b8450:	bf94      	ite	ls
   b8452:	2001      	movls	r0, #1
   b8454:	2000      	movhi	r0, #0
   b8456:	f85d fb08 	ldr.w	pc, [sp], #8
   b845a:	bf00      	nop

000b845c <__aeabi_dcmpgt>:
   b845c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8460:	f7ff ffc4 	bl	b83ec <__aeabi_cdrcmple>
   b8464:	bf34      	ite	cc
   b8466:	2001      	movcc	r0, #1
   b8468:	2000      	movcs	r0, #0
   b846a:	f85d fb08 	ldr.w	pc, [sp], #8
   b846e:	bf00      	nop

000b8470 <__aeabi_dcmpun>:
   b8470:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b8474:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b8478:	d102      	bne.n	b8480 <__aeabi_dcmpun+0x10>
   b847a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b847e:	d10a      	bne.n	b8496 <__aeabi_dcmpun+0x26>
   b8480:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b8484:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b8488:	d102      	bne.n	b8490 <__aeabi_dcmpun+0x20>
   b848a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b848e:	d102      	bne.n	b8496 <__aeabi_dcmpun+0x26>
   b8490:	f04f 0000 	mov.w	r0, #0
   b8494:	4770      	bx	lr
   b8496:	f04f 0001 	mov.w	r0, #1
   b849a:	4770      	bx	lr

000b849c <__aeabi_d2f>:
   b849c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b84a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b84a4:	bf24      	itt	cs
   b84a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b84aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b84ae:	d90d      	bls.n	b84cc <__aeabi_d2f+0x30>
   b84b0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b84b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b84b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b84bc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b84c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b84c4:	bf08      	it	eq
   b84c6:	f020 0001 	biceq.w	r0, r0, #1
   b84ca:	4770      	bx	lr
   b84cc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b84d0:	d121      	bne.n	b8516 <__aeabi_d2f+0x7a>
   b84d2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b84d6:	bfbc      	itt	lt
   b84d8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b84dc:	4770      	bxlt	lr
   b84de:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b84e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b84e6:	f1c2 0218 	rsb	r2, r2, #24
   b84ea:	f1c2 0c20 	rsb	ip, r2, #32
   b84ee:	fa10 f30c 	lsls.w	r3, r0, ip
   b84f2:	fa20 f002 	lsr.w	r0, r0, r2
   b84f6:	bf18      	it	ne
   b84f8:	f040 0001 	orrne.w	r0, r0, #1
   b84fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b8500:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b8504:	fa03 fc0c 	lsl.w	ip, r3, ip
   b8508:	ea40 000c 	orr.w	r0, r0, ip
   b850c:	fa23 f302 	lsr.w	r3, r3, r2
   b8510:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b8514:	e7cc      	b.n	b84b0 <__aeabi_d2f+0x14>
   b8516:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b851a:	d107      	bne.n	b852c <__aeabi_d2f+0x90>
   b851c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b8520:	bf1e      	ittt	ne
   b8522:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b8526:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b852a:	4770      	bxne	lr
   b852c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b8530:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b8534:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b8538:	4770      	bx	lr
   b853a:	bf00      	nop

000b853c <__aeabi_frsub>:
   b853c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   b8540:	e002      	b.n	b8548 <__addsf3>
   b8542:	bf00      	nop

000b8544 <__aeabi_fsub>:
   b8544:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000b8548 <__addsf3>:
   b8548:	0042      	lsls	r2, r0, #1
   b854a:	bf1f      	itttt	ne
   b854c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   b8550:	ea92 0f03 	teqne	r2, r3
   b8554:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   b8558:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   b855c:	d06a      	beq.n	b8634 <__addsf3+0xec>
   b855e:	ea4f 6212 	mov.w	r2, r2, lsr #24
   b8562:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   b8566:	bfc1      	itttt	gt
   b8568:	18d2      	addgt	r2, r2, r3
   b856a:	4041      	eorgt	r1, r0
   b856c:	4048      	eorgt	r0, r1
   b856e:	4041      	eorgt	r1, r0
   b8570:	bfb8      	it	lt
   b8572:	425b      	neglt	r3, r3
   b8574:	2b19      	cmp	r3, #25
   b8576:	bf88      	it	hi
   b8578:	4770      	bxhi	lr
   b857a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   b857e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b8582:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   b8586:	bf18      	it	ne
   b8588:	4240      	negne	r0, r0
   b858a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b858e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   b8592:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   b8596:	bf18      	it	ne
   b8598:	4249      	negne	r1, r1
   b859a:	ea92 0f03 	teq	r2, r3
   b859e:	d03f      	beq.n	b8620 <__addsf3+0xd8>
   b85a0:	f1a2 0201 	sub.w	r2, r2, #1
   b85a4:	fa41 fc03 	asr.w	ip, r1, r3
   b85a8:	eb10 000c 	adds.w	r0, r0, ip
   b85ac:	f1c3 0320 	rsb	r3, r3, #32
   b85b0:	fa01 f103 	lsl.w	r1, r1, r3
   b85b4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   b85b8:	d502      	bpl.n	b85c0 <__addsf3+0x78>
   b85ba:	4249      	negs	r1, r1
   b85bc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   b85c0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b85c4:	d313      	bcc.n	b85ee <__addsf3+0xa6>
   b85c6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   b85ca:	d306      	bcc.n	b85da <__addsf3+0x92>
   b85cc:	0840      	lsrs	r0, r0, #1
   b85ce:	ea4f 0131 	mov.w	r1, r1, rrx
   b85d2:	f102 0201 	add.w	r2, r2, #1
   b85d6:	2afe      	cmp	r2, #254	; 0xfe
   b85d8:	d251      	bcs.n	b867e <__addsf3+0x136>
   b85da:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   b85de:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   b85e2:	bf08      	it	eq
   b85e4:	f020 0001 	biceq.w	r0, r0, #1
   b85e8:	ea40 0003 	orr.w	r0, r0, r3
   b85ec:	4770      	bx	lr
   b85ee:	0049      	lsls	r1, r1, #1
   b85f0:	eb40 0000 	adc.w	r0, r0, r0
   b85f4:	3a01      	subs	r2, #1
   b85f6:	bf28      	it	cs
   b85f8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
   b85fc:	d2ed      	bcs.n	b85da <__addsf3+0x92>
   b85fe:	fab0 fc80 	clz	ip, r0
   b8602:	f1ac 0c08 	sub.w	ip, ip, #8
   b8606:	ebb2 020c 	subs.w	r2, r2, ip
   b860a:	fa00 f00c 	lsl.w	r0, r0, ip
   b860e:	bfaa      	itet	ge
   b8610:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   b8614:	4252      	neglt	r2, r2
   b8616:	4318      	orrge	r0, r3
   b8618:	bfbc      	itt	lt
   b861a:	40d0      	lsrlt	r0, r2
   b861c:	4318      	orrlt	r0, r3
   b861e:	4770      	bx	lr
   b8620:	f092 0f00 	teq	r2, #0
   b8624:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   b8628:	bf06      	itte	eq
   b862a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   b862e:	3201      	addeq	r2, #1
   b8630:	3b01      	subne	r3, #1
   b8632:	e7b5      	b.n	b85a0 <__addsf3+0x58>
   b8634:	ea4f 0341 	mov.w	r3, r1, lsl #1
   b8638:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   b863c:	bf18      	it	ne
   b863e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   b8642:	d021      	beq.n	b8688 <__addsf3+0x140>
   b8644:	ea92 0f03 	teq	r2, r3
   b8648:	d004      	beq.n	b8654 <__addsf3+0x10c>
   b864a:	f092 0f00 	teq	r2, #0
   b864e:	bf08      	it	eq
   b8650:	4608      	moveq	r0, r1
   b8652:	4770      	bx	lr
   b8654:	ea90 0f01 	teq	r0, r1
   b8658:	bf1c      	itt	ne
   b865a:	2000      	movne	r0, #0
   b865c:	4770      	bxne	lr
   b865e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   b8662:	d104      	bne.n	b866e <__addsf3+0x126>
   b8664:	0040      	lsls	r0, r0, #1
   b8666:	bf28      	it	cs
   b8668:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   b866c:	4770      	bx	lr
   b866e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   b8672:	bf3c      	itt	cc
   b8674:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   b8678:	4770      	bxcc	lr
   b867a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   b867e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   b8682:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b8686:	4770      	bx	lr
   b8688:	ea7f 6222 	mvns.w	r2, r2, asr #24
   b868c:	bf16      	itet	ne
   b868e:	4608      	movne	r0, r1
   b8690:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   b8694:	4601      	movne	r1, r0
   b8696:	0242      	lsls	r2, r0, #9
   b8698:	bf06      	itte	eq
   b869a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   b869e:	ea90 0f01 	teqeq	r0, r1
   b86a2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   b86a6:	4770      	bx	lr

000b86a8 <__aeabi_ui2f>:
   b86a8:	f04f 0300 	mov.w	r3, #0
   b86ac:	e004      	b.n	b86b8 <__aeabi_i2f+0x8>
   b86ae:	bf00      	nop

000b86b0 <__aeabi_i2f>:
   b86b0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   b86b4:	bf48      	it	mi
   b86b6:	4240      	negmi	r0, r0
   b86b8:	ea5f 0c00 	movs.w	ip, r0
   b86bc:	bf08      	it	eq
   b86be:	4770      	bxeq	lr
   b86c0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   b86c4:	4601      	mov	r1, r0
   b86c6:	f04f 0000 	mov.w	r0, #0
   b86ca:	e01c      	b.n	b8706 <__aeabi_l2f+0x2a>

000b86cc <__aeabi_ul2f>:
   b86cc:	ea50 0201 	orrs.w	r2, r0, r1
   b86d0:	bf08      	it	eq
   b86d2:	4770      	bxeq	lr
   b86d4:	f04f 0300 	mov.w	r3, #0
   b86d8:	e00a      	b.n	b86f0 <__aeabi_l2f+0x14>
   b86da:	bf00      	nop

000b86dc <__aeabi_l2f>:
   b86dc:	ea50 0201 	orrs.w	r2, r0, r1
   b86e0:	bf08      	it	eq
   b86e2:	4770      	bxeq	lr
   b86e4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   b86e8:	d502      	bpl.n	b86f0 <__aeabi_l2f+0x14>
   b86ea:	4240      	negs	r0, r0
   b86ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b86f0:	ea5f 0c01 	movs.w	ip, r1
   b86f4:	bf02      	ittt	eq
   b86f6:	4684      	moveq	ip, r0
   b86f8:	4601      	moveq	r1, r0
   b86fa:	2000      	moveq	r0, #0
   b86fc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   b8700:	bf08      	it	eq
   b8702:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   b8706:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   b870a:	fabc f28c 	clz	r2, ip
   b870e:	3a08      	subs	r2, #8
   b8710:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   b8714:	db10      	blt.n	b8738 <__aeabi_l2f+0x5c>
   b8716:	fa01 fc02 	lsl.w	ip, r1, r2
   b871a:	4463      	add	r3, ip
   b871c:	fa00 fc02 	lsl.w	ip, r0, r2
   b8720:	f1c2 0220 	rsb	r2, r2, #32
   b8724:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b8728:	fa20 f202 	lsr.w	r2, r0, r2
   b872c:	eb43 0002 	adc.w	r0, r3, r2
   b8730:	bf08      	it	eq
   b8732:	f020 0001 	biceq.w	r0, r0, #1
   b8736:	4770      	bx	lr
   b8738:	f102 0220 	add.w	r2, r2, #32
   b873c:	fa01 fc02 	lsl.w	ip, r1, r2
   b8740:	f1c2 0220 	rsb	r2, r2, #32
   b8744:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   b8748:	fa21 f202 	lsr.w	r2, r1, r2
   b874c:	eb43 0002 	adc.w	r0, r3, r2
   b8750:	bf08      	it	eq
   b8752:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   b8756:	4770      	bx	lr

000b8758 <__aeabi_ldivmod>:
   b8758:	b97b      	cbnz	r3, b877a <__aeabi_ldivmod+0x22>
   b875a:	b972      	cbnz	r2, b877a <__aeabi_ldivmod+0x22>
   b875c:	2900      	cmp	r1, #0
   b875e:	bfbe      	ittt	lt
   b8760:	2000      	movlt	r0, #0
   b8762:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   b8766:	e006      	blt.n	b8776 <__aeabi_ldivmod+0x1e>
   b8768:	bf08      	it	eq
   b876a:	2800      	cmpeq	r0, #0
   b876c:	bf1c      	itt	ne
   b876e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   b8772:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   b8776:	f000 b9a7 	b.w	b8ac8 <__aeabi_idiv0>
   b877a:	f1ad 0c08 	sub.w	ip, sp, #8
   b877e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   b8782:	2900      	cmp	r1, #0
   b8784:	db09      	blt.n	b879a <__aeabi_ldivmod+0x42>
   b8786:	2b00      	cmp	r3, #0
   b8788:	db1a      	blt.n	b87c0 <__aeabi_ldivmod+0x68>
   b878a:	f000 f835 	bl	b87f8 <__udivmoddi4>
   b878e:	f8dd e004 	ldr.w	lr, [sp, #4]
   b8792:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b8796:	b004      	add	sp, #16
   b8798:	4770      	bx	lr
   b879a:	4240      	negs	r0, r0
   b879c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b87a0:	2b00      	cmp	r3, #0
   b87a2:	db1b      	blt.n	b87dc <__aeabi_ldivmod+0x84>
   b87a4:	f000 f828 	bl	b87f8 <__udivmoddi4>
   b87a8:	f8dd e004 	ldr.w	lr, [sp, #4]
   b87ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b87b0:	b004      	add	sp, #16
   b87b2:	4240      	negs	r0, r0
   b87b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b87b8:	4252      	negs	r2, r2
   b87ba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b87be:	4770      	bx	lr
   b87c0:	4252      	negs	r2, r2
   b87c2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b87c6:	f000 f817 	bl	b87f8 <__udivmoddi4>
   b87ca:	f8dd e004 	ldr.w	lr, [sp, #4]
   b87ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b87d2:	b004      	add	sp, #16
   b87d4:	4240      	negs	r0, r0
   b87d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b87da:	4770      	bx	lr
   b87dc:	4252      	negs	r2, r2
   b87de:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b87e2:	f000 f809 	bl	b87f8 <__udivmoddi4>
   b87e6:	f8dd e004 	ldr.w	lr, [sp, #4]
   b87ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b87ee:	b004      	add	sp, #16
   b87f0:	4252      	negs	r2, r2
   b87f2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b87f6:	4770      	bx	lr

000b87f8 <__udivmoddi4>:
   b87f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b87fc:	9d08      	ldr	r5, [sp, #32]
   b87fe:	4604      	mov	r4, r0
   b8800:	468e      	mov	lr, r1
   b8802:	2b00      	cmp	r3, #0
   b8804:	d14d      	bne.n	b88a2 <__udivmoddi4+0xaa>
   b8806:	428a      	cmp	r2, r1
   b8808:	4694      	mov	ip, r2
   b880a:	d969      	bls.n	b88e0 <__udivmoddi4+0xe8>
   b880c:	fab2 f282 	clz	r2, r2
   b8810:	b152      	cbz	r2, b8828 <__udivmoddi4+0x30>
   b8812:	fa01 f302 	lsl.w	r3, r1, r2
   b8816:	f1c2 0120 	rsb	r1, r2, #32
   b881a:	fa20 f101 	lsr.w	r1, r0, r1
   b881e:	fa0c fc02 	lsl.w	ip, ip, r2
   b8822:	ea41 0e03 	orr.w	lr, r1, r3
   b8826:	4094      	lsls	r4, r2
   b8828:	ea4f 481c 	mov.w	r8, ip, lsr #16
   b882c:	0c21      	lsrs	r1, r4, #16
   b882e:	fbbe f6f8 	udiv	r6, lr, r8
   b8832:	fa1f f78c 	uxth.w	r7, ip
   b8836:	fb08 e316 	mls	r3, r8, r6, lr
   b883a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   b883e:	fb06 f107 	mul.w	r1, r6, r7
   b8842:	4299      	cmp	r1, r3
   b8844:	d90a      	bls.n	b885c <__udivmoddi4+0x64>
   b8846:	eb1c 0303 	adds.w	r3, ip, r3
   b884a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
   b884e:	f080 811f 	bcs.w	b8a90 <__udivmoddi4+0x298>
   b8852:	4299      	cmp	r1, r3
   b8854:	f240 811c 	bls.w	b8a90 <__udivmoddi4+0x298>
   b8858:	3e02      	subs	r6, #2
   b885a:	4463      	add	r3, ip
   b885c:	1a5b      	subs	r3, r3, r1
   b885e:	b2a4      	uxth	r4, r4
   b8860:	fbb3 f0f8 	udiv	r0, r3, r8
   b8864:	fb08 3310 	mls	r3, r8, r0, r3
   b8868:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   b886c:	fb00 f707 	mul.w	r7, r0, r7
   b8870:	42a7      	cmp	r7, r4
   b8872:	d90a      	bls.n	b888a <__udivmoddi4+0x92>
   b8874:	eb1c 0404 	adds.w	r4, ip, r4
   b8878:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b887c:	f080 810a 	bcs.w	b8a94 <__udivmoddi4+0x29c>
   b8880:	42a7      	cmp	r7, r4
   b8882:	f240 8107 	bls.w	b8a94 <__udivmoddi4+0x29c>
   b8886:	4464      	add	r4, ip
   b8888:	3802      	subs	r0, #2
   b888a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   b888e:	1be4      	subs	r4, r4, r7
   b8890:	2600      	movs	r6, #0
   b8892:	b11d      	cbz	r5, b889c <__udivmoddi4+0xa4>
   b8894:	40d4      	lsrs	r4, r2
   b8896:	2300      	movs	r3, #0
   b8898:	e9c5 4300 	strd	r4, r3, [r5]
   b889c:	4631      	mov	r1, r6
   b889e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b88a2:	428b      	cmp	r3, r1
   b88a4:	d909      	bls.n	b88ba <__udivmoddi4+0xc2>
   b88a6:	2d00      	cmp	r5, #0
   b88a8:	f000 80ef 	beq.w	b8a8a <__udivmoddi4+0x292>
   b88ac:	2600      	movs	r6, #0
   b88ae:	e9c5 0100 	strd	r0, r1, [r5]
   b88b2:	4630      	mov	r0, r6
   b88b4:	4631      	mov	r1, r6
   b88b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b88ba:	fab3 f683 	clz	r6, r3
   b88be:	2e00      	cmp	r6, #0
   b88c0:	d14a      	bne.n	b8958 <__udivmoddi4+0x160>
   b88c2:	428b      	cmp	r3, r1
   b88c4:	d302      	bcc.n	b88cc <__udivmoddi4+0xd4>
   b88c6:	4282      	cmp	r2, r0
   b88c8:	f200 80f9 	bhi.w	b8abe <__udivmoddi4+0x2c6>
   b88cc:	1a84      	subs	r4, r0, r2
   b88ce:	eb61 0303 	sbc.w	r3, r1, r3
   b88d2:	2001      	movs	r0, #1
   b88d4:	469e      	mov	lr, r3
   b88d6:	2d00      	cmp	r5, #0
   b88d8:	d0e0      	beq.n	b889c <__udivmoddi4+0xa4>
   b88da:	e9c5 4e00 	strd	r4, lr, [r5]
   b88de:	e7dd      	b.n	b889c <__udivmoddi4+0xa4>
   b88e0:	b902      	cbnz	r2, b88e4 <__udivmoddi4+0xec>
   b88e2:	deff      	udf	#255	; 0xff
   b88e4:	fab2 f282 	clz	r2, r2
   b88e8:	2a00      	cmp	r2, #0
   b88ea:	f040 8092 	bne.w	b8a12 <__udivmoddi4+0x21a>
   b88ee:	eba1 010c 	sub.w	r1, r1, ip
   b88f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b88f6:	fa1f fe8c 	uxth.w	lr, ip
   b88fa:	2601      	movs	r6, #1
   b88fc:	0c20      	lsrs	r0, r4, #16
   b88fe:	fbb1 f3f7 	udiv	r3, r1, r7
   b8902:	fb07 1113 	mls	r1, r7, r3, r1
   b8906:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b890a:	fb0e f003 	mul.w	r0, lr, r3
   b890e:	4288      	cmp	r0, r1
   b8910:	d908      	bls.n	b8924 <__udivmoddi4+0x12c>
   b8912:	eb1c 0101 	adds.w	r1, ip, r1
   b8916:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   b891a:	d202      	bcs.n	b8922 <__udivmoddi4+0x12a>
   b891c:	4288      	cmp	r0, r1
   b891e:	f200 80cb 	bhi.w	b8ab8 <__udivmoddi4+0x2c0>
   b8922:	4643      	mov	r3, r8
   b8924:	1a09      	subs	r1, r1, r0
   b8926:	b2a4      	uxth	r4, r4
   b8928:	fbb1 f0f7 	udiv	r0, r1, r7
   b892c:	fb07 1110 	mls	r1, r7, r0, r1
   b8930:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
   b8934:	fb0e fe00 	mul.w	lr, lr, r0
   b8938:	45a6      	cmp	lr, r4
   b893a:	d908      	bls.n	b894e <__udivmoddi4+0x156>
   b893c:	eb1c 0404 	adds.w	r4, ip, r4
   b8940:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
   b8944:	d202      	bcs.n	b894c <__udivmoddi4+0x154>
   b8946:	45a6      	cmp	lr, r4
   b8948:	f200 80bb 	bhi.w	b8ac2 <__udivmoddi4+0x2ca>
   b894c:	4608      	mov	r0, r1
   b894e:	eba4 040e 	sub.w	r4, r4, lr
   b8952:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   b8956:	e79c      	b.n	b8892 <__udivmoddi4+0x9a>
   b8958:	f1c6 0720 	rsb	r7, r6, #32
   b895c:	40b3      	lsls	r3, r6
   b895e:	fa22 fc07 	lsr.w	ip, r2, r7
   b8962:	ea4c 0c03 	orr.w	ip, ip, r3
   b8966:	fa20 f407 	lsr.w	r4, r0, r7
   b896a:	fa01 f306 	lsl.w	r3, r1, r6
   b896e:	431c      	orrs	r4, r3
   b8970:	40f9      	lsrs	r1, r7
   b8972:	ea4f 491c 	mov.w	r9, ip, lsr #16
   b8976:	fa00 f306 	lsl.w	r3, r0, r6
   b897a:	fbb1 f8f9 	udiv	r8, r1, r9
   b897e:	0c20      	lsrs	r0, r4, #16
   b8980:	fa1f fe8c 	uxth.w	lr, ip
   b8984:	fb09 1118 	mls	r1, r9, r8, r1
   b8988:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b898c:	fb08 f00e 	mul.w	r0, r8, lr
   b8990:	4288      	cmp	r0, r1
   b8992:	fa02 f206 	lsl.w	r2, r2, r6
   b8996:	d90b      	bls.n	b89b0 <__udivmoddi4+0x1b8>
   b8998:	eb1c 0101 	adds.w	r1, ip, r1
   b899c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
   b89a0:	f080 8088 	bcs.w	b8ab4 <__udivmoddi4+0x2bc>
   b89a4:	4288      	cmp	r0, r1
   b89a6:	f240 8085 	bls.w	b8ab4 <__udivmoddi4+0x2bc>
   b89aa:	f1a8 0802 	sub.w	r8, r8, #2
   b89ae:	4461      	add	r1, ip
   b89b0:	1a09      	subs	r1, r1, r0
   b89b2:	b2a4      	uxth	r4, r4
   b89b4:	fbb1 f0f9 	udiv	r0, r1, r9
   b89b8:	fb09 1110 	mls	r1, r9, r0, r1
   b89bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   b89c0:	fb00 fe0e 	mul.w	lr, r0, lr
   b89c4:	458e      	cmp	lr, r1
   b89c6:	d908      	bls.n	b89da <__udivmoddi4+0x1e2>
   b89c8:	eb1c 0101 	adds.w	r1, ip, r1
   b89cc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
   b89d0:	d26c      	bcs.n	b8aac <__udivmoddi4+0x2b4>
   b89d2:	458e      	cmp	lr, r1
   b89d4:	d96a      	bls.n	b8aac <__udivmoddi4+0x2b4>
   b89d6:	3802      	subs	r0, #2
   b89d8:	4461      	add	r1, ip
   b89da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   b89de:	fba0 9402 	umull	r9, r4, r0, r2
   b89e2:	eba1 010e 	sub.w	r1, r1, lr
   b89e6:	42a1      	cmp	r1, r4
   b89e8:	46c8      	mov	r8, r9
   b89ea:	46a6      	mov	lr, r4
   b89ec:	d356      	bcc.n	b8a9c <__udivmoddi4+0x2a4>
   b89ee:	d053      	beq.n	b8a98 <__udivmoddi4+0x2a0>
   b89f0:	b15d      	cbz	r5, b8a0a <__udivmoddi4+0x212>
   b89f2:	ebb3 0208 	subs.w	r2, r3, r8
   b89f6:	eb61 010e 	sbc.w	r1, r1, lr
   b89fa:	fa01 f707 	lsl.w	r7, r1, r7
   b89fe:	fa22 f306 	lsr.w	r3, r2, r6
   b8a02:	40f1      	lsrs	r1, r6
   b8a04:	431f      	orrs	r7, r3
   b8a06:	e9c5 7100 	strd	r7, r1, [r5]
   b8a0a:	2600      	movs	r6, #0
   b8a0c:	4631      	mov	r1, r6
   b8a0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b8a12:	f1c2 0320 	rsb	r3, r2, #32
   b8a16:	40d8      	lsrs	r0, r3
   b8a18:	fa0c fc02 	lsl.w	ip, ip, r2
   b8a1c:	fa21 f303 	lsr.w	r3, r1, r3
   b8a20:	4091      	lsls	r1, r2
   b8a22:	4301      	orrs	r1, r0
   b8a24:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b8a28:	fa1f fe8c 	uxth.w	lr, ip
   b8a2c:	fbb3 f0f7 	udiv	r0, r3, r7
   b8a30:	fb07 3610 	mls	r6, r7, r0, r3
   b8a34:	0c0b      	lsrs	r3, r1, #16
   b8a36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   b8a3a:	fb00 f60e 	mul.w	r6, r0, lr
   b8a3e:	429e      	cmp	r6, r3
   b8a40:	fa04 f402 	lsl.w	r4, r4, r2
   b8a44:	d908      	bls.n	b8a58 <__udivmoddi4+0x260>
   b8a46:	eb1c 0303 	adds.w	r3, ip, r3
   b8a4a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
   b8a4e:	d22f      	bcs.n	b8ab0 <__udivmoddi4+0x2b8>
   b8a50:	429e      	cmp	r6, r3
   b8a52:	d92d      	bls.n	b8ab0 <__udivmoddi4+0x2b8>
   b8a54:	3802      	subs	r0, #2
   b8a56:	4463      	add	r3, ip
   b8a58:	1b9b      	subs	r3, r3, r6
   b8a5a:	b289      	uxth	r1, r1
   b8a5c:	fbb3 f6f7 	udiv	r6, r3, r7
   b8a60:	fb07 3316 	mls	r3, r7, r6, r3
   b8a64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   b8a68:	fb06 f30e 	mul.w	r3, r6, lr
   b8a6c:	428b      	cmp	r3, r1
   b8a6e:	d908      	bls.n	b8a82 <__udivmoddi4+0x28a>
   b8a70:	eb1c 0101 	adds.w	r1, ip, r1
   b8a74:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
   b8a78:	d216      	bcs.n	b8aa8 <__udivmoddi4+0x2b0>
   b8a7a:	428b      	cmp	r3, r1
   b8a7c:	d914      	bls.n	b8aa8 <__udivmoddi4+0x2b0>
   b8a7e:	3e02      	subs	r6, #2
   b8a80:	4461      	add	r1, ip
   b8a82:	1ac9      	subs	r1, r1, r3
   b8a84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   b8a88:	e738      	b.n	b88fc <__udivmoddi4+0x104>
   b8a8a:	462e      	mov	r6, r5
   b8a8c:	4628      	mov	r0, r5
   b8a8e:	e705      	b.n	b889c <__udivmoddi4+0xa4>
   b8a90:	4606      	mov	r6, r0
   b8a92:	e6e3      	b.n	b885c <__udivmoddi4+0x64>
   b8a94:	4618      	mov	r0, r3
   b8a96:	e6f8      	b.n	b888a <__udivmoddi4+0x92>
   b8a98:	454b      	cmp	r3, r9
   b8a9a:	d2a9      	bcs.n	b89f0 <__udivmoddi4+0x1f8>
   b8a9c:	ebb9 0802 	subs.w	r8, r9, r2
   b8aa0:	eb64 0e0c 	sbc.w	lr, r4, ip
   b8aa4:	3801      	subs	r0, #1
   b8aa6:	e7a3      	b.n	b89f0 <__udivmoddi4+0x1f8>
   b8aa8:	4646      	mov	r6, r8
   b8aaa:	e7ea      	b.n	b8a82 <__udivmoddi4+0x28a>
   b8aac:	4620      	mov	r0, r4
   b8aae:	e794      	b.n	b89da <__udivmoddi4+0x1e2>
   b8ab0:	4640      	mov	r0, r8
   b8ab2:	e7d1      	b.n	b8a58 <__udivmoddi4+0x260>
   b8ab4:	46d0      	mov	r8, sl
   b8ab6:	e77b      	b.n	b89b0 <__udivmoddi4+0x1b8>
   b8ab8:	3b02      	subs	r3, #2
   b8aba:	4461      	add	r1, ip
   b8abc:	e732      	b.n	b8924 <__udivmoddi4+0x12c>
   b8abe:	4630      	mov	r0, r6
   b8ac0:	e709      	b.n	b88d6 <__udivmoddi4+0xde>
   b8ac2:	4464      	add	r4, ip
   b8ac4:	3802      	subs	r0, #2
   b8ac6:	e742      	b.n	b894e <__udivmoddi4+0x156>

000b8ac8 <__aeabi_idiv0>:
   b8ac8:	4770      	bx	lr
   b8aca:	bf00      	nop

000b8acc <atexit>:
   b8acc:	2300      	movs	r3, #0
   b8ace:	4601      	mov	r1, r0
   b8ad0:	461a      	mov	r2, r3
   b8ad2:	4618      	mov	r0, r3
   b8ad4:	f000 b86a 	b.w	b8bac <__register_exitproc>

000b8ad8 <memcpy>:
   b8ad8:	440a      	add	r2, r1
   b8ada:	4291      	cmp	r1, r2
   b8adc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b8ae0:	d100      	bne.n	b8ae4 <memcpy+0xc>
   b8ae2:	4770      	bx	lr
   b8ae4:	b510      	push	{r4, lr}
   b8ae6:	f811 4b01 	ldrb.w	r4, [r1], #1
   b8aea:	f803 4f01 	strb.w	r4, [r3, #1]!
   b8aee:	4291      	cmp	r1, r2
   b8af0:	d1f9      	bne.n	b8ae6 <memcpy+0xe>
   b8af2:	bd10      	pop	{r4, pc}

000b8af4 <memset>:
   b8af4:	4402      	add	r2, r0
   b8af6:	4603      	mov	r3, r0
   b8af8:	4293      	cmp	r3, r2
   b8afa:	d100      	bne.n	b8afe <memset+0xa>
   b8afc:	4770      	bx	lr
   b8afe:	f803 1b01 	strb.w	r1, [r3], #1
   b8b02:	e7f9      	b.n	b8af8 <memset+0x4>

000b8b04 <srand>:
   b8b04:	b538      	push	{r3, r4, r5, lr}
   b8b06:	4b10      	ldr	r3, [pc, #64]	; (b8b48 <srand+0x44>)
   b8b08:	681d      	ldr	r5, [r3, #0]
   b8b0a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8b0c:	4604      	mov	r4, r0
   b8b0e:	b9b3      	cbnz	r3, b8b3e <srand+0x3a>
   b8b10:	2018      	movs	r0, #24
   b8b12:	f7fc fe0b 	bl	b572c <malloc>
   b8b16:	4602      	mov	r2, r0
   b8b18:	63a8      	str	r0, [r5, #56]	; 0x38
   b8b1a:	b920      	cbnz	r0, b8b26 <srand+0x22>
   b8b1c:	4b0b      	ldr	r3, [pc, #44]	; (b8b4c <srand+0x48>)
   b8b1e:	480c      	ldr	r0, [pc, #48]	; (b8b50 <srand+0x4c>)
   b8b20:	2142      	movs	r1, #66	; 0x42
   b8b22:	f7fc fe3b 	bl	b579c <__assert_func>
   b8b26:	490b      	ldr	r1, [pc, #44]	; (b8b54 <srand+0x50>)
   b8b28:	4b0b      	ldr	r3, [pc, #44]	; (b8b58 <srand+0x54>)
   b8b2a:	e9c0 1300 	strd	r1, r3, [r0]
   b8b2e:	4b0b      	ldr	r3, [pc, #44]	; (b8b5c <srand+0x58>)
   b8b30:	6083      	str	r3, [r0, #8]
   b8b32:	230b      	movs	r3, #11
   b8b34:	8183      	strh	r3, [r0, #12]
   b8b36:	2100      	movs	r1, #0
   b8b38:	2001      	movs	r0, #1
   b8b3a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b8b3e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8b40:	2200      	movs	r2, #0
   b8b42:	611c      	str	r4, [r3, #16]
   b8b44:	615a      	str	r2, [r3, #20]
   b8b46:	bd38      	pop	{r3, r4, r5, pc}
   b8b48:	2003e5a0 	.word	0x2003e5a0
   b8b4c:	000b8fd0 	.word	0x000b8fd0
   b8b50:	000b8fe7 	.word	0x000b8fe7
   b8b54:	abcd330e 	.word	0xabcd330e
   b8b58:	e66d1234 	.word	0xe66d1234
   b8b5c:	0005deec 	.word	0x0005deec

000b8b60 <strdup>:
   b8b60:	4b02      	ldr	r3, [pc, #8]	; (b8b6c <strdup+0xc>)
   b8b62:	4601      	mov	r1, r0
   b8b64:	6818      	ldr	r0, [r3, #0]
   b8b66:	f000 b803 	b.w	b8b70 <_strdup_r>
   b8b6a:	bf00      	nop
   b8b6c:	2003e5a0 	.word	0x2003e5a0

000b8b70 <_strdup_r>:
   b8b70:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8b72:	4604      	mov	r4, r0
   b8b74:	4608      	mov	r0, r1
   b8b76:	460d      	mov	r5, r1
   b8b78:	f000 f80f 	bl	b8b9a <strlen>
   b8b7c:	1c42      	adds	r2, r0, #1
   b8b7e:	4611      	mov	r1, r2
   b8b80:	4620      	mov	r0, r4
   b8b82:	9201      	str	r2, [sp, #4]
   b8b84:	f7fc fdfa 	bl	b577c <_malloc_r>
   b8b88:	4604      	mov	r4, r0
   b8b8a:	b118      	cbz	r0, b8b94 <_strdup_r+0x24>
   b8b8c:	9a01      	ldr	r2, [sp, #4]
   b8b8e:	4629      	mov	r1, r5
   b8b90:	f7ff ffa2 	bl	b8ad8 <memcpy>
   b8b94:	4620      	mov	r0, r4
   b8b96:	b003      	add	sp, #12
   b8b98:	bd30      	pop	{r4, r5, pc}

000b8b9a <strlen>:
   b8b9a:	4603      	mov	r3, r0
   b8b9c:	f813 2b01 	ldrb.w	r2, [r3], #1
   b8ba0:	2a00      	cmp	r2, #0
   b8ba2:	d1fb      	bne.n	b8b9c <strlen+0x2>
   b8ba4:	1a18      	subs	r0, r3, r0
   b8ba6:	3801      	subs	r0, #1
   b8ba8:	4770      	bx	lr
	...

000b8bac <__register_exitproc>:
   b8bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8bb0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b8c6c <__register_exitproc+0xc0>
   b8bb4:	4606      	mov	r6, r0
   b8bb6:	f8d8 0000 	ldr.w	r0, [r8]
   b8bba:	461f      	mov	r7, r3
   b8bbc:	460d      	mov	r5, r1
   b8bbe:	4691      	mov	r9, r2
   b8bc0:	f000 f856 	bl	b8c70 <__retarget_lock_acquire_recursive>
   b8bc4:	4b25      	ldr	r3, [pc, #148]	; (b8c5c <__register_exitproc+0xb0>)
   b8bc6:	681c      	ldr	r4, [r3, #0]
   b8bc8:	b934      	cbnz	r4, b8bd8 <__register_exitproc+0x2c>
   b8bca:	4c25      	ldr	r4, [pc, #148]	; (b8c60 <__register_exitproc+0xb4>)
   b8bcc:	601c      	str	r4, [r3, #0]
   b8bce:	4b25      	ldr	r3, [pc, #148]	; (b8c64 <__register_exitproc+0xb8>)
   b8bd0:	b113      	cbz	r3, b8bd8 <__register_exitproc+0x2c>
   b8bd2:	681b      	ldr	r3, [r3, #0]
   b8bd4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b8bd8:	6863      	ldr	r3, [r4, #4]
   b8bda:	2b1f      	cmp	r3, #31
   b8bdc:	dd07      	ble.n	b8bee <__register_exitproc+0x42>
   b8bde:	f8d8 0000 	ldr.w	r0, [r8]
   b8be2:	f000 f847 	bl	b8c74 <__retarget_lock_release_recursive>
   b8be6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b8bea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b8bee:	b34e      	cbz	r6, b8c44 <__register_exitproc+0x98>
   b8bf0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b8bf4:	b988      	cbnz	r0, b8c1a <__register_exitproc+0x6e>
   b8bf6:	4b1c      	ldr	r3, [pc, #112]	; (b8c68 <__register_exitproc+0xbc>)
   b8bf8:	b923      	cbnz	r3, b8c04 <__register_exitproc+0x58>
   b8bfa:	f8d8 0000 	ldr.w	r0, [r8]
   b8bfe:	f000 f838 	bl	b8c72 <__retarget_lock_release>
   b8c02:	e7f0      	b.n	b8be6 <__register_exitproc+0x3a>
   b8c04:	f44f 7084 	mov.w	r0, #264	; 0x108
   b8c08:	f7fc fd90 	bl	b572c <malloc>
   b8c0c:	2800      	cmp	r0, #0
   b8c0e:	d0f4      	beq.n	b8bfa <__register_exitproc+0x4e>
   b8c10:	2300      	movs	r3, #0
   b8c12:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b8c16:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b8c1a:	6863      	ldr	r3, [r4, #4]
   b8c1c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b8c20:	2201      	movs	r2, #1
   b8c22:	409a      	lsls	r2, r3
   b8c24:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b8c28:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b8c2c:	4313      	orrs	r3, r2
   b8c2e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b8c32:	2e02      	cmp	r6, #2
   b8c34:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b8c38:	bf02      	ittt	eq
   b8c3a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b8c3e:	4313      	orreq	r3, r2
   b8c40:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b8c44:	6863      	ldr	r3, [r4, #4]
   b8c46:	f8d8 0000 	ldr.w	r0, [r8]
   b8c4a:	1c5a      	adds	r2, r3, #1
   b8c4c:	3302      	adds	r3, #2
   b8c4e:	6062      	str	r2, [r4, #4]
   b8c50:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b8c54:	f000 f80e 	bl	b8c74 <__retarget_lock_release_recursive>
   b8c58:	2000      	movs	r0, #0
   b8c5a:	e7c6      	b.n	b8bea <__register_exitproc+0x3e>
   b8c5c:	2003e7e8 	.word	0x2003e7e8
   b8c60:	2003e75c 	.word	0x2003e75c
   b8c64:	00000000 	.word	0x00000000
   b8c68:	000b572d 	.word	0x000b572d
   b8c6c:	2003e604 	.word	0x2003e604

000b8c70 <__retarget_lock_acquire_recursive>:
   b8c70:	4770      	bx	lr

000b8c72 <__retarget_lock_release>:
   b8c72:	4770      	bx	lr

000b8c74 <__retarget_lock_release_recursive>:
   b8c74:	4770      	bx	lr

000b8c76 <link_code_end>:
	...

000b8c78 <dynalib_user>:
   b8c78:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b8c88:	0000 0000 6144 676e 7265 756f 2073 654c     ....Dangerous Le
   b8c98:	6576 006c 6948 6867 5020 6c6f 7475 6f69     vel.High Polutio
   b8ca8:	006e 6f4c 2077 6f50 756c 6974 6e6f 4600     n.Low Polution.F
   b8cb8:	6572 6873 4120 7269 5200 6165 6964 676e     resh Air.Reading
   b8cc8:	5520 736e 6375 6563 7373 7566 006c 6557      Unsuccessful.We
   b8cd8:	7461 6568 2072 7453 7461 6f69 206e 6e4f     ather Station On
   b8ce8:	696c 656e 3a20 0029 6425 5400 6d65 6570     line :).%d.Tempe
   b8cf8:	6172 7574 6572 203a 7400 6d65 0070 7568     rature: .temp.hu
   b8d08:	696d 6964 7974 7000 6572 7373 7275 0065     midity.pressure.
   b8d18:	6c61 6974 7574 6564 6100 7269 7551 6c61     altitude.airQual
   b8d28:	6c00 6f70 765f 6c61 2500 756c 6400 7375     .lpo_val.%lu.dus
   b8d38:	5f74 6172 6974 006f 7564 7473 635f 6e6f     t_ratio.dust_con
   b8d48:	0063 696c 6867 0074 6f73 6e75 0064 6577     c.light.sound.we
   b8d58:	7461 6568 5372 6174 6974 6e6f 6144 6174     atherStationData
   b8d68:	4c00 616f 6964 676e 0000 0000               .Loading....

000b8d74 <_ZTV16JsonWriterStaticILj256EE>:
	...
   b8d7c:	40b5 000b 40c9 000b 6564 6166 6c75 2074     .@...@..default 
   b8d8c:	4d00 4253 4c00 4253 3c00 5053 5349 7465     .MSB.LSB.<SPISet
   b8d9c:	6974 676e 2073 6564 6166 6c75 3e74 3c00     tings default>.<
   b8dac:	5053 5349 7465 6974 676e 2073 7325 7525     SPISettings %s%u
   b8dbc:	2520 2073 4f4d 4544 7525 003e                %s MODE%u>.

000b8dc8 <_ZTVN8particle11SPISettingsE>:
	...
   b8dd0:	460d 000b 45e1 000b 45e3 000b               .F...E...E..

000b8ddc <_ZN16AirQualitySensor12FORCE_SIGNALE>:
   b8ddc:	0000 0000                                   ....

000b8de0 <_ZN16AirQualitySensor13LOW_POLLUTIONE>:
   b8de0:	0002 0000                                   ....

000b8de4 <_ZN16AirQualitySensor14HIGH_POLLUTIONE>:
   b8de4:	0001 0000                                   ....

000b8de8 <_ZN16AirQualitySensor9FRESH_AIRE>:
   b8de8:	0003 0000 755c 3025 5834 2500 2a2e 666c     ....\u%04X.%.*lf
   b8df8:	2500 666c 0000 0000                         .%lf....

000b8e00 <_ZTV10JsonBuffer>:
	...
   b8e08:	5021 000b 503d 000b                         !P..=P..

000b8e10 <_ZTV10JsonWriter>:
	...
   b8e18:	5051 000b 5065 000b                         QP..eP..

000b8e20 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b8e28:	5831 000b 5837 000b 5875 000b 5845 000b     1X..7X..uX..EX..
   b8e38:	5833 000b                                   3X..

000b8e3c <_ZTVN5spark13EthernetClassE>:
	...
   b8e44:	5dbf 000b 5db5 000b 5dab 000b 5da1 000b     .]...]...]...]..
   b8e54:	5d95 000b 5d89 000b 602d 000b 6035 000b     .]...]..-`..5`..
   b8e64:	5d7d 000b 5d75 000b 5d6b 000b 5d61 000b     }]..u]..k]..a]..
   b8e74:	6065 000b                                   e`..

000b8e78 <_ZTV7TwoWire>:
	...
   b8e80:	5ddd 000b 5e27 000b 5dff 000b 5ddf 000b     .]..'^...]...]..
   b8e90:	5e07 000b 5e0f 000b 5e17 000b 5e1f 000b     .^...^...^...^..

000b8ea0 <_ZTV9IPAddress>:
	...
   b8ea8:	5efb 000b 5eeb 000b 5eed 000b 7061 0070     .^...^...^..app.

000b8eb8 <_ZTVN5spark12NetworkClassE>:
	...
   b8ec0:	5fed 000b 5ff7 000b 6001 000b 600b 000b     ._..._...`...`..
   b8ed0:	6015 000b 6021 000b 602d 000b 6035 000b     .`..!`..-`..5`..
   b8ee0:	603d 000b 6049 000b 6051 000b 605b 000b     =`..I`..Q`..[`..
   b8ef0:	6065 000b                                   e`..

000b8ef4 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b8ef4:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   b8f04:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   b8f14:	6d69 0065                                   ime.

000b8f18 <_ZTV11USARTSerial>:
	...
   b8f20:	6525 000b 6591 000b 6569 000b 6151 000b     %e...e..ie..Qa..
   b8f30:	6539 000b 6555 000b 6547 000b 6563 000b     9e..Ue..Ge..ce..
   b8f40:	6527 000b 652b 000b                         'e..+e..

000b8f48 <_ZTV9USBSerial>:
	...
   b8f50:	65cf 000b 6637 000b 660d 000b 6151 000b     .e..7f...f..Qa..
   b8f60:	65ff 000b 65d1 000b 65e1 000b 6631 000b     .e...e...e..1f..
   b8f70:	65f1 000b 65c9 000b                         .e...e..

000b8f78 <_ZTVN5spark9WiFiClassE>:
	...
   b8f80:	672f 000b 6725 000b 671b 000b 66d1 000b     /g..%g...g...f..
   b8f90:	670f 000b 6703 000b 602d 000b 6035 000b     .g...g..-`..5`..
   b8fa0:	66f7 000b 66ef 000b 66e5 000b 66db 000b     .f...f...f...f..
   b8fb0:	6065 000b                                   e`..

000b8fb4 <_ZSt7nothrow>:
	...

000b8fc0 <TWO52>:
   b8fc0:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.
   b8fd0:	4552 4e45 2054 616d 6c6c 636f 7320 6375     REENT malloc suc
   b8fe0:	6563 6465 6465 2f00 6d74 2f70 656a 6b6e     ceeded./tmp/jenk
   b8ff0:	6e69 2d73 4347 2d43 3031 702d 7069 6c65     ins-GCC-10-pipel
   b9000:	6e69 2d65 3834 325f 3230 3130 3231 5f34     ine-48_20201124_
   b9010:	3631 3630 3831 3630 3933 732f 6372 6e2f     1606180639/src/n
   b9020:	7765 696c 2f62 656e 6c77 6269 6c2f 6269     ewlib/newlib/lib
   b9030:	2f63 7473 6c64 6269 722f 6e61 2e64 0063     c/stdlib/rand.c.

000b9040 <link_const_variable_data_end>:
   b9040:	000b45a1 	.word	0x000b45a1
   b9044:	000b5821 	.word	0x000b5821
   b9048:	000b5dc9 	.word	0x000b5dc9
   b904c:	000b5fdd 	.word	0x000b5fdd
   b9050:	000b613d 	.word	0x000b613d
   b9054:	000b6265 	.word	0x000b6265
   b9058:	000b64ed 	.word	0x000b64ed
   b905c:	000b6511 	.word	0x000b6511
   b9060:	000b6739 	.word	0x000b6739

000b9064 <link_constructors_end>:
	...
